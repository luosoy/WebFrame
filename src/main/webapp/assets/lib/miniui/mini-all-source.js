
/*!
 * @fileOverview mini.js文件定义了mini UI框架中的最重要的一些方法和属性。
 * @requires jQuery
 */


mini = {
    /*
	 * @description 以KEY-VALUE形式存储标签ID 与 组件实例
	 * @default {} 空对象
	 */
    components: {},
    globalOpts : {},
    /*
	 * @description 以KEY-VALUE形式存储uid 与 组件实例  。uiid是创建组件实例时动态创建的唯一标识。
	 * @default {} 空对象
	 */
    uids: {},		//存储组件实例，根据动态分配的uid找到组件。
    /*
	 * 源代码中未使用过的属性
	 * @default {} 空对象
	 */
    ux: {},
    /*
	 * @description mini UI框架加载是否已经准备完成。
	 * @default false
	 */
    isReady: false,

    /*
	 * @description 根据给定的样式类名匹配 HTML元素。
	 * @param {String} cls 给定的样式类名
	 * @param {String|DOMObject|jquery Object} el 设置范围匹配范围，可以接受 ID字符串，或者DOM对象
	 * @return 匹配的第一个DOM对象。如果没有找到则返回undefined
	 * @requires jQuery
	 */
    byClass: function (cls, el) {
        if (typeof el == "string")
            el = mini.byId(el);
        return jQuery("." + cls, el)[0];
    },
    /*
	 * @description 取得已经实例化的组件实例数组。
	 * @return 已经实例化的组件数组，如果没有实例化的组件则返回一个空数组
	 */
    getComponents: function () {
        var cs = [];
        for (var id in mini.components) {
            var c = mini.components[id];
            cs.push(c);
        }
        return cs;
    },
    /*
	 * <p>取得指定的组件实例，可接三种合法的参数:
	 * <ul><li>1，组件实例对象，</li><li>2，标签id和 uid，</li><li>3，组件DOM对象。</li><ul>
	 * </p>
	 * @param {String|Object} id 获取组件的条件
	 * @returns 组件实例对象，未找到匹配的组件实例则返回null
	 */
    get: function (id) {
        if (!id)
            return null;
        if (mini.isControl(id))
            return id;
        if (typeof id == "string") {
            if (id.charAt(0) == '#')
                id = id.substr(1);
        }
        if (typeof id == "string")
            return mini.components[id];
        else {
            var control = mini.uids[id.uid];
            if (control && control.el == id)
                return control;
        }
        return null;
    },
    /*
	 * 根据动态分配的uid找到对应组件实例
	 * @param {String} uid 创建组件式动态分配的唯一标识
	 * @returns 返回组件实例，如果未找到 则返回undefined。
	 */
    getbyUID: function (uid) {
        return mini.uids[uid];
    },
    /*
	 * 通过给定判断函数和函数作用域，判断每个组件是否符合fn规则，如果符合则被添加到返回数组中。
	 * @param {Function} fn 过滤规则函数,函数传入组件实例作为参数，方法返回true 或 1代表通过过滤规则
	 * @param scope 过滤函数执行的上下文对象。
	 * @returns {Array} 返回符合过滤条件的组件实例数组
	 */
    findControls: function (fn, scope) {
        if (!fn)
            return [];
        scope = scope || mini;
        var controls = [];
        var uids = mini.uids;
        for (var uid in uids) {
            var control = uids[uid];
            var ret = fn.call(scope, control);
            if (ret === true || ret === 1) {
                controls.push(control);
                if (ret === 1)
                    break;
            }
        }
        return controls;
    },
    /*
	 * 取得给定祖先组件的子孙组件实例对象数组。
	 * @param {Object} parent 包含子孙组件的组件实例。
	 * @param {Array} 返回给定组件实例的子孙组件实例数组。
	 */
    getChildControls: function (parent) {
        var p = mini.get(parent);
        if (!p) return [];
        var pel = parent.el ? parent.el : parent;

        var controls = mini.findControls(function (control) {
            if (!control.el || parent == control)
                return false;
            if (mini.isAncestor(pel, control.el) && control.within)
                return true;
            return false;
        });
        return controls;
    },

    emptyFn: function () {
    },
    /*
	 * 将给定组件的子孙组件实例作为其属性，属性名是组件的name属性值，如果有多个同name子孙组件，则最后只保留最后一个。
	 * @param obj 指定的包含子孙组件的组件实例。
	 * @param {String|Boolean} pre 参数等于true时子孙组件作为属性的属性名为子孙组件的name属性的首字母大写。
	 * @returns 无
	 */
    createNameControls: function (obj, pre) {
        if (!obj || !obj.el)
            return;
        if (!pre)
            pre = "_";
        var el = obj.el;
        var controls = mini.findControls(function (control) {
            if (!control.el || !control.name)
                return false;
            if (mini.isAncestor(el, control.el))
                return true;
            return false;
        });
        for (var i = 0, l = controls.length; i < l; i++) {
            var c = controls[i];
            var name = pre + c.name;
            if (pre === true) {
                name = c.name[0].toUpperCase() + c.name.substring(1, c.name.length);
            }
            obj[name] = c;
        }

    },
    /*
	 * 取得给定名字，给定祖先节点的子组件实例，如果存在多个同名子组件，则选择第一个。
	 * @param {String} name 匹配子组件name属性的值
	 * @param {Object} parentNode 子集范围
	 * @returns 符合条件的组件实例，如果未找到则返回undefined。
	 */
    getbyName: function (name, parentNode) {
        var isControl = mini.isControl(parentNode);	//是否是组件实例
        var parentControl = parentNode;
        if (parentNode && isControl) {
            parentNode = parentNode.el;
        }
        parentNode = mini.byId(parentNode);
        parentNode = parentNode || document.body;
        var controls = this.findControls(function (control) {
            if (!control.el)
                return false;
            if (control.name == name && mini.isAncestor(parentNode, control.el))
                return 1;
            return false;
        }, this);
        if (isControl && controls.length == 0 && parentControl && parentControl.getbyName) {
            return parentControl.getbyName(name);
        }

        return controls[0];
    },
    /*
	 * 获取给URL地址附带的数据。
	 * 例如：www.xxx.com?a=1&b=2 -> {a:1,b:2}
	 * @param url 待解析地址字符窜
	 * @returns {Object} json对象
	 */
    getParams: function (url) {
        if (!url)
            url = location.href;
        url = url.split("?")[1];
        var params = {};
        if (url) {
            var us = url.split("&");
            for (var i = 0, l = us.length; i < l; i++) {
                var ps = us[i].split("=");
                try {
                    params[ps[0]] = decodeURIComponent(unescape(ps[1]));
                } catch (ex) {

                }
            }
        }
        return params;
    },
    /*
	 * 将组件实例注册到组件实例缓冲区中。也就是在mini.components和mini.uids中各保存一个引用。
	 * @param {Object} cmp 待注册组件实例
	 * @returns 无
	 */
    reg: function (cmp) {
        this.components[cmp.id] = cmp;	//通过组件既有id属性找到对应的组件实例
        this.uids[cmp.uid] = cmp;		//通过动态分配的uid属性找到对应的组件实例

    },
    /*
	 * 从组件实例缓冲区中删除组件实例注册信息，也就是从mini.components和mini.uids中删除组件实例引用。
	 * @param {Object} cmp 待注销组件实例
	 * @returns 无
	 */
    unreg: function (cmp) {
        delete mini.components[cmp.id];
        delete mini.uids[cmp.uid];
    },
    /*
	 * 组件类名与组件类的键值关系保存组件类引用。例如：button -> Button
	 */
    classes: {},
    /*
	 * 样式类名与组件类的键值关系保存组件类引用。例如：mini-button -> Button
	 */
    uiClasses: {},

    /*
	 * 通过组件类名获取组件类。
	 * @param className 组件类名
	 * @return 组件类引用。
	 */
    getClass: function (className) {
        if (!className)
            return null;
        return this.classes[className.toLowerCase()];
    },
    /*
	 * 根据样式类名获取对应的组件类。
	 * @param uiCls 组件样式类名
	 * return 组件类引用。
	 */
    getClassByUICls: function (uiCls) {

        return this.uiClasses[uiCls.toLowerCase()];
    },
    /*
	 * mini UI动态生成id的默认前缀
	 * @default "mini-"
	 */
    idPre: "mini-",

    /*
	 * mini UI动态生成id的递进增长数。
	 * @default 1
	 */
    idIndex: 1,
    /*
	 * 根据给定前缀创建一个新的唯一id。如果未指定前缀则使用mini.idPre作为默认设置。
	 * @param {String} idPre 生成id的前缀
	 * @returns 生成的id字符串
	 */
    newId: function (idPre) {
        return (idPre || this.idPre) + this.idIndex++;
    },
    /*
	 * 浅拷贝，从源对象中将属性复制并替换到目标对象中。
	 * @param to 拷贝目标对象
	 * @param from 拷贝源对象
	 * @returns 拷贝目标对象
	 */
    copyTo: function (to, from) {
        if (to && from) {
            for (var p in from) {
                to[p] = from[p];
            }
        }
        return to;
    },
    /*
	 * 浅拷贝，从源对象中将属性复制到目标对象中。不覆盖目标对象中的值。
	 * @param to 拷贝目标对象
	 * @param from 拷贝源对象
	 * @returns 拷贝目标对象
	 */
    copyIf: function (to, from) {
        if (to && from) {
            for (var p in from) {
                if (mini.isNull(to[p])) {
                    to[p] = from[p];
                }
            }
        }
        return to;
    },
    /*
	 * 创建一个函数，这个函数用于将给定函数的上下文对象设置为给定对象。
	 * @param {Function} fn 源函数
	 * @param scope 上下文对象
	 * @returns {Function} 绑定在给定上下文对象上的可执行函数。
	 */
    createDelegate: function (fn, scope) {
        if (!fn)
            return function () {
            };
        return function () {
            return fn.apply(scope, arguments);
        }
    },
    /*
	 * 判断一个实例是否是组件实例
	 * @param obj 待判断对象
	 * @returns {Boolean} true/false
	 */
    isControl: function (obj) {
        return !!(obj && obj.isControl);
    },
    /*
	 * 使用DOM元素是否拥有appendChild方法判断参数是否是一个合法的DOM对象。
	 * @param obj 待判断对象
	 * @returns {Boolean} true/false
	 */
    isElement: function (obj) {
        return obj && obj.appendChild;
    },
    /*
	 * 判断参数是否是Date实例
	 * @param obj 待判断对象
	 * @returns {Boolean} true/false
	 */
    isDate: function (value) {
        return !!(value && value.getFullYear);
    },
    /*
	 * 判断参数是否是Array实例
	 * @param obj 待判断对象
	 * @returns {Boolean} true/false
	 *该判断是否数组的方法太过简单，附上比较“高级”的判断方法:
	 *if(myVal && typeof myVal === 'object' && typeof myVal.length === 'number' 
     *  && !(myVal.propertyIsEnumerable('length'))){
     * //myVal确实是一个数组（前提propertyIsEnumerable不被覆盖），arguments满足此条件
     * //可通过增加条件typeof myVal.slice==='function'来区分，因为arguments不拥有数组的任何方法
     *  }
	 */
    isArray: function (value) {
        return !!(value && !!value.unshift);
    },
    /*
	 * 判断参数是否为空，这里null 和undefined 都返回true
	 * @param obj 待判断对象
	 * @returns {Boolean} true/false
	 */
    isNull: function (value) {
        return value === null || value === undefined;
    },
    /*
	 * 判断参数是否是数值。
	 * @param obj 待判断对象
	 * @returns {Boolean} true/false
	 */
    isNumber: function (value) {
        return !isNaN(value) && typeof value == 'number';
    },
    /*
	 * 比较有意思的比较规则，1 "",null,undefined被认为是相等的。
	 * 时间，getTime()相等被认为是相等的。
	 * Object === 被认为是相等的。
	 * String(a) === String(b)被认为是相等的。。。
	 * @param a 待判断对象
	 * @param b 待判断对象
	 * @returns {Boolean} true/false
	 */
    isEquals: function (a, b) {

        if (a !== 0 && b !== 0) {
            if ((mini.isNull(a) || a == "") && (mini.isNull(b) || b == "")) return true;
        }

        if (a && b && a.getFullYear && b.getFullYear) return a.getTime() === b.getTime();
        if (typeof a == 'object' && typeof b == 'object') {
            return mini.encode(a) == mini.encode(b);
        }
        return String(a) === String(b);
    },

    /*
	 * 数组循环方法。
	 * @param {Array} array数组对象
	 * @param {Function} method 循环执行的函数，函数会传入三个参数依次是值，下标，源数组对象。
	 * @param scope 循环函数执行的作用域。
	 * @returns 无
	 */
    forEach: function (array, method, scope) {
        var list = array.clone();
        for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];
            if (method.call(scope, o, i, array) === false)
                break;
        }
    },
    /*
	 * 数组排序方法。此方法没有什么优秀的设计之处。第三个参数在方法内并没有用到。
	 * @param array 数组对象
	 * @param 排序算法函数,内部实现还是使用了Array.prototype.sort()方法
	 * @param scope 没有用到的参数
	 * @returns 无
	 */
    sort: function (array, fn, scope) {
        scope = scope || array;
        array.sort(fn);

    },
    /*
	 * 删除DOM节点
	 * @param {String|DOMObject} el可以使选择器，也可以是DOM对象
	 * @returns 无
	 * @requires jQuery
	 */
    removeNode: function (el) {
        jQuery(el).remove();
    },
    /*
	 * 一个没有被添加到文档流中的DIV DOM对象
	 */
    elWarp: document.createElement("div")
};

/*
 * 將組件类注册到mini对象上，例如：mini.classes.button = Button
 * 将组件样式类名注册到mini对象上，例如:mini.uiClasses.mini-button = Button
 * @private
 */
mini_regClass = function (clazz, className) {

    className = className.toLowerCase();
    if (!mini.classes[className]) {
        mini.classes[className] = clazz;
        clazz.prototype.type = className;
    }
    var uiCls = clazz.prototype.uiCls;
    if (!mini.isNull(uiCls) && !mini.uiClasses[uiCls]) {
        mini.uiClasses[uiCls] = clazz;
    }
}
/*
 * 用于管理组件的继承规则。
 * @private
 */
mini_extend = function (newClass, sp, overrides) {
    if (typeof sp != 'function')
        return this;

    var sb = newClass, sbp = sb.prototype, spp = sp.prototype;
    if (sb.superclass == spp)
        return;
    sb.superclass = spp;	//继承方法简单引用方法。
    sb.superclass.constructor = sp;

    for (var p in spp) {
        sbp[p] = spp[p];	//继承方法
    }
    if (overrides) {		//添加组件方法，并使用组件方法替换集成方法。
        for (var p in overrides) {
            sbp[p] = overrides[p];
        }
    }
    return sb;
}
mini.copyTo(mini, {

    /*
	 * 用于管理组件的继承规则。
	 * @param newClass 新组件类
	 * @param sp 被继承类
	 * @param overrides 为新组件添加方法，如果与基层来的属性或方法有重复，则会覆盖继承来的属性或方法。
	 * @returns 返回添加继承关系之后的新组件类。
	 * @function
	 */
    extend: mini_extend,

    /*
	 * 將組件类注册到mini对象上，例如：mini.classes.button = Button
	 * 将组件样式类名注册到mini对象上，例如:mini.uiClasses.mini-button = Button
	 * @param clazz 组件类
	 * @param className 组件类名
	 * @returns 无
	 * @function
	 */
    regClass: mini_regClass,
    /*
	 * 沒有什麽用的屬性
	 * @default false
	 */
    debug: false

});

mini.namespace = function (names) {
    if (typeof names != "string")
        return;
    names = names.split(".");
    var parent = window;
    for (var i = 0, l = names.length; i < l; i++) {
        var name = names[i];
        var obj = parent[name];
        if (!obj) {
            obj = parent[name] = {};
        }
        parent = obj;
    }
}
/*
 * 根据给定包路径获取函数。
 * @private
 */
mini._getFunctoin = function (fnName) {
    if (typeof fnName != "string")
        return null;
    var names = fnName.split(".");//mini.fn.fn
    var fn = null;
    for (var i = 0, l = names.length; i < l; i++) {
        var name = names[i];
        if (!fn)
            fn = window[name];
        else
            fn = fn[name];
        if (!fn)
            break;
    }
    return fn;
}
mini._getMap = function (name, obj) {
    if (!name) return null;
    if (name.indexOf(".") == -1 && name.indexOf("[") == -1) return obj[name];
    var s = "obj." + name;
    try {
        var v = eval(s);
    } catch (e) {
        return null;
    }
    return v;
}
mini._setMap = function (name, value, obj) {
    if (!obj) return;
    if (typeof name != "string") return;

    var names = name.split(".");

    function createArray(obj, name, num, defaultValue) {
        var arr = obj[name];
        if (!arr) {
            arr = obj[name] = [];
        }
        for (var i = 0; i <= num; i++) {
            var arrObj = arr[i];
            if (!arrObj) {
                if (defaultValue === null || defaultValue === undefined) {
                    arrObj = arr[i] = {};
                } else {
                    arrObj = arr[i] = defaultValue;
                }
            }
        }
        return obj[name][num];
    }

    var obj2 = null;
    for (var i = 0, l = names.length; i <= l - 1; i++) {
        var name = names[i];

        if (i == l - 1) {
            if (name.indexOf(']') == -1) {
                obj[name] = value;
            } else {

                var as = name.split("[");
                var n1 = as[0], n2 = parseInt(as[1]);
                createArray(obj, n1, n2, "");
                obj[n1][n2] = value;
            }

            break;
        }

        if (name.indexOf(']') == -1) {

            obj2 = obj[name];
            if (i <= l - 2 && obj2 == null) {
                obj[name] = obj2 = {};
            }
            obj = obj2;
        } else {

            var as = name.split("[");
            var n1 = as[0], n2 = parseInt(as[1]);
            obj = createArray(obj, n1, n2);

        }

    }
    return value;
}

/*
 * 获取组件实例或者创建一个新组件实例
 * @param id 参数包括 实例id, 组件实例对象， DOM对象， 和一个{}参数对象。
 * @returns 组件实例
 */
mini.getAndCreate = function (id) {
    if (!id)
        return null;
    if (typeof id == "string")
        return mini.components[id];

    if (typeof id == "object") {
        if (mini.isControl(id)) {
            return id;
        } else if (mini.isElement(id)) {
            return mini.uids[id.uid];
        } else {
            return mini.create(id);
        }
    }
    return null;
};
/*
 * 根据参数创建一个组件实例，被创建的实例不会自动注册到mini的实例池中。
 * @param uiConfig{Object} json对象
 * @returns 组件实例
 */
mini.create = function (uiConfig) {
    if (!uiConfig)
        return null;
    if (mini.get(uiConfig.id) === uiConfig)
        return uiConfig;
    var clazz = this.getClass(uiConfig.type);
    if (!clazz)
        return null;
    var ui = new clazz();
    ui.set(uiConfig);
    return ui;
}

/*
 * 方法供组件内部适用，用于动态给一个组件添加一个或多个子组件，添加完成之后解析子组件定义，然后调整区域布局。
 * @param controls {Array|Object}需要添加的子组件
 * @param contentEl 容纳子组件的DOM对象，非必须
 * @param scope 指定完成之后调整布局的区域， 非必须
 * @returns scope
 * @private
 * @function
 */
__mini_setControls = function (controls, contentEl, scope) {
    contentEl = contentEl || this._contentEl;
    scope = scope || this;

    if (!controls)
        controls = [];
    if (!mini.isArray(controls))
        controls = [controls];

    for (var i = 0, l = controls.length; i < l; i++) {
        var c = controls[i];
        if (typeof c == "string") {
            if (c.indexOf("#") == 0)
                c = mini.byId(c);
        } else if (mini.isElement(c)) {
        } else {
            c = mini.getAndCreate(c);
            c = c.el;
        }
        if (!c)
            continue;
        mini.append(contentEl, c);
    }
    mini.parse(contentEl);
    scope.doLayout();
    return scope;
}
/*
 * 用于暂存正在做调整的组件，实质是为了避免重复操作的一个策略。
 * @private
 */
mini._Layouts = {};

/*
 * 调整指定组件内的布局，如果不指定则调整整个页面的布局，调整的动作调用组件的dolayout方法完成。
 * @param el 指定调整范围，可以使 ID,DOM,组件对象
 * @param mustLayout {Boolean}设置是否强制重新调整，如果不设置，默认已经调整过的组件不再重新调整
 * @returns 无
 */
mini.layout = function (el, mustLayout) {
    if (!document.body) return;

    function doLayout(el) {
        if (!el) return;

        var control = mini.get(el);
        if (control) {

            if (control.doLayout) {
                if (!mini._Layouts[control.uid]) {
                    mini._Layouts[control.uid] = control;

                    if (mustLayout !== false || control.isFixedSize() == false) {
                        control.doLayout(false);
                    }

                    delete mini._Layouts[control.uid];
                }
            }
        } else {
            var cs = el.childNodes;
            if (cs) {
                for (var i = 0, l = cs.length; i < l; i++) {
                    var cel = cs[i];
                    doLayout(cel);
                }
            }
        }
    }

    if (!el)
        el = document.body;
    doLayout(el);
    if (el == document.body) {
        mini.layoutIFrames();
    }

}
/*
 * 設置生成组件属性的值，使用生成HTML结构替换页面声明组件使用的占位HTML标签。此方法一般采用mini.applyTo.call()方式调用。
 * @param el 被处理的ID，DOM，或者组件实例
 * @return 返回组件实例
 */
mini.applyTo = function (el) {
    el = mini.byId(el);
    if (!el)
        return this;
    if (mini.get(el)) throw new Error("not applyTo a mini control");

    var config = this.getAttrs(el);
    delete config._applyTo;
    if (mini.isNull(config.defaultValue) && !mini.isNull(config.value)) {
        config.defaultValue = config.value;
    }
    var p = el.parentNode;
    if (p && this.el != el) {
        p.replaceChild(this.el, el);
    }
    this.set(config);
    this._afterApply(el);

    return this;
}
/*
 * 无用属性
 * @private
 */
mini._Removes = [];



/*
 * 从给定DOM对象 el中获取attrs数组指定的参数，将获取到的参数添加到config对象中。
 * @param el 属性来源DOM对象
 * @param config 属性存储对象
 * @param attrs 待获取属性数组
 */
mini._ParseString = function (el, config, attrs) {
    for (var i = 0, l = attrs.length; i < l; i++) {
        var property = attrs[i];

        var value = mini.getAttr(el, property);
        if (value) {
            config[property] = value;
        }
    }
}
/*
 * 从给定DOM对象 el中获取attrs指定的参数，参数值解析为布尔值，将获取到的参数添加到config对象中。
 * @param el 属性来源DOM对象
 * @param config 属性存储对象
 * @param attrs 待获取属性数组
 */
mini._ParseBool = function (el, config, attrs) {
    for (var i = 0, l = attrs.length; i < l; i++) {
        var property = attrs[i];
        var value = mini.getAttr(el, property);
        if (value) {
            config[property] = value == "true" ? true : false;
        }
    }
}
/*
 * 从给定DOM对象 el中获取attrs指定的参数，参数值解析为Int，将获取到的参数添加到config对象中。
 * @param el 属性来源DOM对象
 * @param config 属性存储对象
 * @param attrs 待获取属性数组
 */
mini._ParseInt = function (el, config, attrs) {
    for (var i = 0, l = attrs.length; i < l; i++) {
        var property = attrs[i];
        var value = parseInt(mini.getAttr(el, property));
        if (!isNaN(value)) {
            config[property] = value;
        }
    }
}


/*
 * 解析子节点属性，递归解析。
 * @param el 解析范围
 * @returns 返回解析的结果数组包括所有子节点属性的数组
 * @private
 * @function
 */
mini._ParseColumns = function (el) {
    var columns = [];
    var cs = mini.getChildNodes(el);

    for (var i = 0, l = cs.length; i < l; i++) {
        var node = cs[i];
        var jq = jQuery(node);

        var column = {};
        var editor = null, filter = null;
        var subCs = mini.getChildNodes(node);
        if (subCs) {
            for (var ii = 0, li = subCs.length; ii < li; ii++) {
                var subNode = subCs[ii];
                var property = jQuery(subNode).attr("property");
                if (!property)
                    continue;
                property = property.toLowerCase();
                if (property == "columns") {	//grid中嵌入的单元个组件。
                    column.columns = mini._ParseColumns(subNode);
                    jQuery(subNode).remove();
                }
                if (property == "editor" || property == "filter") {

                    var className = subNode.className;
                    var classes = className.split(" ");
                    for (var i3 = 0, l3 = classes.length; i3 < l3; i3++) {
                        var cls = classes[i3];
                        var clazz = mini.getClassByUICls(cls);
                        if (clazz) {
                            var ui = new clazz();

                            if (property == "filter") {
                                filter = ui.getAttrs(subNode);
                                filter.type = ui.type;
                            } else {
                                editor = ui.getAttrs(subNode);
                                editor.type = ui.type;
                            }
                            break;
                        }
                    }

                    jQuery(subNode).remove();
                }
            }
        }

        column.header = node.innerHTML;
        /* 增加 digit pzf 2014-07 */
        mini._ParseString(node, column,
		["name", "header", "field", "editor", "filter", "renderer", "width", "type", "renderer",
		"headerAlign", "align", "headerCls", "cellCls", "headerStyle", "cellStyle"
		, "displayField"
		, "dateFormat", "listFormat", "mapFormat",
		'trueValue', "falseValue", "dataType", 'vtype', "currencyUnit","digit",
		"summaryType", "summaryRenderer", "groupSummaryType", "groupSummaryRenderer",
        "defaultValue", "defaultText", "decimalPlaces", "data-options", "emptyText"
		]
		);
        mini._ParseBool(node, column,
		["visible", "readOnly", "allowSort", "allowResize", "allowMove", "allowDrag", "autoShowPopup",
		"unique", "showPercent", "autoEscape"
		]
		);
                if(column.autoEscape === undefined)
            column.autoEscape = true;
        if (editor)
            column.editor = editor;
        if (filter)
            column.filter = filter;

        if (column.dataType)
            column.dataType = column.dataType.toLowerCase();
        if (column.defaultValue === "true") column.defaultValue = true;
        if (column.defaultValue === "false") column.defaultValue = false;

        columns.push(column);
        var options = column["data-options"];
        if (options) {
            options = eval("(" + options + ")");
            if (options) {

                mini.copyTo(column, options);
            }
        }

    }

    return columns;
}
mini._topWindow = null;
mini._getTopWindow = function () {
    if (mini._topWindow) return mini._topWindow;
    var ps = [];
    function getParents(me) {
        try {
            me["___try"] = 1;
            ps.push(me);
        } catch (ex) {
        }
        if (me.parent && me.parent != me) {
            getParents(me.parent);
        }
    }

    getParents(window);
    mini._topWindow = ps[ps.length - 1];
    return mini._topWindow;
}
var __ps = mini.getParams();

if (__ps._winid) {
    try {
        window.Owner = mini._getTopWindow()[__ps._winid];
    } catch (ex) {
    }
}

mini._WindowID = "w" + Math.floor(Math.random() * 10000);
mini._getTopWindow()[mini._WindowID] = window;

/*
 * 负责记录创建的iframe数量。
 * @private
 * @default 1
 */
mini.__IFrameCreateCount = 1;

/*
 * 创建一个新的iframe DOM对象
 * @param url iframe地址。
 * @param onIFrameLoad iframe 加载完成之后的回调函数。
 * @returns 新创建的iframe DOM对象
 */
mini.createIFrame = function (url, onIFrameLoad) {
    var fnName = "__iframe_onload" + mini.__IFrameCreateCount++;
    window[fnName] = __OnLoad;

    if (!url)
        url = "";
    var urls = url.split("#");
    url = urls[0];

    var t = '_t=' + Math.floor(Math.random() * 1000000);
    if (url.indexOf("?") == -1) {
        url += "?" + t;
    } else {
        url += "&" + t;
    }
    if (urls[1]) {
        url = url + "#" + urls[1];
    }

    var s = '<iframe style="width:100%;height:100%;" onload="' + fnName + '()"  frameborder="0"></iframe>';

    var div = document.createElement("div");
    var iframe = mini.append(div, s);

    var canFireLoad = false;
    setTimeout(function () {
        if (iframe) {
            iframe.src = url;
            canFireLoad = true;
        }
    }, 5);
    var firstLoad = true;
    function __OnLoad() {

        if (canFireLoad == false)
            return;
        setTimeout(function () {
            if (onIFrameLoad)
                onIFrameLoad(iframe, firstLoad);
            firstLoad = false;
        }, 1);
    }

    iframe._ondestroy = function () {

        window[fnName] = mini.emptyFn;	//为什么不直接删除？
        iframe.onload = function () { };
        jQuery(iframe).unbind("load");
        iframe.src = "";
        try {
            iframe.contentWindow.document.write("");
            iframe.contentWindow.document.close();
        } catch (ex) { }
        iframe._ondestroy = null;
        iframe = null;
    }
    return iframe;
}
/*
 * 根据给定参数，在本窗口创建window。
 * @param options 窗口参数
 * @returns win 窗口组件实例
 * @requires window组件
 * @private
 * @function
 */
mini._doOpen = function (options) {
    if (typeof options == "string") {
        options = {
            url: options
        };
    }

    options = mini.copyTo({
        width: 700,
        height: 400,
        allowResize: true,
        allowModal: true,
        closeAction: "destroy",

        title: "",
        titleIcon: "",
        iconCls: "",
        iconStyle: "",
        bodyStyle: "padding: 0",

        url: "",

        showCloseButton: true,
        showFooter: false
    }, options);

    options.closeAction = "destroy";

    var onload = options.onload;
    delete options.onload;
    var ondestroy = options.ondestroy;
    delete options.ondestroy;
    var url = options.url;
    delete options.url;

    var win = new mini.Window();
    win.set(options);
    win.load(url,
	onload,
	ondestroy
	);
    win.show();

    return win;
}
/*
 * 在最外层窗体创建弹出窗
 * @name openTop
 * @param options 窗口参数
 * @returns win 窗口组件实例
 * @requires window组件
 * @function
 */
mini.open = function (options) {
    if (!options)
        return;
        var currentWindow = options.currentWindow;
    if(!currentWindow)
        currentWindow = false;
    var url = options.url;
    if (!url)
        url = "";
    var urls = url.split("#");
    var url = urls[0];

    var t = "_winid=" + mini._WindowID;
    if (url.indexOf("?") == -1) {
        url += "?" + t;
    } else {
        url += "&" + t;
    }
    if (urls[1]) {
        url = url + "#" + urls[1];
    }
    var http = url.indexOf("http") != -1;
    if (http) {   //如果是全路径
        options.url = url;
    } else {
        if (currentWindow)
            options.url = url;
        else{
            var oBaseColl = document.getElementsByTagName('BASE');
            var basepath = (oBaseColl && oBaseColl.length) ? oBaseColl[0].href : null;
            if (basepath) {
                options.url = basepath + "/" + url;
            } else {
                var firstChar = url.substr(0, 1);
                if (firstChar == "/") {
                    options.url = window.location.protocol + "//" + window.location.host + url;
                } else {
                    var parentUrl = location.href;
                    var qum = parentUrl.indexOf("?") != -1;
                    if (qum)
                        parentUrl = parentUrl.substring(0, parentUrl.indexOf("?"));
                    var ss = parentUrl.split("/");
                    ss.length = ss.length - 1;
                    var href = ss.join("/");
                    options.url = href + "/" + url;

                }
            }

        }

    }
    options.Owner = window;
    var ps = [];
    function getParents(me) {
        try {
            if (me.mini)
                ps.push(me);
            if (me.parent && me.parent != me) {
                getParents(me.parent);
            }
        } catch (ex) {}

    }
    /* 将这些代码提前 pzf 2014-08 */
    getParents(window);
    var win = ps[ps.length - 1];
    options.win = win;
    /* 新增beforeopen函数 pzf 2014-07 */
    if(options.beforeopen){
        options.beforeopen(options);
    }
    if(currentWindow)
        return mini._doOpen(options);


    return win["mini"]._doOpen(options);
}
mini.openTop = mini.open;

/*
 * ajax请求，获取格式为Json的数据
 * @param url 请求地址
 * @param params 参数
 * @param success 成功回调函数
 * @param error 失败回调函数
 * @param type 请求类型如get/post
 * @returns json对象
 * @function
 */
mini.getData = function (url, params, success, error, type) {
    var text = mini.getText(url, params, success, error, type);
    var data = mini.decode(text);
    return data;
}
/*
 * ajax请求，获取数据格式为Text
 * @param url 请求地址
 * @param params 参数
 * @param success 成功回调函数
 * @param error 失败回调函数
 * @param type 请求类型如get/post
 * @returns 字符串
 * @function
 * @requires jQuery.ajax
 */
mini.getText = function (url, params, success, error, type) {
    var returnText = null;
    mini.ajax({
        url: url,
        data: params,
        async: false,
        type: type ? type : "get",
        cache: false,
        success: function (text, http) {
            returnText = text;
            if (success) success(text, http);
        },
        error: error
    });
    return returnText;
}
/*
 * 更新指定范围内的内容。
 * @param options {String|Object} 可以使一个Url地址，也可以使一个json对象{url:'xx',el:xx}
 * @param el {Object} DOM对象
 * @returns 无
 * @function
 */
mini.update = function (options, el) {
    if (typeof options == "string")
        options = {
            url: options
        };
    if (el)
        options.el = el;
    var html = mini.loadText(options.url);
    mini.innerHTML(options.el, html);
    mini.parse(options.el);
}
/*
 * 获取给定组件类的实例，如果没有实例则新建一个，如果已经存在则直接返回。使用到了单例模式
 * @param Type {String|Object} 可以使组件类名，也可以使组件类引用
 * @returns 组件单例
 * @function
 */
mini.createSingle = function (Type) {
    if (typeof Type == "string") {
        Type = mini.getClass(Type);
    }
    if (typeof Type != "function")
        return;
    var obj = Type.single;
    if (!obj) {
        obj = Type.single = new Type();
    }
    return obj;
}
/*
 * 在最外层window获取给定组件类的一个实例，如果没有这个实例则新创建一个，如果已经存在则直接返回。使用到了单例设计模式
 * @param Type 组件类
 * @returns 组件单例
 * @function
 */
mini.createTopSingle = function (Type) {
    if (typeof Type != "function")
        return;

    var typeName = Type.prototype.type;
    if (top && top != window && top.mini && top.mini.getClass(typeName)) {
        return top.mini.createSingle(typeName);
    } else {
        return mini.createSingle(Type);
    }
}
/*
 * @namespace mini.sortTypes 提供了几个使用的帮助方法。由于sortTypes内的几个方法都使用""字符串作为属性名，
 * 所以JSDOC无法生成这几个方法的API
 */
mini.sortTypes = {

    /*
	 * 字符串字母变大写
	 * @param s 字符串
	 * @return 变为大写的字符串
	 */
    "string": function (s) {
        return String(s).toUpperCase();
    },
    /*
	 * 返回时间毫秒数
	 * @param s 时间对象，或者是时间字符窜。
	 * @returns 返回给定时间代表的毫秒数。
	 */
    "date": function (s) {
        if (!s) {
            return 0;
        }
        if (mini.isDate(s)) {
            return s.getTime();
        }
        return mini.parseDate(String(s));
    },
    /*
	 * 用于对金额的操作，去除复数金额每三位的“,”分隔符
	 * @param s 待处理金额
	 * @returns 剔除分隔符后的金额数
	 */
    "float": function (s) {
        var val = parseFloat(String(s).replace(/,/g, ""));
        return isNaN(val) ? 0 : val;
    },
    /*
	 * 用于对金额的操作，去除整数金额每三位的分隔符
	 * @param s 待处理金额
	 * @returns 剔除分隔符后的金额数
	 */
    "int": function (s) {
        var val = parseInt(String(s).replace(/,/g, ""), 10);
        return isNaN(val) ? 0 : val;
    },
    "currency": function (s) {
        var val = parseFloat(String(s).replace(/,/g, ""));
        return isNaN(val) ? 0 : val;
    }

};
mini.emptyFn = function () {
};
/*
 * 一个内部适用的克隆方法，深层克隆，但是克隆过程中会删除所有_state , _id, _pid属性。
 * 这个方法的实现，区别于传统克隆方法实现，采用了对象字符串互转换的方式，产生一个新的克隆对象。
 * @param o 待克隆对象。
 * @returns 新对象。
 */
mini.clone = function (o, _clear) {

    if (o === null || o === undefined) return o;
    var json = mini.encode(o);
    var obj = mini.decode(json);

    function clearProp(arr) {
        for (var i = 0, l = arr.length; i < l; i++) {
            var o = arr[i];
            delete o._state;
            delete o._id;
            delete o._pid;
            delete o._uid;
            for (var p in o) {
                var v = o[p];
                if (v instanceof Array) clearProp(v);
            }
        }
    }
    if (_clear !== false) {
        clearProp(obj instanceof Array ? obj : [obj]);
    }

    return obj;

}


mini.append = function (to, html) {
    to = mini.byId(to);
    if (!html || !to) return;
    if (typeof html == "string") {
        if (html.charAt(0) == '#') {
            html = mini.byId(html);
            if (!html) return;
            to.appendChild(html);
            return html;
        } else {
            if (html.indexOf("<tr") == 0) {
                return jQuery(to).append(html)[0].lastChild;
            }

            var d = document.createElement("div");
            d.innerHTML = html;
            html = d.firstChild;
            while (d.firstChild) {
                to.appendChild(d.firstChild);
            }
            return html;
        }
    } else {
        to.appendChild(html);
        return html;
    }


}
mini.prepend = function (to, html) {
    if (typeof html == "string") {
        if (html.charAt(0) == '#') {
            html = mini.byId(html);
        } else {
            var d = document.createElement("div");
            d.innerHTML = html;
            html = d.firstChild;
        }
    }
    return jQuery(to).prepend(html)[0].firstChild;
}
mini.after = function (to, html) {
    if (typeof html == "string") {
        if (html.charAt(0) == '#') {
            html = mini.byId(html);
        } else {
            var d = document.createElement("div");
            d.innerHTML = html;
            html = d.firstChild;
        }
    }
    if (!html || !to) return;
    to.nextSibling ? to.parentNode.insertBefore(html, to.nextSibling) : to.parentNode.appendChild(html);
    return html;
}
mini.before = function (to, html) {
    if (typeof html == "string") {
        if (html.charAt(0) == '#') {
            html = mini.byId(html);
        } else {
            var d = document.createElement("div");
            d.innerHTML = html;
            html = d.firstChild;
        }
    }
    if (!html || !to) return;
    to.parentNode.insertBefore(html, to);
    return html;
}

mini.__wrap = document.createElement('div');
mini.createElements = function (html) {
    mini.removeChilds(mini.__wrap);
    var isTr = html.indexOf("<tr") == 0;
    if (isTr) {
        html = '<table>' + html + '</table>';
    }
    mini.__wrap.innerHTML = html;
    return isTr ? mini.__wrap.firstChild.rows : mini.__wrap.childNodes;
}



/*
 * mini_byId 方法提供使用Id 或 #Id选择DOM的功能。如果参数不为字符串则直接返回参数本身。
 * @exports mini_byId as mini.byId
 * @param id id或者DOM对象 id可以带"#"前缀
 * @returns 返回DOM对象
 */
mini_byId = function (id, context) {
    if (typeof id == "string") {
        if (id.charAt(0) == '#') id = id.substr(1);
        var el = document.getElementById(id);
        if (el) return el;
        if (context) {

            var els = context.getElementsByTagName("*");
            for (var i = 0, l = els.length; i < l; i++) {
                var el = els[i];
                if (el.id == id) return el;
            }
            el = null;
        }
        return el;
    } else {
        return id;
    }
}

/*
 * 判断dom对象是否 包含给定的样式表类名。
 * @exports mini_hasClass as mini.hasClass
 * @param el ID或者DOM
 * @param className 样式类名
 * returns 是否包含{Boolean}
 */
mini_hasClass = function (el, className) {
    el = mini.byId(el);
    if (!el) return;
    if (!el.className) return false;
    var clss = String(el.className).split(" ");
    return clss.indexOf(className) != -1;
}

/*
 * 为dom对象增加样式类名
 * @exports mini_addClass as mini.addClass
 * @param el ID或者DOM
 * @param className 样式类名
 * @returns 无
 * @requires jQuery.addClass
 */
mini_addClass = function (el, className) {
    if (!className)
        return;
    if (mini.hasClass(el, className) == false) {
        jQuery(el).addClass(className);
    }
}
/*
 * 为dom对象删除样式类名
 * @exports mini_removeClass as mini.removeClass
 * @param el ID或者DOM或者jquery对象
 * @param className 样式类名
 * @returns 无
 * @requires jQuery.removeClass
 */
mini_removeClass = function (el, className) {
    if (!className)
        return;
    jQuery(el).removeClass(className);
}
/*
 * 获取元素的四个边的margin值
 * @exports mini_getMargins as mini.getMargins
 * @param el ID或者DOM或者jquery对象
 * @returns json对象包括上右下左四个方向的margin值
 * @requires jQuery.css
 */
mini_getMargins = function (el) {
    el = mini.byId(el);
    var jq = jQuery(el);
    return {
        top: parseInt(jq.css("margin-top"), 10) || 0,
        left: parseInt(jq.css("margin-left"), 10) || 0,
        bottom: parseInt(jq.css("margin-bottom"), 10) || 0,
        right: parseInt(jq.css("margin-right"), 10) || 0
    };
}
/*
 * 获取元素的四个边的Border值
 * @exports mini_getBorders as mini.getBorders
 * @param el ID或者DOM或者jquery对象
 * @returns json对象包括上右下左四个方向的border值
 * @requires jQuery.css
 */
mini_getBorders = function (el) {
    el = mini.byId(el);
    var jq = jQuery(el);
    return {
        top: parseInt(jq.css("border-top-width"), 10) || 0,
        left: parseInt(jq.css("border-left-width"), 10) || 0,
        bottom: parseInt(jq.css("border-bottom-width"), 10) || 0,
        right: parseInt(jq.css("border-right-width"), 10) || 0
    };
}
/*
 * 获取元素的四个边的Padding值
 * @exports mini_getPaddings as mini.getPaddings
 * @param el ID或者DOM或者jquery对象
 * @returns json对象包括上右下左四个方向的padding值
 * @requires jQuery.css
 */
mini_getPaddings = function (el) {
    el = mini.byId(el);
    var jq = jQuery(el);
    return {
        top: parseInt(jq.css("padding-top"), 10) || 0,
        left: parseInt(jq.css("padding-left"), 10) || 0,
        bottom: parseInt(jq.css("padding-bottom"), 10) || 0,
        right: parseInt(jq.css("padding-right"), 10) || 0
    };
}
/*
 * 给元素设置宽度，宽度会减去左右padding和border
 * @exports mini_setWidth as mini.setWidth
 * @param el ID或者DOM或者jquery对象
 * @param width 宽度值
 * @requires jQuery
 */
mini_setWidth = function (el, width) {
    el = mini.byId(el);
    width = parseInt(width);
    if (isNaN(width) || !el)
        return;
    if (jQuery.boxModel) {
        var p = mini.getPaddings(el);
        var b = mini.getBorders(el);
        width = width - p.left - p.right - b.left - b.right;
    }

    if (width < 0)
        width = 0;
    el.style.width = width + "px";
}
/*
 * 给元素设置高度，高度会减去上下padding 和 border
 * @exports mini_setHeight as mini.setHeight
 * @param el ID或者DOM或者jquery对象
 * @param height 高度值
 * @requires jQuery
 */
mini_setHeight = function (el, height) {
    el = mini.byId(el);
    height = parseInt(height);
    if (isNaN(height) || !el)
        return;
    if (jQuery.boxModel) {
        var p = mini.getPaddings(el);
        var b = mini.getBorders(el);
        height = height - p.top - p.bottom - b.top - b.bottom;
    }

    if (height < 0)
        height = 0;
    el.style.height = height + "px";
}
/*
 * 获取元素宽度，如果第二个参数设置为true获取的是width,不设置第二个参数获取的是包括padding和border的宽度
 * @exports mini_getWidth as mini.getWidth
 * @param el ID或者DOM或者jquery对象
 * @param content {Boolean} 是否包括padding 和border
 * @returns 宽度
 * @requires jQuery.width(),jQuery.outerWidth()
 */
mini_getWidth = function (el, content) {
    el = mini.byId(el);
    if (el.style.display == "none" || el.type == "text/javascript")
        return 0;
    return content ? jQuery(el).width() : jQuery(el).outerWidth();
}
/*
 * 获取元素高度，如果第二个参数设置为true获取的是height,不设置第二个参数获取的是包括padding和border的高度
 * @exports mini_getHeight as mini.getHeight
 * @param el ID或者DOM或者jquery对象
 * @param content {Boolean} 是否包括padding 和border
 * @returns 高度度
 * @requires jQuery.height(),jQuery.outerHeight()
 */
mini_getHeight = function (el, content) {
    el = mini.byId(el);
    /* modify the el.style.display == "none" to "!jQuery(el).is(":visible") to solve a very strange problem pzf 2014-06 */
    if (!jQuery(el).is(":visible") || el.type == "text/javascript")
        return 0;
    return content ? jQuery(el).height() : jQuery(el).outerHeight();
}
/*
 * 为元素设置位置left/top和宽高width/height
 * @exports mini_setBox as mini.setBox
 * @param el 针对的目标元素ID或者DOM或者jquery对象
 * @param x left位置
 * @param y top位置
 * @param width 宽
 * @param height 高
 */
mini_setBox = function (el, x, y, width, height) {
    if (y === undefined) {
        y = x.y;
        width = x.width;
        height = x.height;
        x = x.x;
    }
    mini.setXY(el, x, y);
    mini.setWidth(el, width);
    mini.setHeight(el, height);
}
/*
 * 获取元素位置left/top和宽高width/height。
 * @exports mini_getBox as mini.getBox
 * @param el 目标元素ID或者DOM或者jquery对象
 * @returns json对象，包括x,y,width,height,left,top,right,bottom 等6个属性
 */
mini_getBox = function (el) {
    var xy = mini.getXY(el);
    var width = mini.getWidth(el);
    var height = mini.getHeight(el);
    var box = {
        x: xy[0],
        y: xy[1],
        width: width ,
        height: height
    };
    box.left = box.x;
    box.top = box.y;
    box.right = box.x + box.width;
    box.bottom = box.y + box.height;
    return box;
}
/*
 * 为DOM设置内联样式，与JQuery.css相比，支持多了调整格式的步骤，个人认为没有太大意义。
 * @exprots mini_setStyle as mini.setStyle
 * @param el 标元素ID或者DOM或者jquery对象
 * @param style {String} 样式字符串
 * @requires jQuery.css()
 */
mini_setStyle = function (el, style) {
    el = mini.byId(el);
    if (!el || typeof style != "string")
        return;

    var jq = jQuery(el);
    var styles = style.toLowerCase().split(";");
    for (var i = 0, l = styles.length; i < l; i++) {
        var s = styles[i];
        var ss = s.split(":");
        if (ss.length > 1) {
            if (ss.length > 2) {
                var s1 = ss[0].trim();
                ss.removeAt(0);
                var s2 = ss.join(":").trim();
                jq.css(s1, s2);
            } else {
                jq.css(ss[0].trim(), ss[1].trim());
            }
        }

    }
}
/*
 * 获取元素的样式信息，这里获取到的不仅仅包括内联样式也包括外联样式。
 * @exprots mini_getStyle as mini.getStyle
 * @param el 标元素ID或者DOM或者jquery对象
 * @param style {String} 样式字属性名
 * @returns 样式属性值
 */
mini_getStyle = function () {
    var f = document.defaultView;
    return new Function('el', 'style', [
	"style.indexOf('-')>-1 && (style=style.replace(/-(\\w)/g,function(m,a){return a.toUpperCase()}));",
	"style=='float' && (style='",
	f ? 'cssFloat' : 'styleFloat',
	"');return el.style[style] || ",
	f ? 'window.getComputedStyle(el, null)[style]' : 'el.currentStyle[style]',
	' || null;'].join(''));
}();
/*
 * 判断参数p是否是c的祖先节点。注意，p === c也被认为是正确的。
 * @exports mini_isAncestor as mini.isAncestor
 * @param p 祖先对象
 * @param c 子孙对象
 * @return 判断结果{Boolean}
 */
mini_isAncestor = function (p, c) {
    var ret = false;
    p = mini.byId(p);
    c = mini.byId(c);
    if (p === c)
        return true;	//两个DOM绝对相等。
    if (p && c) {
        if (p.contains) {
            try {
                return p.contains(c);	//判断包含关系p包含c
            } catch (e) {
                return false;
            }
        } else if (p.compareDocumentPosition) {
            return !!(p.compareDocumentPosition(c) & 16);	//p包含c。
        } else {
            while (c = c.parentNode) {
                ret = c == p || ret;
            }
        }
    }
    return ret;
}
/*
 * 在N层内找到有 cls 定义的样式类名的祖先节点。
 * @exports mini_findParent as mini.findParent
 * @param p 起始节点，可以是ID,DOM
 * @param cls 要匹配的样式类名
 * @param maxDepth 最多向上查找的层次，默认值为50
 * @returns 匹配的祖先节点，或者null
 * @function
 */
mini_findParent = function (p, cls, maxDepth) {
    p = mini.byId(p);
    var b = document.body, depth = 0, stopEl;
    maxDepth = maxDepth || 50;
    if (typeof maxDepth != "number") {
        stopEl = mini.byId(maxDepth);
        maxDepth = 10;
    }
    while (p && p.nodeType == 1 && depth < maxDepth && p != b && p != stopEl) {
        if (mini.hasClass(p, cls)) {
            return p;
        }
        depth++;
        p = p.parentNode;
    }
    return null;
}

mini.copyTo(mini, {

    byId: mini_byId,
    hasClass: mini_hasClass,
    addClass: mini_addClass,
    removeClass: mini_removeClass,
    getMargins: mini_getMargins,
    getBorders: mini_getBorders,
    getPaddings: mini_getPaddings,
    setWidth: mini_setWidth,
    setHeight: mini_setHeight,
    getWidth: mini_getWidth,
    getHeight: mini_getHeight,
    setBox: mini_setBox,
    getBox: mini_getBox,
    setStyle: mini_setStyle,
    getStyle: mini_getStyle,



    /*
	 * 重绘元素DOM，实际只做了一次添加和删除样式类mini-repaint的操作。
	 * @param el 目标元素ID或者DOM或者jquery对象
	 */
    repaint: function (el) {
        if (!el)
            el = document.body;
        mini.addClass(el, "mini-repaint");
        setTimeout(function () {
            mini.removeClass(el, "mini-repaint");
        }, 1);
    },
    /*
	 * 取得给定元素的宽，高
	 * @param el 给定元素，可以使 ID，DOM，jQuery对象
	 * @param content {Boolean} 是否包括Padding 和border
	 * @returns Json对象{width:xx,height:xx}
	 * @requires mini.getWidth, mini.getHeight
	 */
    getSize: function (el, content) {
        return {
            width: mini.getWidth(el, content),
            height: mini.getHeight(el, content)
        };
    },
    /*
	 * 设置给定元素的宽，高
	 * @param el 给定元素，可以使 ID，DOM，jQuery对象
	 * @param width 宽度
	 * @param height 高度
	 * @requires mini.setWidth, mini.setHeight
	 */
    setSize: function (el, width, height) {
        mini.setWidth(el, width);
        mini.setHeight(el, height);
    },
    /*
	 * 设置指定元素的 left 位置值
	 * @param el 给定元素，可以使 ID，DOM，jQuery对象
	 * @param x left 位置值
	 * @requires jQuery, mini.setXY
	 */
    setX: function (el, x) {
        x = parseInt(x);
        var xy = jQuery(el).offset();

        var y = parseInt(xy.top);
        if (y === undefined)
            y = xy[1];
        mini.setXY(el, x, y);
    },
    /*
	 * 设置指定元素的 top 位置值
	 * @param el 给定元素，可以使 ID，DOM，jQuery对象
	 * @param y top 位置值
	 * @requires jQuery, mini.setXY
	 */
    setY: function (el, y) {
        y = parseInt(y);
        var xy = jQuery(el).offset();
        var x = parseInt(xy.left);
        if (x === undefined)
            x = xy[0];
        mini.setXY(el, x, y);
    },
    /*
	 * 设置指定元素的 left和top 位置值
	 * @param el 给定元素，可以使 ID，DOM，jQuery对象
	 * @param x left 位置值
	 * @param y top 位置值
	 * @requires jQuery, mini.setXY
	 */
    setXY: function (el, x, y) {

        var xy = {
            left: parseInt(x),
            top: parseInt(y)
        };
        jQuery(el).offset(xy);
    },
    /*
	 * 取得指定元素的 left和top 位置值
	 * @param el 给定元素，可以使 ID，DOM，jQuery对象
	 * @returns 数组[left, top]
	 */
    getXY: function (el) {
        var xy = jQuery(el).offset();
        return [parseInt(xy.left), parseInt(xy.top)];
    },
    /*
	 * 获取窗口的x, y, left, top, right, bottom, width, height等信息。
	 * @returns json对象
	 * @requires jQuery.width(), jQuery.height(), jQuery.scrollLeft(), jQuery.scrollTop()
	 */
    getViewportBox: function () {
        var w = jQuery(window).width(), h = jQuery(window).height();
        var x = jQuery(document).scrollLeft(), y = jQuery(document.body).scrollTop();
        if (document.documentElement)
            y = document.documentElement.scrollTop;

        return {
            x: x, y: y, top: y, left: x, width: w, height: h, right: x + w, bottom: y + h
        };

    },
    /*
	 * 获取DOM对象的子节点，第二个参数如果为true则返回数组中包含所有种类的节点，不仅限于Element节点。
	 * @param el {String|DOMObject} ID或者DOM
	 * @param all {Boolean} 如果是true则返回所有子节点，不仅限于Element类型节点
	 * @return 子节点数组
	 */
    getChildNodes: function (el, all) {
        el = mini.byId(el);
        if (!el)
            return;
        var nodes = el.childNodes;
        var cs = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var c = nodes[i];
            if (c.nodeType == 1 || all === true) {
                cs.push(c);
            }
        }
        return cs;
    },
    /*
	 * 删除子元素，第二个参数指定白名单（不删除子元素名单）
	 * @param el {String|DOMObject} ID或者DOM
	 * @param butEl 白名单，不希望被删除的元素
	 * @requires mini.getChildNodes
	 */
    removeChilds: function (el, butEl) {
        el = mini.byId(el);
        if (!el)
            return;
        var cs = mini.getChildNodes(el, true);
        for (var i = 0, l = cs.length; i < l; i++) {
            var c = cs[i];
            if (butEl && c == butEl) {
            } else {
                el.removeChild(cs[i]);
            }
        }
    },
    isAncestor: mini_isAncestor,
    findParent: mini_findParent,

    /*
	 * 在给定元素内找到第一个包含给定样式表类名的子元素。
	 * @param el {String|DOMObject} ID或者DOM
	 * @param cls 指定的样式类名
	 * @return 匹配的子元素，或者是第一个参数本身
	 */
    findChild: function (el, cls) {
        el = mini.byId(el);
        var els = el.getElementsByTagName('*');
        for (var i = 0, l = els.length; i < l; i++) {
            var el = els[i];
            if (mini.hasClass(el, cls))
                return el;
        }
    },
    /*
	 * 判断p 是否是 c的祖先，这里 p == c也被认为正确。 重复定义了。
	 * @ignore
	 */
    isAncestor: function (p, c) {
        var ret = false;
        p = mini.byId(p);
        c = mini.byId(c);
        if (p === c)
            return true;
        if (p && c) {
            if (p.contains) {
                try {
                    return p.contains(c);
                } catch (e) {
                    return false
                }
            } else if (p.compareDocumentPosition) {
                return !!(p.compareDocumentPosition(c) & 16);
            } else {
                while (c = c.parentNode) {
                    ret = c == p || ret;
                }
            }
        }
        return ret;
    },
    /*
	 * 计算el与 target两个元素的位置距离。
	 * @param el {String|DOMObject} ID或者DOM，代表起始元素
	 * @param target {String|DOMObject} ID或者DOM，代表终止元素
	 * @returns 数组，[left 差值, top差值]
	 */
    getOffsetsTo: function (el, target) {
        var o = this.getXY(el), e = this.getXY(target);
        return [o[0] - e[0], o[1] - e[1]];
    },
    /*
	 *设置滚动条，将el调整到可视区域。
	 */
    scrollIntoView: function (el, container, hscroll) {
        var c = mini.byId(container) || document.body,
		o = this.getOffsetsTo(el, c),
		l = o[0] + c.scrollLeft,
		t = o[1] + c.scrollTop,
		b = t + el.offsetHeight,
		r = l + el.offsetWidth,
		ch = c.clientHeight,
		ct = parseInt(c.scrollTop, 10),
		cl = parseInt(c.scrollLeft, 10),
		cb = ct + ch,
		cr = cl + c.clientWidth;

        if (el.offsetHeight > ch || t < ct) {
            c.scrollTop = t;
        } else if (b > cb) {
            c.scrollTop = b - ch;
        }
        c.scrollTop = c.scrollTop;

        if (hscroll !== false) {
            if (el.offsetWidth > c.clientWidth || l < cl) {
                c.scrollLeft = l;
            } else if (r > cr) {
                c.scrollLeft = r - c.clientWidth;
            }
            c.scrollLeft = c.scrollLeft;
        }
        return this;
    },
    /*
	 * 设置给定元素的透明度
	 * @param el {String|DOMObject} ID或者DOM
	 * @param opacity 透明度数值 0~1之间
	 * @requires jQuery.css()
	 */
    setOpacity: function (el, opacity) {
        jQuery(el).css({
            "opacity": opacity
        });
    },
    /*
	 * 设置元素内容是否可以被选中
	 * @param el {String|DOMObject} ID或者DOM
	 * @param selected {Boolean} 是否可已被选中
	 */
    selectable: function (el, selected) {
        el = mini.byId(el);
        if (!!selected) {
            jQuery(el).removeClass('mini-unselectable');
            if (isIE)
                el.unselectable = "off";
            else {
                el.style.MozUserSelect = '';
                el.style.KhtmlUserSelect = '';
                el.style.UserSelect = '';

            }
        } else {
            jQuery(el).addClass('mini-unselectable');
            if (isIE)
                el.unselectable = 'on';
            else {
                el.style.MozUserSelect = 'none';
                el.style.UserSelect = 'none';
                el.style.KhtmlUserSelect = 'none';
            }
        }
    },
    /*
	 * 设置某段文字被选中
	 * @param el {String|DOMObject} ID或者DOM
	 * @param iStart 选中的起始位置
	 * @param iEnd 选中的截止位置
	 */
    selectRange: function (el, iStart, iEnd) {
        if (el.createTextRange) {
            var oRange = el.createTextRange();
            oRange.moveStart("character", iStart);
            oRange.moveEnd("character", iEnd - el.value.length);
            oRange.select();
        } else {
            if (el.setSelectionRange) {
                el.setSelectionRange(iStart, iEnd);
            }
        }
        try {
            el.focus();
        } catch (e) {
        }
    },
    /*
	 * 获取选中的起止位置。
	 * @param el {String|DOMObject} ID或者DOM
	 * @returns 数组[起位置，止位置]
	 */
    getSelectRange: function (el) {
        el = mini.byId(el);
        if (!el)
            return;
        try {
            el.focus();
        } catch (e) {
        }
        var start = 0, end = 0;
        if (el.createTextRange) {

            var r = document.selection.createRange().duplicate();
            r.moveEnd('character', el.value.length);
            if (r.text === '') {
                start = el.value.length;
            } else {
                start = el.value.lastIndexOf(r.text);
            }

            var r = document.selection.createRange().duplicate();
            r.moveStart('character', -el.value.length);
            end = r.text.length;

        } else {
            start = el.selectionStart;
            end = el.selectionEnd;
        }

        return [start, end];
    }

});

(function () {
    var fixAttr = {
        tabindex: 'tabIndex',
        readonly: 'readOnly',
        'for': 'htmlFor',
        'class': 'className',
        maxlength: 'maxLength',
        cellspacing: 'cellSpacing',
        cellpadding: 'cellPadding',
        rowspan: 'rowSpan',
        colspan: 'colSpan',
        usemap: 'useMap',
        frameborder: 'frameBorder',
        contenteditable: 'contentEditable'
    };

    var div = document.createElement('div');
    div.setAttribute('class', 't');
    var supportSetAttr = div.className === 't';

    /*
	 * 为给定元素设置属性
	 * @param el 指定元素DOM对象
	 * @param name 属性名
	 * @param val 属性值
	 */
    mini.setAttr = function (el, name, val) {
        el.setAttribute(supportSetAttr ? name : (fixAttr[name] || name), val);
    }
    /*
	 * 获取指定元素属性值
	 * @param el 指定元素DOM对象
	 * @param name 属性名
	 */
    mini.getAttr = function (el, name) {
        if (name == "value" && (isIE6 || isIE7)) {
            var a = el.attributes[name]
            return a ? a.value : null;
        }

        var v = el.getAttribute(supportSetAttr ? name : (fixAttr[name] || name));

        if (typeof v == "function") {
            v = el.attributes[name].value;
        }

        return v;
    }
})()
mini.copyTo(mini, {

    treeToArray: function (nodes, nodesField, idField, parentIdField, parentId) {
        if (!nodesField)
            nodesField = 'children';
        var array = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            array[array.length] = node;

            if (parentIdField)
                node[parentIdField] = parentId;

            var childrenNodes = node[nodesField];
            if (childrenNodes && childrenNodes.length > 0) {
                var id = node[idField];
                var childrenArray = this.treeToArray(childrenNodes, nodesField, idField, parentIdField, id);
                array.addRange(childrenArray);
            }
        }
        return array;
    },
    arrayToTree: function (data, nodesField, idField, parentIdField) {
        if (!nodesField)
            nodesField = 'children';
        idField = idField || '_id';
        parentIdField = parentIdField || '_pid';

        var nodes = [];

        var idHash = {};
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            if (!o) continue;
            var id = o[idField];
            if (id !== null && id !== undefined) {
                idHash[id] = o;
            }
            delete o[nodesField];
        }

        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            var p = idHash[o[parentIdField]];
            if (!p) {
                nodes.push(o);
                continue;
            }
            if (!p[nodesField]) {
                p[nodesField] = [];
            }
            p[nodesField].push(o);
        }
        return nodes;
    }
});
mini.treeToList = mini.treeToArray;
mini.listToTree = mini.arrayToTree;

mini.copyTo(mini, {
    measureText: function (el, text, style) {
        if (!this.measureEl) {
            this.measureEl = mini.append(document.body, '<div></div>');
        }

        this.measureEl.style.cssText = "position:absolute;left:-1000px;top:-1000px;visibility:hidden;";
        if (typeof el == "string") {
            this.measureEl.className = el;

        } else {
            this.measureEl.className = "";

            var j1 = jQuery(el);
            var j2 = jQuery(this.measureEl);
            var csses = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
            for (var i = 0, l = csses.length; i < l; i++) {
                var css = csses[i];
                j2.css(css, j1.css(css));
            }
        }
        if (style)
            mini.setStyle(this.measureEl, style);
        this.measureEl.innerHTML = text;
        return mini.getSize(this.measureEl);
    }
});
mini.__LastWindowWidth = document.documentElement.clientWidth;
mini.__LastWindowHeight = document.documentElement.clientHeight;

mini.allowLayout = true;	//个人认为这个值是否在onload总设置更合适

/*
 * 判断DOM对象是否显示。
 */
mini.isDisplay = function (p, body) {
    var doc = body || document.body;
    while (1) {
        if (p == null || !p.style)
            return false;	// !p.style没有内联style就认为是不显示！！
        if (p && p.style && p.style.display == "none")
            return false;	//display == "none"肯定是不显示
        if (p == doc)
            return true;
        p = p.parentNode;
    }
};
mini.isWindowDisplay = function () {
    try {
        var parentWindow = window.parent;
        var isIFrame = parentWindow != window;

        if (isIFrame) {

            var _iframes = parentWindow.document.getElementsByTagName("iframe");
            var _frames = parentWindow.document.getElementsByTagName("frame");
            var iframes = [];		//保存父页面包含的所有iframe和frame的DOM对象。
            for (var i = 0, l = _iframes.length; i < l; i++) {
                iframes.push(_iframes[i]);
            }
            for (var i = 0, l = _frames.length; i < l; i++) {
                iframes.push(_frames[i]);
            }

            var iframe = null;
            for (var i = 0, l = iframes.length; i < l; i++) {
                var el = iframes[i];
                if (el.contentWindow == window) {
                    iframe = el;  //貌似要找到frame自己
                    break;
                }
            }
            if (!iframe)
                return false;

            return mini.isDisplay(iframe, parentWindow.document.body);//判断iframe window是否展示。

        } else {
            return true;
        }
    } catch (e) {
        return true;
    }
};
/*
 * window是否显示。显示true/不显示false
 */
mini.WindowVisible = mini.isWindowDisplay();

/*
 * 逐层向下调整iframe布局。
 * @param parentNode 调整范围DOM对象
 */
mini.layoutIFrames = function (parentNode) {
    if (!parentNode)
        parentNode = document.body;
    if (!parentNode) return;
    var iframes = parentNode.getElementsByTagName("iframe");
    setTimeout(function () {
        for (var i = 0, l = iframes.length; i < l; i++) {
            var el = iframes[i];
            try {
                if (mini.isDisplay(el) && mini.isAncestor(parentNode, el)) {
                    if (el.contentWindow.mini) {
                        if (el.contentWindow.mini.WindowVisible == false) {
                            el.contentWindow.mini.WindowVisible = el.contentWindow.mini.isWindowDisplay();
                            el.contentWindow.mini.layout();
                        } else {
                            el.contentWindow.mini.layout(null, false);
                        }
                    }
                    el.contentWindow.mini.layoutIFrames();
                }
            } catch (ex) {
            }
        }
    }, 30);
}
/*
 * 当前zindex最高值
 * @default 1000
 */
mini.zIndex = 1000;

/*
 * 返回一个最高zindex值
 * @returns 当前最高zindex值 + 1
 * @function
 */
mini.getMaxZIndex = function () {
    return mini.zIndex++;
}

function js_isTouchDevice() {
    try {
        document.createEvent("TouchEvent");
        return true;
    } catch (e) {
        return false;
    }
}
function js_touchScroll(id) {
    if (js_isTouchDevice()) {
        var el = typeof id == "string" ? document.getElementById(id) : id;
        var scrollStartPos = 0;

        el.addEventListener("touchstart", function (event) {
            scrollStartPos = this.scrollTop + event.touches[0].pageY;
            event.preventDefault();
        }, false);

        el.addEventListener("touchmove", function (event) {
            this.scrollTop = scrollStartPos - event.touches[0].pageY;
            event.preventDefault();
        }, false);
    }
}


mini._placeholder = function (el) {
    el = mini.byId(el);
    if (!el || !isIE || isIE10) return;

    function doLabel() {
        var label = el._placeholder_label;

        if (!label) return;

        var placeholder = el.getAttribute("placeholder");
        if (!placeholder) placeholder = el.placeholder;
        /* 就算组件disable掉 还是要显示这个信息 潘正锋 2014-02 */
        if (!el.value) {
            label.innerHTML = placeholder;
            label.style.display = "";
            /* 不disable会报错 潘正锋 2014-02  */
            if(el.disabled)
               label.disabled = true;
        } else {
            label.style.display = "none";
        }
    }

    if (el._placeholder) {
        doLabel();
        return;
    }
    el._placeholder = true;

    var label = document.createElement("label");
    label.className = "mini-placeholder-label";
    el.parentNode.appendChild(label);
    el._placeholder_label = label;

    label.onmousedown = function () {
        el.focus();
    }


    el.onpropertychange = function (e) {
        e = e || window.event;
        if (e.propertyName == "value") {

            doLabel();
        }
    }

    doLabel();


    mini.on(el, "focus", function (e) {
        if (!el.readOnly) {
            label.style.display = "none";
        }
    });
    mini.on(el, "blur", function (e) {
        doLabel();
    });

}

/*
 * 删除某个元素下的组件和dom
 * @param 父元素,允许2种参数el或者id
 * @delAll 是否删除组件以外的dom
 * @function
 */
mini.removeChildUI = function (el,delAll) {
    if (typeof el == "string") {
        el = document.getElementById(el);
    }
    if(!el)
        return;
    var child = mini.getChildNodes(el, false);
    for (var i = 0; i < child.length; i++) {
        var node = child[i];
        if (node.uid) {
            var control = mini.get(node);
            if (mini.isControl(control))
                control.destroy();

        } else {
            mini.removeChildUI(node);
        }
    }
    if(delAll)  {
        jQuery(el).html('');
    }

}

mini.ajax = function (options) {
    if (!options.dataType) {
        options.dataType = "text";
    }



    return window.jQuery.ajax(options);
}


mini.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    if(placement == 'bottom') return { top: pos.top + pos.height, left: pos.left + pos.width / 2 - actualWidth / 2};
    if(placement == 'top') return  { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2};
    if(placement == 'left') return { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth} ;

    if (placement == 'bottomleft') return { top: pos.top + pos.height, left: pos.left };
    if (placement == 'bottomright') return { top: pos.top + pos.height, left: pos.left + pos.width - actualWidth };
    if (placement == 'topleft') return { top: pos.top - actualHeight, left: pos.left };
    if (placement == 'topright') return { top: pos.top - actualHeight, left: pos.left + pos.width - actualWidth };

    return { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width };
}

jQuery.ajaxSetup({
    cache: false
})
if (typeof window.rootpath == "undefined") {
    rootpath = "/";
}
if (typeof mini_debugger == "undefined") {
    mini_debugger = true;
}
if (typeof mini_useShims == "undefined") {
    mini_useShims = false;
}
if (typeof mini_autoRun == "undefined") {
    mini_autoRun = true;
}
/**
 * 获取被引入到页面的指定Js文件的绝对地址（去掉最后的js文件名的）。
 * @param js 文件名
 * @returns path 完整js路径
 * @private
 */
mini_CreateJSPath = function (js) {
    var scripts = document.getElementsByTagName("script");
    var path = "";
    for (var i = 0, l = scripts.length; i < l; i++) {
        var src = scripts[i].src;
        if (src.indexOf(js) != -1) {
            var ss = src.split(js);
            path = ss[0];
            break;
        }
    }
    var href = location.href;
    href = href.split("#")[0];
    href = href.split("?")[0];
    var ss = href.split("/");
    ss.length = ss.length - 1;
    href = ss.join("/");

    if (path.indexOf("http:") == -1 && path.indexOf("file:") == -1) {
        path = href + "/" + path;
    }
    return path;
}
if (!window.mini_JSPath) {
    mini_JSPath = mini_CreateJSPath("miniui.js");
}
var ua = navigator.userAgent.toLowerCase(),
    check = function (regex) {
        return regex.test(ua);
    },
    DOC = document,
    isStrict = document.compatMode == "CSS1Compat",
    version = function (is, regex) {
        var m;
        return (is && (m = regex.exec(ua))) ? parseFloat(m[1]) : 0;
    },
    docMode = document.documentMode,
    isOpera = check(/opera/),
    isOpera10_5 = isOpera && check(/version\/10\.5/),
    isChrome = check(/\bchrome\b/),
    isWebKit = check(/webkit/),
    isSafari = !isChrome && check(/safari/),
    isSafari2 = isSafari && check(/applewebkit\/4/),
    isSafari3 = isSafari && check(/version\/3/),
    isSafari4 = isSafari && check(/version\/4/),
    isSafari5_0 = isSafari && check(/version\/5\.0/),
    isSafari5 = isSafari && check(/version\/5/),
    isIE = !isOpera && check(/msie/),
    isIE7 = isIE && ((check(/msie 7/) && docMode != 8 && docMode != 9 && docMode != 10) || docMode == 7),
    isIE8 = isIE && ((check(/msie 8/) && docMode != 7 && docMode != 9 && docMode != 10) || docMode == 8),
    isIE9 = isIE && ((check(/msie 9/) && docMode != 7 && docMode != 8 && docMode != 10) || docMode == 9),
    isIE10 = isIE && ((check(/msie 10/) && docMode != 7 && docMode != 8 && docMode != 9) || docMode == 10),
    isIE11 = (ua.indexOf("trident") > -1 && ua.indexOf("rv") > -1),
    isIE6 = isIE && !isIE7 && !isIE8 && !isIE9 && !isIE10 && !isIE11,
    isFirefox = navigator.userAgent.indexOf("Firefox") > 0,
    isGecko = !isWebKit && check(/gecko/),
    isGecko3 = isGecko && check(/rv:1\.9/),
    isGecko4 = isGecko && check(/rv:2\.0/),
    isGecko5 = isGecko && check(/rv:5\./),
    isGecko10 = isGecko && check(/rv:10\./),
    isFF3_0 = isGecko3 && check(/rv:1\.9\.0/),
    isFF3_5 = isGecko3 && check(/rv:1\.9\.1/),
    isFF3_6 = isGecko3 && check(/rv:1\.9\.2/),
    isWindows = check(/windows|win32/),
    isMac = check(/macintosh|mac os x/),
    isAir = check(/adobeair/),
    isLinux = check(/linux/),
    scrollbarSize = null,
    chromeVersion = version(true, /\bchrome\/(\d+\.\d+)/),
    firefoxVersion = version(true, /\bfirefox\/(\d+\.\d+)/),
    ieVersion = version(isIE, /msie (\d+\.\d+)/),
    operaVersion = version(isOpera, /version\/(\d+\.\d+)/),
    safariVersion = version(isSafari, /version\/(\d+\.\d+)/),
    webKitVersion = version(isWebKit, /webkit\/(\d+\.\d+)/),
    isSecure = /^https/i.test(window.location.protocol),
    isBorderBox = isIE && !isStrict;

    
if (isIE6) {
    try {
        DOC.execCommand("BackgroundImageCache", false, true);
    } catch (e) { }
}


mini.boxModel = !isBorderBox;
mini.isIE = isIE;
mini.isIE6 = isIE6;
mini.isIE7 = isIE7;
mini.isIE8 = isIE8;
mini.isIE9 = isIE9;
mini.isFirefox = isFirefox;
mini.isOpera = isOpera;
mini.isSafari = isSafari;

if (jQuery) jQuery.boxModel = mini.boxModel;

mini.noBorderBox = false;
if (jQuery.boxModel == false && isIE && isIE9 == false) mini.noBorderBox = true;

mini.copyTo(Array.prototype, {
    add: Array.prototype.enqueue = function (item) {
        this[this.length] = item;
        return this;
    },
    getRange: function (start, end) {
        var arr = [];
        for (var i = start; i <= end; i++) {
            var o = this[i];
            if (o) {
                arr[arr.length] = o;
            }
        }
        return arr;
    },
    addRange: function (array) {
        for (var i = 0, j = array.length; i < j; i++) this[this.length] = array[i];
        return this;
    },
    clear: function () {
        this.length = 0;
        return this;
    },
    clone: function () {
        if (this.length === 1) {
            return [this[0]];
        }
        else {
            return Array.apply(null, this);
        }
    },
    contains: function (item) {
        return (this.indexOf(item) >= 0);
    },
    indexOf: function (item, from) {
        var len = this.length;
        for (var i = (from < 0) ? Math.max(0, len + from) : from || 0; i < len; i++) {
            if (this[i] === item) return i;
        }
        return -1;
    },
    dequeue: function () {
        return this.shift();
    },
    insert: function (index, item) {
        this.splice(index, 0, item);
        return this;
    },
    insertRange: function (index, items) {
        for (var i = items.length - 1; i >= 0; i--) {
            var item = items[i];
            this.splice(index, 0, item);

        }
        return this;
    },
    remove: function (item) {
        var index = this.indexOf(item);
        if (index >= 0) {
            this.splice(index, 1);
        }
        return (index >= 0);
    },
    removeAt: function (index) {
        var ritem = this[index];
        this.splice(index, 1);
        return ritem;
    },
    removeRange: function (items) {
        items = items.clone();
        for (var i = 0, l = items.length; i < l; i++) {
            this.remove(items[i]);
        }
    }
});
Date.prototype.getHalfYear = function () {
    if (!this.getMonth) return null;
    var m = this.getMonth();
    if (m < 6) return 0;
    return 1;
}
Date.prototype.getQuarter = function () {
    if (!this.getMonth) return null;
    var m = this.getMonth();
    if (m < 3) return 0;
    if (m < 6) return 1;
    if (m < 9) return 2;
    return 3;
}

var DAY_MS = 86400000,	//一天等于8640万毫秒
	HOUR_MS = 3600000,	//一小时等于360万毫秒
	MINUTE_MS = 60000;	//一分钟等于6万毫秒


mini.copyTo(mini, {
	/*
	 * 根据传入参数date的年，月，日等数据创建一个新的Date对象实例，这个对象的时分秒等于0。
	 */
    clearTime: function (date) {
        if (!date) return null;
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    },
    /*
     * 根据传入参数date的年，月，日等数据创建一个新的Date对象实例，新产生对象的时分秒等参数都被设置为最大。
     * 这个方法产生的时间是一天中最大的时间。
     */
    maxTime: function (date) {
        if (!date) return null;
        return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59);
    },
    
    /*
     * 克隆一个时间对象
     */
    cloneDate: function (date) {
        if (!date) return null;
        return new Date(date.getTime());
    },
    
    /*
     * 生成一个新的Date对象实例，这个实例通过指定的参数加上N年，月，日，时，分，秒产生。
     * @param date 日期对象实例。
     * @param num 增加的数值
     * @param type 增加的类型， 'Y'年,'MO'月,'D'日,'H'时,'M'分,'S'秒,'MS'毫秒
     */
    addDate: function (date, num, type) {
        if (!type) type = "D";
        date = new Date(date.getTime());
        switch (type.toUpperCase()) {
            case "Y":
                date.setFullYear(date.getFullYear() + num);
                break;
            case "MO":
                date.setMonth(date.getMonth() + num);
                break;
            case "D":
                date.setDate(date.getDate() + num);
                break;
            case "H":
                date.setHours(date.getHours() + num);
                break;
            case "M":
                date.setMinutes(date.getMinutes() + num);
                break;
            case "S":
                date.setSeconds(date.getSeconds() + num);
                break;
            case "MS":
                date.setMilliseconds(date.getMilliseconds() + num);
                break;
        }
        return date;
    },
    
    /*
     * 根据给定年，月，日，计算这一天是一年中的第几周。
     */
    getWeek: function (year,month,day){
        month += 1; 

        var a = Math.floor((14-(month))/12);
        var y = year+4800-a;
        var m = (month)+(12*a)-3;
        var jd = day + Math.floor(((153*m)+2)/5) + 
                     (365*y) + Math.floor(y/4) - Math.floor(y/100) + 
                     Math.floor(y/400) - 32045;

        var d4 = (jd+31741-(jd%7))%146097%36524%1461;
        var L = Math.floor(d4/1460);
        var d1 = ((d4-L)%365)+L;
        NumberOfWeek = Math.floor(d1/7) + 1;
        return NumberOfWeek;        
    },
    
    /*
     * 获得指定日期前最近星期N
     * @param date 给定日期
     * @param weekStartDay 星期N。
     */
    getWeekStartDate: function (date, weekStartDay) {
        if (!weekStartDay) weekStartDay = 0;
        if (weekStartDay > 6 || weekStartDay < 0) throw new Error("out of weekday");
        var day = date.getDay();
        var num = weekStartDay - day;
        if (day < weekStartDay) {
            num -= 7;
        }
        var d = new Date(date.getFullYear(), date.getMonth(), date.getDate() + num);
        return d;
    },
    
    /*
     * 取得周N的短名称。
     */
    getShortWeek: function (week) {
        var weeks = this.dateInfo.daysShort;
        return weeks[week];
    },
     
     /*
     * 取得周N的长名称。
     */
    getLongWeek: function (week) {
        var weeks = this.dateInfo.daysLong;
        return weeks[week];
    },

     /*
     * 取得月N的短名称。
     */
    getShortMonth: function (month) {
        var months = this.dateInfo.monthsShort;
        return months[month];
    },

     /*
     * 取得月N的长名称。
     */ 
    getLongMonth: function (month) {
        var months = this.dateInfo.monthsLong;
        return months[month];
    },
    /*
     * 日期的国际化配置
     */
    dateInfo: {
        monthsLong: ["January", "Febraury", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        daysLong: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        daysShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        quarterLong: ['Q1', 'Q2', 'Q3', 'Q4'],
        quarterShort: ['Q1', 'Q2', 'Q3', 'Q4'],
        halfYearLong: ['first half', 'second half'],
        patterns: {
            "d": "M/d/yyyy",
            "D": "dddd, MMMM dd, yyyy",
            "f": "dddd, MMMM dd, yyyy H:mm tt",
            "F": "dddd, MMMM dd, yyyy H:mm:ss tt",
            "g": "M/d/yyyy H:mm tt",
            "G": "M/d/yyyy H:mm:ss tt",
            "m": "MMMM dd",
            "o": "yyyy-MM-ddTHH:mm:ss.fff",
            "s": "yyyy-MM-ddTHH:mm:ss",
            "t": "H:mm tt",
            "T": "H:mm:ss tt",
            "U": "dddd, MMMM dd, yyyy HH:mm:ss tt",
            "y": "MMM, yyyy"
        },
        tt: {
            "AM": "AM",
            "PM": "PM"
        },
        ten: {
            "Early": "Early",
            "Mid": "Mid",
            "Late": "Late"
        },
        today: 'Today',
        clockType: 24
    }
});

/*
 * 日期格式化
 */
mini.formatDate = function (date, format, locale) {
    if (!date || !date.getFullYear || isNaN(date)) return "";
    var fd = date.toString();
    var dateFormat = mini.dateInfo;
    if (!dateFormat) dateFormat = mini.dateInfo;

    if (typeof (dateFormat) !== "undefined") {
        var pattern = typeof (dateFormat.patterns[format]) !== "undefined" ? dateFormat.patterns[format] : format;
        
        var year = date.getFullYear();
        var month = date.getMonth();
        var day = date.getDate();
        
        if(format == "yyyy-MM-dd"){ 
            month = month + 1 < 10 ? "0" + (month + 1) : month + 1;
            day = day < 10 ? "0" + day : day;
            return year +"-"+month+"-"+day;
        }
        if(format == "MM/dd/yyyy"){ 
            month = month + 1 < 10 ? "0" + (month + 1) : month + 1;
            day = day < 10 ? "0" + day : day;
            return month+"/"+day+"/"+year;
        }
        

        
        fd = pattern.replace(/yyyy/g, year);
        fd = fd.replace(/yy/g, (year + "").substring(2));

        
        var halfyear = date.getHalfYear();
        fd = fd.replace(/hy/g, dateFormat.halfYearLong[halfyear]);

        
        var quarter = date.getQuarter();
        fd = fd.replace(/Q/g, dateFormat.quarterLong[quarter]);
        fd = fd.replace(/q/g, dateFormat.quarterShort[quarter]);

        
        fd = fd.replace(/MMMM/g, dateFormat.monthsLong[month].escapeDateTimeTokens());
        fd = fd.replace(/MMM/g, dateFormat.monthsShort[month].escapeDateTimeTokens());
        fd = fd.replace(/MM/g, month + 1 < 10 ? "0" + (month + 1) : month + 1);
        fd = fd.replace(/(\\)?M/g, function ($0, $1) { return $1 ? $0 : month + 1; });

        var dayOfWeek = date.getDay();
        fd = fd.replace(/dddd/g, dateFormat.daysLong[dayOfWeek].escapeDateTimeTokens());
        fd = fd.replace(/ddd/g, dateFormat.daysShort[dayOfWeek].escapeDateTimeTokens());

        
        fd = fd.replace(/dd/g, day < 10 ? "0" + day : day);
        fd = fd.replace(/(\\)?d/g, function ($0, $1) { return $1 ? $0 : day; });

        var hour = date.getHours();
        var halfHour = hour > 12 ? hour - 12 : hour;
        if (dateFormat.clockType == 12) {
            if (hour > 12) {
                hour -= 12;
            }
        }

        
        fd = fd.replace(/HH/g, hour < 10 ? "0" + hour : hour);
        fd = fd.replace(/(\\)?H/g, function ($0, $1) { return $1 ? $0 : hour; });

        
        fd = fd.replace(/hh/g, halfHour < 10 ? "0" + halfHour : halfHour);
        fd = fd.replace(/(\\)?h/g, function ($0, $1) { return $1 ? $0 : halfHour; });

        var minutes = date.getMinutes();
        fd = fd.replace(/mm/g, minutes < 10 ? "0" + minutes : minutes);
        fd = fd.replace(/(\\)?m/g, function ($0, $1) { return $1 ? $0 : minutes; });

        var seconds = date.getSeconds();
        fd = fd.replace(/ss/g, seconds < 10 ? "0" + seconds : seconds);
        fd = fd.replace(/(\\)?s/g, function ($0, $1) { return $1 ? $0 : seconds; });

        fd = fd.replace(/fff/g, date.getMilliseconds());

        fd = fd.replace(/tt/g, date.getHours() > 12 || date.getHours() == 0 ? dateFormat.tt["PM"] : dateFormat.tt["AM"]);

        
        var date = date.getDate();
        var tenF = '';
        if (date <= 10) tenF = dateFormat.ten['Early'];
        else if (date <= 20) tenF = dateFormat.ten['Mid'];
        else tenF = dateFormat.ten['Late'];
        fd = fd.replace(/ten/g, tenF);
    }

    return fd.replace(/\\/g, "");
}



mini.fixDate = function (d, check) { 
	if (+d) { 
		while (d.getDate() != check.getDate()) {
			d.setTime(+d + (d < check ? 1 : -1) * HOUR_MS);
		}
	}
}

/*
 * 解析成日期对象。
 */
mini.parseDate = function (s, ignoreTimezone) {
    try {
        var d = eval(s);
        if (d && d.getFullYear) return d;
    } catch (ex) {
    }

    if (typeof s == 'object') {
        return isNaN(s) ? null : s;
    }
    if (typeof s == 'number') {

        var d = new Date(s * 1000);
        if (d.getTime() != s) return null;
        return isNaN(d) ? null : d;
    }
    if (typeof s == 'string') {
        //支持 小数点  xdj 2015-07
        m = s.match(/^([0-9]{4})([0-9]{2})([0-9]{0,2})$/);
        if (m) {
            var date = new Date(parseInt(m[1], 10), parseInt(m[2], 10) - 1);
            if (m[3]) date.setDate(m[3]);
            return date;
        }

        m = s.match(/^([0-9]{4}).([0-9]*)$/);
        if (m) {
            var date = new Date(m[1], m[2] - 1);
            return date;
        }

        if (s.match(/^\d+(\.\d+)?$/)) {
            var d = new Date(parseFloat(s) * 1000);
            if (d.getTime() != s) return null;
            else return d;
        }
        if (ignoreTimezone === undefined) {
            ignoreTimezone = true;
        }
        var d = mini.parseISO8601(s, ignoreTimezone) || (s ? new Date(s) : null);
        return isNaN(d) ? null : d;
    }

    return null;
}

/*
 * 将一个ISO8601 字符串解析成日期对象。
 */
mini.parseISO8601 = function (s, ignoreTimezone) {
    //支持 小数点  xdj 2015-07
    var m = s.match(/^([0-9]{4})([-\/\.]([0-9]{1,2})([-\/\.]([0-9]{1,2})([T ]([0-9]{1,2}):([0-9]{1,2})(:([0-9]{1,2})(\.([0-9]+))?)?(Z|(([-+])([0-9]{2})(:?([0-9]{2}))?))?)?)?)?$/);
    if (!m) {

        m = s.match(/^([0-9]{4})[-\/\.]([0-9]{2})[-\/\.]([0-9]{2})[T ]([0-9]{1,2})/);
        if (m) {
            var date = new Date(m[1], m[2] - 1, m[3], m[4]);
            return date;
        }


        m = s.match(/^([0-9]{4}).([0-9]*)/);
        if (m) {
            var date = new Date(m[1], m[2] - 1);
            return date;
        }


        m = s.match(/^([0-9]{4}).([0-9]*).([0-9]*)/);
        if (m) {
            var date = new Date(m[1], m[2] - 1, m[3]);
            return date;
        }

        m = s.match(/^([0-9]{2})-([0-9]{2})-([0-9]{4})$/);
        if (!m) return null;
        else {
            var date = new Date(m[3], m[1] - 1, m[2]);
            return date;
        }
    }
    var date = new Date(m[1], 0, 1);
    if (ignoreTimezone || !m[14]) {
        var check = new Date(m[1], 0, 1, 9, 0);
        if (m[3]) {
            date.setMonth(m[3] - 1);
            check.setMonth(m[3] - 1);
        }
        if (m[5]) {
            date.setDate(m[5]);
            check.setDate(m[5]);
        }
        mini.fixDate(date, check);
        if (m[7]) {
            date.setHours(m[7]);
        }
        if (m[8]) {
            date.setMinutes(m[8]);
        }
        if (m[10]) {
            date.setSeconds(m[10]);
        }
        if (m[12]) {
            date.setMilliseconds(Number("0." + m[12]) * 1000);
        }
        mini.fixDate(date, check);
    } else {
        date.setUTCFullYear(
            m[1],
            m[3] ? m[3] - 1 : 0,
            m[5] || 1
        );
        date.setUTCHours(
            m[7] || 0,
            m[8] || 0,
            m[10] || 0,
            m[12] ? Number("0." + m[12]) * 1000 : 0
        );
        var offset = Number(m[16]) * 60 + (m[18] ? Number(m[18]) : 0);
        offset *= m[15] == '-' ? 1 : -1;
        date = new Date(+date + (offset * 60 * 1000));
    }
    return date;
}

/*
 * 转化成时间对象。日期位为0 。
 */
mini.parseTime = function (s, format) {
    if (!s) return null;
    var n = parseInt(s);

    if (n == s && format) {
        d = new Date(0);
        if (format[0] == "H") {
            d.setHours(n);
        } else if (format[0] == "m") {
            d.setMinutes(n);
        } else if (format[0] == "s") {
            d.setSeconds(n);
        }
        return d;
    }

    var d = mini.parseDate(s);
    if (!d) {
        var ss = s.split(":");
        var t1 = parseInt(parseFloat(ss[0]));
        var t2 = parseInt(parseFloat(ss[1]));
        var t3 = parseInt(parseFloat(ss[2]));
        if (!isNaN(t1) && !isNaN(t2) && !isNaN(t3)) {
            d = new Date(0);
            d.setHours(t1);
            d.setMinutes(t2);
            d.setSeconds(t3);
        }
        if (!isNaN(t1) && (format == "H" || format == "HH")) {
            d = new Date(0);
            d.setHours(t1);
        } else if (!isNaN(t1) && !isNaN(t2) && (format == "H:mm" || format == "HH:mm")) {
            d = new Date(0);
            d.setHours(t1);
            d.setMinutes(t2);
        } else if (!isNaN(t1) && !isNaN(t2) && format == "mm:ss") {
            d = new Date(0);
            d.setMinutes(t1);
            d.setSeconds(t2);
        }
    }
    return d;
}
/**
 * Cookie扩展，包括取得，设置，删除cookie信息的三个方法。
 */
mini.Cookie = {
    get: function (sName) {
        var aCookie = document.cookie.split("; ");
        var lastMatch = null;
        for (var i = 0; i < aCookie.length; i++) {
            var aCrumb = aCookie[i].split("=");
            if (sName == aCrumb[0]) {
                lastMatch = aCrumb;
            }
        }
        if (lastMatch) {
            var v = lastMatch[1];
            if (v === undefined) return v;
            return unescape(v);
        }
        return null;
    },
    set: function (name, value, expires, domain) {
        var LargeExpDate = new Date();
        if (expires != null) {
            

            LargeExpDate = new Date(LargeExpDate.getTime() + (expires * 1000 * 3600 * 24)); 
        }

        document.cookie = name + "=" + escape(value) + ((expires == null) ? "" : ("; expires=" + LargeExpDate.toGMTString())) + ";path=/" + (domain ? "; domain=" + domain : "");
    },
    del: function (name, domain) {
        this.set(name, null, -100, domain);
    }
};
/**
 * 将Html字符串做转码处理。
 */
mini.htmlEncode = function (str) {
    if (typeof str !== "string") return str;
    var s = "";
    if (str.length == 0) return "";
    s = str;

    s = s.replace(/</g, "&lt;");
    s = s.replace(/>/g, "&gt;");
    s = s.replace(/ /g, "&nbsp;");
    s = s.replace(/\'/g, "&#39;");
    s = s.replace(/\"/g, "&quot;");
    
    return s;
}

/**
 * 将html字符串做反转码处理。
 */
mini.htmlDecode = function (str) {
    if (typeof str !== "string") return str;
    var s = "";
    if (str.length == 0) return "";
    s = str.replace(/&gt;/g, "&");
    s = s.replace(/&lt;/g, "<");
    s = s.replace(/&gt;/g, ">");
    s = s.replace(/&nbsp;/g, " ");
    s = s.replace(/&#39;/g, "\'");
    s = s.replace(/&quot;/g, "\"");
    
    return s;
}  
mini.JSON = new (function () {
    var sb = [];
    var _dateFormat = null;
    var useHasOwn = !!{}.hasOwnProperty,
        replaceString = function (a, b) {

            var c = m[b];
            if (c) {


                return c;
            }
            c = b.charCodeAt();
            return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16);

        },
        doEncode = function (o, field) {

            if (o === null) {
                sb[sb.length] = "null";
                return;
            }
            var t = typeof o;
            if (t == "undefined") {
                sb[sb.length] = "null";
                return;
            } else if (o.push) {

                sb[sb.length] = '[';
                var b, i, l = o.length, v;
                for (i = 0; i < l; i += 1) {
                    v = o[i];
                    t = typeof v;
                    if (t == "undefined" || t == "function" || t == "unknown") {
                    } else {
                        if (b) {
                            sb[sb.length] = ',';
                        }
                        doEncode(v);

                        b = true;
                    }
                }
                sb[sb.length] = ']';
                return;
            } else if (o.getFullYear) {
                if (_dateFormat) {
                    sb[sb.length] = '"';
                    if (typeof _dateFormat == 'function') {
                        sb[sb.length] = _dateFormat(o, field);
                    } else {
                        sb[sb.length] = mini.formatDate(o, _dateFormat);
                    }
                    sb[sb.length] = '"';
                } else {
                    var n;
                    sb[sb.length] = '"';
                    sb[sb.length] = o.getFullYear();
                    sb[sb.length] = "-";
                    n = o.getMonth() + 1;
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = "-";
                    n = o.getDate();
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = "T"
                    n = o.getHours();
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = ":"
                    n = o.getMinutes();
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = ":"
                    n = o.getSeconds();
                    sb[sb.length] = n < 10 ? "0" + n : n;
                    sb[sb.length] = '"';
                }
                return;
            } else if (t == "string") {
                if (strReg1.test(o)) {
                    sb[sb.length] = '"';

                    sb[sb.length] = o.replace(strReg2, replaceString);
                    sb[sb.length] = '"';
                    return;
                }
                sb[sb.length] = '"' + o + '"';
                return;
            } else if (t == "number") {
                sb[sb.length] = o;
                return;
            } else if (t == "boolean") {
                sb[sb.length] = String(o);
                return;
            } else {
                sb[sb.length] = "{";
                var b, i, v;
                for (i in o) {
                    if (!useHasOwn || (o.hasOwnProperty && o.hasOwnProperty(i))) {
                        v = o[i];
                        t = typeof v;
                        if (t == "undefined" || t == "function" || t == "unknown") {
                        } else {
                            if (b) {
                                sb[sb.length] = ',';
                            }
                            doEncode(i);
                            sb[sb.length] = ":";
                            doEncode(v, i)

                            b = true;
                        }
                    }
                }
                sb[sb.length] = "}";
                return;
            }
        },
        m = {
            "\b": '\\b',
            "\t": '\\t',
            "\n": '\\n',
            "\f": '\\f',
            "\r": '\\r',
            '"': '\\"',
            "\\": '\\\\'
        },
        strReg1 = /["\\\x00-\x1f]/,
        strReg2 = /([\x00-\x1f\\"])/g;

    this.encode = function () {

        var ec;
        return function (o, dateFormat) {
            sb = [];

            _dateFormat = dateFormat;
            doEncode(o);

            _dateFormat = null;

            return sb.join("");
        };
    } ();
    this.decode = function () {







        var dateRe1 = /^(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2}(?:\.*\d*)?)Z*$/;

        var dateRe2 = new RegExp('^\/+Date\\(([0-9]+)\.*\\)\/+$', 'g');


        var re = /[\"\'](\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})[\"\']/g;
        return function (json, parseDate) {
            if (json === "" || json === null || json === undefined) return json;

            if (typeof json == 'object') {
                json = this.encode(json);
            }


            function evalParse(json) {
                if (parseDate !== false) {
                    json = json.replace(__js_dateRegEx, "$1new Date($2)");
                    json = json.replace(re, "new Date($1,$2-1,$3,$4,$5,$6)");
                    json = json.replace(__js_dateRegEx2, "new Date($1)");
                }
                return eval('(' + json + ')');
            }


            var data = null;


            if (window.JSON && window.JSON.parse) {

                var dateReviver = function (key, value) {
                    if (typeof value === 'string') {

                        dateRe1.lastIndex = 0;
                        var a = dateRe1.exec(value);
                        if (a) {
                            value = new Date(a[1], a[2] - 1, a[3], a[4], a[5], a[6]);

                            return value;
                        }

                        dateRe2.lastIndex = 0;
                        var a = dateRe2.exec(value);
                        if (a) {
                            value = new Date(parseInt(a[1]));

                            return value;
                        }
                    }
                    return value;
                };

                try {
                    var json2 = json.replace(__js_dateRegEx, "$1\"\/Date($2)\/\"");
                    data = window.JSON.parse(json2, dateReviver);
                } catch (ex) {
                    data = evalParse(json);
                }

            } else {

                data = evalParse(json);
            }
            return data;
        };

    } ();

})();
__js_dateRegEx = new RegExp('(^|[^\\\\])\\"\\\\/Date\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\+|-)[0-9]{4})?\\)\\\\/\\"', "g");
__js_dateRegEx2 = new RegExp('[\"\']\/Date\\(([0-9]+)\\)\/[\"\']', 'g');
mini.encode = mini.JSON.encode;
mini.decode = mini.JSON.decode;

/**
 * 按键编码对照。
 */
mini.Keyboard = {
    Left: 37,
    Top: 38,
    Right: 39,
    Bottom: 40,

    PageUp: 33,
    PageDown: 34,
    End: 35,
    Home: 36,

    Enter: 13,
    ESC: 27,
    Space: 32,
    Tab: 9,
    Del: 46,

    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123
};

mini.MouseButton = {
    Left: 0,
    Middle: 1,
    Right: 2
}
if (isIE && !isIE9) {
    mini.MouseButton = {
        Left: 1,
        Middle: 4,
        Right: 2
    }
}

String.format = function (format) {
    var args = Array.prototype.slice.call(arguments, 1);
    format = format || "";
    return format.replace(/\{(\d+)\}/g, function (m, i) {
        return args[i];
    });
}
String.prototype.trim = function () {
    var re = /^\s+|\s+$/g;
    return function () { return this.replace(re, ""); };
}();

String.prototype.escapeDateTimeTokens = function () {
    return this.replace(/([dMyHmsft])/g, "\\$1");
}
mini.util = {};

/**
 *@class 字符串工具类，提供了一些方便的函数用于字符串操作
 *@constructor
 *@return StringUtil类
 */
mini.util.StringUtil = {}
mini.util.CookieUtil = {}
mini.util.HtmlUtil = {}
/**
 *去掉字符串的左边的空格
 *@param {string}s 传入要去掉空格的字符串
 */
mini.util.StringUtil.lTrim = function (s) {
    for (var i = 0; i < s.length; i++)
        if (s.charAt(i) != ' ')
            return s.substring(i, s.length);
    return "";
}

/**
 *去掉字符串的右边的空格
 *@param {string}s 传入要去掉右边空格的字符串
 */
mini.util.StringUtil.rTrim = function (s) {
    for (var i = s.length - 1; i >= 0; i--)
        if (s.charAt(i) != ' ')
            return s.substring(0, i + 1);
    return "";
}

mini.util.StringUtil.nvl = function (s, d) {
    if ((s == null) || (s == "")) {
        return d;
    } else {
        return s;
    }
}


/**
 *去掉字符串的首尾空格
 *@param {string}s 传入要去掉空格的字符串
 */
mini.util.StringUtil.trimSpace = function (s) {
    return mini.util.StringUtil.rTrim(mini.util.StringUtil.lTrim(s));
}

/**
 *用来消除字符串中所有空格。
 *@param s为字符串型
 */
mini.util.StringUtil.trimAllSpace = function (s) {
    return s.replace(/\s/g, "");
}


/**
 *去掉回车换行符
 */

mini.util.StringUtil.clearEnter = function (s) {
    var Char = '';
    var outString = "";
    var i = 0;
    for (i = 0; i < s.length; i++) {
        Char = s.charAt(i);
        if (!((Char == '\n') || (Char == '\r'))) {
            outString = outString + Char;
        }
    }
    return mini.util.StringUtil.trimSpace(outString);
}

/**
 *计算字符串的长度（包括全角字符）不去掉空格的
 *注意由于utf-8编码是变长的，所以难以判断是多少字符长。
 *本函数假设为中文GB2312编码，为2位
 *@param {string}s 传入要计算长度的字符串
 *@returns {int}长度值
 */
mini.util.StringUtil.getLength = function (s) {
    var i, sum;
    sum = 0;
    for (i = 0; i < s.length; i++) {
        if ((s.charCodeAt(i) >= 0) && (s.charCodeAt(i) <= 255))
            sum = sum + 1;
        else
            sum = sum + 2;
    }
    return sum;
}


mini.util.StringUtil.formatMoney = function (value, digit, prefix) {
    if(digit===undefined) digit = 2;
    if (undefined == value || value == "" || !value) {
        return ""
    }
    value = new String(value);
    value = value.replace(/\,/g, "");
    var tpMoney = new Number(value);
    if (isNaN(tpMoney)) {
        return "";
    }
    if (digit != "" && digit != undefined)
        tpMoney = tpMoney.toFixed(digit);
    tpMoney = tpMoney + '';
    prefix = prefix || '';
    return prefix + format(tpMoney);

    function format(value) {
        var re = /^(-?\d+)(\d{3})(\.?\d*)/;
        while (re.test(value)) {
            value = value.replace(re, "$1,$2$3");
        }
        return value;
    }
}


/**
 *取当前页面的请求URI字符串
 *例如:getURI("http://localhost:7001/systemAdmin/queryDljg.do?swjgdm=&dljgdm=")返回"/systemAdmin/queryDljg.do?swjgdm=&dljgdm="
 */
mini.util.HtmlUtil.getURI = function () {
    protocol = window.location.protocol;
    host = window.location.host;
    url = window.location.href;
    return url.replace(protocol + "//" + host, "");
}


mini.util.CookieUtil.getCookie = function (name) {
    return $.cookie(name);
}

mini.util.CookieUtil.setCookie = function (name, value, options) {
    $.cookie(name, value, option);
}

mini.util.disableBackspaceToPreviousPage = function(){
    $(document).unbind('keydown').bind('keydown', function (event) {
        var doPrevent = false;
        if (event.keyCode === 8) {
            var d = event.srcElement || event.target;
            if ((d.tagName.toUpperCase() === 'INPUT' &&
                (
                    d.type.toUpperCase() === 'TEXT' ||
                    d.type.toUpperCase() === 'PASSWORD' ||
                    d.type.toUpperCase() === 'FILE' ||
                    d.type.toUpperCase() === 'EMAIL' ||
                    d.type.toUpperCase() === 'SEARCH' ||
                    d.type.toUpperCase() === 'DATE' )
                ) ||
                d.tagName.toUpperCase() === 'TEXTAREA') {
                doPrevent = d.readOnly || d.disabled;
            }
            else {
                doPrevent = true;
            }
        }

        if (doPrevent) {
            event.preventDefault();
        }
    });
}
mini.util.getMap = function(name,obj){
    return mini._getMap(name,obj);
}
mini.util.setMap = function(name, value, obj){
    return mini._setMap(name, value, obj);
}
/**
 * 用于生成行唯一标识，在grid组件中被使用到
 * @returns UUID字符串
 */
function UUID() {
    var s = [], itoh = '0123456789ABCDEF'.split('');
    for (var i = 0; i < 36; i++) s[i] = Math.floor(Math.random() * 0x10);
    s[14] = 4;
    s[19] = (s[19] & 0x3) | 0x8;
    for (var i = 0; i < 36; i++) s[i] = itoh[s[i]];
    s[8] = s[13] = s[18] = s[23] = '-';
    return s.join('');
}


mini = mini || {};

/*
 * 为指定元素添加一个事件处理函数，这个事件处理函数阻断事件冒泡传递。
 * @exports mini_onOne as mini.onOne
 * @param el 目标对象，可以使ID或DOM或jQuery对象
 * @param type 事件类型
 * @param fn 事件处理函数
 * @param scope 函数上下文
 * @function
 */
mini_onOne = function (el, type, fn, scope) {
    
    var name = "on" + type.toLowerCase();
    
    el[name] = function (e) {
        e = e || window.event;
        e.target = e.target || e.srcElement;
        if (!e.preventDefault) {

            e.preventDefault = function () {
                if (window.event) {
                    window.event.returnValue = false;
                }
            }
        }
        if (!e.stopPropogation) {

            e.stopPropogation = function () {
                if (window.event) {
                    window.event.cancelBubble = true;
                }
            }
        }
        var ret = fn.call(scope, e);
        if (window.event) {
            try {
                e.stopPropogation = null;
                e.preventDefault = null;
            } catch (e) { }
        }
        if (ret === false) return false;
    }
}


/*
 * 为给定元素绑定事件处理函数
 * @exports mini_on as mini.on
 * @param el 目标对象，可以使ID或DOM或jQuery对象
 * @param type 事件类型
 * @param fn 事件处理函数
 * @param scope 函数上下文
 * @requires jQuery
 * @function
 */
mini_on = function (el, type, fn, scope) {
        el = mini.byId(el);
        scope = scope || el;
        if (!el || !type || !fn || !scope) return false
        var listener = mini.findListener(el, type, fn, scope);
        if (listener) return false;
        var method = mini.createDelegate(fn, scope);
        mini.listeners.push([el, type, fn, scope, method]);	//将所有绑定的时间放入listeners数组中
        if (isFirefox && type == 'mousewheel') type = 'DOMMouseScroll';
        jQuery(el).bind(type, method);
    };

/*
 * 为给定元素取消绑定事件处理函数
 * @exports mini_un as mini.un
 * @param el 目标对象，可以使ID或DOM或jQuery对象
 * @param type 事件类型
 * @param fn 事件处理函数
 * @param scope 函数上下文
 * @requires jQuery ， mini.findListener
 * @function
 */    
mini_un = function (el, type, fn, scope) {
        el = mini.byId(el);
        scope = scope || el;
        if (!el || !type || !fn || !scope) return false
        var listener = mini.findListener(el, type, fn, scope);
        if (!listener) return false;
        mini.listeners.remove(listener);
        if (isFirefox && type == 'mousewheel') type = 'DOMMouseScroll';
        jQuery(el).unbind(type, listener[4]);

    };
    
mini.copyTo(mini, {
    listeners: [], 
    on: mini_on,
    un: mini_un,
    /*
     * 根据给定的元素，给定事件类型，给定相应函数，给定上下文对象获取一个listener
 	 * @param el 目标对象，可以使ID或DOM或jQuery对象
     * @param type 事件类型
     * @param fn 事件处理函数
     * @param scope 函数上下文
     * @returns listerner 数组
     * @memberOf mini
     */
    findListener: function (el, type, fn, scope) {
        el = mini.byId(el);
        scope = scope || el;
        if (!el || !type || !fn || !scope) return false
        var listeners = mini.listeners;
        for (var i = 0, l = listeners.length; i < l; i++) {
            var listener = listeners[i];
            if (listener[0] == el
                && listener[1] == type
                && listener[2] == fn
                && listener[3] == scope
            ) {
                return listener;
            }
        }
    },
    
    /*
     * 根据给定的元素，给定事件类型删除所有相应事件
 	 * @param el 目标对象，可以使ID或DOM或jQuery对象
     * @param type 事件类型
     * @memberOf mini
     */
    clearEvent: function (el, type) {
        el = mini.byId(el);
        if (!el) return false;
        var listeners = mini.listeners;
        for (var i = listeners.length - 1; i >= 0; i--) {
            var listener = listeners[i];
            if (listener[0] == el) {
                if (!type || type == listener[1]) {
                    mini.un(el, listener[1], listener[2], listener[3]);
                }
            }
        }
        el.onmouseover = el.onmousedown = null; //为什么这里还要再写一遍呢？

    }
});


/*
 * 保存所有窗口改变大小的相应函数
 * @private
 */
mini.__windowResizes = [];
/*
 * 为窗口添加resize事件相应函数。
 * @param fn 相应函数
 * @param scope 相应函数的上下文
 */
mini.onWindowResize = function (fn, scope) {
    mini.__windowResizes.push([fn, scope]);
}

/*
 * 组件初始化回到函数缓冲区。
 * @private
 */
mini._BindCallbacks = [];

/*
 * 注册组件初始化回到函数
 * @private
 */
mini._BindEvents = function (fn, scope) {
    mini._BindCallbacks.push([fn, scope]);
    if (!mini._EventTimer) {

                mini._FireBindEvents();
    }
}

/*
 * 釋放初始化后綁定的所有回掉函數。
 * @private
 */
mini._FireBindEvents = function () {
    for (var i = 0, l = mini._BindCallbacks.length; i < l; i++) {
        var e = mini._BindCallbacks[i];
        e[0].call(e[1]);
    }
    mini._BindCallbacks = [];
    mini._EventTimer = null;
}

mini = mini || {};



/*
 * resize内延时执行函数的延时Id
 * @default null
 */
mini.doWindowResizeTimer = null;
/*
 * mini UI默认视图调整函数。
 * @private
 */
mini_onresize = function (e) {
    if (mini.doWindowResizeTimer) {
        clearTimeout(mini.doWindowResizeTimer);
    }
    mini.WindowVisible = mini.isWindowDisplay(); //判断此window是否显示

    if (mini.WindowVisible == false || mini.allowLayout == false) return;
    if (typeof Ext != "undefined") {
        mini.doWindowResizeTimer = setTimeout(function () {
            var __LastWindowWidth = document.documentElement.clientWidth;
            var __LastWindowHeight = document.documentElement.clientHeight;
            if (mini.__LastWindowWidth == __LastWindowWidth && mini.__LastWindowHeight == __LastWindowHeight) {
            } else {
                mini.__LastWindowWidth = __LastWindowWidth;
                mini.__LastWindowHeight = __LastWindowHeight;
                mini.layout(null, false);
            }
            mini.doWindowResizeTimer = null;
        }, 300);
    } else {
        var deferTime = 100;
        try {
            if (parent && parent != window && parent.mini) {
                deferTime = 0;
            }
        } catch (ex) {
        }
        mini.doWindowResizeTimer = setTimeout(function () {
            var __LastWindowWidth = document.documentElement.clientWidth;
            var __LastWindowHeight = document.documentElement.clientHeight;
            
            if (mini.__LastWindowWidth == __LastWindowWidth && mini.__LastWindowHeight == __LastWindowHeight) {
            } else {
                mini.__LastWindowWidth = __LastWindowWidth;
                mini.__LastWindowHeight = __LastWindowHeight;
                mini.layout(null, false);
            }
            mini.doWindowResizeTimer = null;
        }, deferTime);
    }
}

/*
 * 默认onload事件。这里有一个疑问，resize的添加方式有些跟之前的策略相驳。
 * @private
 */
mini_onload = function (e) {
    mini.layout(null, false);
    mini.on(window, "resize", mini_onresize);
    
}



/*
 * mini UI默認的析构处理
 * @private
 */
mini_unload = function (e) {
    try {
        var win = mini._getTopWindow();
        win[mini._WindowID] = '';
        delete win[mini._WindowID];
    } catch (ex) {

    }

    var iframes = document.body.getElementsByTagName("iframe");
    if (iframes.length > 0) {
        var IFrames = [];
        for (var i = 0, l = iframes.length; i < l; i++) {
            IFrames.push(iframes[i]);
        }
        for (var i = 0, l = IFrames.length; i < l; i++) {
            try {
                var iframe = IFrames[i];
                iframe._ondestroy = null;
                iframe.onload = function () { };
                jQuery(iframe).unbind("load");
                iframe.src = "";
                try {
                    iframe.contentWindow.document.write("");
                    iframe.contentWindow.document.close();
                } catch (ex) { }
                if (iframe.parentNode) iframe.parentNode.removeChild(iframe);
            } catch (e) { }
        }

    }

    var cs = mini.getComponents();
    for (var i = 0, l = cs.length; i < l; i++) {
        var control = cs[i];
        if (control.destroyed !== true) {
            control.destroy(false);
        }
    }


    cs.length = 0;
    cs = null;
   
    mini.un(window, "unload", mini_unload);
    mini.un(window, "load", mini_onload);
    mini.un(window, "resize", mini_onresize);
    mini.clearEvent(window);
    mini.clearEvent(document);

    mini.components = {};
    mini.classes = {};
    mini.uiClasses = {};
    mini.uids = {};

    mini._topWindow = null;
    window.Owner = null;
    window.CloseOwnerWindow = null;
    
    delete String.prototype.trim;
    delete String.prototype.escapeDateTimeTokens;
    delete String.format;
    
    delete Array.prototype.add;
    delete Array.prototype.enqueue;
    delete Array.prototype.getRange;
    delete Array.prototype.addRange;
    delete Array.prototype.clear;
    delete Array.prototype.clone;
    delete Array.prototype.contains;
    delete Array.prototype.indexOf;
    delete Array.prototype.dequeue;
    delete Array.prototype.insert;
    delete Array.prototype.insertRange;
    delete Array.prototype.remove;
    delete Array.prototype.removeAt;
    delete Array.prototype.removeRange;
    
    delete Date.prototype.getHalfYear;
    delete Date.prototype.getQuarter;
    
    try {
        CollectGarbage();
    } catch (e) { }
}




function __OnIFrameMouseDown() {
    jQuery(document).trigger("mousedown");  
}

/*
 * 为所有的iframe绑定一个统一的onmousedown事件相应函数。
 * @private
 */
function __BindIFrames() {
    var iframes = document.getElementsByTagName("iframe");
    for (var i = 0, l = iframes.length; i < l; i++) {
        var iframe = iframes[i];        
        
        try {
            if (iframe.contentWindow ) {
                var doc = iframe.contentWindow.document;
                jQuery(doc).bind("mousedown", __OnIFrameMouseDown);
            }
        } catch (e) { }
        
    }
}




mini = mini || {};

mini.Drag = function (options) {
    mini.copyTo(this, options);
};

mini.Drag.prototype = {
    onStart: mini.emptyFn,
    onMove: mini.emptyFn,
    onStop: mini.emptyFn,
    capture: false,
    fps: 20,
    event: null,
    delay: 80,
    destroy: function (removeEl) {
        mini.clearEvent(document);
        delete this.trigger;
        
        if (this.context) {
            mini.clearEvent(this.context);
            this.context.parentNode.removeChild(this.context);
            this.context = null;
        }
    },
    start: function (e) {

        e.preventDefault();
        if (e) this.event = e;

        this.now = this.init = [this.event.pageX, this.event.pageY];  
        var bd = document;
        mini.on(bd, 'mousemove', this.move, this);
        mini.on(bd, 'mouseup', this.stop, this);
        mini.on(bd, 'contextmenu', this.contextmenu, this);
        if (this.context) mini.on(this.context, 'contextmenu', this.contextmenu, this);

        this.trigger = e.target; 
        mini.selectable(this.trigger, false);
        mini.selectable(bd.body, false);

        if (this.capture) {
            if (isIE) this.trigger.setCapture(true);
            else if (document.captureEvents) document.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP | Event.MOUSEDOWN);
        }
        this.started = false;
        
        this.startTime = new Date();
    },
    contextmenu: function (e) {
        if (this.context) mini.un(this.context, 'contextmenu', this.contextmenu, this);
        mini.un(document, 'contextmenu', this.contextmenu, this);
        e.preventDefault();
        e.stopPropagation();
    },
    move: function (e) {
        if (this.delay) { 
            if (new Date() - this.startTime < this.delay) return;
        }

        
        if (!this.started) {
            this.started = true;
            this.onStart(this);             
        }

        var sf = this;

        if (!this.timer) {
            this.timer = setTimeout(function () {
                sf.now = [e.pageX, e.pageY]
                sf.event = e;
                sf.onMove(sf);
                sf.timer = null;


            }, 5);
        }

    },
    stop: function (e) {
        
        this.now = [e.pageX, e.pageY]
        this.event = e;

        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
        var bd = document;

        mini.selectable(this.trigger, true);
        mini.selectable(bd.body, true);
        if (isIE) {
            this.trigger.setCapture(false);
            this.trigger.releaseCapture();
        }

        var success = mini.MouseButton.Right != e.button;
        if (success == false) {
            e.preventDefault();

        }
        
        mini.un(bd, 'mousemove', this.move, this);
        mini.un(bd, 'mouseup', this.stop, this);
        var sf = this;
        setTimeout(function () {
            mini.un(document, 'contextmenu', sf.contextmenu, sf);
            if (sf.context) mini.un(sf.context, 'contextmenu', sf.contextmenu, sf);
        }, 1);

        
        if (this.started) {

            sf.onStop(sf, success);

        }

    }
};

mini = mini || {};

/*
 * 根据给定地址加载JS文件。
 * @param src js文件url地址
 * @param callback js文件加载成功后的回调函数
 */
mini.loadJS = function (src, callback) {
    if (!src) return;
    if (typeof callback == "function") {
        return loadJS._async(src, callback);
    } else {
        return loadJS._sync(src);
    }
}


mini.loadJS._js = {};

/*
 * 针对需要执行回调的方法的同步文件加载方法
 * @param src js文件url地址
 * @param callback js文件加载成功后的回调函数
 * @private
 */
mini.loadJS._async = function (src, callback) {
    var state = mini.loadJS._js[src];
    if (!state) {
        state = mini.loadJS._js[src] = { create: false, loaded: false, callbacks: [] };
    }
    if (state.loaded) {
        setTimeout(function () {
            callback();
        }, 1);
        return;
    } else {
        state.callbacks.push(callback);
        if (state.create) return;
    }

    state.create = true;

    var head = document.getElementsByTagName('head')[0];
    var js = document.createElement('script');
    js.src = src;
    js.type = 'text/javascript';

    function doCallback() {
        for (var i = 0; i < state.callbacks.length; i++) {
            var fn = state.callbacks[i];
            if (fn) fn();
        }
        state.callbacks.length = 0;
    }

    setTimeout(function () {
        if (document.all) {

            js.onreadystatechange = function () {
                if (js.readyState == 'loaded' || js.readyState == 'complete') {
                    doCallback();
                    state.loaded = true;
                }
            }
        } else {

            js.onload = function () {
                doCallback();
                state.loaded = true;
            }
        }
        head.appendChild(js);
    }, 1);
    return js;
}

/*
 * 针对需要执行回调的方法的异步文件加载方法
 * @param src js文件url地址
 * @private
 */
mini.loadJS._sync = function (src) {
    if (loadJS._js[src]) return;
    loadJS._js[src] = { create: true, loaded: true, callbacks: [] };

    var head = document.getElementsByTagName('head')[0];
    var js = document.createElement('script');
    js.type = 'text/javascript';
    js.text = loadText(src);
    head.appendChild(js);
    return js;
}

/*
 * 获取给定远程地址的文本
 * @param url 地址
 * @returns 文本字符串
 */
mini.loadText = function (url) {
    var text = "";
    var isLocal = document.all && location.protocol == "file:";


    var xmlhttp = null;
    if (isLocal) {
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    } else {
        if (window.XMLHttpRequest) {        
            xmlhttp = new XMLHttpRequest();
        }
        else if (window.ActiveXObject) {    
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }
    }


    xmlhttp.onreadystatechange = state_Change;

    var d = '_t=' + new Date().getTime();
    if (url.indexOf("?") == -1) d = "?" + d;
    else d = "&" + d;
    url += d;

    xmlhttp.open("GET", url, false);
    xmlhttp.send(null);

    function state_Change() {
        if (xmlhttp.readyState == 4) {
            var statusCode = isLocal ? 0 : 200;
            if (xmlhttp.status == statusCode) {
                text = xmlhttp.responseText;
            }
            else {
                
            }
        }
    }
    return text;
}

/*
 * 获取指定远程地址的JSON数据
 * @param url 地址
 * @returns JSON对象
 */
mini.loadJSON = function (url) {
    var text = loadText(url);
    var o = eval("(" + text + ")");
    return o;
}

/*
 * 异步加载css文件方法
 * @param url 地址
 * @param id 为link元素设置Id属性值
 * @returns link元素DOM对象
 */
mini.loadCSS = function (src, id) {
    if (!src) return;
    if (loadCSS._css[src]) return;
    var head = document.getElementsByTagName('head')[0];
    var link = document.createElement('link');
    if (id) link.id = id;
    link.href = src;
    link.rel = 'stylesheet';
    link.type = 'text/css';
    head.appendChild(link);
    return link;
}
mini.loadCSS._css = {};

/*
 * innerHTML解决普通innerHTML的bug.
 * @param el 元素ID或DOM对象
 * @param html 待添加内容
 */
mini.innerHTML = function (el, html) {
    if (typeof el == 'string') el = document.getElementById(el);
    if (!el) return;
    html = '<div style="display:none">&nbsp;</div>' + html;
    el.innerHTML = html;
    mini.__executeScripts(el);
    var d = el.firstChild;	//不理解的最后一句。
}

/*
 * 解析script
 * @private
 */
mini.__executeScripts = function (d) {
    var scripts = d.getElementsByTagName("script")
    for (var i = 0, l = scripts.length; i < l; i++) {
        var sc = scripts[i];
        var src = sc.src;
        if (src) {
            mini.loadJS(src);
        } else {
            var ns = document.createElement('script');
            ns.type = "text/javascript";
            ns.text = sc.text;
            d.appendChild(ns);
        }
    }
    for (var i = scripts.length - 1; i >= 0; i--) {
        var sc = scripts[i];
        sc.parentNode.removeChild(sc);
    }
}

mini = mini || {};


mini._MaskID = 1;

mini._MaskObjects = {};

mini.mask = function (options) {
    
    var el = mini.byId(options);
    if (mini.isElement(el)) options = { el: el };
    else if (typeof options == "string") options = { html: options };

    options = mini.copyTo({
        html: "",
        cls: "",
        style: "",
        iconCls:"",
        message:"",
        backStyle: "background:#ccc"
    }, options);
    options.el = mini.byId(options.el);
    if (!options.el) options.el = document.body;
    var el = options.el;

    mini["unmask"](options.el);
    el._maskid = mini._MaskID++;
    mini._MaskObjects[el._maskid] = options;
    var icon = '<div class="' + options.iconCls + '"></div>';
    var s = '<table class="mini-messagebox-table"  cellspacing="0" cellpadding="0"><tr><td>'
        + icon + '</td><td  class="mini-messagebox-content-text">'
        + (options.html || options.message || "") + '</td></tr></table>';


    var maskEl = mini.append(el, '<div class="mini-mask">' +
        '<div class="mini-mask-background" style="' + options.backStyle + '"></div>' +
                        '<div class="mini-mask-msg ' + options.cls + '" style="' + options.style + '">' + s + '</div>'
        + '</div>');
    if (el == document.body) mini.addClass(maskEl, 'mini-fixed');

    options.maskEl = maskEl;
    if (!mini.isNull(options.opacity)) {
        mini.setOpacity(maskEl.firstChild, options.opacity);
    }

    function center() {
        msgEl.style.display = "block";
        var size = mini.getSize(msgEl);
        msgEl.style.marginLeft = -size.width / 2 + "px";
        msgEl.style.marginTop = -size.height / 2 + "px";
    }
    var msgEl = maskEl.lastChild;
    msgEl.style.display = "none";
    
    setTimeout(function () {
        center();
    }, 0);
}

/*
 * 取消遮罩层
 * @param el 要取消那个元素上的遮罩层。
 */
mini["unmask"] = function (el) {
    el = mini.byId(el);
    if (!el) el = document.body;
    var options = mini._MaskObjects[el._maskid];
    if (!options) return;
    delete mini._MaskObjects[el._maskid];    
    var maskEl = options.maskEl;
    options.maskEl = null;
    if (maskEl && maskEl.parentNode) {
        maskEl.parentNode.removeChild(maskEl);
    }
}

mini = mini || {};

mini._Columns = {};

mini._getColumn = function (columnType) {
	var columnFn = mini._Columns[columnType.toLowerCase()];
	if (!columnFn)
		return {};
	return columnFn();
}
/*
 * 用参数替换默认设置，并返回这个对象。
 */
mini.IndexColumn = function (config) {
    return mini.copyTo({width: 30, cellCls: "", align: "center", draggable: false, allowDrag: true,
        init: function (grid) {
			grid.on("addrow", this.__OnIndexChanged, this);
			grid.on("removerow", this.__OnIndexChanged, this);
			grid.on("moverow", this.__OnIndexChanged, this);

			if (grid.isTree) {
				grid.on("loadnode", this.__OnIndexChanged, this);
				this._gridUID = grid.uid;
				this._rowIdField = "_id";
			}
		},
		getNumberId: function (record) {
			return this._gridUID + "$number$" + record[this._rowIdField];
		},
		createNumber: function (grid, rowIndex) {
			if (mini.isNull(grid.pageIndex)) {
				return rowIndex + 1;
			} else
				return (grid.pageIndex * grid.pageSize) + rowIndex + 1;
		},
		renderer: function (e) {
			var grid = e.sender;
			if (this.draggable) {
				if (!e.cellStyle)
					e.cellStyle = "";
				e.cellStyle += ";cursor:move;";
			}
			var s = '<div id="' + this.getNumberId(e.record) + '">';
			if (mini.isNull(grid.pager.pageIndex))
				s += e.rowIndex + 1;
			else
				s += (grid.pager.pageIndex * grid.pager.pageSize) + e.rowIndex + 1;
			s += '</div>';
			return s;
		},
		__OnIndexChanged: function (e) {
			var grid = e.sender;

			var records = grid.toArray();

			for (var i = 0, l = records.length; i < l; i++) {
				var record = records[i];
				var id = this.getNumberId(record);
				var ck = document.getElementById(id);
				if (ck)
					ck.innerHTML = this.createNumber(grid, i);
			}

		}
	}, config);
}
mini._Columns["indexcolumn"] = mini.IndexColumn;
mini.CheckColumn = function (config) {
	return mini.copyTo({
		width: 30,
		cellCls: "mini-checkcolumn",
		headerCls: "mini-checkcolumn",
		_multiRowSelect: true,
		header: function (column) {

			var id = this.uid + "checkall";
			var s = '<input type="checkbox" id="' + id + '" />';
			if (this.multiSelect == false)
				s = "";
			return s;
		},
		getCheckId: function (record) {
			return this._gridUID + "$checkcolumn$" + record[this._rowIdField];
		},
		init: function (grid) {
			grid.on("selectionchanged", this.__OnSelectionChanged, this);
			grid.on("HeaderCellClick", this.__OnHeaderCellClick, this);
		},
		renderer: function (e) {
			var id = this.getCheckId(e.record);
			var selected = e.sender.isSelected ? e.sender.isSelected(e.record) : false;

			var type = "checkbox";

			var grid = e.sender;
			if (grid.multiSelect == false)
				type = "radio";

			return '<input type="' + type + '" id="' + id + '" ' + (selected ? "checked" : "") + ' hidefocus style="outline:none;" onclick="return false"/>';
		},
		__OnHeaderCellClick: function (e) {
		    var grid = e.sender;
		    if (e.column != this) return;

			var id = grid.uid + "checkall";
			var ck = document.getElementById(id);
			if (ck && e.htmlEvent.target.id == id) {
			    if (grid.getMultiSelect()) {
					if (ck.checked) {
						grid.selectAll();
					} else {
						grid.deselectAll();
					}
				} else {
					grid.deselectAll();
					if (ck.checked) {
						grid.select(0);
					}
				}
				grid.fire("checkall");
			}
		},
		__OnSelectionChanged: function (e) {
			var grid = e.sender;
			var records = grid.toArray();

			for (var i = 0, l = records.length; i < l; i++) {
				var record = records[i];
				var select = grid.isSelected(record);
				var id = grid.uid + "$checkcolumn$" + record[grid._rowIdField];
				var ck = document.getElementById(id);

				if (ck)
					ck.checked = select;
			}
            /* 和官方同步，下面的checkbox改变后不影响checkall按钮 pzf 2014-09*/
            /*
			var me = this;
			if (!this._timer) {
				this._timer = setTimeout( function () {
					me._doCheckState(grid);
					me._timer = null;
				}, 10);
			}
             */
		},
		_doCheckState: function (grid) {
            var data = grid.getData();
            if(data.length == 0){
                return;
            }
            
			var id = grid.uid + "checkall";
			var ck = document.getElementById(id);
			if (ck && grid._getSelectAllCheckState) {
				var state = grid._getSelectAllCheckState();
				if (state == "has") {
					ck.indeterminate = true;
					ck.checked = true;
				} else {
					ck.indeterminate = false;
					ck.checked = state;
				}
			}
		}
	}, config);
};
mini._Columns["checkcolumn"] = mini.CheckColumn;

mini.ExpandColumn = function (config) {
	return mini.copyTo({
		width: 30,
		cellCls: "",
		align: "center",
		draggable: false,
		cellStyle: "padding:0",
		renderer: function (e) {
			return '<a class="mini-grid-ecIcon" href="javascript:#" onclick="return false"></a>';
		},
		init: function (grid) {
			grid.on("cellclick", this.__OnCellClick, this);
		},
		__OnCellClick: function (e) {
			var grid = e.sender;
			if (e.column == this && grid.isShowRowDetail) {
				if (mini.findParent(e.htmlEvent.target, "mini-grid-ecIcon")) {
					var isShow = grid.isShowRowDetail(e.record);
					if (grid.autoHideRowDetail) {
						grid.hideAllRowDetail();
					}

					if (isShow) {
						grid.hideRowDetail(e.record);
					} else {
						grid.showRowDetail(e.record);
					}
				}
			}
		}
	}, config);
}
mini._Columns["expandcolumn"] = mini.ExpandColumn;

mini.CheckBoxColumn = function (config) {
	return mini.copyTo({
		_type: "checkboxcolumn",
		header: "#",
		headerAlign: "center",
		cellCls: "mini-checkcolumn",
		trueValue: true,
		falseValue: false,
		readOnly: false,
		getCheckId: function (record) {
			return this._gridUID + "$checkbox$" + record[this._rowIdField];
		},
		getCheckBoxEl: function (record) {
		    return document.getElementById(this.getCheckId(record));
		},
		renderer: function (e) {
		    var id = this.getCheckId(e.record);
		    var v = mini._getMap(e.field, e.record);
		    var checked = v == this.trueValue ? true : false;
		    var type = "checkbox";
			return '<input type="' + type + '" id="' + id + '" ' + (checked ? "checked" : "") + ' hidefocus style="outline:none;" onclick="return false;"/>';
		},
		init: function (grid) {
		    this.grid = grid;
		    function oneditchange(e) {

		        if (grid.isReadOnly() || this.readOnly) return;
		        e.value = mini._getMap(e.field, e.record);
		        grid.fire("cellbeginedit", e);

		        if (e.cancel !== true) {




		            var v = mini._getMap(e.column.field, e.record);
		            var value = v == this.trueValue ? this.falseValue : this.trueValue;
		            if (grid._OnCellCommitEdit) {
		                grid._OnCellCommitEdit(e.record, e.column, value);






		            }
		        }
		    }
		    function onEdit(e) {

		        if (e.column == this) {

		            var id = this.getCheckId(e.record);
		            var ck = e.htmlEvent.target;
		            if (ck.id == id) {
		                if (grid.allowCellEdit) {
		                    e.cancel = false;
		                    oneditchange.call(this, e);
		                } else {
		                    if (grid.isEditingRow && grid.isEditingRow(e.record)) {
		                        setTimeout(function () {
		                            ck.checked = !ck.checked;
		                        }, 1);
		                    }
		                }
		            }
		        }
		    }
		    grid.on("cellclick", onEdit, this);
		    mini.on(this.grid.el, "keydown", function (e) {
		        if (e.keyCode == 32 && grid.allowCellEdit) {
		            var currentCell = grid.getCurrentCell();
		            if (!currentCell) return;
		            var ex = { record: currentCell[0], column: currentCell[1] };

		            oneditchange.call(this, ex);
		            e.preventDefault();
		        }
		    }, this);


		    var tv = parseInt(this.trueValue), fv = parseInt(this.falseValue);
		    if (!isNaN(tv)) this.trueValue = tv;
		    if (!isNaN(fv)) this.falseValue = fv;
		}
	}, config);

};
mini._Columns["checkboxcolumn"] = mini.CheckBoxColumn;

mini.ComboBoxColumn = function (config) {
    return mini.copyTo(
        {
            renderer: function (e) {
                var value = !mini.isNull(e.value) ? String(e.value) : "";
                var values = value.split(",");

                var valueField = "id", textField = "text";
                var valueMaps = {};

                var editor = e.column.editor;
                if (editor && editor.type == "combobox") {
                    var combo = this.__editor;
                    if (!combo) {

                        if (mini.isControl(editor)) {
                            combo = editor;
                        } else {
                            editor = mini.clone(editor);
                            combo = mini.create(editor);
                        }
                        this.__editor = combo;
                    }

                    valueField = combo.getValueField();
                    textField = combo.getTextField();
                        valueMaps = {};
                        var data = combo.getData();
                        for (var i = 0, l = data.length; i < l; i++) {
                            var o = data[i];
                            valueMaps[o[valueField]] = o;
                        }
                        this._valueMaps = valueMaps;
                }

                var texts = [];
                for (var i = 0, l = values.length; i < l; i++) {
                    var id = values[i];
                    var o = valueMaps[id];
                    if (o) {
                        var text = o[textField];
                        if (text === null || text === undefined) {
                            text = "";
                        }
                        texts.push(text);
                    }
                }
                return texts.join(',');
            }
        }, config);
};
mini._Columns["comboboxcolumn"] = mini.ComboBoxColumn;


mini.RadioButtonColumn = function (config) {
    return mini.copyTo({
        _type: "radiobuttoncolumn",
        header: "", headerAlign: "center", cellCls: "mini-checkcolumn", trueValue: true, falseValue: false,
        readOnly: false,
        getCheckId: function (record) {
            return this._gridUID + "$radio$" + record[this._rowIdField];
        },
        getCheckBoxEl: function (record) {
            return document.getElementById(this.getCheckId(record));
        },
        renderer: function (e) {
            var grid = e.sender;
            var id = this.getCheckId(e.record);
            var v = mini._getMap(e.field, e.record);
            var checked = v == this.trueValue ? true : false;
            var type = "radio";
            var name = grid._id + e.column.field;

            var disabled = '';



            var s = '<div style="position:relative;">';
            s += '<input name="' + name + '" type="' + type + '" id="' + id + '" ' + (checked ? "checked" : "") + ' hidefocus style="outline:none;" onclick="return false;" style="position:relative;z-index:1;"/>';
            if (!grid.allowCellEdit) {
                if (!grid.isEditingRow(e.record)) {
                    s += '<div class="mini-grid-radio-mask"></div>';
                }
            }
            s += '</div>';
            return s;
        },




        init: function (grid) {
            this.grid = grid;

            function oneditchange(e) {
                if (grid.isReadOnly() || this.readOnly) return;
                e.value = mini._getMap(e.field, e.record);
                grid.fire("cellbeginedit", e);

                if (e.cancel !== true) {
                    var v = mini._getMap(e.column.field, e.record);
                    if (v == this.trueValue) return;
                    var value = v == this.trueValue ? this.falseValue : this.trueValue;
                    var data = grid.data;

                    for (var i = 0, l = data.length; i < l; i++) {
                        var row = data[i];
                        if (row == e.record) continue;
                        var v = mini._getMap(e.column.field, row);
                        if (v != this.falseValue) {

                            grid.updateRow(row, e.column.field, this.falseValue);
                        }
                    }

                    if (grid._OnCellCommitEdit) {
                        grid._OnCellCommitEdit(e.record, e.column, value);
                    }
                }
            }
            function onEdit(e) {
                if (e.column == this) {
                    var id = this.getCheckId(e.record);
                    var ck = e.htmlEvent.target;
                    if (ck.id == id) {
                        if (grid.allowCellEdit) {
                            e.cancel = false;
                            oneditchange.call(this, e);
                        } else {
                            if (grid.isEditingRow && grid.isEditingRow(e.record)) {
                                var that = this;
                                setTimeout(function () {
                                    ck.checked = true;


                                    var data = grid.getData();
                                    for (var i = 0, l = data.length; i < l; i++) {
                                        var row = data[i];
                                        if (row == e.record) continue;
                                        var field = e.column.field;
                                        var v = mini._getMap(field, row);
                                        if (v != that.falseValue) {
                                            if (row != e.record) {
                                                if (grid._dataSource) {
                                                    mini._setMap(e.column.field, that.falseValue, row);
                                                    grid._dataSource._setModified(row, field, v);
                                                } else {
                                                    var o = {};
                                                    mini._setMap(field, that.falseValue, o);
                                                    grid._doUpdateRow(row, o);
                                                }
                                            }
                                        }
                                    }


                                }, 1);
                            }
                        }
                    }
                }
            }
            grid.on("cellclick", onEdit, this);

            mini.on(this.grid.el, "keydown", function (e) {
                if (e.keyCode == 32 && grid.allowCellEdit) {
                    var currentCell = grid.getCurrentCell();
                    if (!currentCell) return;
                    if (currentCell[1] != this) return;
                    var ex = { record: currentCell[0], column: currentCell[1] };
                    ex.field = ex.column.field;
                    oneditchange.call(this, ex);
                    e.preventDefault();
                }
            }, this);


            var tv = parseInt(this.trueValue), fv = parseInt(this.falseValue);
            if (!isNaN(tv)) this.trueValue = tv;
            if (!isNaN(fv)) this.falseValue = fv;
        }
    }, config);
};
mini._Columns["radiobuttoncolumn"] = mini.RadioButtonColumn;




mini = mini || {};

/*
 * 负责HTML解析，创建组件，并将组件与HTML进行绑定。
 * @param el 解析限定区域
 */
mini._firstParse = true;
mini.parse = function (el) {
    if (mini._firstParse) {

        mini._firstParse = false;

        var _doms = document.getElementsByTagName("iframe");
        var doms = [];
        for (var i = 0, l = _doms.length; i < l; i++) {
            var d = _doms[i];
            doms.push(d);
        }

        for (var i = 0, l = doms.length; i < l; i++) {
            var d = doms[i];
            var src = $(d).attr("src");
            if (!src) continue;

            d.loaded = false;

            d._onload = d.onload;
            d._src = src;
            d.onload = function () { };
            d.src = "";

        }
        setTimeout(function () {

            for (var i = 0, l = doms.length; i < l; i++) {
                var d = doms[i];

                if (d._src && $(d).attr("src") == "") {
                    d.loaded = true;
                    d.onload = d._onload;
                    d.src = d._src;
                    d._src = d._onload = null;

                }
            }
        }, 20);

    }
    if (typeof el == "string") {
        var id = el;
        el = mini.byId(id);				//通过ID选择DOM对象
        if (!el) el = document.body; 	//如果给定ID没有匹配的DOM对象，则默认元素设置为BODY。
    }
    
    if (el && !mini.isElement(el))	 	//对象el如果不是DOM！
    	el = el.el;
    if (!el) 							//保底的做法。
    	el = document.body;

    var visible = mini.WindowVisible;	//是否显示。
    if (isIE) {							//如果是IE则设置不显示
        mini.WindowVisible = false;
    }

    mini._doParse(el);
  
    mini.WindowVisible = visible;		//晚上后再设置回原状态。

    mini.layout(el);
}

/*
 * 通常参数的是body， mini的解析策略是从body逐层解析。
 * @private
 */
mini._doParse = function (el) {
    if (!el) return;
    var nodeName = el.nodeName.toLowerCase();
    if (!nodeName) return;		//非标签。可能是document/window之流。
    
    var className = el.className;	//获取组件声明信息。
    if (className && className.split) {
        var control = mini.get(el);	//获取DOM对象绑定的组件。
        if (!control) {
            var classes = className.split(" ");
            for (var i = 0, l = classes.length; i < l; i++) {
                var cls = classes[i];
                var clazz = mini.getClassByUICls(cls);
                if (clazz) {
                    mini.removeClass(el, cls);
                    var ui = new clazz();	//创建组件
                    ui._allowLayout = false;
                    ui = mini.applyTo.call(ui, el);	//组件绑定，生成HTML結構
                    el = ui.el;	
                    ui._allowLayout = true;
                    break;
                }
            }
        }
    }

    if (nodeName == "select"
            || mini.hasClass(el, "mini-menu")
            || mini.hasClass(el, "mini-datagrid")
            || mini.hasClass(el, "mini-treegrid")
            || mini.hasClass(el, "mini-tree")
            || mini.hasClass(el, "mini-button")
            || mini.hasClass(el, "mini-textbox")
            || mini.hasClass(el, "mini-buttonedit")
        ) {
        return;
    }

    var children = mini.getChildNodes(el, true);
    for (var i = 0, l = children.length; i < l; i++) {
        var node = children[i];
        if (node.nodeType == 1) {   //元素element 剔除文本元素之类的其他元素。
            if (node.parentNode == el) {		//随处可见的保底啊
                mini._doParse(node);
            }
        }
    }
}
/*
 * @fileOverview 本文件是mini UI框架的执行入口。当DOM准备完整之后自动开始执行mini UI 的解析工作。
 * @requires jQuery , mini.js, ua.js , Event.js, parse.js
 */
jQuery(function () {
	if(!mini_autoRun) return;
    mini.run();
});

mini. run = function(){
    mini.isReady = true;	//这里的ready指mini的资源已经准备完成。
    mini.parse();			//执行解析HTML，创建组件，将组件与HTML标签绑定。
    mini._FireBindEvents();	//各个组件注册的初始化回调函数，这个方法在组件内部。

    if ((mini.getStyle(document.body, "overflow") == "hidden" || mini.getStyle(document.documentElement, "overflow") == "hidden")
        && (isIE6 || isIE7)) {

        jQuery(document.body).css("overflow", "visible");
        jQuery(document.documentElement).css("overflow", "visible");
    }
    mini.__LastWindowWidth = document.documentElement.clientWidth;
    mini.__LastWindowHeight = document.documentElement.clientHeight;
    if(mini_autoRun)
        mini.on(window, "load", mini_onload);
    else
        mini_onload(null);
    mini.on(window, "resize", function (e) {
        var events = mini.__windowResizes;
        for (var i = 0, l = events.length; i < l; i++) {
            var event = events[i];
            event[0].call(event[1], e);
        }
    });
    mini.on(window, "unload", mini_unload);
    
    /*
    setInterval(function () {
        __BindIFrames();
    }, 1500);
    */
    if (isIE) {
        setInterval(function () {
            CollectGarbage();
        }, 1000);
    }
}



mini = mini || {};

/*
 * 根据给定验证规则验证元素值是否符合条件
 * @param vtype 验证类型名字符串
 * @param value 实际值
 * @param e 待验证元素
 * @param scope 验证规则集合对象 非必须
 * @function
 * @private
 */
mini._ValidateVType = function (vtype, value, e, scope) {
    var vtypes = vtype.split(";");
    for (var i = 0, l = vtypes.length; i < l; i++) {
        var vtype = vtypes[i].trim();
        var vv = vtype.split(":");
        var vt = vv[0];
        var args = vv[1];
        if (args) args = args.split(",");
        else args = [];
        var fn = mini.VTypes[vt];
        if (fn) {
            var isValid = fn(value, args);
            if (isValid !== true) {
                e.isValid = false;
                var vtext = vv[0] + "ErrorText";
                e.errorText = scope[vtext] || mini.VTypes[vtext] || "";
                e.errorText = String.format(e.errorText, args[0], args[1], args[2], args[3], args[4]);
                break;
            }
        }
    }
}

/*
 * 根据给定参数获取验证错误提示信息。
 * @param obj DOM对象
 * @param field 验证类型名
 * @private
 */
mini._getErrorText = function (obj, field) {
    if (obj && obj[field]) {
        return obj[field];
    } else {
        return mini.VTypes[field]
    }

}

/*
 * @namespace mini.VTypes 验证方法和提示信息。
 */
mini.VTypes = {
    uniqueErrorText: "不能重复.",
    requiredErrorText: "不能为空.",
    emailErrorText: "请输入邮件格式.",
    urlErrorText: "请输入URL格式.",
    floatErrorText: "请输入数字.",
    intErrorText: "请输入整数.",
    dateErrorText: "请输入日期格式 {0}.",
    maxLengthErrorText: "不能超过 {0} 个字符.",
    minLengthErrorText: "不能少于 {0} 个字符.",
    maxErrorText: "数字不能大于 {0}.",
    minErrorText: "数字不能小于 {0}.",
    rangeLengthErrorText: "字符长度必须在 {0} 到 {1} 之间.",
    rangeCharErrorText: "字符数必须在 {0} 到 {1} 之间.",
    rangeErrorText: "数字必须在 {0} 到 {1} 之间.",
    rangeDecimalsErrorText:"请保留小数点后 {0} 位小数.",
    moneyErrorText: "金额格式应为9,999,999.00.",
    /*
	 * 不能为空
	 * @param v 待验证值
	 * @param args 其他参数
	 * @returns {Boolean}
	 */
    required: function (v, args) {
        if (mini.isNull(v) || v === "") return false;
        return true;
    },
    /*
	 * 正确的Email格式字符串
	 * @param v 待验证值
	 * @param args 其他参数
	 * @returns {Boolean}
	 */
    email: function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        if (v.search(/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/) != -1)
            return true;
        else
            return false;
    },
    /*
	 * 正确的URL格式字符串
	 * @param v 待验证值
	 * @param args 其他参数
	 * @returns {Boolean}
	 */
    url: function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        function IsURL(str_url) {
            str_url = str_url.toLowerCase();

            var strRegex = "^((https|http|ftp|rtsp|mms)?:\/\/)"
                        + "?(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?"
                        + "(([0-9]{1,3}\.){3}[0-9]{1,3}"
                        + "|"
                        + "([0-9a-z_!~*'()-]+\.)*"
                        + "([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]\."
                        + "[a-z]{2,6})"
                        + "(:[0-9]{1,4})?"
                        + "((/?)|"
                        + "(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$";
            var re = new RegExp(strRegex);

            if (re.test(str_url)) {
                return (true);
            } else {
                return (false);
            }
        }
        return IsURL(v);
    },
    /*
	 * 整数值
	 * @param v 待验证值
	 * @param args 其他参数
	 * @returns {Boolean}
	 */
    "int": function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        function isInteger(s) {
            if (s < 0) {
                s = -s;
            }
            var n = String(s);
            return n.length > 0 && !(/[^0-9]/).test(n);
        }
        return isInteger(v);

    },
    /*
	 * 浮点数值
	 * @param v 待验证值
	 * @param args 其他参数
	 * @returns {Boolean}
	 */
    "float": function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        function isFloat(s) {
            if (s < 0) {
                s = -s;
            }
            var n = String(s);
            var patrn=/^([-]?)([1-9]\d*(\.\d+){0,1})$|^0(\.\d+){0,1}$/;
            return n.length > 0 && patrn.test(n);
        }
        return isFloat(v);

    },
    /*
	 * 正确的日期格式
	 * @param v 待验证值
	 * @param args 其他参数
	 * @returns {Boolean}
	 */
    "date": function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        if (!v) return false;
        var d = null;
        var format = args[0];

        if (format) {
            d = mini.parseDate(v, format);
            if (d && d.getFullYear) {
                if (mini.formatDate(d, format) == v) return true;
            }
        } else {
            d = mini.parseDate(v, "yyyy-MM-dd");
            if (!d) d = mini.parseDate(v, "yyyy/MM/dd");
            if (!d) d = mini.parseDate(v, "MM/dd/yyyy");
            if (d && d.getFullYear) return true;
        }

        return false;
    },
    /*
	 * 值的最大长度验证
	 * @param v 待验证值
	 * @param args 其他参数
	 * @returns {Boolean}
	 */
    maxLength: function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        var n = parseInt(args);
        if (!v || isNaN(n)) return true;
        if (v.length <= n) return true;
        else return false;
    },
    /*
	 * 值的最小长度验证
	 * @param v 待验证值
	 * @param args 其他参数
	 * @returns {Boolean}
	 */
    minLength: function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        var n = parseInt(args);
        if (isNaN(n)) return true;
        if (v.length >= n) return true;
        else return false;
    },
    /*
	 * 在某个区间长度的验证
	 * @param v 待验证值
	 * @param args 其他参数
	 * @returns {Boolean}
	 */
    rangeLength: function (v, args) {
        if (mini.isNull(v) || v === "") return true;
        if (!v) return false;
        var min = parseFloat(args[0]), max = parseFloat(args[1]);
        if (isNaN(min) || isNaN(max)) return true;
        if (min <= v.length && v.length <= max) return true;
        return false;
    },
    /*
    * 在某个区间的字符数个数验证
    * @param v 待验证值
    * @param args 其他参数
    * @returns {Boolean}
    */
    rangeChar: function (v, args) {
        if (mini.isNull(v) || v === "") return true;

        var min = parseFloat(args[0]), max = parseFloat(args[1]);
        if (isNaN(min) || isNaN(max)) return true;
        function isChinese(v) {
            var reg = /[^\x00-\xff]/ig;
            if (v.match(reg) != null) return true;
            return false;
        }

        var len = 0;
        var ss = String(v).split("");
        for (var i = 0, l = ss.length; i < l; i++) {
            if (isChinese(ss[i])) {
                len += 2;
            } else {
                len += 1;
            }
        }

        if (min <= len && len <= max) return true;
        return false;
    },
    /*
    * 在某个区间的数字范围验证
    * @param v 待验证值
    * @param args 其他参数
    * @returns {Boolean}
    */
    range: function (v, args) {
        if (mini.VTypes["float"](v, args) == false) return false;

        if (mini.isNull(v) || v === "") return true;
        v = parseFloat(v);
        if (isNaN(v)) return false;
        var min = parseFloat(args[0]), max = parseFloat(args[1]);
        if (isNaN(min) || isNaN(max)) return true;
        if (min <= v && v <= max) return true;
        return false;
    },

    rangeDecimals:function(v,args){
        if (mini.isNull(v) || v === "") return true;
        if(v.indexOf(".")==-1) return true;
        var n = parseInt(args);
        if (isNaN(n)) return true;
        var reg = new RegExp("^-?0\\.\\d{1,"+n+"}$|^-?[1-9]\\d*\\.\\d{1,"+n+"}$");
        if (v.match(reg) != null) return true;
        return false;
    },
    money:function(v,args){
        if (mini.isNull(v) || v === "") return true;
        var reg;
        reg = /^[\d|\,\.]*$/;
        if (!reg.test(v)) return false;
        var n = parseInt(args);
        if (isNaN(n))
            reg = "^-?([1-9]{1,3})(,\\d{3})*(\\.\\d+)?$|^-?(0\\.\\d+)$";
        else
            reg = "^-?([1-9]{1,3})(,\\d{3})*(\\.\\d{"+n+"})$|^-?(0\\.\\d{"+n+"})$";
        reg = new RegExp(reg);
        if (v.match(reg) != null) return true;
        return false;
    }
};

mini.summaryTypes = {
    "count": function (data) {
        if (!data) data = [];
        return data.length;
    },
    "max": function (data, field) {
        if (!data) data = [];
        var max = null;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            var value = parseFloat(o[field]);
            if (value === null || value === undefined || isNaN(value)) continue;
            if (max == null || max < value) {
                max = value;
            }
        }
        return max;
    },
    "min": function (data, field) {
        if (!data) data = [];
        var min = null;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            var value = parseFloat(o[field]);
            if (value === null || value === undefined || isNaN(value)) continue;
            if (min == null || min > value) {
                min = value;
            }
        }
        return min;
    },
    "avg": function (data, field) {
        if (!data) data = [];
        if (data.length == 0) return 0;
        var total = 0;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            var value = parseFloat(o[field]);
            if (value === null || value === undefined || isNaN(value)) continue;
            total += value;
        }
        var v = total / data.length;
        return v;
    },
    "sum": function (data, field) {
        if (!data) data = [];
        var total = 0;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            var value = parseFloat(o[field]);
            if (value === null || value === undefined || isNaN(value)) continue;
            total += value;
        }
        return total;
    }
};


mini.formatCurrency = function (num, prefix) {
    if (num === null || num === undefined) num = 0;
    num = String(num).replace(/\$|\,/g, '');
    if (isNaN(num)) {
        num = "0";
    }
    sign = (num == (num = Math.abs(num)));
    num = Math.floor(num * 100 + 0.50000000001);
    cents = num % 100;
    num = Math.floor(num / 100).toString();
    if (cents < 10) {
        cents = "0" + cents;
    }
    for (var i = 0; i < Math.floor((num.length - (1 + i)) / 3) ; i++) {
        num = num.substring(0, num.length - (4 * i + 3)) + ',' + num.substring(num.length - (4 * i + 3));
    }
    prefix = prefix || '';
    return prefix + (((sign) ? '' : '-') + num + '.' + cents);
}
mini.formatPercent = function (num, showPercent, decimalPlaces) {
    if (num === null || num === undefined) num = "";
    num = Number(num);
    if (isNaN(num)) {
        num = "0";
    }
    var suffix = '%';
    if (showPercent === false) {
        suffix = '';
    }
    return parseFloat((num * 100).toFixed(decimalPlaces)) + suffix;
}
/*
 * @class 表格组件调整大小插件，主要实现调整大小相关功能。
 */
mini._Resizer = function (grid) {
    this.owner = grid;
    mini.on(this.owner.el, "mousedown", this.__OnMouseDown, this);
}
mini._Resizer.prototype = {
    destroy: function (removeEl) {
        if (this._resizeDragger) {
            this._resizeDragger.destroy();
        }
    },
    __OnMouseDown: function (e) {

        var has = mini.hasClass(e.target, "mini-resizer-trigger");
        if (has && this.owner.allowResize) {
            var drag = this._getResizeDrag();
            drag.start(e);
        }
    },
    _getResizeDrag: function () {
        if (!this._resizeDragger) {
            this._resizeDragger = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this._resizeDragger;
    },
    _OnDragStart: function (drag) {

        this.proxy = mini.append(document.body, '<div class="mini-resizer-proxy"></div>');
        this.proxy.style.cursor = "se-resize";

        this.elBox = mini.getBox(this.owner.el);
        mini.setBox(this.proxy, this.elBox);
    },
    _OnDragMove: function (drag) {
        var grid = this.owner;
        var xOffset = drag.now[0] - drag.init[0];
        var yOffset = drag.now[1] - drag.init[1];

        var w = this.elBox.width + xOffset;
        var h = this.elBox.height + yOffset;
        if (w < grid.minWidth) w = grid.minWidth;
        if (h < grid.minHeight) h = grid.minHeight;
        if (w > grid.maxWidth) w = grid.maxWidth;
        if (h > grid.maxHeight) h = grid.maxHeight;

        mini.setSize(this.proxy, w, h);
    },
    _OnDragStop: function (drag, success) {
        if (!this.proxy) return;
        var box = mini.getBox(this.proxy);

        jQuery(this.proxy).remove();
        this.proxy = null;
        this.elBox = null;

        if (success) {
            this.owner.setWidth(box.width);
            this.owner.setHeight(box.height);
            this.owner.fire("resize");
        }
    }
};



/**
 * 定义了所有组件的最终基类。
 * @fileOverview Components.js
 * @author 殷文旭
 */

mini = mini || {};

/**
 * Component 是mini UI中所有组件的根源，构造函数中组要做了几件事情，1生成uid。2 id = id || uid。3注册组件
 * @class mini.Component
 * @constructor
 * @requires mini
 */
mini.Component = function () {
    this._events = {};
    /**
     * 由mini UI为每个组建生成的唯一标识 
     * @type String
     */
    this.uid = mini.newId(this._idPre);	//生成一个组件实例id。
    this._id = this.uid;

    if (!this.id){
					
        this.id = this.uid;    
    }
    mini.reg(this);
}

mini.Component.prototype = {
    defaultValueTriggerChange:false, //为了解决项目组不一致
	/**
	 * 组件实例标志。代表对象时一个组件。
	 * @type Boolean
	 * @default true
	 */
    isControl: true,
    /**
     * HTML标签的id属性，如果标签没有声明，则值与uid一致。
     * @type String
     * @default null
     */
    id: null,
    /**
     * 动态生成id的前缀
     * @private
     * @default "mini-"
     */
    _idPre: "mini-",
    /**
     * ID被重新设置开关，默认为开启，一旦被设置一次之后就关闭设置功能。
     * @private
	 * @default false
     */	
    _idSet: false,
    /**
     * 开关，用于判断组件实例是否支持，调用fire方法触发事件。
     * @private
	 * @default true
     */
    _canFire: true,	

	/**
	 * 通用的设置属性方法，可以用于设置事件，设置属性。设置属性完成就会自动调用组件的doLayout方法。
	 * 属性中可以包括自定义的renderTo 或 render 用于指向渲染到的容器对象，
	 * 则设置完成后将会调用组件的render方法把组件渲染到容器中。
	 * @param kv {Object} 参数对象
	 * @return {Object} 组件实例本身
	 * @example
	 * var a = new Component();
	 * a.set({id:'id'});
	 * a.id => id
	 */
    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }
        var _allowLayout = this._allowLayout;
        this._allowLayout = false;

        var renderTo = kv.renderTo || kv.render;
        delete kv.renderTo;
        delete kv.render;
        
        for (var key in kv) {
            if (key.toLowerCase().indexOf('on') == 0) {

                var fn = kv[key];
                this.on(key.substring(2, key.length).toLowerCase(), fn);
                delete kv[key];
            }
        }
        
        for (var key in kv) {
            var v = kv[key];
            var n = 'set' + key.charAt(0).toUpperCase() + key.substring(1, key.length);
            var setter = this[n];
            /* solve the problem config the attribute value and not null,it will trigger the event of valuechanged 潘正锋 2004-07*/
            if (setter) {
                if(key=="value") {
                    setter.call(this, v, this.defaultValueTriggerChange);

                }
                else
                    setter.call(this, v);
            } else {
                this[key] = v;
            }
        }

        if (renderTo && this.render) {
            this.render(renderTo);
        }

        this._allowLayout = _allowLayout;
        if (this.doLayout) this.doLayout();

        return this;
    },

	/**
	 * 触发组件实例的一个事件
     * @param type {String}事件类型
     * @param [event] {Event}可以使一个JSON对象
     * @example 
     * var a = new Component();
     * a.fire('click');
	 */
    fire: function (type, event) {
        if (this._canFire == false) return;
        type = type.toLowerCase();
        var handlers = this._events[type];
        if (handlers) {
            if (!event) event = {};
            if (event && event != this) {
                event.source = event.sender = this;
                if (!event.type) {
                    event.type = type;
                }
            }
            for (var i = 0, l = handlers.length; i < l; i++) {
                var listener = handlers[i];
                if (listener) {
                    listener[0].apply(listener[1], [event]);
                }
            }
        }
    },
    
    /**
     * 为组件实例添加一个事件响应函数
     * @param type {String} 事件类型
     * @param fn {Function} 响应函数
     * @param [scope] {Object} 函数上下文
     * @returns {Object} 组件实例本身
     */
    on: function (type, fn, scope) {

        if (typeof fn == "string") {
            var f = mini._getFunctoin(fn);
            if (!f) {
                
                var id = mini.newId("__str_");
                window[id] = fn;
                eval("fn = function(e){var s = " + id + ";var fn = mini._getFunctoin(s); if(fn) {fn.call(this, e)}else{eval(s);}}");
            } else {
                fn = f;
            }
        }

        if (typeof fn != 'function' || !type) return false;
        type = type.toLowerCase();
        var event = this._events[type];
        if (!event) {
            event = this._events[type] = [];
        }
        scope = scope || this;
        if (!this.findListener(type, fn, scope)) {
            event.push([fn, scope]);
        }
        return this;
    },
    
    /**
     * 删除一个事件响应函数
     * @param type {String} 事件类型
     * @param fn {Function} 响应函数
     * @param [scope] {Object} 函数上下文
     * @returns {Object} 组件实例本身
     */
    un: function (type, fn, scope) {
        if (typeof fn != 'function') return false;
        type = type.toLowerCase();
        var event = this._events[type];
        if (event) {
            scope = scope || this;
            var listener = this.findListener(type, fn, scope);
            if (listener) {
                event.remove(listener);
            }
        }
        return this;
    },
    
    /**
     * 获得指定类型时间的执行响应函数的定义内容 Listener。
     * @param type {String} 事件类型
     * @param fn {Function} 响应函数
     * @param [scope] {Object} 函数上下文
     * @returns {Object} Listener
     */
    findListener: function (type, fn, scope) {
        type = type.toLowerCase();
        scope = scope || this;
        var handlers = this._events[type];
        if (handlers) {
            for (var i = 0, l = handlers.length; i < l; i++) {
                var listener = handlers[i];
                if (listener[0] === fn && listener[1] === scope) return listener;
            }
        }
    },
    
    /**
     * 设置组件实例的ID属性
     * @param id {String} ID值
     */
    setId: function (id) {
        if (!id) throw new Error("id not null");
        if (this._idSet) throw new Error("id just set only one");
        mini["unreg"](this);
        this.id = id;
        if (this.el) this.el.id = id;
        if (this._textEl) this._textEl.id = id + "$text";
        if (this._valueEl) this._valueEl.id = id + "$value";
        this._idSet = true;
        mini.reg(this);
    },
    
    /**
     * 取得组件实例的ID属性值
     * @return {String} ID
     */
    getId: function () {
        return this.id;
    },
    
    /**
     * 组件实例的析构方法
     */
    destroy: function () {
        mini["unreg"](this);
        this.fire("destroy");
    }
}
/**
 * 定义了所有组件的基类。
 * @fileOverview Control.js
 * @author 殷文旭
 */

mini = mini || {};

/**
 * Control 是mini UI中所有组件的基类，构造函数中主要做了几件事情，
 * 1调用Components构造函数<br/>
 * 2 创建组件HTML结构<br/>
 * 3 为组件绑定默认事件<br/>
 * 4 调整组件样式<br/>
 * @class mini.Control
 * @constructor
 * @extends mini.Component
 * @requires mini.Component
 * @property borderStyle {String} 边框样式 此属性只可以用于HTML标签属性声明，在组件内没有对应的属性。
 */
mini.Control = function () {
	mini.Control.superclass.constructor.call(this);	//执行父类构造函数

	this._create();			//创建组件HTML结构。
	this.el.uid = this.uid; //为组件HTML结构设置uid属性。

	this._initEvents();		//为组件预绑定事件，这里只是做了一个声明，实际的绑定动作发生在所有组件都初始化之后。

	if (this._clearBorder) {	//去除组件最外层边框。
	    this.el.style.borderWidth = "0";
	    this.el.style.padding = "0px";

	}
	this.addCls(this.uiCls);	//为新生成的HTML结构设置样式表类名。
	this.setWidth(this.width);	//社会自最外层HTML结构的宽度
	this.setHeight(this.height);

	this.el.style.display = this.visible ? this._displayStyle : "none";
}
mini.extend(mini.Control, mini.Component,{

	/**
	 * 将组件实例添加到window作用于内时的属性名。
	 * 绑定的动作需要调用 setJsName实现。
	 * @type String
	 * @default null
	 */
	jsName: null,

	/**
	 * 组件宽度
	 * @type String
	 * @default ""
	 */
	width: "",
	/**
	 * 组件高度
	 * @type String
	 * @default ""
	 */
	height: "",
	/**
	 * 组件是否可见，默认可见
	 * @type Boolean
	 * @default true
	 */
	visible: true,
	/**
	 * 组件是否为只读状态，默认为非只读
	 * @type Boolean
	 * @default false
	 */
	readOnly: false,
	/**
	 * 组件是否可用，默认为可用
	 * @type Boolean
	 * @default true
	 */
	enabled: true,
	/**
	 * 组件容器的title属性
	 * @type String
	 * @default ""
	 */
	tooltip: "",
	_autoLoad: true,
	_readOnlyCls: "mini-readonly",	//只读样式
	_disabledCls: "mini-disabled",	//不可用样式

	/**
	 * 创建组件HTML结构
	 */
	_create: function () {
		/**
		 * 所有组件的HTML容器，是一个DOM对象
		 * @type {Object}
		 * @default div
		 */
		this.el = document.createElement("div");
	},
	/**
	 * 为组件实例绑定默认事件
	 */
	_initEvents: function () {
	},
	/**
	 * 判断指定元素是否包含在组件容器之内
	 * @param e {Object} HTML元素
	 * @return {Boolean} 是否包含true/false
	 */
	within: function (e) {
		if (mini.isAncestor(this.el, e.target))
			return true;
		return false;
	},
	/**
	 * 组件的name属性，与标签的name属性值一致。
	 * @type String
	 * @default ""
	 */
	name: "",

	/**
	 * 设置属性 name
	 * @param value 新name值
	 */
	setName: function (value) {
		this.name = value;

	},
	/**
	 * 获取属性 name
	 * @returns name值
	 */
	getName: function () {
		return this.name;
	},
	/**
	 * 判断组件高度是否设置为auto，注意，空等同于auto
	 * @return {Boolean}是否
	 */
	isAutoHeight: function () {
		var v = this.el.style.height;
		return v == "auto" || v == "";
	},
	/**
	 * 判断组件宽度是否设置为auto，注意，空等同于auto
	 * @returns {Boolean}是否
	 */
	isAutoWidth: function () {
		var v = this.el.style.width;
		return v == "auto" || v == "";
	},
	/**
	 * 判断width和height值是否是带有px后缀
	 * @returns {Boolean}是否
	 */
	isFixedSize: function () {
		var width = this.width;
		var height = this.height;
		if (parseInt(width) + "px" == width && parseInt(height) + "px" == height)
			return true;
		return false;
	},
	/**
	 * 判断组件是否已经渲染，判断方法是通过寻找组件容器是否拥有父节点判断。
	 * @param parentNode {Object} 参数在方法内没有被用到，是一个无效参数。
	 * @returns {Boolean}是否
	 */
	isRender: function (parentNode) {
		return !!(this.el && this.el.parentNode && this.el.parentNode.tagName);
	},
	/**
	 * 渲染组件，将组件添加到给听父元素的指定位置。同时触发render事件。
	 * @param parent 父元素
	 * @param position {String} 位置 ，可接受位置选项有  append before prepend after
	 */
	render: function (parent, position) {
		if (typeof parent === 'string') {
			if (parent == "#body")
				parent = document.body;
			else
				parent = mini.byId(parent);
		}
		if (!parent)
			return;
		if (!position)
			position = "append";
		position = position.toLowerCase();

		if (position == "before") {
			jQuery(parent).before(this.el);
		} else if (position == "prepend") {
			jQuery(parent).prepend(this.el);
		} else if (position == "after") {
			jQuery(parent).after(this.el);
		} else {
			parent.appendChild(this.el);
		}

		this.el.id = this.id;
		this.doLayout();
		this.fire("render");
	},
	/**
	 * 取得组件实例的容器对象
	 * @return {Object} DOM元素
	 */
	getEl: function () {
		return this.el;
	},
	/**
	 * 将组件实例作为一个 window 的属性
	 * @param jsName {String} window的属性名
	 */
	setJsName: function (value) {
		this.jsName = value;
		window[value] = this;
	},
	/**
	 * 获取 JsName
	 * @returns {String} window的属性名
	 */
	getJsName: function () {
		return this.jsName;
	},
	/**
	 * 设置 tooltip 的值(组件容器的title的值)
	 * @param value {String} 提示字符串
	 */
	setTooltip: function (value) {
		this.tooltip = value;
		this.el.title = value;
	},
	/**
	 * 获取 tooltip 的值(组件容器的title的值)
	 * @returns tooltip {String} 提示字符串
	 */
	getTooltip: function () {
		return this.tooltip;
	},
	/**
	 * 调整组件布局
	 */
	_sizeChaned: function () {
		this.doLayout();
	},
	/**
	 * 设置组件宽度，并调整组件布局
	 * @param {Number|String} 宽度值
	 */
	setWidth: function (value) {
		if (parseInt(value) == value)
			value += "px";
		this.width = value;
		this.el.style.width = value;
		this._sizeChaned();
	},
	/**
	 * 获取组件宽度。
	 * @param content {Boolean} 获取的宽度是否包括padding和border
	 * @returns {Number} 宽度值
	 */
	getWidth: function (content) {
		var w = content ? jQuery(this.el).width() : jQuery(this.el).outerWidth();
		if (content && this._borderEl) {
			var b2 = mini.getBorders(this._borderEl);
			w = w - b2.left - b2.right;
		}
		return w;
	},
	/**
	 * 设置组件高度，并调整组件布局
	 * @param value {Number|String} 高度值
	 */
	setHeight: function (value) {
		if (parseInt(value) == value)
			value += "px";
		this.height = value;
		this.el.style.height = value;
		this._sizeChaned();
	},
	/**
	 * 获取组件高度
	 * @param content {Boolean} 获取的高度是否包括padding和border
	 * @return {Number} 高度值
	 */
	getHeight: function (content) {
		var h = content ? jQuery(this.el).height() : jQuery(this.el).outerHeight();
		if (content && this._borderEl) {
			var b2 = mini.getBorders(this._borderEl);
			h = h - b2.top - b2.bottom;
		}
		return h;
	},
	/**
	 * 获取组件位置left/top和宽高width/height数值
	 * @returns {Object} 包括x,y,width,height,left,top,right,bottom 等8个属性
	 * @example
	 * var a = new Control();
	 * a.getBox() => {x: 20, y: 20, left :20, top : 20, width: 30, height: 30, right:50,bottom:50}
	 * 结果如此结构,其中 x == left && y == top
	 */
	getBox: function () {
		return mini.getBox(this.el);
	},
	/**
	 * 设置边框样式并调整布局
	 * @param value {String}边框样式字符串
	 */
	setBorderStyle: function (value) {

		var el = this._borderEl || this.el;
		mini.setStyle(el, value);
		this.doLayout();
	},
	/**
	 * 获取边框样式
	 * @returns {String} 边框样式字符串
	 */
	getBorderStyle: function () {
		return this.borderStyle;
	},
	/**
	 * 开关属性，用于设置组件实例边框宽度是否为0
	 * @default true
	 */
	_clearBorder: true,

	/**
	 * 设置组件样式，并调整布局
	 * @param value {String} 样式字符串
	 */
	setStyle: function (value) {
		this.style = value;
		mini.setStyle(this.el, value);
		if (this._clearBorder) {
			this.el.style.borderWidth = "0";
		}

		this.width = this.el.style.width;
		this.height = this.el.style.height;
		this._sizeChaned();
	},
	/**
	 * 获取组件样式
	 * @returns {String} style
	 */
	getStyle: function () {
		return this.style;
	},
	/**
	 * 设置组件样式类名
	 * @param cls {String}组件样式类名
	 * @example
	 * css 部分
	 * .className{样式定义}
	 * xx.setCls("className");
	 */
	setCls: function (cls) {
	    this.addCls(cls);

	},
	/**
	 * 获取组件样式类名
	 * @returns cls {String}组件样式类名
	 */
	getCls: function () {
		return this.cls;
	},
	/**
	 * 为组件容器添加样式表类名
	 * @param cls {String}样式类名
	 */
	addCls: function (cls) {
		mini.addClass(this.el, cls);
	},
	/**
	 * 为组件容器删除样式表类名
	 * @param cls {String}样式类名
	 */
	removeCls: function (cls) {
		mini.removeClass(this.el, cls);
	},
	/**
	 * 切换组件的只读和可操作状态
	 */
	_doReadOnly: function () {
		if (this.readOnly) {
			this.addCls(this._readOnlyCls);
		} else {
			this.removeCls(this._readOnlyCls);
		}
	},
	/**
	 * 设置组件的只读状态
	 * @param value {Boolean} 只读/可操作
	 */
	setReadOnly: function (value) {
		this.readOnly = value;
		this._doReadOnly();
	},
	/**
	 * 获取组件是否为只读
	 * @returns {Boolean} 只读/可操作
	 */
	getReadOnly: function () {
		return this.readOnly;
	},
	/**
	 * 获取相对本组件的祖先组件，且这个祖先组件的uiCls 属性值与指定的参数值一致。
	 * @param uiCls {String} 组件样式类名
	 * @returns {Control|null}父组件实例
	 */
	getParent: function (uiCls) {
		var doc = document;
		var p = this.el.parentNode;
		while (p != doc && p != null) {
			var pcontrol = mini.get(p);
			if (pcontrol) {
				if (!mini.isControl(pcontrol))
					return null;
				if (!uiCls || pcontrol.uiCls == uiCls)
					return pcontrol;
			}
			p = p.parentNode;
		}
		return null;
	},
	/**
	 * 判断组件实例是否只读
	 * @returns {Boolean}是/否
	 */
	isReadOnly: function () {
		if (this.readOnly || !this.enabled)
			return true;
		var p = this.getParent();
		if (p)
			return p.isReadOnly();
		return false;
	},
	/**
	 * 设置组件实例是否可用
	 * @param value {Boolean}是/否
	 */
	setEnabled: function (value) {
		this.enabled = value;
		if (this.enabled) {
			this.removeCls(this._disabledCls);
		} else {
			this.addCls(this._disabledCls);
		}
		this._doReadOnly();
	},
	/**
	 * 获取组件实例是否可用
	 * @returns value {Boolean}是/否
	 */
	getEnabled: function () {
		return this.enabled;
	},
	/**
	 * 设置组件实例为可用
	 */
	enable: function () {
		this.setEnabled(true);
	},
	/**
	 * 设置组件实例为不可用
	 */
	disable: function () {
		this.setEnabled(false);
	},
	_displayStyle: "",

	/**
	 * 设置组件是否显示
	 * @param value {Boolean}是/否
	 */
	setVisible: function (value) {
		this.visible = value;
		if (this.el) {
			this.el.style.display = value ? this._displayStyle : "none";
			this.doLayout();
		}
	},
	/**
	 * 获取组件是否显示
	 * @returns {Boolean}是/否
	 */
	getVisible: function () {
		return this.visible;
	},
	/**
	 * 设置组件显示
	 */
	show: function () {
		this.setVisible(true);
	},
	/**
	 * 设置组件隐藏
	 */
	hide: function () {
		this.setVisible(false);
	},
	/**
	 * 判断组件是否显示
	 * @return {Boolean}
	 */
	isDisplay: function () {

		if (mini.isWindowDisplay() == false)
			return false;

		/*var doc = document.body;
		var p = this.el;
		while (1) {
			if (p == null || !p.style)
				return false;
			if (p && p.style && p.style.display == "none")
				return false;
			if (p == doc)
				return true;

			p = p.parentNode;

		}*/
		return jQuery(this.el).is(":visible");
	},
	/**
	 * 允许将组件HTML细节添加到组件容器中。
	 * @default ture
	 * @private
	 */
	_allowUpdate: true,
	/**
	 * 开始更新组件容器内部
	 */
	beginUpdate: function () {
		this._allowUpdate = false;
	},
	/**
	 * 组件容器内部元素更新结束
	 */
	endUpdate: function () {
		this._allowUpdate = true;
		this.doUpdate();
	},
	/**
	 * 实际的组件容器内部元素更新操作，通常需要自组件复写
	 */
	doUpdate: function () {

	},
	/**
	 * 当前是否可以调整布局
	 * @returns {Boolean}是/否
	 */
	canLayout: function () {
		if (this._allowLayout == false)
			return false;
		return this.isDisplay();
	},
	/**
	 * 组件实际的调整布局操作，通常需要自组件复写
	 */
	doLayout: function () {

	},
	/**
	 * 如果可以调整布局则执行调整布局操作
	 */
	layoutChanged: function () {
		if (this.canLayout() == false)
			return;
		this.doLayout();
	},
	/**
	 * 组件默认析构函数
	 */
	_destroyChildren: function (removeEl) {
	    if (this.el) {
	        var cs = mini.getChildControls(this);
	        for (var i = 0, l = cs.length; i < l; i++) {
	            var control = cs[i];
	            if (control.destroyed !== true) {
	                control.destroy(removeEl);
	            }
	        }
	    }
	},
	destroy: function (removeEl) {

	    if (this.destroyed !== true) {
	        this._destroyChildren(removeEl);
	    }

	    if (this.el) {
	        mini.clearEvent(this.el);


	        if (removeEl !== false) {
	            var p = this.el.parentNode;
	            if (p) p.removeChild(this.el);
	        }
	    }
	    this._borderEl = null;
	    this.el = null;
	    mini.clearEvent(this);
	    mini["unreg"](this);
	    this.destroyed = true;
	    this.fire("destroy");
	},
    /**
     *解析url,有两种结果：url本身和url变量 潘正锋 2013-07-25
     *
     */
    parseUrl: function (urlPar) {
        if (!urlPar)
            return null;
        if (urlPar.substring(0, 1) == "#") {
            var name = urlPar.substring(1, urlPar.length);
            try {
                return eval(name);
            } catch (e) {
                return null;
            }
        }
        return urlPar;
    },
	/**
	 * 组件容器获取焦点
	 */
	focus: function () {
		try {
			var me = this;
			me.el.focus();
		} catch (e) {
		};
	},
	/**
	 * 组件容器失去焦点
	 */
	blur: function () {
		try {
			var me = this;
			me.el.blur();
		} catch (e) {
		};
	},
	/**
	 * 目前尚不清楚用途
	 */
	allowAnim: true,
	/**
	 * 目前尚不清楚用途
	 */
	setAllowAnim: function (value) {
		this.allowAnim = value;
	},
	/**
	 * 目前尚不清楚用途
	 */
	getAllowAnim: function () {
		return this.allowAnim;
	},
	/**
	 * 获取组建需要遮罩效果时需要遮罩的元素
	 */
	_getMaskWrapEl: function () {
		return this.el;
	},
	/**
	 * 为组件添加遮罩效果
	 */
	mask: function (options) {

		if (typeof options == "string")
			options = {
				html: options
			};
		options = options || {};
		options.el = this._getMaskWrapEl();
		if (!options.cls)
			options.cls = this._maskCls;

		mini.mask(options);
	},
	/**
	 * 为组件删除遮罩效果
	 */
	unmask: function () {
		mini.unmask(this._getMaskWrapEl());
	},
	/**
	 * 遮罩样式
	 * @private
	 * @default "mini-mask-loading"
	 */
	_maskCls: "mini-mask-loading",
	/**
	 * 遮罩默认显示信息
	 * @default "Loading..."
	 */
	loadingMsg: "Loading...",

	/**
	 * 自定义遮罩显示信息
	 * @param msg 信息
	 */
	loading: function (msg) {
		this.mask(msg || this.loadingMsg);
	},
	/**
	 * 设置loadingMsg的值
	 * @param value
	 */
	setLoadingMsg: function (value) {
		this.loadingMsg = value;
	},
	/**
	 * 获取loadingMsg的值
	 * @param loadingMsg
	 */
	getLoadingMsg: function () {
		return this.loadingMsg;
	},
	/**
	 * 创建一个菜单组件实例，与菜单组件有动态依赖关系。
	 */
	_getContextMenu: function (value) {
		var ui = value;
		if (typeof value == "string") {
			ui = mini.get(value);
			if (!ui) {
				mini.parse(value);
				ui = mini.get(value);
			}
		} else if (mini.isArray(value)) {
			ui = {
				type: "menu",
				items: value
			};
		} else if (!mini.isControl(value)) {
			ui = mini.create(value);
		}
		return ui;
	},
	__OnHtmlContextMenu: function (e) {
		var ev = {
			popupEl: this.el,
			htmlEvent: e,
			cancel: false
		};
		this.contextMenu.fire("BeforeOpen", ev);
		if (ev.cancel == true)
			return;
		this.contextMenu.fire("opening", ev);
		if (ev.cancel == true)
			return;
		this.contextMenu.showAtPos(e.pageX, e.pageY);
		this.contextMenu.fire("Open", ev);
		return false;
	},
	/**
	 * 菜单组件实例
	 * @type mini.Menu
	 * @default null
	 */
	contextMenu: null,

	/**
	 * 为组件增加菜单功能。
	 * @param value {String| Arary | Object} 参数可以是组件ID，菜单项数组，或者是其他。
	 */
	setContextMenu: function (value) {
		var ui = this._getContextMenu(value);
		if (!ui)
			return;
		if (this.contextMenu !== ui) {
			this.contextMenu = ui;
			this.contextMenu.owner = this;
			mini.on(this.el, "contextmenu", this.__OnHtmlContextMenu, this);
		}
	},
	/**
	 * 获取组件上绑定的菜单组件。
	 * @return {Object} 菜单组件实例
	 */
	getContextMenu: function () {
		return this.contextMenu;
	},
	/**
	 * 设置组件默认值
	 * @param value {String}
	 */
	setDefaultValue: function (value) {
		this.defaultValue = value;
	},
	/**
	 * 获取组件默认值
	 * @returns {String} defaultValue
	 */
	getDefaultValue: function () {
		return this.defaultValue;
	},
	/**
	 * 设置组件值
	 * @param value {String}
	 */
	setValue: function (value) {
		this.value = value;
	},
	/**
	 * 获取组件值
	 * @returns {String}
	 */
	getValue: function () {
		return this.value;
	},
	/**
	 * 组件链接完成后需要执行的方法。此方法可以被子类复写。
	 */
	_afterApply: function (el) {
	},
	dataField: "",
	setDataField: function (value) {
	    this.dataField = value;
	},
	getDataField: function () {
	    return this.dataField;
	},

	/**
	 * 用于从HTML标签中提取配置参数的方法。在此方法中有对 id, name, width, height, borderStyle, value, defaultValue,
	 * contextMenu, tooltip, ondestroy, visible, enabled, readOnly等属性做解析。
	 */
	getAttrs: function (el) {

		var attrs = {};
		var cls = el.className;
		if (cls)
			attrs.cls = cls;

		if (el.value)
			attrs.value = el.value;
		/**
		 * ondestroy事件当组件销毁时触发（触发几率大约为80%不稳定，不建议是用作严格的事情。）<br/>
		 * 通过在html标签声明。
		 * @name ondestroy
		 * @event
		 * @memberOf mini.Control.prototype
		 */
		mini._ParseString(el, attrs,
		["id", "name", "width", "height", "borderStyle", "value", "defaultValue",
		"contextMenu", "tooltip", "ondestroy", "data-options", "dataField"
		]
		);

		mini._ParseBool(el, attrs,
		["visible", "enabled", "readOnly"
		]
		);

		if (el.readOnly && el.readOnly != "false")
			attrs.readOnly = true;

		var style = el.style.cssText;
		if (style) {
			attrs.style = style;
		}
		if (isIE9) {
			var bg = el.style.background;
			if (bg) {
				if (!attrs.style)
					attrs.style = "";
				attrs.style += ";background:" + bg;
			}
		}
		if (this.style) {
			if (attrs.style)
				attrs.style = this.style + ";" + attrs.style;
			else
				attrs.style = this.style;
		}
		if (this.borderStyle) {
			if (attrs.borderStyle)
				attrs.borderStyle = this.borderStyle + ";" + attrs.borderStyle;
			else
				attrs.borderStyle = this.borderStyle;
		}
		var ts = mini._attrs;
		if (ts) {
			for (var i = 0, l = ts.length; i < l; i++) {
				var t = ts[i];
				var name = t[0];
				var type = t[1];
				if (!type)
					type = "string";
				if (type == "string")
					mini._ParseString(el, attrs, [name]);
				else if (type == "bool")
					mini._ParseBool(el, attrs, [name]);
				else if (type == "int")
					mini._ParseInt(el, attrs, [name]);
			}
		}

		var options = attrs["data-options"];
		if (options) {
			options = eval("(" + options + ")");
			if (options) {

				mini.copyTo(attrs, options);
			}
		}
		return attrs;
	}
});

/**
 * 配合mini.regHtmlAttr方法是用的属性。现在已经没有实际价值。
 * @deprecated
 */
mini._attrs = null;

/**
 * 过时的方法，没有价值
 * @deprecated
 */
mini.regHtmlAttr = function (attr, type) {
	if (!attr)
		return;
	if (!type)
		type = "string";
	if (!mini._attrs)
		mini._attrs = [];
	mini._attrs.push([attr, type]);
}
/**
 * 定义了所有容器类组件的基类。
 * @fileOverview Container.js
 * @author 殷文旭
 */

mini = mini || {};

/**
 * Container 是mini UI中所有容器类组件的基类，构造函数中主要做了几件事情，
 * 1调用 Control 构造函数<br/>
 * 2 _contentEl = el<br/>
 * @class mini.Container
 * @constructor
 * @extends mini.Control
 * @requires mini.Control
 */
mini.Container = function () {
	mini.Container.superclass.constructor.call(this);
	this._contentEl = this.el;
}
mini.extend(mini.Container, mini.Control, {
	/**
	 * 为容器组件添加子组件
	 * 添加完成之后解析子组件定义，然后调整区域布局。
	 * @param controls {Array|Object}需要添加的子组件
	 * @param contentEl 容纳子组件的DOM对象，非必须
	 * @param scope 指定完成之后调整布局的区域， 非必须
	 * @returns scope
	 */
    setControls: __mini_setControls,
    getContentEl: function () {
        return this._contentEl;
    },
    getBodyEl: function () {
        return this._contentEl;
    }


});
/**
 * 定义了需要验证功能组件的基类
 * @fileOverview ValidatorBase.js
 * @author 殷文旭
 */

mini = mini || {};

/**
 * ValidatorBase 是mini UI中的部分支持验证功能组件的基类，构造函数中调用了Control方法
 * @class mini.ValidatorBase
 * @constructor
 * @extends mini.Control
 * @requires mini.Control
 */
mini.ValidatorBase = function () {
    mini.ValidatorBase.superclass.constructor.call(this);    
}
mini.extend(mini.ValidatorBase, mini.Control,{
    
    /**
     * 非空校验开关
     * @type Boolean
     * @default false
     */
    required: false,
    /**
     * 非空验证错误提示信息，支持标签配置
     * @type String
     * @default "This field is required."
     */
    requiredErrorText: "不能为空.",
    /**
     * 必录样式
     * @type String
     * @default "mini-required"
     */
    _requiredCls: "mini-required",
	/**
	 * 自定义错误提示信息
	 * @type String
	 * @default ""
	 */
    errorText: "",
    /**
     * 错误样式
     * @default "mini-error"
     */
    _errorCls: "mini-error",
    /**
     * border错误模式下的错误提示样式
     * @default "mini-invalid"
     */
    _invalidCls: "mini-invalid", 
	/**
	 * 错误提示模式 ，目前支持三种  “icon”，“border”，“none”。支持标签配置
	 * @type String
	 * @default "icon"
	 */
    errorMode: "icon",
    /**
     * 当值改变后是否重新验证，支持标签配置
     * @type Boolean
     * @default true
     */      
    validateOnChanged: true,
    validateOnLeave: true,

    /**
     * 是否验证通过标志
     * @default true
     */
    _IsValid: true,
    indentSpace: false,
    _indentCls: "mini-indent",
    setIndentSpace: function (value) {
        if (value) {
            this.addCls(this._indentCls)
        } else {
            this.removeCls(this._indentCls)
        }
        this.indentSpace = value;
    },
    getIndentSpace: function () {
        return this.indentSpace;
    },

    _tryValidate: function () {
            this.validate();
    },

	/**
	 * 校验方法
	 * @return {Boolean} 验证结果
	 */
    validate: function () {

        if (this.enabled == false) {
            this.setIsValid(true);
            return true;
        }

        var e = {
            value: this.getValue(),
            errorText: "",
            isValid: true
        };
        if (this.required) {            
            if (mini.isNull(e.value) || String(e.value).trim() === "") {
                e.isValid = false;
                e.errorText = this.requiredErrorText;
            }
        }
        this.fire("validation", e);

        this.errorText = e.errorText;
        this.setIsValid(e.isValid);
        return this.isValid();
    },
    /**
     * 判断是否验证通过
     * @returns {Boolean} true/false
     */
    isValid: function () {
        return this._IsValid;
    },
    /**
     * 设置是否验证通过
     * @param value {Boolean} true/false
     */
    setIsValid: function (value) {
        
        this._IsValid = value;
        this.doUpdateValid();
        
    },
    /**
     * 获取是否验证通过标志
     * @returns {Boolean} true/false
     */
    getIsValid: function () {
        return this._IsValid;
    },
    /**
     * 设置是否在值改变时重新验证
     * @param value {Boolean}true/false
     */
    setValidateOnChanged: function (value) {
        this.validateOnChanged = value;
    },
    /**
     * 获取是否在值改变时重新验证
     * @returns {Boolean}true/false
     */
    getValidateOnChanged: function (value) {
        return this.validateOnChanged;
    },
    setValidateOnLeave: function (value) {
        this.validateOnLeave = value;
    },
    getValidateOnLeave: function (value) {
        return this.validateOnLeave;
    },

    /**
     * 设置错误提示模式
     * @param value {String} 目前包括三种可选设置“icon”，“border”，“none”
     */
    setErrorMode: function (value) {
        if (!value) value = "none";
        this.errorMode = value.toLowerCase();
        if (this._IsValid == false) this.doUpdateValid();
    },
    /**
     * 获取错误提示模式
     * @returns {String}  
     */
    getErrorMode: function () {
        return this.errorMode;
    },
    /**
     * 设置自定义错误提示信息
     * @param value {String}错误提示信息
     */
    setErrorText: function (value) {
        this.errorText = value;
        if (this._IsValid == false) this.doUpdateValid();
    },
    /**
     * 获取自定义错误提示信息
     * @retirns errorText {String}错误提示信息
     */
    getErrorText: function () {
        return this.errorText;
    },
    /**
     * 设置是否必录
     * @param value {Boolean} true/false
     */
    setRequired: function (value) {
        this.required = value;
        if (this.required) {
            this.addCls(this._requiredCls);
        } else {
            this.removeCls(this._requiredCls);
        }
    },
    /**
     * 获取是否必录
     * @returns required {Boolean} true/false
     */
    getRequired: function () {
        return this.required;
    },
    /**
     * 设置必录验证错误提示信息
     * @param value {String}错误提示信息
     */
    setRequiredErrorText: function (value) {
        this.requiredErrorText = value;
    },
    /**
     * 获取必录验证错误提示信息
     * @retirns errorText {String}错误提示信息
     */
    getRequiredErrorText: function () {
        return this.requiredErrorText;
    },
	
	/**
	 * 无用属性，实际应该是_errorIconEl
	 * @type Object
	 * @default null
	 */
    errorIconEl: null,
    /**
     *获取错误图标元素
     * @returns {Object} 图标元素
     */
    getErrorIconEl: function () {
        return this._errorIconEl;
    },
    /**
     * 删除错误图标元素,空方法
     */
    _RemoveErrorIcon: function () {

    },
    /**
     * 更新验证完成后的展现效果。即，显示或者移除错误提示。
     */
    doUpdateValid: function () {
        var me = this;
        this._doUpdateValidTimer = setTimeout(function () {
            me.__doUpdateValid();
        }, 1);
    },
    /**
     * doUpdateValid的幕后支持者
     * @private
     */
    __doUpdateValid: function () {
        if (!this.el) return;
        this.removeCls(this._errorCls);
        this.removeCls(this._invalidCls);
        /**删除下面一行 解决控件设置了title属性后，失去焦点后title被设置为空的问题 潘正锋2013-10-21*/
        if (this._IsValid == false) {
            switch (this.errorMode) {
                case "icon":
                    this.addCls(this._errorCls);
                    var icon = this.getErrorIconEl();
                    if (icon) icon.title = this.errorText;
                    break;
                case "border":
                    this.addCls(this._invalidCls);
                    this.el.title = this.errorText;
                default:
                    this._RemoveErrorIcon();
                    break;
            }
        } else {
            this._RemoveErrorIcon();
        }
        this.doLayout();
    },
    /**
     * 默认事件，供子类使用。用于判断，当值改变时是否重新验证。
     */
    _OnValueChanged: function () {
        if (this.validateOnChanged) {
            this._tryValidate();
        }
        this.fire("valuechanged", { value: this.getValue() });
    },
    /**
     * 为组件添加 valuechanged 事件。
     * @param fn 事件响应函数
     * @param scope 上下文对象
     */
    onValueChanged: function (fn, scope) {
        this.on("valuechanged", fn, scope);
    },
    /**
     * 为组件添加 validation 事件。
     * @param fn 事件响应函数
     * @param scope 上下文对象
     */
    onValidation: function (fn, scope) {
        this.on("validation", fn, scope);
    },
    /**
     * 用于从HTML标签中提取配置参数的方法。在此方法中有对
     *  onvaluechanged, onvalidation, requiredErrorText, errorMode, validateOnChanged等
     * @param el {Object} DOM元素
     * @returns {Object} JSON对象
     */
    getAttrs: function (el) {
        var attrs = mini.ValidatorBase.superclass.getAttrs.call(this, el);
        
        /**
         * onvaluechanged 事件当组件值改变时触发，可用于做自定义验证规则<br/>
         * 支持标签配置。
         * @name onvaluechanged
         * @event
         * @memberOf mini.ValidatorBase.prototype
         */
        /**
         * onvalidation 事件当组件做验证动作时触发<br/>
         * 支持标签配置。
         * @name onvalidation
         * @event
         * @memberOf mini.ValidatorBase.prototype
         */
        mini._ParseString(el, attrs,
            ["onvaluechanged", "onvalidation",
            "requiredErrorText", "errorMode"
             ]
        );
        mini._ParseBool(el, attrs,
            ["validateOnChanged", "validateOnLeave","indentSpace"
             ]
        );

        var required = el.getAttribute("required");
        if (!required) required = el.required;
        if (!required) {
            var o = el.attributes["required"];
            if (o) {
                required = o.value == 'null' ? null : 'true';
            }
        }
        if (required) {
            attrs.required = required != "false" ? true : false;
        }
        return attrs;
    }
});
/**
 * 定义了所有列表类组件的基类。
 * @fileOverview ListControl.js
 * @author 殷文旭
 */

mini = mini || {};

/**
 * ListControl 是mini UI中所有列表类组件的基类，构造函数中主要做了几件事情，
 * 1调用 ValidatorBase 构造函数<br/>
 * 2 doUpdate<br/>
 * @class mini.ListControl
 * @constructor
 * @extends mini.ValidatorBase
 * @requires mini.ValidatorBase
 */
mini.ListControl = function () {
	this.data = [];
	this._selecteds = [];
	mini.ListControl.superclass.constructor.call(this);
	this.doUpdate();
}
mini.extend(mini.ListControl, mini.ValidatorBase, {
	/**
	 * 默认值
	 * @type String
	 * @default ''
	 */
	defaultValue: '',
	/**
	 * 值
	 * @type String
	 * @default ''
	 */
	value: '',
	/**
	 * 值对应json格式数据中的属性名
	 * @type String
	 * @default id
	 */
	valueField: "id",
	/**
	 * 显示文本对应 json格式数据中的属性名
	 * @type String
	 * @default text
	 */
	textField: "text",

	delimiter: ',',

	/**
	 * 列表组件的数据集
	 * @type Array
	 * @default []
	 */
	data: null,
	/**
	 * 数据的远程加载地址
	 * @type String
	 * @default ""
	 */
	url: "",

	_itemCls: "mini-list-item",
	_itemHoverCls: "mini-list-item-hover",
	_itemSelectedCls: "mini-list-item-selected",

	set: function (kv) {
		if (typeof kv == 'string') {
			return this;
		}

		var value = kv.value;
		delete kv.value;
		var url = kv.url;
		delete kv.url;
		var data = kv.data;
		delete kv.data;

		mini.ListControl.superclass.set.call(this, kv);

		if (!mini.isNull(data)) {
			this.setData(data);
		}
		if (!mini.isNull(url)) {
			this.setUrl(url);
		}
		if (!mini.isNull(value)) {
			this.setValue(value,this.defaultValueTriggerChange);
		}

		return this;
	},
	/**
	 * 组件在HTML标签声明时配置的样式类名
	 * @type String
	 * @default "mini-list"
	 */
	uiCls: "mini-list",

	_create: function () {

	},
	_initEvents: function () {
		mini._BindEvents( function () {
			mini_onOne(this.el, 'click', this.__OnClick, this);
			mini_onOne(this.el, 'dblclick', this.__OnDblClick, this);

			mini_onOne(this.el, 'mousedown', this.__OnMouseDown, this);
			mini_onOne(this.el, 'mouseup', this.__OnMouseUp, this);
			mini_onOne(this.el, 'mousemove', this.__OnMouseMove, this);
			mini_onOne(this.el, 'mouseover', this.__OnMouseOver, this);
			mini_onOne(this.el, 'mouseout', this.__OnMouseOut, this);

			mini_onOne(this.el, 'keydown', this.__OnKeyDown, this);
			mini_onOne(this.el, 'keyup', this.__OnKeyUp, this);

			mini_onOne(this.el, 'contextmenu', this.__OnContextMenu, this);
		}, this);
	},
	/**
	 * 析构函数
	 * @param removeEl {Object}
	 */
	destroy: function (removeEl) {
		if (this.el) {
			this.el.onclick = null;
			this.el.ondblclick = null;
			this.el.onmousedown = null;
			this.el.onmouseup = null;
			this.el.onmousemove = null;
			this.el.onmouseover = null;
			this.el.onmouseout = null;
			this.el.onkeydown = null;
			this.el.onkeyup = null;
			this.el.oncontextmenu = null;
		}
        if(this._valueEl){
            mini.clearEvent(this._valueEl);
            this._valueEl.parentNode.removeChild(this._valueEl);
            this._valueEl = null;
        }
        delete this._focusedItem;
        delete this.data;
        delete this._selecteds;
		mini.ListControl.superclass.destroy.call(this, removeEl);
	},
	/**
	 * 组件的name属性，与保存值的标签的name属性值一致。
	 * @type String
	 * @default ""
	 */
	name: "",
	/**
	 * 设置属性 name，同时改变保存值的隐藏域的name属性。
	 * @param value {String}新name值
	 */
	setName: function (value) {
		this.name = value;
		if (this._valueEl)
			mini.setAttr(this._valueEl, "name", this.name);
	},
	/**
	 * 根据指定的事件对象，获取事件发生的列表元素的数据对象
	 * @param event{Event}
	 * @return {Object}
	 */
	getItemByEvent: function (event) {
		var domItem = mini.findParent(event.target, this._itemCls);
		if (domItem) {

			var index = parseInt(mini.getAttr(domItem, "index"));

			return this.data[index];
		}
	},
	/**
	 * 为指定的列表项添加样式类名
	 * @param item {Object} item是列表项的json数据对象
	 * @parm cls {String}
	 */
	addItemCls: function (item, cls) {
		var itemEl = this.getItemEl(item);
		if (itemEl)
			mini.addClass(itemEl, cls);
	},
	/**
	 * 删除指定的列表项的样式类名
	 * @param item {Object} item是列表项的json数据对象
	 * @parm cls {String}
	 */
	removeItemCls: function (item, cls) {
		var itemEl = this.getItemEl(item);
		if (itemEl)
			mini.removeClass(itemEl, cls);
	},
	/**
	 * 获取指定的列表项对象
	 * @param item {Object} item是列表项的json数据对象
	 */
	getItemEl: function (item) {
		item = this.getItem(item);
		var index = this.data.indexOf(item);
		var id = this._createItemId(index);
		return document.getElementById(id);
	},
	/**
	 * 将某个列表项设置为获得焦点状态
	 * @param item{Object} 列表项数据
	 * @param view{Boolean} 是否把获得焦点项移入可视区域
	 */
	_focusItem: function (item, view) {
		item = this.getItem(item);
		if (!item)
			return;
		var dom = this.getItemEl(item);
		if (view && dom) {
			this.scrollIntoView(item);
		}
		if (this._focusedItem == item) {
			if(dom)
				mini.addClass(dom, this._itemHoverCls);
			return;
		}
		this._blurItem();
		this._focusedItem = item;

		if (dom)
			mini.addClass(dom, this._itemHoverCls);
	},
	/**
	 * 将列表项设置为失去焦点状态。
	 */
	_blurItem: function () {
	    if (!this._focusedItem) return;

	    try {
	        var dom = this.getItemEl(this._focusedItem);
	        if (dom) {
	            mini.removeClass(dom, this._itemHoverCls);
	        }
	    } catch (e) { };
	    this._focusedItem = null;

	},
	/**
	 * 获取持有焦点的列表项元素
	 * @return {Object} DOM对象
	 */
	getFocusedItem: function () {
		return this._focusedItem;
	},
	/**
	 * 获取持有焦点的列表项的顺序
	 * @return {Number} 从0开始
	 */
	getFocusedIndex: function () {
		return this.data.indexOf(this._focusedItem);
	},
	_scrollViewEl: null,
	/**
	 * 将指定的列表项移入可视区域
	 * @param item {Object}
	 */
	scrollIntoView: function (item) {
		try {
			var itemEl = this.getItemEl(item);
			var _scrollViewEl = this._scrollViewEl || this.el;
			mini.scrollIntoView(itemEl, _scrollViewEl, false);
		} catch (e) {
		}
	},
	/**
	 * 根据给定序号获取列表项数据对象，如果没有参数则默认返回第一项。
	 * @param item {Number|Object}
	 * @return {Object}
	 */
	getItem: function (item) {
		if (typeof item == "object")
			return item;
		if (typeof item == "number")
			return this.data[item];
		return this.findItems(item)[0];
	},
	/**
	 * 获取列表项总数
	 * @return {Number}
	 */
	getCount: function () {
		return this.data.length;
	},
	/**
	 * 获取指定列表项的序号
	 * @param item {Object} 列表项数据
	 * @return {Number}
	 */
	indexOf: function (item) {
		return this.data.indexOf(item);
	},
	/**
	 * 获取指定序号的列表项数据
	 * @param index {Number}
	 * @return {Object} 列表项数据
	 */
	getAt: function (index) {
		return this.data[index];
	},
	/**
	 * 更新指定列表项的数据
	 * @param item {Number|Object} 序号或者列表项数据
	 * @param options {Object}
	 */
	updateItem: function (item, options) {
		item = this.getItem(item);
		if (!item)
			return;
		mini.copyTo(item, options);
		this.doUpdate();
	},
	/**
	 * 加载数据
	 * @param data {Array|String} 数组或者是uri地址。
	 */
	load: function (data) {
		if (typeof data == "string")
			this.setUrl(data);
		else
			this.setData(data);
	},
	/**
	 * 加载数组数据
	 * @param data {Array}
	 */
	loadData: function (data) {
		this.setData(data);
	},
	/**
	 * 设置 data 属性的值，并更新组件。
	 * @param data {Array}
	 */
	setData: function (data) {
		if (typeof data == "string") {
			data = eval(data);
		}
		if (!mini.isArray(data))
			data = [];
		this.data = data;

		this.doUpdate();

		if (this.value != "") {
			this.deselectAll();
			var records = this.findItems(this.value);
			this.selects(records);
		}
	},
	/**
	 * 获取data 属性的值
	 * @return {Array}
	 */
	getData: function () {
		return this.data.clone();
	},
	/**
	 * 设置 url 属性并从url地址获取数据更新组件。
	 * @param url {String}
	 */
	setUrl: function (url, param) {

		this.url = this.parseUrl(url);
		if(this._autoLoad)
			this._doLoad(param);
	},
	/**
	 * 获取 url 属性
	 * @return {String}
	 */
	getUrl: function () {
		return this.url;
	},
	/**
	 * 远程加载数据。
	 */
	_doLoad: function (params) {
		try {
	        var url = eval(this.url);
	        if (url != undefined) {
	            this.url = url;
	        }
	    } catch (e) { }

	    var e = {
	        url: this.url,
	        async: false,
	        type: "get",
			dataType:'json',
	        params: params,
	        data: params,
			needpid: this.needpid === undefined ? false : this.needpid,
	        cache: this.cache === undefined ? false : this.cache,
	        cancel: false,
            timeout: 30000
	    };
	    this.fire("beforeload", e);
	    if (e.data != e.params && e.params != params) {
	        e.data = e.params;
	    }
	    if (e.cancel == true) return;

	    var sf = this;
	    var url = e.url;
	    mini.copyTo(e, {
	        success: function (text) {
	            var data = null;
	            try {
	                data = mini.decode(text);
					if(mini.globalOpts.dataField){
						data = data[mini.globalOpts.dataField];
					}
	            } catch (ex) {
	                data = []
	                if (mini_debugger == true) {
	                    alert(url + "\njson is error.");
	                }
	            }
	            if (sf.dataField) {
	                data = mini._getMap(sf.dataField, data);
	            }
	            if (!data) data = [];
	            var ex = { data: data, cancel: false }
	            sf.fire("preload", ex);
	            if (ex.cancel == true) return;

	            sf.setData(ex.data);

	            sf.fire("load");

	            setTimeout(function () {
	                sf.doLayout();
	            }, 100);

	        },
	        error: function (jqXHR, textStatus, errorThrown) {
	            var e = {
	                xmlHttp: jqXHR,
	                errorMsg: jqXHR.responseText,
	                errorCode: jqXHR.status
	            };
	            if (mini_debugger == true) {
	                alert(url + "\n" + e.errorCode + "\n" + e.errorMsg);
	            }

	            sf.fire("loaderror", e);
	        }
	    });

	    this._ajaxer = mini.ajax(e);
	},

	/**
	 * 设置选中值
	 * @param value {String}
	 */
	setValue: function (value,valid) {
		if (mini.isNull(value))
			value = "";
		if (!mini.isEquals(this.value , value)) {
		    this.deselectAll();

			this.value = value;
			if (this._valueEl)
				this._valueEl.value = value;

			var records = this.findItems(this.value);
			this.selects(records);
            /* when call the setValue("") method,the valid event will be trigger,cause the error icon show pzf 2014-04 */
            if(valid === undefined)
                valid = true;
            if(valid)
                this._OnValueChanged();
		}
	},
	/**
	 * 获取选中值
	 * @return {String}
	 */
	getValue: function () {
		return this.value;
	},
	/**
	 * 获取FORM表单提交对应的值
	 * @return {String}
	 */
	getFormValue: function () {
		return this.value;
	},
	/**
	 * 设置对应json格式数据中的属性名
	 * @param valueField {String}
	 */
	setValueField: function (valueField) {
		this.valueField = valueField;
	},
	/**
	 * 获取对应json格式数据中的属性名
	 * @return {String}
	 */
	getValueField: function () {
		return this.valueField;
	},
	/**
	 * 设置显示文本对应 json格式数据中的属性名
	 * @param value {String}
	 */
	setTextField: function (value) {
		this.textField = value;
	},
	/**
	 * 获取显示文本对应 json格式数据中的属性名
	 * @return {String}
	 */
	getTextField: function () {
		return this.textField;
	},
	/**
	 * 获取指定列表项的值
	 * @param item {Object}
	 * @return {String}
	 */
	getItemValue: function (item) {
	    return String(mini._getMap(this.valueField, item));
	},
	/**
	 * 获取指定列表项的显示文本
	 * @param item {Object}
	 * @return {String}
	 */
	getItemText: function (item) {
	    var t = mini._getMap(this.textField, item);
		return mini.isNull(t) ? '' : String(t);
	},
	/**
	 * 获取指定列表项集合的值和显示文本集合
	 * @param recores {Array}
	 * @return {Array}
	 * @example
	 * var records = [{id:1,text:'1'},{id:2,text:'2'},{id:3,text:'3'}]
	 * xxx.getValueAndText(records) => [[1,2,3],['1','2','3']]
	 */
	getValueAndText: function (records) {
		if (mini.isNull(records))
			records = [];
		if (!mini.isArray(records)) {
			records = this.findItems(records);
		}
		var values = [];
		var texts = [];
		for (var i = 0, l = records.length; i < l; i++) {
			var record = records[i];
			if (record) {
				values.push(this.getItemValue(record));
				texts.push(this.getItemText(record));
			}
		}
		return [values.join(this.delimiter), texts.join(this.delimiter)];
	},
	/**
	 * 获取指定值集合对应的列表项集合
	 * @param value {String}
	 * @return {Array}
	 * @example
	 * var str = "1,2,3";
	 * xx.findItems(str) => [{id:1,text:'1'},{id:2,text:'2'},{id:3,text:'3'}]
	 */
	findItems: function (value) {
		if (mini.isNull(value))
			value = "";
		var values = String(value).split(this.delimiter);

		var data = this.data;
		var valueRecords = {};
		for (var j = 0, k = data.length; j < k; j++) {
			var record = data[j];
			var v = record[this.valueField];
			valueRecords[v] = record;
		}

		var records = [];
		for (var i = 0, l = values.length; i < l; i++) {
			var v = values[i];
			var record = valueRecords[v];
			if (record) {
				records.push(record);
			}
		}
		return records;
	},
	removeAll: function () {
	    var items = this.getData();
	    this.removeItems(items);
	},
	addItems: function (items, index) {
	    if (!mini.isArray(items)) return;
	    if (mini.isNull(index)) index = this.data.length;
	    this.data.insertRange(index, items);
	    this.doUpdate();
	},
	addItem: function (item, index) {
	    if (!item) return;
	    if (this.data.indexOf(item) != -1) return;
	    if (mini.isNull(index)) index = this.data.length;
	    this.data.insert(index, item);
	    this.doUpdate();
	},
	removeItems: function (items) {
	    if (!mini.isArray(items)) return;
	    this.data.removeRange(items);

	    this._checkSelecteds();
	    this.doUpdate();
	},
	removeItem: function (item) {
	    var index = this.data.indexOf(item);
	    if (index != -1) {
	        this.data.removeAt(index);
	        this._checkSelecteds();
	        this.doUpdate();
	    }
	},
	moveItem: function (item, index) {
	    if (!item || !mini.isNumber(index)) return;


	    if (index < 0) index = 0;
	    if (index > this.data.length) index = this.data.length;
	    this.data.remove(item);

	    this.data.insert(index, item);
	    this.doUpdate();
	},

	_selected: null,
	_selecteds: [],

	/**
	 * 是否支持多选
	 * @type Boolean
	 * @default false
	 */
	multiSelect: false,

	_checkSelecteds: function () {
		for (var i = this._selecteds.length - 1; i >= 0; i--) {
			var record = this._selecteds[i];
			if (this.data.indexOf(record) == -1) {
				this._selecteds.removeAt(i);
			}
		}
		var vts = this.getValueAndText(this._selecteds);
		this.value = vts[0];
		if (this._valueEl)
			this._valueEl.value = this.value;
	},
	/**
	 * 设置是否支持多选
	 * @param value {Boolean}
	 */
	setMultiSelect: function (value) {
		this.multiSelect = value;
	},
	/**
	 * 获取是否支持多选
	 * @return {Boolean}
	 */
	getMultiSelect: function () {
		return this.multiSelect;
	},
	/**
	 * 判断指定列表项是否被选中
	 * @param record {Object}
	 * @default {Boolean}
	 */
	isSelected: function (record) {
		if (!record)
			return false;
		return this._selecteds.indexOf(record) != -1;
	},
	/**
	 * 获取被选中的列表项集合
	 * @return {Array}
	 */
	getSelecteds: function () {
		var arr = this._selecteds.clone();
		var me = this;
		mini.sort(arr, function (a, b) {
			var index1 = me.indexOf(a);
			var index2 = me.indexOf(b);
			if (index1 > index2)
				return 1;
			if (index1 < index2)
				return -1;
			return 0;
		});
		return arr;
	},
	/**
	 * 设置列表项被选中(单选)
	 * @param record {Object}
	 */
	setSelected: function (record) {
		if (record) {
			this._selected = record;
			this.select(record);
		}
	},
	/**
	 * 获取被选中列表项（单选）
	 * @return {Object}
	 */
	getSelected: function () {
		return this._selected;
	},
	/**
	 * 选中指定列表项
	 * @param record {Object}
	 */
	select: function (record) {
		record = this.getItem(record);
		if (!record)
			return;
		if (this.isSelected(record))
			return;
		this.selects([record]);
	},
	/**
	 * 取消选中指定列表项
	 * @param record {Object}
	 */
	deselect: function (record) {
		record = this.getItem(record);
		if (!record)
			return;
		if (!this.isSelected(record))
			return;
		this.deselects([record]);
	},
	/**
	 * 全部选中
	 */
	selectAll: function () {
		var data = this.data.clone();
		this.selects(data);
	},
	/**
	 * 全部取消选中。
	 */
	deselectAll: function () {
		this.deselects(this._selecteds);
	},
	/**
	 * 全部取消选中
	 */
	clearSelect: function () {
		this.deselectAll();
	},
	/**
	 * 选中指定列表项集合。
	 * @param records {Array}
	 */
	selects: function (records) {
		if (!records || records.length == 0)
			return;
		records = records.clone();
		for (var i = 0, l = records.length; i < l; i++) {
			var record = records[i];
			if (!this.isSelected(record)) {
				this._selecteds.push(record);
			}
		}
		var me = this;
			me._doSelects();
	},
	/**
	 * 取消选中指定列表项集合
	 * @param records {Array}
	 */
	deselects: function (records) {
		if (!records || records.length == 0)
			return;
		records = records.clone();
		for (var i = records.length - 1; i >= 0; i--) {
			var record = records[i];
			if (this.isSelected(record)) {
				this._selecteds.remove(record);
			}
		}

		var me = this;
			me._doSelects();
	},
	_doSelects: function () {
		var vts = this.getValueAndText(this._selecteds);
		this.value = vts[0];
		if (this._valueEl)
			this._valueEl.value = this.value;

		for (var i = 0, l = this.data.length; i < l; i++) {
			var record = this.data[i];
			var select = this.isSelected(record);
			if (select) {
				this.addItemCls(record, this._itemSelectedCls);
			} else {
				this.removeItemCls(record, this._itemSelectedCls);
			}
			var index = this.data.indexOf(record);
			var id = this._createCheckId(index);
			var checkbox = document.getElementById(id);
			if (checkbox){
                checkbox.checked = !!select;
                checkbox.defaultChecked = !!select;
            }
				
		}
	},
	_OnSelectionChanged: function (records, select) {
		var vts = this.getValueAndText(this._selecteds);
		this.value = vts[0];
		if (this._valueEl)
			this._valueEl.value = this.value;

		var e = {
			selecteds: this.getSelecteds(),
			selected: this.getSelected(),
			value: this.getValue()
		};
		this.fire("SelectionChanged", e);
	},
	_createCheckId: function (index) {
		return this.uid + "$ck$" + index;
	},
	_createItemId: function (index) {
		return this.uid + "$" + index;
	},
	/**
	 * 默认点击事件响应函数
	 */
	__OnClick: function (e) {
		this._fireEvent(e, 'Click');
	},
	/**
	 * 默认鼠标双击点击事件响应函数
	 */
	__OnDblClick: function (e) {
		this._fireEvent(e, 'Dblclick');
	},
	/**
	 * 默认鼠标按下事件响应函数
	 */
	__OnMouseDown: function (e) {
		this._fireEvent(e, 'MouseDown');
	},
	/**
	 * 默认鼠标抬起事件响应函数
	 */
	__OnMouseUp: function (e) {
		this._fireEvent(e, 'MouseUp');
	},
	/**
	 * 默认鼠标移动事件响应函数
	 */
	__OnMouseMove: function (e) {
		this._fireEvent(e, 'MouseMove');
	},
	/**
	 * 默认鼠标经过事件响应函数
	 */
	__OnMouseOver: function (e) {
		this._fireEvent(e, 'MouseOver');
	},
	/**
	 * 默认鼠标移出事件响应函数
	 */
	__OnMouseOut: function (e) {
		this._fireEvent(e, 'MouseOut');
	},
	/**
	 * 默认按键按下事件响应函数
	 */
	__OnKeyDown: function (e) {
		this._fireEvent(e, 'KeyDown');
        this.__OnInputKeyDown(e);
	},
	/**
	 * 默认按键抬起事件响应函数
	 */
	__OnKeyUp: function (e) {
		this._fireEvent(e, 'KeyUp');
	},
	/**
	 * 默认鼠标右键事件响应函数
	 */
	__OnContextMenu: function (e) {
		this._fireEvent(e, 'ContextMenu');
	},
	/**
	 * 释放方法
	 * @param e {Event}
	 * @param name {String} 事件名
	 */
	_fireEvent: function (e, name) {
		if (!this.enabled)
			return;

		var item = this.getItemByEvent(e);
		if (!item)
			return;
		var fn = this['_OnItem' + name];
		if (fn) {
			fn.call(this, item, e);
		} else {
			var eve = {
				item: item,
				htmlEvent: e
			};
			this.fire("item" + name, eve);
		}
	},
	/**
	 * 列表项点击事件默认响应函数。
	 * @param item {Object}
	 * @param e {Event}
	 */
	_OnItemClick: function (item, e) {
		if (this.isReadOnly() || this.enabled == false || item.enabled === false) {
			e.preventDefault();
			return;
		}

		var value = this.getValue();

		if (this.multiSelect) {
			if (this.isSelected(item)) {
				this.deselect(item);
				if (this._selected == item) {
					this._selected = null;
				}
			} else {
				this.select(item);
				this._selected = item;
			}
			this._OnSelectionChanged();
		} else {
			if (!this.isSelected(item)) {
				this.deselectAll();
				this.select(item);
				this._selected = item;
				this._OnSelectionChanged();
			}
		}

		if (value != this.getValue()) {
			this._OnValueChanged();
		}

		var e = {
			item: item,
			htmlEvent: e
		};
		this.fire("itemclick", e);
	},
	/**
	 * 移除时失去焦点
	 * @type Boolean
	 * @default true
	 */
	_blurOnOut: true,
	/**
	 * 列表项鼠标移出事件默认响应函数。
	 * @param item {Object}
	 * @param e {Event}
	 */
	_OnItemMouseOut: function (item, e) {
	    mini.repaint(this.el);

		if (!this.enabled)
			return;
		if (this._blurOnOut) {
			this._blurItem();
		}
		var e = {
			item: item,
			htmlEvent: e
		};
		this.fire("itemmouseout", e);
	},
	/**
	 * 列表项鼠标移动事件默认响应函数。
	 * @param item {Object}
	 * @param e {Event}
	 */
	_OnItemMouseMove: function (item, e) {
	    mini.repaint(this.el);

		if (!this.enabled || item.enabled === false)
			return;

		this._focusItem(item);
		var e = {
			item: item,
			htmlEvent: e
		};
		this.fire("itemmousemove", e);
	},
	/**
	 * 为列表项添加 itemclick 事件响应函数
	 * @param fn {Function}
	 * @param scope {Object} 应用上下文对象
	 */
	onItemClick: function (fn, scope) {
		this.on("itemclick", fn, scope);
	},
	/**
	 * 为列表项添加 itemmousedown 事件响应函数
	 * @param fn {Function}
	 * @param scope {Object} 应用上下文对象
	 */
	onItemMouseDown: function (fn, scope) {
		this.on("itemmousedown", fn, scope);
	},
	/**
	 * 为列表项添加 beforeload 事件响应函数
	 * @param fn {Function}
	 * @param scope {Object} 应用上下文对象
	 */
	onBeforeLoad: function (fn, scope) {
		this.on("beforeload", fn, scope);
	},
	/**
	 * 为列表项添加 load 事件响应函数
	 * @param fn {Function}
	 * @param scope {Object} 应用上下文对象
	 */
	onLoad: function (fn, scope) {
		this.on("load", fn, scope);
	},
	/**
	 * 为列表项添加 loaderror 事件响应函数
	 * @param fn {Function}
	 * @param scope {Object} 应用上下文对象
	 */
	onLoadError: function (fn, scope) {
		this.on("loaderror", fn, scope);
	},
	/**
	 * 为列表项添加 preload 事件响应函数
	 * @param fn {Function}
	 * @param scope {Object} 应用上下文对象
	 */
	onPreLoad: function (fn, scope) {
		this.on("preload", fn, scope);
	},
	/**
	 * 用于从HTML标签中提取配置参数的方法。在此方法中有对 url, data, value, textField, valueField, onitemclick, onitemmousemove,
	 * onselectionchanged, onitemdblclick, onbeforeload, onload, onloaderror, ondataload multiSelect等属性。
	 * @param el {Object} DOM元素
	 * @returns {Object} JSON对象
	 */
	getAttrs: function (el) {
		var attrs = mini.ListControl.superclass.getAttrs.call(this, el);
		/**
		 * onitemclick 事件当列表项被单击时触发<br/>
		 * 支持标签配置。
		 * @name onitemclick
		 * @event
		 * @memberOf mini.ListControl.prototype
		 */

		/**
		 * onitemmousemove 事件当鼠标在列表项上移动时触发<br/>
		 * 支持标签配置。
		 * @name onitemmousemove
		 * @event
		 * @memberOf mini.ListControl.prototype
		 */

		/**
		 * onselectionchanged 事件当选中列表项改变时触发<br/>
		 * 支持标签配置。
		 * @name onselectionchanged
		 * @event
		 * @memberOf mini.ListControl.prototype
		 */

		/**
		 * onitemdblclick 事件当列表项被双击时触发<br/>
		 * 支持标签配置。
		 * @name onitemdblclick
		 * @event
		 * @memberOf mini.ListControl.prototype
		 */

		/**
		 * onbeforeload 事件当组件加载远程数据前触发<br/>
		 * 支持标签配置。
		 * @name onbeforeload
		 * @event
		 * @memberOf mini.ListControl.prototype
		 */

		/**
		 * onload 事件当组件加载远程数据成功时触发<br/>
		 * 支持标签配置。
		 * @name onload
		 * @event
		 * @memberOf mini.ListControl.prototype
		 */

		/**
		 * onloaderror 事件当组件加载远程数据失败时触发<br/>
		 * 支持标签配置。
		 * @name onloaderror
		 * @event
		 * @memberOf mini.ListControl.prototype
		 */

		/**
		 * ondataload 不明用途<br/>
		 * 支持标签配置。
		 * @name ondataload
		 * @event
		 * @memberOf mini.ListControl.prototype
		 * @deprecated
		 * @private
		 */
		mini._ParseString(el, attrs,
		["url", "data", "value", "textField", "valueField",
		"onitemclick", "onitemmousemove", "onselectionchanged", "onitemdblclick",
		"onbeforeload", "onload", "onloaderror", "ondataload"
		]
		);
		mini._ParseBool(el, attrs,
		["multiSelect"
		]
		);

		var valueField = attrs.valueField || this.valueField;
		var textField = attrs.textField || this.textField;
		if (el.nodeName.toLowerCase() == "select") {
			var data = [];
			for (var i = 0, l = el.length; i < l; i++) {
				var op = el.options[i];
				var o = {};
				o[textField] = op.text;
				o[valueField] = op.value;

				data.push(o);
			}
			if (data.length > 0) {
				attrs.data = data;
			}
		}

		return attrs;
	}
});
/**
 * 文件中定义了 CheckBox 组件。
 * @fileOverview CheckBox.js
 * @author 殷文旭
 */


/**
 * @class CheckBox 是mini UI中的复选框组件。
 * @constructor
 * @extends mini.Control
 * @requires mini.Control
 * @version 1.0
 */
mini.CheckBox = function () {
	mini.CheckBox.superclass.constructor.call(this);
}
mini.extend(mini.CheckBox, mini.Control,{
	/**
	 * 标记，代表这是一个form组件
	 * @type Boolean
	 * @default true
	 */
    formField: true,

    _clearText: false,
	/**
	 * 文本
	 * @type String
	 * @default ""
	 */
	text: "",
	/**
	 * 选中状态
	 * @type Boolean
	 * @default false
	 */
	checked: false,
	/**
	 * 默认值
	 * @type Boolean
	 * @default false
	 */
	defaultValue: false,
	/**
	 * “真”值，被选中时复选框对应的值
	 * @type Boolean
	 * @default true
	 */
	trueValue: true,
	/**
	 * “假”值，未被选中时复选框对应的值
	 * @type Boolean
	 * @default false
	 */
	falseValue: false,
	/**
	 * 组件样式类
	 * @type String
	 * @default "mini-checkbox"
	 */
	uiCls: "mini-checkbox",
	/**
	 * 创建组件HTML结构，并绑定给组件实例。
	 * @default
	 */
	_create: function () {
		var ckid = this.uid + "$check";
		this.el = document.createElement("span");
		this.el.className = "mini-checkbox";
		this.el.innerHTML = '<input id="' + ckid + '" name="' + this.id + '" type="checkbox" class="mini-checkbox-check"><label for="' + ckid + '" onclick="return false;">' + this.text + '</label>';

		this._checkEl = this.el.firstChild;
		this._labelEl = this.el.lastChild;
	},
	
	/**
	 * 析构函数
	 */
	destroy: function (removeEl) {
		if (this._checkEl) {
			this._checkEl.onmouseup = null;
			this._checkEl.onclick = null;
            mini.clearEvent(this._checkEl);
            this.el.removeChild(this._checkEl);
			this._checkEl = null;
		}
        if (this._labelEl) {
             mini.clearEvent(this._labelEl);
            this.el.removeChild(this._labelEl);
            this._labelEl = null;
        }
		mini.CheckBox.superclass.destroy.call(this, removeEl);
	},
	/**
	 * 设置组件初始化完成后的需要执行的回调函数。
	 * 通常组件的非结构和样式相关操作都绑定在这里，这样可以提前绘制完成组件.
	 */
	_initEvents: function () {
		mini._BindEvents( function () {
			mini.on(this.el, "click", this.__onClick, this);

			this._checkEl.onmouseup = function () {
				return false;
			}
			var sf = this;

			this._checkEl.onclick = function () {
				if (sf.isReadOnly())
					return false
			}
            mini.on(this._checkEl, "keydown", this.__OnInputKeyDown, this);
		}, this);
	},
	/**
	 * 设置组件name属性
	 * @param value {String}
	 */
	setName: function (value) {
		this.name = value;
		mini.setAttr(this._checkEl, "name", this.name);
	},
	/**
	 * 设置复选框后的文本
	 * @param value {String}
	 */
	setText: function (value) {
		if (this.text !== value) {
			this.text = value;
			this._labelEl.innerHTML = value;
		}
	},
	/**
	 * 获取复选框后的文本
	 * @return {String}
	 */
	getText: function () {
		return this.text;
	},
	/**
	 * 设置复选框是否选中状态
	 * 注意：在此设置时可以使用到我们设置的truevalue 和 falsevalue 
	 * 例如：truevalue = 'A' falsevalue = 'B' 则 setChecked('A')等同于选中。
	 * @param value {String|Boolean}
	 */
	setChecked: function (value,firechangedevent) {
		if (value === true)
			value = true;
		else if (value == this.trueValue)
			value = true;
		else if (value == "true")
			value = true;
		else if (value === 1)
			value = true;
		else if (value == "Y")
			value = true;
		else
			value = false;

		if (this.checked !== value) {
			this.checked = !!value;
			this._checkEl.checked = this.checked;

			this.value = this.getValue();
            /* when call the setValue("") method,the valid event will be trigger,cause the error icon show pzf 2014-04 */
            if (firechangedevent === undefined)
                firechangedevent = true;
            if (firechangedevent) {
                this.fire("checkedchanged", {
                    checked: this.checked
                });
                this.fire("valuechanged", {
                    value: this.getValue()
                });
            }
		}
	},
	/**
	 * 获取复选框是否被选中的状态
	 * @return {Boolean}
	 */
	getChecked: function () {
		return this.checked;
	},
	/**
	 * 与setChecked使用方法与用途类似。
	 * @param value {String|Boolean}
	 */
	setValue: function (value,firechangedevent) {
		if (this.checked != value) {
			this.setChecked(value,firechangedevent);
			this.value = this.getValue();
		}
	},
	/**
	 * 获取复选框的值，此值是，当被选中时，返回trueValue, 当未被选中时，返回falseValue。
	 * @return {String|Boolean}
	 */
	getValue: function () {
		return String(this.checked == true ? this.trueValue : this.falseValue);
	},
	/**
	 * 与getValue使用方法与用途类似。
	 * @return {String|Boolean}
	 */
	getFormValue: function () {
		return this.getValue();
	},
	/**
	 * 设置 "真" 值
	 * @param value {String|Boolean}
	 */
	setTrueValue: function (value) {
		this._checkEl.value = value;
		this.trueValue = value;
	},
	/**
	 * 获取"真" 值
	 * @return {String|Boolean}
	 */
	getTrueValue: function () {
		return this.trueValue;
	},
	/**
	 * 设置"假" 值
	 * @param value {String|Boolean}
	 */
	setFalseValue: function (value) {
		this.falseValue = value;
	},
	/**
	 * 获取"假" 值
	 * @return {String|Boolean}
	 */
	getFalseValue: function () {
		return this.falseValue;
	},
	__onClick: function (e) {

		if (this.isReadOnly())
			return;

		this.setChecked(!this.checked);
		/*this.fire("checkedchanged", {
			checked: this.checked
		});
		this.fire("valuechanged", {
			value: this.getValue()
		});*/

		this.fire("click", e, this);

	},
    focus: function () {
        this._checkEl.focus();
    },
    __OnInputKeyDown: function (e) {
        var ex = { htmlEvent: e };
        if (e.keyCode == 13) {
            this.fire("enter", ex);
        }
        if (e.keyCode == 27) {
            e.preventDefault();
        }
    },
	/**
	 * 用于从HTML标签中提取配置参数的方法。在此方法中有对 text， oncheckedchanged， onclick， onvaluechanged，
	 * enabled， checked， trueValue， falseValue 等属性做提取。
	 * @param el {Object} DOM元素
	 * @returns {Object} JSON对象
	 */
	getAttrs: function (el) {
		var attrs = mini.CheckBox.superclass.getAttrs.call(this, el);
		var jq = jQuery(el);
		/**
		 * oncheckedchanged 事件当复选框的选中状态改变时触发<br/>
		 * 通过在html标签声明。
		 * @name oncheckedchanged
		 * @event
		 * @memberOf mini.CheckBox.prototype
		 */
		/**
		 * onvaluechanged 事件当复选框的值改变时触发，发生在 oncheckedchanged 事件之后<br/>
		 * 通过在html标签声明。
		 * @name onvaluechanged
		 * @event
		 * @memberOf mini.CheckBox.prototype
		 */
		/**
		 * onclick 事件当复选框的被点击时触发，发生在 onvaluechanged 事件之后<br/>
		 * 通过在html标签声明。
		 * @name onclick
		 * @event
		 * @memberOf mini.CheckBox.prototype
		 */
		
		attrs.text = el.innerHTML;
		mini._ParseString(el, attrs,
		["text", "oncheckedchanged", "onclick", "onvaluechanged"
		]
		);

		mini._ParseBool(el, attrs,
		["enabled"
		]
		);

		var checked = mini.getAttr(el, "checked");

		if (checked) {
			attrs.checked = (checked == "true" || checked == "checked") ? true : false;
		}

		var trueValue = jq.attr("trueValue");
		if (trueValue) {
			attrs.trueValue = trueValue;
			trueValue = parseInt(trueValue);
			if (!isNaN(trueValue)) {
				attrs.trueValue = trueValue;
			}
		}
		var falseValue = jq.attr("falseValue");
		if (falseValue) {
			attrs.falseValue = falseValue;
			falseValue = parseInt(falseValue);
			if (!isNaN(falseValue)) {
				attrs.falseValue = falseValue;
			}
		}

		return attrs;
	}
});

mini.regClass(mini.CheckBox, "checkbox");
/**
 * 文件中定义了 CheckBoxList 组件。
 * @fileOverview CheckBoxList.js
 * @author 殷文旭
 */

/**
 * @class CheckBoxList 是mini UI中的复选框组组件
 * @constructor
 * @extends mini.ListControl
 * @requires mini.ListControl
 * @version 1.0
 */
mini.CheckBoxList = function () {
	mini.CheckBoxList.superclass.constructor.call(this);
}
mini.extend(mini.CheckBoxList, mini.ListControl, {
	/**
	 * 标记，代表这是一个form组件
	 * @type Boolean
	 * @default true
	 */
	formField: true,

	/**
	 * 是否支持多选开关
	 * @type Boolean
	 * @default true
	 */
	multiSelect: true,

	/**
	 * 平铺显示项，也就是每行显示的复选框数
	 * @type Number
	 * @default 0
	 */
	repeatItems: 0,

	/**
	 * 布局方式 'none' 默认布局,'flow' 紧凑型布局,'table' 严格对其式的布局 目前支持三种。
	 * @type String
	 * @default "none"
	 */
	repeatLayout: "none",

	/**
	 * 平铺方向 'vertical' 纵向, 'horizontal' 横向 目前支持两种。
	 * @type String
	 * @default 'horizontal'
	 */
	repeatDirection: "horizontal",

	_itemCls: "mini-checkboxlist-item",
	_itemHoverCls: "mini-checkboxlist-item-hover",
	_itemSelectedCls: "mini-checkboxlist-item-selected",

	_tableCls: "mini-checkboxlist-table",
	_tdCls: "mini-checkboxlist-td",
	_checkType: "checkbox",

	/**
	 * 组件样式类
	 * @type String
	 * @default "mini-checkboxlist"
	 */
	uiCls: "mini-checkboxlist",
	/**
	 * 创建组件HTML结构，并绑定给组件实例。
	 * @default
	 */
	_create: function () {
		var el = this.el = document.createElement("div");
		this.el.className = this.uiCls;

		this.el.innerHTML = '<div class="mini-list-inner"></div><div class="mini-errorIcon"></div><input type="hidden" />';
		this._innerEl = this.el.firstChild;
		this._valueEl = this.el.lastChild;
		this._errorIconEl = this.el.childNodes[1];
	},
	/**
	 * 整理数据，根据设置的平铺规则组织数据。
	 */
	_getRepeatTable: function () {
		var table = [];
		if (this.repeatItems > 0) {
			if (this.repeatDirection == "horizontal") {
				var row = [];
				for (var i = 0, l = this.data.length; i < l; i++) {
					var item = this.data[i];
					if (row.length == this.repeatItems) {
						table.push(row);
						row = [];
					}
					row.push(item);
				}
				table.push(row);
			} else {
				var len = this.repeatItems > this.data.length ? this.data.length : this.repeatItems;
				for (var i = 0, l = len; i < l; i++) {
					table.push([]);
				}
				for (var i = 0, l = this.data.length; i < l; i++) {
					var item = this.data[i];
					var index = i % this.repeatItems;
					table[index].push(item);
				}
			}
		} else {
			table = [this.data.clone()];
		}
		return table;
	},
	/**
	 * 更新组件容器内HTML结构，生成复选框列表
	 */
	doUpdate: function () {
		var data = this.data;
		var s = "";

		for (var i = 0, l = data.length; i < l; i++) {
			var item = data[i];
			item._i = i;
		}

		if (this.repeatLayout == "flow") {

			var table = this._getRepeatTable();
			for (var i = 0, l = table.length; i < l; i++) {
				var row = table[i];
				for (var j = 0, k = row.length; j < k; j++) {
					var item = row[j];
					s += this._createItemHtml(item, item._i);
				}
				if (i != l - 1) {
					s += '<br/>';
				}
			}

		} else if (this.repeatLayout == "table") {
			var table = this._getRepeatTable();
			s += '<table class="' + this._tableCls + '" cellpadding="0" cellspacing="1">';
			for (var i = 0, l = table.length; i < l; i++) {
				var row = table[i];
				s += '<tr>';
				for (var j = 0, k = row.length; j < k; j++) {
					var item = row[j];
					s += '<td class="' + this._tdCls + '">';
					s += this._createItemHtml(item, item._i);
					s += '</td>';
				}
				s += '</tr>';
			}
			s += '</table>';
		} else {
			for (var i = 0, l = data.length; i < l; i++) {
				var item = data[i];
				s += this._createItemHtml(item, i);
			}
		}
		this._innerEl.innerHTML = s;

		for (var i = 0, l = data.length; i < l; i++) {
			var item = data[i];
			delete item._i;
		}
	},
	destroy: function (removeEl) {
	    if (this._valueEl) {
	       this._valueEl = null;
	    }
	    if (this._errorIconEl) {
	       this._errorIconEl = null;
	    }
	    if (this._innerEl) {
	       this._innerEl = null;
	    }
	    mini.CheckBoxList.superclass.destroy.call(this, removeEl);
	},
	/**
	 * 生成单个复选框。奇怪，什么不使用checkbox
	 */
    _createItemHtml: function (item, index) {
        var e = this._OnDrawItem(item, index);
        var id = this._createItemId(index);
        var ckId = this._createCheckId(index);
        var ckValue = this.getItemValue(item);

        var disable = '';

        var s = '<div id="' + id + '" index="' + index + '" class="' + this._itemCls + ' ';
        if (item.enabled === false) {
            s += ' mini-disabled ';
            disable = 'disabled';
        }

        var onclick = 'onclick="return false"';

        onclick = 'onmousedown="this._checked = this.checked;" onclick="this.checked = this._checked"';


        s += e.itemCls + '" style="' + e.itemStyle + '"><input ' + onclick + ' ' + disable + ' value="' + ckValue + '" id="' + ckId + '" type="' + this._checkType + '" /><label for="' + ckId + '" onclick="return false;">';
        s += e.itemHtml + '</label></div>';
        return s;
    },
	
	_OnDrawItem: function (item, index) {
		var value = this.getItemText(item);
		var e = {
			index: index,
			item: item,
			itemHtml: value,
			itemCls: "",
			itemStyle: ""
		};
		this.fire("drawitem", e);

		if (e.itemHtml === null || e.itemHtml === undefined)
			e.itemHtml = "";

		return e;
	},
    focus: function () {
        if( jQuery(this._innerEl).find("input:checked:enabled").length>0)
            jQuery(this._innerEl).find("input:checked:enabled:first").focus();
        else
            jQuery(this._innerEl).find("input:first").focus();

    },
    __OnInputKeyDown: function (e) {
        var ex = { htmlEvent: e };
        if (e.keyCode == 13) {
            this.fire("enter", ex);
        }
        if (e.keyCode == 27) {
            e.preventDefault();
        }
    },
	/**
	 * 设置平铺显示项数目
	 * @param value {Number}
	 */
	setRepeatItems: function (value) {
		value = parseInt(value);
		if (isNaN(value))
			value = 0;
		if (this.repeatItems != value) {
			this.repeatItems = value;
			this.doUpdate();
		}
	},
	/**
	 * 获取平铺显示项数目
	 * @return {Number}
	 */
	getRepeatItems: function () {
		return this.repeatItems;
	},
	/**
	 * 设置布局方式
	 * @param value {String}
	 */
	setRepeatLayout: function (value) {
		if (value != "flow" && value != "table")
			value = "none";
		if (this.repeatLayout != value) {
			this.repeatLayout = value;
			this.doUpdate();
		}
	},
	/**
	 * 获取布局方式
	 * @return {String}
	 */
	getRepeatLayout: function () {
		return this.repeatLayout;
	},
	/**
	 * 设置平铺方向
	 * @param value {String}
	 */
	setRepeatDirection: function (value) {
		if (value != "vertical")
			value = "horizontal";
		if (this.repeatDirection != value) {
			this.repeatDirection = value;
			this.doUpdate();
		}
	},
	/**
	 * 获取平铺方向
	 * @return {String}
	 */
	getRepeatDirection: function () {
		return this.repeatDirection;
	},
	/**
	 * 用于从HTML标签中提取配置参数的方法。在此方法中有对  repeatItems， repeatLayout， repeatDirection，
	 * 等属性做提取。
	 * @param el {Object} DOM元素
	 * @returns {Object} JSON对象
	 */
	getAttrs: function (el) {
		var attrs = mini.CheckBoxList.superclass.getAttrs.call(this, el);
		var jq = jQuery(el);

		var repeatItems = parseInt(jq.attr("repeatItems"));
		if (!isNaN(repeatItems)) {
			attrs.repeatItems = repeatItems;
		}
		var repeatLayout = jq.attr("repeatLayout");
		if (repeatLayout) {
			attrs.repeatLayout = repeatLayout;
		}
		var repeatDirection = jq.attr("repeatDirection");
		if (repeatDirection) {
			attrs.repeatDirection = repeatDirection;
		}
        /* 增加ondrawitem配置 潘正锋 2014-03 */
        var ondrawitem = jq.attr("ondrawitem");
        if (ondrawitem) {
            attrs.ondrawitem = ondrawitem;
        }

		return attrs;
	}
});
mini.regClass(mini.CheckBoxList, "checkboxlist");
mini.Box = function () {
	mini.Box.superclass.constructor.call(this);

}
mini.extend(mini.Box, mini.Container, {

	style: "",
	borderStyle: "",
	bodyStyle: "",

	uiCls: "mini-box",
	_create: function () {
		this.el = document.createElement("div");
		this.el.className = "mini-box";
		this.el.innerHTML = '<div class="mini-box-border"></div>';
		this._bodyEl = this._borderEl = this.el.firstChild;

		this._contentEl = this._bodyEl;
	},
	_initEvents: function () {

	},
	doLayout: function () {
		if (!this.canLayout())
			return;

		var autoHeight = this.isAutoHeight();
		var autoWidth = this.isAutoWidth();

		var padding = mini.getPaddings(this._bodyEl);
		var margin = mini.getMargins(this._bodyEl);

		if (!autoHeight) {

			var h = this.getHeight(true);
			if (jQuery.boxModel) {

				h = h - padding.top - padding.bottom;
			}
			h = h - margin.top - margin.bottom;
			if (h < 0)
				h = 0;
			this._bodyEl.style.height = h + "px";
		} else {
			this._bodyEl.style.height = "";
		}

		var w = this.getWidth(true);
		var elWidth = w;
		w = w - margin.left - margin.right;
		if (jQuery.boxModel) {
			w = w - padding.left - padding.right;
		}
		if (w < 0)
			w = 0;
		this._bodyEl.style.width = w + "px";

		mini.layout(this._borderEl);
		this.fire("layout");
	},
	setBody: function (value) {
		if (!value)
			return;
		if (!mini.isArray(value))
			value = [value];
		for (var i = 0, l = value.length; i < l; i++) {
			mini.append(this._bodyEl, value[i]);
		}
		mini.parse(this._bodyEl);
		this.doLayout();
	},
	set_bodyParent: function (value) {

		if (!value)
			return;

		var el = this._bodyEl;

		var p = value;
		while (p.firstChild) {
			el.appendChild(p.firstChild);
		}
		this.doLayout();
	},
	setBodyStyle: function (value) {
		mini.setStyle(this._bodyEl, value);
		this.doLayout();
	},
	getAttrs: function (el) {
		var attrs = mini.Box.superclass.getAttrs.call(this, el);

		attrs._bodyParent = el;

		mini._ParseString(el, attrs,
		["bodyStyle"
		]
		);

		return attrs;
	}
});
mini.regClass(mini.Box, "box");

mini = mini || {};


mini.Button = function () {
    mini.Button.superclass.constructor.call(this);
}

mini.extend(mini.Button, mini.Control,{
    

    text: "",

    iconCls: "",

    iconStyle: "",
    /*
     * 背景是否透明开关
     * @type Boolean
     * @default false
     */
    plain: false,
	

    checkOnClick: false,
    

    checked: false,
    /*
     * 菜单项组名称。设置后，会单选菜单项组。也就是说一组按钮有了单选的特性。
     * @type String
     * @default ""
     */
    groupName: "",

    _plainCls: "mini-button-plain",

    _hoverCls: "mini-button-hover",

    _pressedCls: "mini-button-pressed",

    _checkedCls: "mini-button-checked",

    _disabledCls: "mini-button-disabled",
	

    allowCls: "",
	

    _clearBorder: false,

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        this._allowUpdate = kv.text || kv.iconStyle || kv.iconCls || kv.iconPosition;

        mini.Button.superclass.set.call(this, kv);

        if (this._allowUpdate === false) {
            this._allowUpdate = true;
            this.doUpdate();	//更新
        }

        return this;
    },

    uiCls: "mini-button",
    

    _create: function () {
        this.el = document.createElement("a");

        this.el.className = "mini-button";
        this.el.hideFocus = true;
        this.el.href = "javascript:void(0)";

        this.doUpdate();
    },
    /*
     * 设置组件初始化完成后的需要执行的回调函数，
     * 通常组件的非结构和样式相关操作都绑定在这里，这样可以提前绘制完成组件.
     * @private
     */
    _initEvents: function () {
        mini._BindEvents(function () {
            mini_onOne(this.el, "mousedown", this.__OnMouseDown, this);
            mini_onOne(this.el, "click", this.__OnClick, this);
        }, this);
    },
    /*
     * 析构函数
     */
    destroy: function (removeEl) {
        if (this.el) {
            this.el.onclick = null;
            this.el.onmousedown = null;
        }
        if (this.menu) this.menu.owner = null;
        this.menu = null;
        mini.Button.superclass.destroy.call(this, removeEl);
    },
    /*
     * 更新组件函数
     */
    doUpdate: function () {
        if (this._allowUpdate === false) return;
        
        var cls = "", text = this.text;

        if (this.iconCls && text) {
            cls = " mini-button-icon " + this.iconCls;
        } else if (this.iconCls && text === "") {
            cls = " mini-button-iconOnly " + this.iconCls;
            text = "&nbsp;";
        } else {
            if (text == "") text = "&nbsp;";
        }
        var s = '<span class="mini-button-text ' + cls + '">' + text + '</span>';
        if (this.allowCls) {
            s = s + '<span class="mini-button-allow ' + this.allowCls + '"></span>';
        }
        this.el.innerHTML = s;
    },
    /*
     * 作为a标签形式按钮的href值，与HTML a标签的href属性同等功能。
     * @type String
     * @default ""
     */
    href: "",
    /*
     * 设置 href 属性
     * @param value {String}
     */
    setHref: function (value) {
        this.href = value;
        this.el.href = value;
        var el = this.el;
        setTimeout(function () {
            el.onclick = null;
        }, 100);
    },
    /*
     * 获取 href 属性值
     * @return {String}
     */
    getHref: function () {
        return this.href;
    },
   	/*
   	 * 也是作为a标签形式按钮相关属性，用以指定连接打开的位置，与标准a标签的额target属性同等功能。
   	 * @type String
   	 * @default ""
   	 */
    target: "",
    /*
     * 设置 target 属性
     * @param value {String}
     */
    setTarget: function (value) {
        this.target = value;
        this.el.target = value;
    },
    /*
     * 获取target 属性
     * @return {String}
     */
    getTarget: function () {
        return this.target;
    },
    /*
     * 设置按钮显示文本
     * @param value {String}
     */
    setText: function (value) {
        if (this.text != value) {
            this.text = value;
            this.doUpdate();
        }
    },
    /*
     * 获取按钮显示文本
     * @return {String}
     */
    getText: function () {
        return this.text;
    },
    /*
     * 设置图标
     * @param value {String}
     */
    setIconCls: function (value) {
        this.iconCls = value;
        this.doUpdate();
    },
    /*
     * 获得图标样式类
     * @return {String}
     */
    getIconCls: function () {
        return this.iconCls;
    },
    /*
     * 设置图标自定义样式类，无效方法。
     * @deprecated
     */
    setIconStyle: function (value) {
        this.iconStyle = value;
        this.doUpdate();
    },
    /*
     * 获取图标自定义样式类，无效方法。
     * @deprecated
     */
    getIconStyle: function () {
        return this.iconStyle;
    },
    /*
     * 设置图标在按钮中的显示位置，目前支持 "left" 和 "top"两种
     * @param value {String}
     */
    setIconPosition: function (value) {
        this.iconPosition = "left";
        this.doUpdate();
    },
    /*
     * 获取图标在按钮中的显示位置
     * @return {String}
     */
    getIconPosition: function () {
        return this.iconPosition;
    },
    /*
     * 设置组件背景是否透明
     * @param value {Boolean}
     */
    setPlain: function (value) {
        this.plain = value;
        if (value) this.addCls(this._plainCls);
        else this.removeCls(this._plainCls);
    },
    /*
     * 获取组件背景是否透明
     * @return {Boolean}
     */
    getPlain: function () {
        return this.plain;
    },
    /*
     * 设置组件组名
     * @param value {String}
     */
    setGroupName: function (value) {
        this.groupName = value;
    },
    /*
     * 获取组件组名
     * @return {String}
     */
    getGroupName: function () {
        return this.groupName;
    },
    /*
     * 设置是否点击时是否自动选中
     * @param value {Boolean}
     */
    setCheckOnClick: function (value) {
        this.checkOnClick = value;
    },
    /*
     * 获取是否点击时是否自动选中
     * @rerurn {Boolean}
     */
    getCheckOnClick: function () {
        return this.checkOnClick;
    },
    /*
     * 设置组件是否选中
     * @param value {Boolean}
     */
    setChecked: function (value) {

        var fire = this.checked != value;
        this.checked = value;
        if (value) this.addCls(this._checkedCls);
        else this.removeCls(this._checkedCls);
        if (fire) {
            this.fire("CheckedChanged");
        }
    },
    /*
     * 获取组件是否选中
     * @return {Boolean}
     */
    getChecked: function () {
        return this.checked;
    },
    /*
     * 触发组件Click事件
     */
    doClick: function () {
        this.__OnClick(null);
    },
    /*
     * 按钮组件实例的默认点击事件响应函数。
     * @param e Event
     */
    __OnClick: function (e) {
        if (this.readOnly || this.enabled == false) return;
        this.focus();
        if (this.checkOnClick) {
            if (this.groupName) {
                var groupName = this.groupName;
                var buttons = mini.findControls(function (control) {
                    if (control.type == "button" && control.groupName == groupName) return true;
                });
                if (buttons.length > 0) {
                    for (var i = 0, l = buttons.length; i < l; i++) {
                        var button = buttons[i];
                        if (button != this) button.setChecked(false);
                    }
                    this.setChecked(true);
                } else {
                    this.setChecked(!this.checked);
                }
            } else {
                this.setChecked(!this.checked);
            }
        }

        this.fire("click", {
            htmlEvent: e
        });
        return false;
    },
    /*
     * 按钮组件的默认 OnMouseDown 事件响应函数
     * @param e Event
     * @private
     */
    __OnMouseDown: function (e) {
        if (this.isReadOnly()) return;
        this.addCls(this._pressedCls);
        mini.on(document, "mouseup", this.__OnDocMouseUp, this);
    },
    /*
     * 按钮组件的默认 OnDocMouseUp 事件响应函数
     * @param e Event
     * @private
     */
    __OnDocMouseUp: function (e) {
        this.removeCls(this._pressedCls);
        mini.un(document, "mouseup", this.__OnDocMouseUp, this);
    },
    
    /*
     * 为组件添加一个点击响应函数
     */
    onClick: function (fn, scope) {
        this.on("click", fn, scope);
    },
    
    /*
     * 用于从HTML标签中提取配置参数的方法。在此方法中有对 text href iconCls iconStyle iconPosition groupName menu 
     * onclick oncheckedchanged target plain checkOnClick checked 等属性做提取。
     * @param el {Object} DOM元素
     * @returns {Object} JSON对象
     */
    getAttrs: function (el) {
        var attrs = mini.Button.superclass.getAttrs.call(this, el);
        
        attrs.text = el.innerHTML;

        mini._ParseString(el, attrs,
            ["text", "href", "iconCls", "iconStyle", "iconPosition", "groupName", "menu",
                "onclick", "oncheckedchanged", "target"
             ]
        );
        mini._ParseBool(el, attrs,
            ["plain", "checkOnClick", "checked"]
        );
        return attrs;
    }
});
mini.regClass(mini.Button, "button");

/**
 * 文件定义了右侧带按钮的输入框组件。
 * @fileOverview ButtonEdit.js
 * @author 殷文旭
 */

mini = mini || {};

/**
 * ButtonEdit 是mini UI中的带按钮的输入框组件，构造函数中调用了 ValidatorBase 方法，并对组件初始状态做了设置。
 * @class mini.ButtonEdit
 * @constructor
 * @extends mini.ValidatorBase
 * @requires mini.Tooltip
 * @requires mini.ValidatorBase
 */
mini.ButtonEdit = function () {

    mini.ButtonEdit.superclass.constructor.call(this);


    var isReadOnly = this.isReadOnly();
    if (isReadOnly || this.allowInput == false) {
        this._textEl.readOnly = true;
    }
    if (this.enabled == false) {
        this.addCls(this._disabledCls);
    }
    if (isReadOnly) {
        this.addCls(this._readOnlyCls);
    }
    if (this.required) {
        this.addCls(this._requiredCls);
    }
}
mini.extend(mini.ButtonEdit, mini.ValidatorBase, {
    /**
	 * 组件的name属性，与保存值的标签的name属性值一致
	 * @type String
	 * @default ""
	 */
    name: "",
    /**
	 * 标记，代表这是一个form组件
	 * @type Boolean
	 * @default true
	 */
    formField: true,
    /**
	 * 开关，获取焦点时是否自动选中文本
	 * @type Boolean
	 * @default false
	 */
    selectOnFocus: false,
    /**
	 * 是否显示清空按钮
	 * @type String
	 * @default ""
	 */
    showClose: false,

    emptyText: "",
    /**
	 * 默认值
	 * @type String
	 * @default ""
	 */
    defaultValue: "",
    /**
	 * 值，注，此组件是 KEY-VALUE 形式组件，也就是说组件有两个值，一个用于展现，一个用于后台处理。
	 * 这里的值是是实际传递到后台的值。
	 * @type String
	 * @default ""
	 */
    value: "",
    /**
	 * 文本
	 * @type String
	 * @default ""
	 */
    text: "",

    maxLength: 1000,
    minLength: 0,

    width: 125,
    height: 21,
    delimiter: ',',

    inputAsValue: false,

    allowInput: true,
    _noInputCls: "mini-buttonedit-noInput",
    _readOnlyCls: "mini-buttonedit-readOnly",
    _disabledCls: "mini-buttonedit-disabled",

    _emptyCls: "mini-buttonedit-empty",
    _focusCls: "mini-buttonedit-focus",


    _buttonCls: "mini-buttonedit-button",
    _buttonHoverCls: "mini-buttonedit-button-hover",
    _buttonPressedCls: "mini-buttonedit-button-pressed",

    _closeCls: "mini-buttonedit-close",
    showToolTip : true,

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;
        var text = kv.text;
        delete kv.text;

        this._allowUpdate = !(kv.enabled == false || kv.allowInput == false || kv.readOnly);

        mini.ButtonEdit.superclass.set.call(this, kv);

        if (this._allowUpdate === false) {
            this._allowUpdate = true;
            this.doUpdate();
        }

        if (!mini.isNull(text)) {
            this.setText(text);
        }
        if (!mini.isNull(value)) {
            this.setValue(value,this.defaultValueTriggerChange);
        }
        if (!kv.showClose) {
            this.setShowClose(this.showClose);
        }
        if (!kv.showToolTip)
            this.setShowToolTip(this.showToolTip);
        return this;
    },
    uiCls: "mini-buttonedit",
    /**
	 * 组织组件HTML结构字符串
	 * @returns 组件HTML结构字符串
	 */
    _getButtonsHTML: function () {
        var s = '<span class="mini-buttonedit-close"></span>' + this._getButtonHtml();
        return '<span class="mini-buttonedit-buttons">' + s + '</span>';
    },
    _getButtonHtml: function () {
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" '
                        + 'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span class="mini-buttonedit-button" ' + hover + '><span class="mini-buttonedit-icon"></span></span>';
    },
    /**
	 * 创建组件HTML结构，并绑定给组件实例。
	 * @default
	 */
    _create: function () {
        this.el = document.createElement("span");
        this.el.className = "mini-buttonedit";

        var s = this._getButtonsHTML();
        this.el.innerHTML = '<span class="mini-buttonedit-border"><input type="input" class="mini-buttonedit-input" autocomplete="off"/>'
                            + s + '</span><input name="' + this.name + '" type="hidden"/>'

        this._borderEl = this.el.firstChild;
        this._textEl = this._borderEl.firstChild;
        this._valueEl = this.el.lastChild;

        this._buttonsEl = this._borderEl.lastChild;
        this._buttonEl = this._buttonsEl.lastChild;
        this._closeEl = this._buttonEl.previousSibling;

        this._doEmpty();
       
        
    },
    _addTooltip: function (el) {
        this.tooltip = new mini.ButtonEditTip(this._textEl);
    },
    _destroyTooltip: function (removeEl) {
        if (this.tooltip) {
            mini.clearEvent(this.tooltip);
            this.tooltip.destroy(removeEl);
            this.tooltip = null;
        }
    },
    destroy: function (removeEl) {
        if (this.el) {
            this.el.onmousedown = null;
            this.el.onmousewheel = null;
            this.el.onmouseover = null;
            this.el.onmouseout = null;
        }
        this._destroyTooltip(removeEl);
        if (this._textEl) {
            this._textEl.readOnly = null;
            
            this._textEl.onchange = null;
            this._textEl.onfocus = null;
            this._textEl.onmouseover = null;
            this._textEl.onmouseout = null;
            
            this._textEl.placeholder = null;
            this._textEl.onpropertychange = null;
            if(this._textEl._placeholder_label){
                this._textEl._placeholder_label.onmousedown = null;
                this._textEl._placeholder_label.parentNode.removeChild(this._textEl._placeholder_label);
                this._textEl._placeholder_label = null;
            }
            
            mini.clearEvent(this._textEl);
            this._textEl.parentNode.removeChild(this._textEl);
            this._textEl = null;
        }

        if (this._buttonEl) {
            this._buttonEl.onmouseover = null;
            this._buttonEl.onmouseout = null;
            mini.clearEvent(this._buttonEl);

            this._buttonEl.parentNode.removeChild(this._buttonEl);
            this._buttonEl = null;
        }
        if (this._closeEl) {
            this._closeEl.onclick = null;
            mini.clearEvent(this._closeEl);

            this._closeEl.parentNode.removeChild(this._closeEl);
            this._closeEl = null;
        }
        if (this._buttonsEl) {
            mini.clearEvent(this._buttonsEl);

            this._buttonsEl.parentNode.removeChild(this._buttonsEl);
            this._buttonsEl = null;
        }
        if (this._borderEl) {
            mini.clearEvent(this._borderEl);

            this._borderEl.parentNode.removeChild(this._borderEl);
            this._borderEl = null;
        }
        if (this._valueEl) {
            mini.clearEvent(this._valueEl);
            this._valueEl.parentNode.removeChild(this._valueEl);
            this._valueEl = null;
        }
        mini.ButtonEdit.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini_onOne(this.el, "mousedown", this.__OnMouseDown, this);
            mini_onOne(this._textEl, "focus", this.__OnFocus, this);
            mini_onOne(this._textEl, "change", this.__OnInputTextChanged, this);
            mini_onOne(this._closeEl, "click", this._onClearClick, this);

          

            var v = this.text;
            this.text = null;
            this.setText(v);

        }, this);

    },
    _onClearClick: function () {
        if(!this.enabled || this.readOnly)
            return;
        this.setValue("");
        this.setText("");
    },
    
    _inputEventsInited: false,
    /**
	 * 输入框元素事件初始化方法。
	 */
    _initInputEvents: function () {
        if (this._inputEventsInited) return;
        this._inputEventsInited = true;

        mini.on(this.el, "click", this.__OnClick, this);
        mini.on(this._textEl, "blur", this.__OnBlur, this);
        mini.on(this._textEl, "keydown", this.__OnInputKeyDown, this);
        mini.on(this._textEl, "keyup", this.__OnInputKeyUp, this);
        mini.on(this._textEl, "keypress", this.__OnInputKeyPress, this);
    },
    _buttonWidth: 20,
    _closeWidth: 20,

    /**
	 * 调整组件布局
	 */
    _doInputLayout: function () {
       
        this.doLayout();
    },
    doLayout: function () {
        if (this.showClose) {
            if (this.value)
                this._closeEl.style.display = 'inline-block';
            else
                this._closeEl.style.display = 'none';
        }
        var w = this._buttonsEl.offsetWidth + 2;

        this._borderEl.style["paddingRight"] = w + "px";
    },
    setHeight: function (value) {
        if (parseInt(value) == value) value += "px";
        this.height = value;

    },
    focus: function () {
        if(this.enabled == false)
            return;
        try {
            this._textEl.focus();
            var sf = this;
            setTimeout(function () {
                if (sf._focused) {
                    sf._textEl.focus();
                }

            }, 10);
        } catch (e) {
        }
    },
    blur: function () {
        try {
            this._textEl.blur();

        } catch (e) {
        }
    },
    selectText: function () {
        this._textEl.select();
    },

    getTextEl: function () {
        return this._textEl;
    },
    setName: function (value) {
        this.name = value;

        if (this._valueEl) mini.setAttr(this._valueEl, "name", this.name);
    },
    setText: function (value) {

        if (value === null || value === undefined) value = "";
        var fire = this.text !== value;
        this.text = value;
        this._textEl.value = value;

        this._doEmpty();
    },
    getText: function () {
        var text = this._textEl.value;
        return text;

    },

    setValue: function (value,firechangedevent) {
        var v = this.getValue();
        if (value === null || value === undefined) value = "";
        var fire = this.value !== value;
        this.value = value;
        this._valueEl.value = this.getFormValue();
        if (!mini.isEquals(this.value, v)) {
            /* when call the setValue("") method,the valid event will be trigger,cause the error icon show pzf 2014-04 */
            if(firechangedevent === undefined)
                firechangedevent = true;
            if(firechangedevent)
                this._OnValueChanged();
        }
    },
    setShowToolTip: function(value){
        this.showToolTip = value;
        if (this.showToolTip)
            this._addTooltip(this.el);
    },
    _OnValueChanged: function () {
        /**当值变化后，调整清空按钮的显示状态 潘正锋*/
        mini.ButtonEdit.superclass._OnValueChanged.call(this);
        this._doInputLayout();
    },
    getValue: function () {
        return this.value;
    },
    getFormValue: function () {
        value = this.value;
        if (value === null || value === undefined) value = "";
        return String(value);
    },

    _doEmpty: function () {
        this._textEl.placeholder = this.emptyText;
        if (this.emptyText) {
            mini._placeholder(this._textEl);
        }

    },
    setEmptyText: function (value) {
        if (this.emptyText != value) {
            this.emptyText = value;
            this._doEmpty();
        }
    },
    getEmptyText: function () {
        return this.emptyText;
    },

    setMaxLength: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.maxLength = value;
        this._textEl.maxLength = value;
    },
    getMaxLength: function () {
        return this.maxLength;
    },
    setMinLength: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.minLength = value;
    },
    getMinLength: function () {
        return this.minLength;
    },
    setEnabled: function (value) {
        mini.ButtonEdit.superclass.setEnabled.call(this, value);
        /* 解决当调用disable方法后，点击emptyText报错的问题IE8下 潘正锋 2014 */
        if(this._textEl._placeholder_label)
           this._textEl._placeholder_label.disabled = true;
        this._tryValidate();
    },
    _doReadOnly: function () {
        var readOnly = this.isReadOnly();
        if (readOnly || this.allowInput == false) {
            this._textEl.readOnly = true;
        } else {
            this._textEl.readOnly = false;
        }
        if (readOnly) {
            this.addCls(this._readOnlyCls);
        } else {
            this.removeCls(this._readOnlyCls);
        }
        if (this.allowInput) {
            this.removeCls(this._noInputCls);
        } else {
            this.addCls(this._noInputCls);
        }

        if (this.enabled) {
            this._textEl.disabled = false;
        } else {
            this._textEl.disabled = true;
        }
    },
    setAllowInput: function (value) {
        this.allowInput = value;
        this._doReadOnly();
    },
    getAllowInput: function () {
        return this.allowInput;
    },
    setInputAsValue: function (value) {
        this.inputAsValue = value;
    },
    getInputAsValue: function () {
        return this.inputAsValue;
    },




    _errorIconEl: null,
    getErrorIconEl: function () {
        if (!this._errorIconEl) {
            this._errorIconEl = mini.append(this.el, '<span class="mini-errorIcon"></span>');
        }
        return this._errorIconEl;
    },
    _RemoveErrorIcon: function () {
        if (this._errorIconEl) {
            var el = this._errorIconEl;
            jQuery(el).remove();
        }
        this._errorIconEl = null;
    },

    __OnClick: function (e) {
        if (this.isReadOnly() || this.enabled == false) return;

        if (!mini.isAncestor(this._borderEl, e.target)) return;

        var t = new Date();

        if (mini.isAncestor(this._buttonEl, e.target)) {
            this._OnButtonClick(e);
        }
        if (mini.findParent(e.target, this._closeCls)) {
            this.fire("closeclick", { htmlEvent: e });
        }

    },
    __OnMouseDown: function (e) {

        if (this.isReadOnly() || this.enabled == false) return;

        if (!mini.isAncestor(this._borderEl, e.target)) return;

        if (!mini.isAncestor(this._textEl, e.target)) {
            this._clickTarget = e.target;
            var sf = this;
            /* 下面代码中的selectRange不知道干嘛用的，focus方法造成点击图标时也会触发text的focus而触发validata pzf 2014-09*/
            /*
            setTimeout(function () {
                sf.focus();
                mini.selectRange(sf._textEl, 1000, 1000);
            }, 1);
            */
            if (mini.isAncestor(this._buttonEl, e.target)) {
                var up = mini.findParent(e.target, "mini-buttonedit-up");
                var down = mini.findParent(e.target, "mini-buttonedit-down");
                if (up) {
                    mini.addClass(up, this._buttonPressedCls);
                    this._OnButtonMouseDown(e, "up");
                }
                else if (down) {
                    mini.addClass(down, this._buttonPressedCls);
                    this._OnButtonMouseDown(e, "down");
                } else {
                    mini.addClass(this._buttonEl, this._buttonPressedCls);
                    this._OnButtonMouseDown(e);
                }
                mini.on(document, "mouseup", this.__OnDocMouseUp, this);
            }
        }
    },
    __OnDocMouseUp: function (e) {
        this._clickTarget = null;

        var me = this;
        setTimeout(function () {
            var doms = me._buttonEl.getElementsByTagName("*");
            for (var i = 0, l = doms.length; i < l; i++) {
                mini.removeClass(doms[i], me._buttonPressedCls);
            }
            mini.removeClass(me._buttonEl, me._buttonPressedCls);
            mini.removeClass(me.el, me._pressedCls);
        }, 80);
        mini.un(document, "mouseup", this.__OnDocMouseUp, this);
    },
    __OnFocus: function (e) {

        this.doUpdate();
        this._initInputEvents();
        if (this.isReadOnly()) return;

        this._focused = true;
        this.addCls(this._focusCls);



        if (this.selectOnFocus) {
            this.selectText();
        }
        this.fire("focus", { htmlEvent: e });
    },
    __doFocusCls: function () {
        if (this._focused == false) {
            this.removeCls(this._focusCls);
        }
    },

    __fireBlur: function (e) {


        this._focused = false;
        var sf = this;

        function f() {
            sf.__doFocusCls();


        }
        setTimeout(function () {
            f.call(sf);
        }, 2);

        this.fire("blur", { htmlEvent: e });
        /* 添加验证 2014-06 潘正锋 */
        if (this.validateOnLeave) {
            this._tryValidate();
        }
    },
    __OnBlur: function (e) {
        this._focused = false;

        var me = this;
        setTimeout(function () {
            me.__fireBlur(e);
        }, 10);
    },
    __OnInputKeyDown: function (e) {
        var ex = { htmlEvent: e };
        this.fire("keydown", ex);
        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }
        if (e.keyCode == 27 || e.keyCode == 13 || e.keyCode == 9) {
            var sf = this;
            sf.__OnInputTextChanged(null);
            if (e.keyCode == 13) {
                var me = this;

                me.fire("enter", ex);

            }
        }
        if (e.keyCode == 27) {
            e.preventDefault();
        }
    },
    __OnInputTextChanged: function () {

        var v = this._textEl.value;
        var value = this.getValue();

        this.setValue(v);
        /*if (value !== this.getFormValue()) {
            this._OnValueChanged();
        }*/

    },
    __OnInputKeyUp: function (e) {
        this.fire("keyup", { htmlEvent: e });
    },
    __OnInputKeyPress: function (e) {
        this.fire("keypress", { htmlEvent: e });
    },

    _OnButtonClick: function (htmlEvent) {
        var e = {
            htmlEvent: htmlEvent,
            cancel: false
        };
        this.fire("beforebuttonclick", e);
        if (e.cancel == true) return;

        this.fire("buttonclick", e);
    },
    _OnButtonMouseDown: function (htmlEvent, spinType) {
        this.focus();
        this.addCls(this._focusCls);

        this.fire("buttonmousedown", {
            htmlEvent: htmlEvent,
            spinType: spinType
        });
    },

    onButtonClick: function (fn, scope) {
        this.on("buttonclick", fn, scope);
    },
    onButtonMouseDown: function (fn, scope) {
        this.on("buttonmousedown", fn, scope);
    },
    onTextChanged: function (fn, scope) {
        this.on("textchanged", fn, scope);
    },

    textName: "",
    setTextName: function (value) {
        this.textName = value;
        if (this._textEl) mini.setAttr(this._textEl, "name", this.textName);
    },
    getTextName: function () {
        return this.textName;
    },

    setSelectOnFocus: function (value) {
        this.selectOnFocus = value;
    },
    getSelectOnFocus: function (value) {
        return this.selectOnFocus;
    },
    setShowClose: function (value) {
        this.showClose = value;
    },
    getShowClose: function (value) {
        return this.showClose;
    },
    inputStyle: "",
    setInputStyle: function (value) {
        this.inputStyle = value;
        mini.setStyle(this._textEl, value);
    },

    getAttrs: function (el) {
        var attrs = mini.ButtonEdit.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseString(el, attrs,
            ["value", "text", "textName", "emptyText", "inputStyle",
            "onenter", "onkeydown", "onkeyup", "onkeypress",
            "onbuttonclick", "onbuttonmousedown", "ontextchanged", "onfocus", "onblur",
            "oncloseclick"
            ]
        );
        mini._ParseBool(el, attrs,
            ["allowInput", "inputAsValue", "selectOnFocus", "showClose", "showToolTip"
            ]
        );
        mini._ParseInt(el, attrs,
            ["maxLength", "minLength"
            ]
        );

        return attrs;
    }
});
mini.regClass(mini.ButtonEdit, 'buttonedit');


/**
 * ButtonEditTip 是mini UI buttonEdit中的提示组件
 * @class mini.Button
 * @constructor
 * @extends mini.Control
 */

mini.ButtonEditTip = function (el) {
    this.textEl = el;


    this.attr = '';
    this.attrDelimiter = ",";
    this._create();
}

mini.ButtonEditTip.prototype = {

    /**
     * 分隔符
     * @type String
     * @author 赵美丹
     */
    delimiter: "<br/>",

    attrDelimiter: ",",


    /**
     * 创建组件最外层HTML结构，并绑定给组件实例。
     * @default
     * @private
     */
    _create: function () {
        var el = document.getElementById("mini-buttonedittip");
        if (!el) {
            this.el = document.createElement("div");
            this.el.className = "mini-buttonedittip";
            this.el.id = "mini-buttonedittip";
            this.el.innerHTML = '<div class="mini-buttonedittip-colortip">'
                + '<div class="mini-buttonedittip-content"></div>'
                + '<div class="mini-buttonedittip-pointy"><span class="mini-buttonedittip-pointytipshadow"></span><span class="mini-buttonedittip-pointytip"></span></div>'
                + '</div>';
            this._contentEl = this.el.firstChild.childNodes[0];
            this._pointyEl = this.el.firstChild.childNodes[1];
            this._lengthspanEl = document.createElement("span");
            this._lengthspanEl.className = "lengthspan";
            this._lengthspanEl.id = "lengthspan";
            document.body.appendChild(this._lengthspanEl);
            document.body.appendChild(this.el);

        } else {
            this.el = el;
            this._contentEl = this.el.firstChild.childNodes[0];
            this._lengthspanEl = document.getElementById("lengthspan");
        }

        mini_on(this.textEl, "mouseenter", this.show, this);
        mini_on(document, "mousemove", this.hide, this);
    },
    /**
     * 析构函数
     */
    destroy: function (removeEl) {
        if (this.textEl) {
            this.textEl.onmouseenter = null;
            this.textEl.onmouseleave = null;
            mini.clearEvent(this.textEl);
            mini.clearEvent(document);
        }
        this.el = null;
        this._lengthspanEl = null;
        this._contentEl = null;


    },
    /**
     * 更新组件函数
     */
    _doUpdate: function (text) {
        text = mini.htmlEncode(text).split(mini.htmlEncode(this.attrDelimiter)).join(this.delimiter);
        this._contentEl.innerHTML = text;
    },
    /**
     * 判断字数是否超过
     */
    isOverFlow: function (el, text) {
        if (mini.isNull(text) || text === '')
            return false;
        if (text.length > 300)
            text = text.substring(0, 300);
        var style;

        if (document.defaultView) //火狐
            style = document.defaultView.getComputedStyle(el, null);
        else
            style = el.currentStyle;//IE
        var fontSize = style.fontSize;
        var fontFamily = style.fontFamily;

        this._lengthspanEl.innerHTML = text;
        this._lengthspanEl.style.fontSize = fontSize;
        this._lengthspanEl.style.fontFamily = fontFamily;
        if (this._lengthspanEl.offsetWidth - 2 > el.clientWidth) {
            return true;
        }
        return false;
    },
    /**
     * 显示tip
     */
    show: function () {

        var text = this.textEl.value;

        if (!this.isOverFlow(this.textEl, text))
            return;
        this._doUpdate(text);
        var box = mini.getBox(this.textEl);
        this._contentEl.height = "auto";
        var width = Math.max(parseInt(this.textEl.clientWidth) + 10, 200);
        var left = box.x + box.width / 2 - width / 2;
        var top = (box.y + box.height + 7);
        if (left + width > jQuery(window).width())
            left = jQuery(window).width() - width;
        if (left < 0)
            left = 0;
        this.el.style.left = left + 5 + "px";
        this.el.style.top = top + "px";
        this.el.style.display = "block";
        this._contentEl.style.height = "auto";
        mini.setWidth(this._contentEl,width) ;
        mini.setWidth(this._pointyEl,width);
        if (mini.getHeight(this._contentEl) > 200) {
            mini.setHeight(this._contentEl,188) ;
        }
        this.el.focus();
        this.isshow = true;
    },
    hide: function (e) {
        if (mini.findParent(e.target, "mini-buttonedittip")||mini.findParent(e.target, "mini-buttonedit-input")) {
            return;
        }
        this.el.style.display = "none";
    },
    setIsshow: function (value) {
        if (this.isshow != value) {
            this.isshow = value;
            this.isshow ? this.show() : this.hide();
        }
    },
    getIsshow: function () {
        return this.isshow;
    }


}

mini.Calendar = function () {
    this.viewDate = new Date();
    this._selectedDates = [];
    mini.Calendar.superclass.constructor.call(this);
}
mini.extend(mini.Calendar, mini.Control, {
    width: 220,
    height: 160,

    monthPicker: false,

    _clearBorder: false,

    viewDate: null,
    _selectedDate: "",
    _selectedDates: [],
    multiSelect: false,

    firstDayOfWeek: 0,
    todayText: "Today",
    clearText: "Clear",
    okText: "OK",
    cancelText: "Cancel",
    daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    format: "MMM, yyyy",

    timeFormat: 'H:mm',

    showTime: false,
    currentTime: true,

    rows: 1,
    columns: 1,

    headerCls: "",
    bodyCls: "",
    footerCls: "",

    _todayCls: "mini-calendar-today",
    _weekendCls: "mini-calendar-weekend",
    _otherMonthCls: "mini-calendar-othermonth",
    _selectedDateCls: "mini-calendar-selected",

    showHeader: true,
    showFooter: true,
    showWeekNumber: false,
    showDaysHeader: true,
    showMonthButtons: true,
    showYearButtons: true,
    showTodayButton: true,
    showClearButton: true,
    showOkButton: false,

    isWeekend: function (date) {
        var day = date.getDay();
        return day == 0 || day == 6;
    },
    getFirstDateOfMonth: function (date) {

        var date = new Date(date.getFullYear(), date.getMonth(), 1);

        return mini.getWeekStartDate(date, this.firstDayOfWeek);
    },
    getShortWeek: function (week) {
        return this.daysShort[week];
    },

    uiCls: "mini-calendar",
    _create: function () {
        var s = '<tr style="width:100%;"><td style="width:100%;"></td></tr>';
        s += '<tr ><td><div class="mini-calendar-footer">'
                    + '<span style="display:inline-block;"><input name="time" class="mini-timespinner" style="width:80px" format="' + this.timeFormat + '"/>'
                    + '<span class="mini-calendar-footerSpace"></span></span>'
                    + '<span class="mini-calendar-tadayButton">' + this.todayText + '</span>'
                    + '<span class="mini-calendar-footerSpace"></span>'
                    + '<span class="mini-calendar-clearButton">' + this.clearText + '</span>'
                    + '<span class="mini-calendar-okButton">' + this.okText + '</span>'
                    + '<a href="#" class="mini-calendar-focus" style="position:absolute;left:-10px;top:-10px;width:0px;height:0px;outline:none" hideFocus></a>'
                    + '</div></td></tr>';

        var html = '<table class="mini-calendar" cellpadding="0" cellspacing="0">' + s + '</table>';

        var d = document.createElement("div");
        d.innerHTML = html;
        this.el = d.firstChild;

        var trs = this.el.getElementsByTagName("tr");
        var tds = this.el.getElementsByTagName("td");

        this._innerEl = tds[0];
        this._footerEl = mini.byClass("mini-calendar-footer", this.el);

        this.timeWrapEl = this._footerEl.childNodes[0];
        this.todayButtonEl = this._footerEl.childNodes[1];
        this.footerSpaceEl = this._footerEl.childNodes[2];
        this.closeButtonEl = this._footerEl.childNodes[3];
        this.okButtonEl = this._footerEl.childNodes[4];

        this._focusEl = this._footerEl.lastChild;

        mini.parse(this._footerEl);
        this.timeSpinner = mini.getbyName('time', this.el);
        this.doUpdate();
    },
    focus: function () {
        try {
            this._focusEl.focus();
        } catch (e) { }
    },
    destroy: function (removeEl) {

        this._innerEl = this._footerEl = this.timeWrapEl = this.todayButtonEl = this.footerSpaceEl = this.closeButtonEl = null;

        mini.Calendar.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        if (this.timeSpinner) this.timeSpinner.on("valuechanged", this.__OnTimeChanged, this);
        mini._BindEvents(function () {





            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, "keydown", this.__OnKeyDown, this);

        }, this);
    },
    getDateEl: function (date) {
        if (!date) return null;
        var id = this.uid + "$" + mini.clearTime(date).getTime();
        return document.getElementById(id);
    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this.menuEl && mini.isAncestor(this.menuEl, e.target)) return true;
        return false;
    },



    setShowHeader: function (value) {
        this.showHeader = value;
        this.doUpdate();
    },
    getShowHeader: function () {
        return this.showHeader;
    },
    setShowFooter: function (value) {
        this.showFooter = value;
        this.doUpdate();
    },
    getShowFooter: function () {
        return this.showFooter;
    },
    setShowWeekNumber: function (value) {
        this.showWeekNumber = value;
        this.doUpdate();
    },
    getShowWeekNumber: function () {
        return this.showWeekNumber;
    },
    setShowDaysHeader: function (value) {
        this.showDaysHeader = value;
        this.doUpdate();
    },
    getShowDaysHeader: function () {
        return this.showDaysHeader;
    },
    setShowMonthButtons: function (value) {
        this.showMonthButtons = value;
        this.doUpdate();
    },
    getShowMonthButtons: function () {
        return this.showMonthButtons;
    },
    setShowYearButtons: function (value) {
        this.showYearButtons = value;
        this.doUpdate();
    },
    getShowYearButtons: function () {
        return this.showYearButtons;
    },
    setShowTodayButton: function (value) {
        this.showTodayButton = value;
        this.todayButtonEl.style.display = this.showTodayButton ? "" : "none";
        this.doUpdate();
    },
    getShowTodayButton: function () {
        return this.showTodayButton;
    },
    setShowClearButton: function (value) {
        this.showClearButton = value;
        this.closeButtonEl.style.display = this.showClearButton ? "" : "none";
        this.doUpdate();
    },
    getShowClearButton: function () {
        return this.showClearButton;
    },
    setShowOkButton: function (value) {
        this.showOkButton = value;
        this.okButtonEl.style.display = this.showOkButton ? "" : "none";
        this.doUpdate();
    },
    getShowOkButton: function () {
        return this.showOkButton;
    },

    setViewDate: function (value) {
        value = mini.parseDate(value);
        if (!value) value = new Date();
        if (mini.isDate(value)) value = new Date(value.getTime());
        this.viewDate = value;
        this.doUpdate();
    },
    getViewDate: function () {
        return this.viewDate;
    },
    setSelectedDate: function (value) {
        value = mini.parseDate(value);
        if (!mini.isDate(value)) value = "";
        else value = new Date(value.getTime());

        var dateEl = this.getDateEl(this._selectedDate);
        if (dateEl) mini.removeClass(dateEl, this._selectedDateCls);


        this._selectedDate = value;
        if (this._selectedDate) this._selectedDate = mini.cloneDate(this._selectedDate);

        var dateEl = this.getDateEl(this._selectedDate);
        if (dateEl) mini.addClass(dateEl, this._selectedDateCls);

        this.fire("datechanged");

    },
    setSelectedDates: function (value) {
        if (!mini.isArray(value)) value = [];
        this._selectedDates = value;
        this.doUpdate();
    },
    getSelectedDate: function () {
        return this._selectedDate ? this._selectedDate : "";
    },
    setTime: function (time) {
        this.timeSpinner.setValue(time);
    },
    getTime: function () {
        return this.timeSpinner.getFormValue();
    },
    setValue: function (value) {
        this.setSelectedDate(value);
        if (!value) {
            value = new Date();
        }
        this.setTime(value);
    },
    getValue: function () {
        var d = this._selectedDate;
        if (d) {
            d = mini.clearTime(d);
            if (this.showTime) {
                var d2 = this.timeSpinner.getValue();
                if (d2) {
                    d.setHours(d2.getHours());
                    d.setMinutes(d2.getMinutes());
                    d.setSeconds(d2.getSeconds());
                }
            }
        }
        return d ? d : "";
    },
    getFormValue: function () {
        var d = this.getValue();
        if (d) return mini.formatDate(d, 'yyyy-MM-dd HH:mm:ss');
        return "";
    },
    isSelectedDate: function (date) {
        if (!date || !this._selectedDate) return false;
        return mini.clearTime(date).getTime()
                == mini.clearTime(this._selectedDate).getTime();
    },
    setMultiSelect: function (value) {
        this.multiSelect = value;
        this.doUpdate();
    },
    getMultiSelect: function () {
        return this.multiSelect;
    },
    setRows: function (value) {
        if (isNaN(value)) return;
        if (value < 1) value = 1;
        this.rows = value;
        this.doUpdate();
    },
    getRows: function () {
        return this.rows;
    },
    setColumns: function (value) {
        if (isNaN(value)) return;
        if (value < 1) value = 1;
        this.columns = value;
        this.doUpdate();
    },
    getColumns: function () {
        return this.columns;
    },
    setShowTime: function (value) {
        if (this.showTime != value) {
            this.showTime = value;
            this.timeWrapEl.style.display = this.showTime ? '' : "none";
            this.doLayout();
        }
    },
    getShowTime: function () {
        return this.showTime;
    },
    setTimeFormat: function (value) {
        if (this.timeFormat != value) {

            this.timeSpinner.setFormat(value);
            this.timeFormat = this.timeSpinner.format;
        }
    },
    getTimeFormat: function () {
        return this.timeFormat;
    },
    doLayout: function () {

        if (!this.canLayout()) return;

        this.timeWrapEl.style.display = this.showTime ? '' : "none";
        this.todayButtonEl.style.display = this.showTodayButton ? "" : "none";
        this.closeButtonEl.style.display = this.showClearButton ? "" : "none";

        this.okButtonEl.style.display = this.showOkButton ? "" : "none";
        this.footerSpaceEl.style.display = (this.showClearButton && this.showTodayButton) ? "" : "none";

        this._footerEl.style.display = this.showFooter ? "" : "none";

        var views = this._innerEl.firstChild;

        var autoHeight = this.isAutoHeight();
        if (!autoHeight) {

            views.parentNode.style.height = "100px";
            h = jQuery(this.el).height();


            h -= jQuery(this._footerEl).outerHeight()

            views.parentNode.style.height = h + "px";
        } else {
            views.parentNode.style.height = "";
        }

        mini.layout(this._footerEl);

        if (this.monthPicker) this._tryShowMenu();
    },
    doUpdate: function () {
        if (!this._allowUpdate) return;

        var viewDate = new Date(this.viewDate.getTime());
        var isOne = this.rows == 1 && this.columns == 1;
        var h = 100 / this.rows;
        var s = '<table class="mini-calendar-views" border="0" cellpadding="0" cellspacing="0">';
        for (var i = 0, l = this.rows; i < l; i++) {
            s += '<tr >';
            for (var j = 0, k = this.columns; j < k; j++) {
                s += '<td style="height:' + h + '%">';

                s += this._CreateView(viewDate, i, j);

                s += '</td>';

                viewDate = new Date(viewDate.getFullYear(), viewDate.getMonth() + 1, 1);
            }
            s += '</tr>';
        }

        s += '</table>';
        this._innerEl.innerHTML = s;

        var el = this.el;
        setTimeout(function () {
            mini.repaint(el);
        }, 100);

        this.doLayout();
    },
    _CreateView: function (viewDate, row, column) {
        var month = viewDate.getMonth();
        var date = this.getFirstDateOfMonth(viewDate);
        var firstDateOfWeek = new Date(date.getTime());
        var todayTime = mini.clearTime(new Date()).getTime();
        var selectedTime = this.value ? mini.clearTime(this.value).getTime() : -1;

        var multiView = this.rows > 1 || this.columns > 1;

        var s = '';
        s += '<table class="mini-calendar-view" border="0" cellpadding="0" cellspacing="0">';

        if (this.showHeader) {
            s += '<tr ><td colSpan="10" class="mini-calendar-header"><div class="mini-calendar-headerInner">';
            if (row == 0 && column == 0) {
                s += '<div class="mini-calendar-prev">';
                if (this.showYearButtons) s += '<span class="mini-calendar-yearPrev"></span>';
                if (this.showMonthButtons) s += '<span class="mini-calendar-monthPrev"></span>';
                s += '</div>';
            }
            if (row == 0 && column == this.columns - 1) {
                s += '<div class="mini-calendar-next">';
                if (this.showMonthButtons) s += '<span class="mini-calendar-monthNext"></span>';
                if (this.showYearButtons) s += '<span class="mini-calendar-yearNext"></span>';
                s += '</div>';
            }
            s += '<span class="mini-calendar-title">' + mini.formatDate(viewDate, this.format) + '</span>';
            s += '</div></td></tr>';
        }


        if (this.showDaysHeader) {
            s += '<tr class="mini-calendar-daysheader"><td class="mini-calendar-space"></td>';
            if (this.showWeekNumber) {
                s += '<td sclass="mini-calendar-weeknumber"></td>';
            }

            for (var j = this.firstDayOfWeek, k = j + 7; j < k; j++) {
                var name = this.getShortWeek(j);
                s += '<td yAlign="middle">';
                s += name;
                s += '</td>';
                date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);
            }
            s += '<td class="mini-calendar-space"></td></tr>';
        }


        date = firstDateOfWeek;
        for (var i = 0; i <= 5; i++) {
            s += '<tr class="mini-calendar-days"><td class="mini-calendar-space"></td>';
            if (this.showWeekNumber) {
                var num = mini.getWeek(date.getFullYear(), date.getMonth() + 1, date.getDate());
                if (String(num).length == 1) num = "0" + num;
                s += '<td class="mini-calendar-weeknumber" yAlign="middle">' + num + '</td>';
            }
            for (var j = this.firstDayOfWeek, k = j + 7; j < k; j++) {
                var weekend = this.isWeekend(date);
                var clearTime = mini.clearTime(date).getTime();
                var isToday = clearTime == todayTime;
                var isSelected = this.isSelectedDate(date);

                if (month != date.getMonth() && multiView) {
                    clearTime = -1;
                }

                var e = this._OnDrawDate(date);

                s += '<td yAlign="middle" id="';
                s += this.uid + "$" + clearTime;
                s += '" class="mini-calendar-date ';
                if (weekend) {
                    s += ' mini-calendar-weekend '
                }
                if (e.allowSelect == false) {
                    s += ' mini-calendar-disabled '
                }

                if (month != date.getMonth() && multiView) {
                } else {
                    if (isSelected) {
                        s += ' ' + this._selectedDateCls + ' ';
                    }
                    if (isToday) {
                        s += ' mini-calendar-today '
                    }
                }
                if (month != date.getMonth()) {
                    s += ' mini-calendar-othermonth ';
                }

                if (e.dateCls) s += ' ' + e.dateCls;

                s += '" style="';
                if (e.dateStyle) s += e.dateStyle;
                s += '">';

                if (month != date.getMonth() && multiView) {
                } else {

                    s += e.dateHtml;
                }
                s += '</td>';

                date = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);
            }
            s += '<td class="mini-calendar-space"></td></tr>';
        }
        s += '<tr class="mini-calendar-bottom" colSpan="10"><td ></td></tr>';

        s += '</table>';
        return s;
    },
    _OnDrawDate: function (date) {
        var e = {
            date: date,
            dateCls: "",
            dateStyle: "",
            dateHtml: date.getDate(),
            allowSelect: true

        };
        this.fire("drawdate", e);
        return e;
    },
    _OnDateClick: function (date, action) {
        this.hideMenu();

        var e = { date: date, action: action };
        this.fire("dateclick", e);

        this._OnValueChanged();
    },

    menuEl: null,
    menuYear: null,
    menuSelectMonth: null,
    menuSelectYear: null,
    _tryShowMenu: function () {
        if (!this.menuEl) {
            var that = this;
            setTimeout(function () {
                that.showMenu();
            }, 1);
        }
    },
    showMenu: function () {

        this.hideMenu();

        this.menuYear = parseInt(this.viewDate.getFullYear() / 10) * 10;
        this._menuselectMonth = this.viewDate.getMonth();
        this._menuselectYear = this.viewDate.getFullYear();

        var s = '<div class="mini-calendar-menu"></div>';
        this.menuEl = mini.append(document.body, s);
        this.updateMenu(this.viewDate);

        var box = this.getBox();







        if (this.el.style.borderWidth == "0px") {
            this.menuEl.style.border = "0";
        }
        mini.setBox(this.menuEl, box);







        mini.on(this.menuEl, "click", this.__OnMenuClick, this);
        mini.on(document, "mousedown", this.__OnBodyMenuMouseDown, this);
    },
    hideMenu: function () {
        if (this.menuEl) {
            mini.un(this.menuEl, "click", this.__OnMenuClick, this);
            mini.un(document, "mousedown", this.__OnBodyMenuMouseDown, this);
            jQuery(this.menuEl).remove();
            this.menuEl = null;
        }
    },
    updateMenu: function () {
        var s = '<div class="mini-calendar-menu-months">';
        for (var i = 0, l = 12; i < l; i++) {
            var text = mini.getShortMonth(i);
            var cls = "";
            if (this._menuselectMonth == i) cls = "mini-calendar-menu-selected";
            s += '<a id="' + i + '" class="mini-calendar-menu-month ' + cls + '" href="javascript:void(0);" hideFocus onclick="return false">' + text + '</a>';
        }
        s += '<div style="clear:both;"></div></div>';


        s += '<div class="mini-calendar-menu-years">';
        for (var i = this.menuYear, l = this.menuYear + 10; i < l; i++) {
            var text = i;
            var cls = "";
            if (this._menuselectYear == i) cls = "mini-calendar-menu-selected";
            s += '<a id="' + i + '" class="mini-calendar-menu-year ' + cls + '" href="javascript:void(0);" hideFocus onclick="return false">' + text + '</a>';
        }
        s += '<div class="mini-calendar-menu-prevYear"></div><div class="mini-calendar-menu-nextYear"></div><div style="clear:both;"></div></div>';

        s += '<div class="mini-calendar-footer">'
            + '<span class="mini-calendar-okButton">' + this.okText + '</span>'
            + '<span class="mini-calendar-footerSpace"></span>'
            + '<span class="mini-calendar-cancelButton">' + this.cancelText + '</span>'
            + '</div><div style="clear:both;"></div>';

        this.menuEl.innerHTML = s;
    },
    __OnMenuClick: function (e) {

        var t = e.target;
        var monthEl = mini.findParent(t, "mini-calendar-menu-month");
        var yearEl = mini.findParent(t, "mini-calendar-menu-year");
        if (monthEl) {
            this._menuselectMonth = parseInt(monthEl.id);
            this.updateMenu();
        }
        else if (yearEl) {
            this._menuselectYear = parseInt(yearEl.id);
            this.updateMenu();
        }
        else if (mini.findParent(t, "mini-calendar-menu-prevYear")) {
            this.menuYear = this.menuYear - 1;
            this.menuYear = parseInt(this.menuYear / 10) * 10;
            this.updateMenu();
        }
        else if (mini.findParent(t, "mini-calendar-menu-nextYear")) {
            this.menuYear = this.menuYear + 11;
            this.menuYear = parseInt(this.menuYear / 10) * 10;
            this.updateMenu();
        }
        else if (mini.findParent(t, "mini-calendar-okButton")) {
            var date = new Date(this._menuselectYear, this._menuselectMonth, 1);
            if (this.monthPicker) {
                this.setViewDate(date);
                this.setSelectedDate(date);
                this._OnDateClick(date);

            } else {
                this.setViewDate(date);
                this.hideMenu();
            }
        }
        else if (mini.findParent(t, "mini-calendar-cancelButton")) {
            if (this.monthPicker) {

                this._OnDateClick(null, "cancel");
            } else {
                this.hideMenu();
            }
        }
    },
    __OnBodyMenuMouseDown: function (e) {
        if (!mini.findParent(e.target, "mini-calendar-menu")) {
            if (!mini.findParent(e.target, "mini-monthpicker")) {

                this.hideMenu();
            }
        }
    },

    __OnClick: function (e) {
        var viewDate = this.viewDate;
        if (this.enabled == false) return;
        var t = e.target;
        var titleEl = mini.findParent(e.target, "mini-calendar-title");

        if (mini.findParent(t, "mini-calendar-monthNext")) {
            viewDate.setMonth(viewDate.getMonth() + 1);
            this.setViewDate(viewDate);
        }
        else if (mini.findParent(t, "mini-calendar-yearNext")) {
            viewDate.setFullYear(viewDate.getFullYear() + 1);
            this.setViewDate(viewDate);
        }
        else if (mini.findParent(t, "mini-calendar-monthPrev")) {
            viewDate.setMonth(viewDate.getMonth() - 1);
            this.setViewDate(viewDate);
        }
        else if (mini.findParent(t, "mini-calendar-yearPrev")) {
            viewDate.setFullYear(viewDate.getFullYear() - 1);
            this.setViewDate(viewDate);
        }
        else if (mini.findParent(t, "mini-calendar-tadayButton")) {



            var d = new Date();
            this.setViewDate(d);
            this.setSelectedDate(d);
            if (this.currentTime) {
                var td = new Date();
                this.setTime(td);
            }
            this._OnDateClick(d, "today");
        }
        else if (mini.findParent(t, "mini-calendar-clearButton")) {
            this.setSelectedDate(null);
            this.setTime(null);
            this._OnDateClick(null, "clear");
        } else if (mini.findParent(t, "mini-calendar-okButton")) {
            this._OnDateClick(null, "ok");



        } else if (titleEl) {
            this.showMenu();
        }

        var dateEl = mini.findParent(e.target, "mini-calendar-date");

        if (dateEl && !mini.hasClass(dateEl, "mini-calendar-disabled")) {
            var ids = dateEl.id.split("$");
            var time = parseInt(ids[ids.length - 1]);
            if (time == -1) return;
            var date = new Date(time);

            this._OnDateClick(date);
        }

    },
    __OnMouseDown: function (e) {
        if (this.enabled == false) return;
        var dateEl = mini.findParent(e.target, "mini-calendar-date");
        if (dateEl && !mini.hasClass(dateEl, "mini-calendar-disabled")) {
            var ids = dateEl.id.split("$");
            var time = parseInt(ids[ids.length - 1]);
            if (time == -1) return;
            var date = new Date(time);
            this.setSelectedDate(date);
        }
    },
    __OnTimeChanged: function (e) {
        this.fire("timechanged");
        this._OnValueChanged();
    },

    __OnKeyDown: function (e) {
        if (this.enabled == false) return;

        var date = this.getSelectedDate();
        if (!date) date = new Date(this.viewDate.getTime());
        switch (e.keyCode) {
            case 27:

                break;
            case 13:

                break;
            case 37:
                date = mini.addDate(date, -1, 'D');
                break;
            case 38:
                date = mini.addDate(date, -7, 'D');
                break;
            case 39:
                date = mini.addDate(date, 1, 'D');
                break;
            case 40:
                date = mini.addDate(date, 7, 'D');
                break;
            default:
                break;
        }
        var me = this;


        if (date.getMonth() != me.viewDate.getMonth()) {
            me.setViewDate(mini.cloneDate(date));
            me.focus();
        }

        var dateEl = this.getDateEl(date);
        if (dateEl && mini.hasClass(dateEl, "mini-calendar-disabled")) {
            return;
        }

        me.setSelectedDate(date);

        if (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40) {
            e.preventDefault();
        }

    },

    _OnValueChanged: function () {
        this.fire("valuechanged");
    },

    getAttrs: function (el) {
        var attrs = mini.Calendar.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["viewDate", "rows", "columns",
                "ondateclick", "ondrawdate", "ondatechanged", "timeFormat", "ontimechanged", "onvaluechanged"
            ]
        );
        mini._ParseBool(el, attrs,
            ["multiSelect", "showHeader", "showFooter", "showWeekNumber", "showDaysHeader",
            "showMonthButtons", "showYearButtons", "showTodayButton", "showClearButton",
            "showTime", "showOkButton"
            ]
        );

        return attrs;
    }
});
mini.regClass(mini.Calendar, "calendar");
mini.CalendarYear = function () {
    this.viewDate = new Date();
    this._selectedDates = [];
    mini.CalendarYear.superclass.constructor.call(this);
}
mini.extend(mini.CalendarYear, mini.Control, {
    width: 220,

    _clearBorder: false,
    uiCls: "mini-calendaryear",
    _create: function () {
        this.el = document.createElement("div");
        this.startYear = parseInt(this.viewDate.getFullYear() / 10) * 10;
        this.selectYear = this.viewDate.getFullYear();

        s = '<div class="mini-calendaryear-years"></div>';
        this.el.innerHTML = s ;
        this.yearsEl = this.el.childNodes[0];

        this.updateYears();

    },
    _initEvents: function () {
        mini.on(this.el, "click", this.__OnClick, this);
    },

    updateYears: function () {
        var s = '';
        for (var i = this.startYear, l = this.startYear + 20; i < l; i++) {
            var text = i;
            var cls = "";
            if (this.selectYear == i) cls = "mini-calendaryear-year-selected";
            s += '<a id="' + i + '" class="mini-calendaryear-year ' + cls + '" href="javascript:void(0);" hideFocus onclick="return false">' + text + '</a>';
        }
        s += '<div class="mini-calendaryear-prevYear"></div><div class="mini-calendaryear-nextYear"></div><div style="clear:both;"></div>';
        this.yearsEl.innerHTML = s;

    },

    __OnClick: function (e) {

        var t = e.target;
        var yearEl = mini.findParent(t, "mini-calendaryear-year");
        if (yearEl) {
            this.selectYear = parseInt(yearEl.id);
            this.setValue(this.selectYear);
            this.updateYears();
            this._OnDateClick(this.selectYear);
        }
        else if (mini.findParent(t, "mini-calendaryear-prevYear")) {
            this.startYear = this.startYear - 20;
            this.updateYears();
        }
        else if (mini.findParent(t, "mini-calendaryear-nextYear")) {
            this.startYear = this.startYear + 20;
            this.updateYears();
        }

    },
    _OnDateClick: function (year, action) {
        var e = { year: year, action: action };
        this.fire("dateclick", e);

    },
    setValue: function (value) {
        this.value = value;
        this.selectYear = value;
        this.startYear = parseInt(this.selectYear / 10) * 10;
    },
    getValue: function () {
       return this.value;

    }


})


mini.regClass(mini.CalendarYear, "calendaryear");
mini.DataSet = function () {
    this._sources = {};
    this._data = {};
    this._links = [];

    this._originals = {};

    mini.DataSet.superclass.constructor.call(this);
}
mini.extend(mini.DataSet, mini.Component, {
    add: function (name, listControl) {
        if (!name || !listControl) return;
        this._sources[name] = listControl;
        this._data[name] = [];

        
        listControl.autoCreateNewID = true;
        listControl._originalIdField = listControl.getIdField();
        listControl._clearOriginals = false;

        listControl.on("addrow", this.__OnRowChanged, this);
        listControl.on("updaterow", this.__OnRowChanged, this);
        listControl.on("deleterow", this.__OnRowChanged, this);
        listControl.on("removerow", this.__OnRowChanged, this);
        listControl.on("preload", this.__OnDataPreLoad, this);

        listControl.on("selectionchanged", this.__OnDataSelectionChanged, this);
    },
    addLink: function (name, childName, parentField) {
        if (!name || !childName || !parentField) return;
        if (!this._sources[name] || !this._sources[childName]) return;

        var link = {
            parentName: name,
            childName: childName,
            parentField: parentField
        };
        this._links.push(link);
    },
    clearData: function () {
        this._data = {};
        this._originals = {};
        for (var name in this._sources) {
            this._data = [];
        }
    },
    getData: function () {
        return this._data;
    },
    _getNameByListControl: function (listControl) {
        for (var name in this._sources) {
            var c = this._sources[name];
            if (c == listControl) return name;
        }
    },
    _getRecord: function (name, record, idField) {
        var rows = this._data[name];
        if (!rows) return false;
        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            if (row[idField] == record[idField]) return row;
        }
        return null;
    },
    
    __OnRowChanged: function (e) {
        var type = e.type;
        var record = e.record;
        var name = this._getNameByListControl(e.sender);
        var oldRow = this._getRecord(name, record, e.sender.getIdField());

        var rows = this._data[name];
        if (oldRow) {
            var rows = this._data[name];
            rows.remove(oldRow);
        }
        
        if (type == "removerow" && record._state == "added") {
        } else {
            rows.push(record);
        }

        this._originals[name] = e.sender._originals;

        
        if (record._state == "added") {
            var parentSource = this._getParentSource(e.sender);
            if (parentSource) {
                var current = parentSource.getSelected();
                if (current) {
                    record._parentId = current[parentSource.getIdField()];
                } else {
                    rows.remove(record);    
                }
            }
        }
    },
    __OnDataPreLoad: function (e) {
        var source = e.sender;
        var name = this._getNameByListControl(source);
        var idField = e.sender.getIdField();

        var rows = this._data[name];
        var maps = {};
        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            maps[row[idField]] = row;
        }

        
        var ors = this._originals[name]
        if (ors) {
            source._originals = ors;
        }

        
        var nowData = e.data || [];
        for (var i = 0, l = nowData.length; i < l; i++) {
            var row = nowData[i];
            var old = maps[row[idField]];
            if (old) {
                delete old._uid;
                mini.copyTo(row, old);
            }
        }

        
        var parentSource = this._getParentSource(source);
        if (source.getPageIndex && source.getPageIndex() == 0) {
            var adds = [];
            for (var i = 0, l = rows.length; i < l; i++) {
                var row = rows[i];
                if (row._state == "added") {
                    if (parentSource) {
                        var current = parentSource.getSelected();
                        if (current && current[parentSource.getIdField()] == row._parentId) {
                            adds.push(row);
                        }
                    } else {
                        adds.push(row);
                    }
                }
            }
            adds.reverse();
            nowData.insertRange(0, adds);
        }

        
        var removes = [];
        for (var i = nowData.length - 1; i >= 0; i--) {
            var row = nowData[i];
            var old = maps[row[idField]];
            if (old && old._state == "removed") {
                nowData.removeAt(i);
                removes.push(old);
            }
        }


        

    },
    
    _getParentSource: function (source) {
        var childName = this._getNameByListControl(source);
        for (var i = 0, l = this._links.length; i < l; i++) {
            var link = this._links[i];
            if (link.childName == childName) {
                return this._sources[link.parentName];
            }
        }
    },
    _getLinks: function (source) {
        var name = this._getNameByListControl(source);
        var links = [];
        for (var i = 0, l = this._links.length; i < l; i++) {
            var link = this._links[i];
            if (link.parentName == name) {
                links.push(link);
            }
        }
        return links;
    },
    __OnDataSelectionChanged: function (e) {
        var grid1 = e.sender;
        var record = grid1.getSelected();

        var links = this._getLinks(grid1);
        for (var i = 0, l = links.length; i < l; i++) {
            var link = links[i];
            var grid2 = this._sources[link.childName];

            if (record) {
                var args = {};
                args[link.parentField] = record[grid1.getIdField()];
                grid2.load(args);
            } else {
                grid2.loadData([]);
            }
        }
    }
});
mini.regClass(mini.DataSet, "dataset");


mini.FileUpload = function (config) {
    this.postParam = {};
    mini.FileUpload.superclass.constructor.call(this, config);
    this.on("validation", this.__OnValidation, this);
}

mini.extend(mini.FileUpload, mini.ButtonEdit, {
    width: 180,
    buttonText: "浏览...",
    _buttonWidth: 56,

    limitTypeErrorText: "上传文件格式为：",
    readOnly: true,
    _cellSpacing: 0,

    limitSize: '',
    limitType: '',
    typesDescription: '上传文件格式',
    uploadLimit: 0,
    queueLimit: '',
    flashUrl: '',
    uploadUrl: '',
    showUploadProgress: true,
    usequerystring:false,
    postParam : null,
    uploadOnSelect: false,

    uiCls: "mini-fileupload",
    _create: function () {
        mini.FileUpload.superclass._create.call(this);

        mini.addClass(this.el, "mini-htmlfile");
        this._progressbarEl = mini.append(this._borderEl, '<div id="' + this._id + '$progressbar"  class="mini-fileupload-progressbar"><div id="' + this._id + '$complete" class="mini-fileupload-complete"></div></div>')

        this._completeEl = this._progressbarEl.firstChild;


        this._uploadId = this.uid + "$button_placeholder";
        this._fileEl = mini.append(this.el, '<span id="' + this._uploadId + '"></span>');
        this.uploadEl = this._fileEl;

        mini.on(this._borderEl, "mousemove", this.__OnMouseMove, this);
    },
    _getButtonHtml: function () {
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" '
                        + 'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span class="mini-buttonedit-button" ' + hover + '>' + this.buttonText + '</span>';
    },
    destroy: function (removeEl) {
        if (this._innerEl) {
            mini.clearEvent(this._innerEl);
            
            this._innerEl = null;
        }
        mini.FileUpload.superclass.destroy.call(this, removeEl);
    },
    doLayout: function(){
        mini.FileUpload.superclass.doLayout.call(this);
        if(this.swfUpload){
            var el = this.swfUpload.movieElement;
            el.style.width = this._borderEl.style.width;
        }
    },
    flashChecker : function() {
	    var hasFlash = 0; // 是否安装了flash
	    var flashVersion = 0; // flash版本
	
	    if (document.all) {
	        try{
	            var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
	            if (swf) {
	                hasFlash = 1;
	                VSwf = swf.GetVariable("$version");
	                flashVersion = parseInt(VSwf.split(" ")[1].split(",")[0]);
	            }
	        }catch(ex){
	            
	        }
	    } else {
	        if (navigator.plugins && navigator.plugins.length > 0) {
	            var swf = navigator.plugins["Shockwave Flash"];
	            if (swf) {
	                hasFlash = 1;
	                var words = swf.description.split(" ");
	                for (var i = 0; i < words.length; ++i) {
	                    if (isNaN(parseInt(words[i])))
	                        continue;
	                    flashVersion = parseInt(words[i]);
	                }
	            }
	        }
	    }
	    return {
	        hasFlash  : hasFlash,
	        version   : flashVersion
	    };
	},
    __OnMouseMove: function (evt) {
        if (this.enabled == false) return;

        var sf = this;
       
        if (!this.swfUpload) {
            if(!this.flashChecker().hasFlash){
               alert("请安装Flash Player。");
               return;
            }
            
            var upload = new SWFUpload({
                file_post_name: this.name,
                upload_url: sf.uploadUrl,
                flash_url: sf.flashUrl,

                
                file_size_limit: sf.limitSize,  
                file_types: sf.limitType,   
                file_types_description: sf.typesDescription,
                file_upload_limit: parseInt(sf.uploadLimit),
                file_queue_limit: sf.queueLimit,
                use_query_string : sf.usequerystring,
                
                file_queued_handler: mini.createDelegate(this.__on_file_queued, this),
                file_queue_error_handler: mini.createDelegate(this.__on_file_queued_error, this),
                upload_error_handler: mini.createDelegate(this.__on_upload_error, this),
                upload_success_handler: mini.createDelegate(this.__on_upload_success, this),
                upload_complete_handler: mini.createDelegate(this.__on_upload_complete, this),
                upload_progress_handler: mini.createDelegate(this.__on_upload_progress, this),

                
                button_placeholder_id: this._uploadId,
                button_width: 1000,
                button_height: 50,
                button_window_mode: "transparent",
                button_action : SWFUpload.BUTTON_ACTION.SELECT_FILE,

                
                debug: false

            });
            upload.flashReady();
            this.swfUpload = upload;

            var el = this.swfUpload.movieElement;
            el.style.zIndex = 1000;
            el.style.position = "absolute";
            el.style.left = "0px";
            el.style.top = "0px";
            el.style.width = "100%";
            el.style.height = "50px";


        }
    },
    setLimitSize: function (value) {
        this.limitSize = value;
    },
    addPostParam: function (value) {
        mini.copyTo(this.postParam, value);
    },
   
    getPostParam: function () {
        return this.postParam;
    },

    setLimitType: function (value) {
        this.limitType = value;
        if (this.swfUpload) this.swfUpload.setFileTypes(this.limitType, this.typesDescription);

    },
    getLimitType: function () {
        return this.limitType;
    },

    setTypesDescription: function (str) {
        this.typesDescription = str;
        if (this.swfUpload) this.swfUpload.setFileTypes(this.limitType, this.typesDescription);

    },
    getTypesDescription: function () {
        return this.typesDescription;
    },

    setButtonText: function (value) {
        this.buttonText = value;
        this._buttonEl.innerHTML = value;
    },
    getButtonText: function () {
        return this.buttonText;
    },

    setUploadLimit: function (value) {
        this.uploadLimit = value;
    },
    
    setQueueLimit: function (value) {
        this.queueLimit = value;
    },

    setUseQueryString:function(value){
        this.usequerystring = value;
    },
    setFlashUrl: function (value) {
        this.flashUrl = value;
    },

    setUploadUrl: function (value) {
        if (this.swfUpload) {
            this.swfUpload.setUploadURL(value);
        }
        this.uploadUrl = value
    },
    getUploadUrl: function () {
        return this.uploadUrl;
    },
    setPostParam: function (value) {
        if (this.swfUpload) {
            this.swfUpload.setPostParams(value);
        }
        this.postParam = value
    },
    setName: function (value) {
        this.name = value;
    },

    startUpload: function (params) {
        var e = { cancel: false };
        this.fire("beforeupload", e);
        if (e.cancel == true) return;
        if (this.swfUpload) {
            this.swfUpload.setPostParams(this.postParam);
            var state =  this.swfUpload.getStats();
            /* 上次队列中的最后一个文件 pzf */
            var _file = this.swfUpload.getFile(state.files_queued + state.successful_uploads + state.upload_errors +state.queue_errors - 1);

            this.swfUpload.startUpload(_file.id);
        }
    },
    setShowUploadProgress: function (value) {

        this.showUploadProgress = value;
        this._progressbarEl.style.display = value ? "block" : "none";
    },
    getShowUploadProgress: function () {
        return this.showUploadProgress;
    },

    __on_upload_progress: function (file, complete, total) {

        if (this.showUploadProgress) {
            var totalWidth = mini.getWidth(this._progressbarEl);
            var width = totalWidth * complete / total;
            mini.setWidth(this._completeEl, width);

        }
        this._progressbarEl.style.display = this.showUploadProgress ? "block" : "none";

        var e = { file: file, complete: complete, total: total };
        this.fire("uploadprogress", e);
    },

    __on_file_queued: function (file) {
        var e = { file: file };

       /* 第二次选择文件无法 潘正锋 2014-03 */
       /*
        var state = this.swfUpload.getStats();
        if (state.files_queued > 0) {
            for (var i = 0; i < state.files_queued; i++) {
                var _file = this.swfUpload.getFile(i);
                if (_file.id != file.id) {
                    this.swfUpload.cancelUpload(_file.id, false);
                }
            }
        }
        */
        if (this.uploadOnSelect) {
            this.startUpload()
        }
        this.setText(file.name);
        this.setValue(file.name);

        this.fire("fileselect", e);
    },
    __on_file_queued_error:function(file, errorCode, message){
        switch (errorCode) {
            case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:

                mini.alert("上传文件太大, 文件名: " + file.name + ", File size: " + file.size);
                break;
            case SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE:

                mini.alert("文件大小为0, 文件名: " + file.name);
                break;
            case SWFUpload.QUEUE_ERROR.INVALID_FILETYPE:

                mini.alert("文件类型不符, 文件名: " + file.name);
                break;
            default:

                break;
        }
    },
    __on_upload_success: function (file, serverData) {
        
        var e = { file: file, serverData: serverData };
        this.fire("uploadsuccess", e);
        this._progressbarEl.style.display = "none";


    },
    __on_upload_error: function (file, code, message) {
        if (message == "File Cancelled") return;

        this._progressbarEl.style.display = "none";

        var e = { file: file, code: code, message: message };


        this.fire("uploaderror", e);
        
    },
    __on_upload_complete: function (e) {
        this._progressbarEl.style.display = "none";
        this.fire("uploadcomplete", e);
    },
    __fileError: function () {
        
    },
    setValue: function (value,firechangedevent) {
        mini.FileUpload.superclass.setValue.call(this,value,firechangedevent);
        mini.FileUpload.superclass.setText.call(this,value);
    },

    getAttrs: function (el) {
        var attrs = mini.FileUpload.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["limitType", "limitSize", "flashUrl", "uploadUrl", "uploadLimit", "buttonText", "showUploadProgress",
                "onuploadsuccess", "onuploaderror", "onuploadcomplete", "onfileselect","onuploadprogress","usequerystring"
            ]
        );

        mini._ParseBool(el, attrs,
            ["uploadOnSelect"
            ]
        );

        return attrs;
    }

});
mini.regClass(mini.FileUpload, "fileupload");
/**
 * 定义了Fit组件
 * @fileOverview Fit.js
 * @author 殷文旭
 */

/**
 * @class mini.Fit Fit 是mini UI中的自动撑满组件<br/>
 * 高度撑满布局控件。它的高度为：父元素高度 - 其他同级元素高度。
 * @constructor
 * @extends mini.Container
 * @requires mini.Container
 * @example
 * &lt;div class="mini-fit"&gt;&lt;/div&gt;
 */
mini.Fit = function () {
	mini.Fit.superclass.constructor.call(this);
}
mini.extend(mini.Fit, mini.Container,{
	/**
	 * 没有用到的属性
	 * @private
	 */
	style: "",
	_clearBorder: false,
    /**
     * 组将样式类
     * @type String
     * @default "mini-fit"
     */
	uiCls: "mini-fit",
	
	_create: function () {
		this.el = document.createElement("div");
		this.el.className = "mini-fit";
		this._bodyEl = this.el;
	},
	_initEvents: function () {

	},
	/**
	 * 无用方法
	 * @private
	 */
	isFixedSize: function () {
		return false;
	},
	/**
	 * 调整布局方法，通常由框架自动调用，无需使用者自己调用。
	 */
	doLayout: function () {
		if (!this.canLayout())
			return;

		var parentNode = this.el.parentNode;
		var childNodes = mini.getChildNodes(parentNode);
		if (parentNode == document.body) {
			this.el.style.height = "0px";
		}

		var height = mini.getHeight(parentNode, true);

		for (var i = 0, l = childNodes.length; i < l; i++) {
			var node = childNodes[i];
			var tagName = node.tagName ? node.tagName.toLowerCase() : "";
			if (node == this.el || (tagName == "style" || tagName == "script"))
				continue;

			var pos = mini.getStyle(node, "position");
			if(pos == "absolute" || pos == "fixed")
				continue;

			var h = mini.getHeight(node);

			var margin = mini.getMargins(node);
			height = height - h - margin.top - margin.bottom;
		}

		var border = mini.getBorders(this.el);
		var padding = mini.getPaddings(this.el);
		var margin = mini.getMargins(this.el);

		height = height - margin.top - margin.bottom;
		if (jQuery.boxModel) {
			height = height - padding.top - padding.bottom - border.top - border.bottom;
		}
		if (height < 0)
			height = 0;

		this.el.style.height = height + "px";

		try {
			childNodes = mini.getChildNodes(this.el);
			for (var i = 0, l = childNodes.length; i < l; i++) {
				var node = childNodes[i];
				mini.layout(node);
			}
		} catch (e) {
		}

	},
	/**
	 * 将其他元素的子元素填充到自动撑满组件内
	 * @param value {Object} DOM元素
	 */
	set_bodyParent: function (value) {

		if (!value)
			return;

		var el = this._bodyEl;

		var p = value;
		while (p.firstChild) {
			try {
				el.appendChild(p.firstChild);
			} catch (e) {
			}
		}
		this.doLayout();
	},
    /**
     * 用于从HTML标签中提取配置参数的方法。方法实现中直接调用了父类的实现。
     * @param el {Object} DOM元素
     * @returns {Object} JSON对象
     */
	getAttrs: function (el) {
		var attrs = mini.Fit.superclass.getAttrs.call(this, el);
		attrs._bodyParent = el;
		return attrs;
	}
});
mini.regClass(mini.Fit, "fit");
mini.Form = function (el) {
	this.el = mini.byId(el);
	if (!this.el) throw new Error("form element not null");

	mini.Form.superclass.constructor.call(this);

}
mini.extend(mini.Form, mini.Component, {
	el: null,

	getFields: function () {
		if (!this.el)
			return [];
		var controls = mini.findControls( function (control) {
			if (!control.el || control.formField != true)
				return false;
			if (mini.isAncestor(this.el, control.el))
				return true;
			return false;
		}, this);
		return controls;
	},
	getFieldsMap: function () {
		var fields = this.getFields();
		var map = {};
		for (var i = 0, l = fields.length; i < l; i++) {
			var field = fields[i];
			if (field.name)
				map[field.name] = field;
		}
		return map;
	},
	getField: function (name) {
		if (!this.el)
			return null;
		return mini.getbyName(name, this.el);
	},
	getData: function (formatted, deep ,all) {
	    if (mini.isNull(deep)) deep = true;
	    var valueFn = formatted ? "getFormValue" : "getValue";
	    var controls = this.getFields();
	    var data = {};
        var names = {};  //新增属性  保存name为下面功能服务
	    for (var i = 0, l = controls.length; i < l; i++) {
	        var control = controls[i];
	        var fn = control[valueFn];
	        if (!fn) continue;
	        if (control.name) {
                names[control.name] = control.name;//将已经遍历到的name放进去
	            if (deep == true) {

	                mini._setMap(control.name, fn.call(control), data);
	            } else {
	                data[control.name] = fn.call(control);
	            }
	        }
	        if (control.textName && control.getText) {
	            if (deep == true) {
	                data[control.textName] = control.getText();
	            } else {
	                mini._setMap(control.textName, control.getText(), data);
	            }
	        }
	    }
        /* 将Html原生标签中的hidden加入进去 潘正锋 21014-06-19 */
        if (all) {
            var inputs = jQuery(this.el).find(":input:hidden");
            for (var a = 0; a < inputs.length; a++) {
                var name = mini.getAttr(inputs[a], "name");
                var value = inputs[a].value;
                if (!name || names[name]) continue;
                if (deep == true) {
                    if (!names[name])
                        mini._setMap(name, inputs[a].value, data);
                } else {
                    data[name] = value;
                }
            }
        }
	    return data;
	},
	setData: function (options, all,deep,firechangedevent) {
	    if (mini.isNull(deep)) deep = true;
	    if (typeof options != "object") options = {};
	    var map = this.getFieldsMap();
	    for (var name in map) {
	        var control = map[name];
	        if (!control) continue;
	        if (control.setValue) {
	            var v = options[name];
	            if (deep == true) {
	                v = mini._getMap(name, options);
	            }
	            if (v === undefined && !all) continue;
	            if (v === null) v = "";
                /* add the parameter firechangedevent to declare whether the valuechanged event to be fire  */
	            control.setValue(v,firechangedevent);
	        }
	        if (control.setText && control.textName) {
	            var text = options[control.textName];
	            if (deep == true) {

	                text = mini._getMap(control.textName, options);
	            }
	            if (mini.isNull(text)) text = "";
	            control.setText(text);
	        }
	    }

	},
    getChanges: function(formatted, deep){
        var controls = this.getFields();
        var valueFn = formatted ? "getFormValue" : "getValue";
        var data = {};
        var names = {};  //新增属性  保存name为下面功能服务
        var ovalue,nvalue;

        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            var fn = control[valueFn];
            var nfn = control['getValue'];
            var ofn = control['getDefaultValue'];
            if (!fn||!ofn||!nfn) continue;
            ovalue = ofn.call(control);
            nvalue = nfn.call(control);
            if(control.uiCls == "mini-datepicker"){
                if(!ovalue && !nvalue){
                        continue;
                }
                else if(ovalue && nvalue){
                    ovalue =  mini.parseDate(ovalue);
                    if(nvalue - ovalue == 0)
                       continue;
                }

            }else if(control.uiCls == "mini-timespinner"){
                if(!ovalue && !nvalue){
                    continue;
                }
                if(ovalue && nvalue) {
                    ovalue = mini.parseTime(ovalue,control.format);
                    if (mini.formatDate(nvalue, "H:mm:ss") == mini.formatDate(ovalue, "H:mm:ss")) {
                        continue;
                    }
                }
            }
            else{
                if(conver(ovalue)==conver(nvalue)) continue;
            }

            if (control.name) {
                names[control.name] = control.name;//将已经遍历到的name放进去
                if (deep == true) {

                    mini._setMap(control.name, fn.call(control), data);
                } else {
                    data[control.name] = fn.call(control);
                }
            }
            if (control.textName && control.getText) {
                if (deep == true) {
                    data[control.textName] = control.getText();
                } else {
                    mini._setMap(control.textName, control.getText(), data);
                }
            }
        }
        function conver(value){
            if(value=="") return null;
            return value;
        }
        return data;
    },
	reset: function () {
	    var controls = this.getFields();
	    for (var i = 0, l = controls.length; i < l; i++) {
	        var control = controls[i];
	        if (control.destroyed || !control.setValue) continue;
	        if (control.setText && control._clearText !== false) {
	            control.setText("");
	        }
            /* when call the setValue("") method,the valid event will be trigger,cause the error icon show pzf 2014-04 */
	        control.setValue(control.defaultValue,false);
	    }
	    this.setIsValid(true);
	},
	clear: function () {
	    var controls = this.getFields();
	    for (var i = 0, l = controls.length; i < l; i++) {
	        var control = controls[i];
	        if (!control.setValue) continue;
	        if (control.setText && control._clearText !== false) {
	            control.setText("");
	        }
            /* when call the setValue("") method,the valid event will be trigger,cause the error icon show pzf 2014-04 */
	        control.setValue("",false);

	    }
	    this.setIsValid(true);
	},

	validate: function (all,hide) {
		var controls = this.getFields();

		for (var i = 0, l = controls.length; i < l; i++) {
			var control = controls[i];
			if (!control.validate)
				continue;
            /* 添加hide参数 pzf 2014-07*/
            if(hide === undefined) hide = false;
			if ((control.isDisplay && control.isDisplay()) || hide) {
				var succ = control.validate();
				if (succ == false && all === false) {
					break;
				}
			}
		}
		return this.isValid();
	},
	setIsValid: function (isValid) {
		var controls = this.getFields();
		for (var i = 0, l = controls.length; i < l; i++) {
			var control = controls[i];
			if (control.destroyed || !control.setIsValid)
				continue;
			control.setIsValid(isValid);
		}
	},
	isValid: function (hide) {
		var controls = this.getFields();
		for (var i = 0, l = controls.length; i < l; i++) {
			var control = controls[i];
			if (!control.isValid)
				continue;
            /* 添加hide参数 pzf 2014-07*/
            if(hide === undefined) hide = false;
			if ((control.isDisplay && control.isDisplay()) || hide)
                if(control.isValid() == false)
				   return false;
		}
		return true;
	},
	getErrorTexts: function () {
		var errorTexts = [];
		var errors = this.getErrors();
		for (var i = 0, l = errors.length; i < l; i++) {
			var control = errors[i];
			errorTexts.push(control.errorText);
		}
		return errorTexts;
	},
	getErrors: function () {
		var errors = [];
		var controls = this.getFields();
		for (var i = 0, l = controls.length; i < l; i++) {
			var control = controls[i];
			if (!control.isValid)
				continue;
			if (control.isValid() == false) {
				errors.push(control);
			}
		}
		return errors;
	},
	mask: function (options) {
		if (typeof options == "string")
			options = {
				html: options
			};
		options = options || {};
		options.el = this.el;
		if (!options.cls)
			options.cls = this._maskCls;
		mini.mask(options);
	},
	unmask: function () {
		mini.unmask(this.el);
	},
	_maskCls: "mini-mask-loading",
	loadingMsg: "数据加载中，请稍后...",
	loading: function (msg) {
		this.mask(msg || this.loadingMsg);
	},
	__OnValueChanged: function (e) {

		this._changed = true;
	},
	_changed: false,
	setChanged: function (value) {
		this._changed = value;

		var controls = this.getFields();
		for (var i = 0, l = controls.length; i < l; i++) {
			var control = controls[i];
			control.on("valuechanged", this.__OnValueChanged, this);
		}
	},
	isChanged: function () {
		return this._changed;
	},
	setEnabled: function (value) {
		var controls = this.getFields();
		for (var i = 0, l = controls.length; i < l; i++) {
			var control = controls[i];
			control.setEnabled(value);
		}
    },
    setEnterKeyNext: function () {
        var controls = this.getFields();

        function bind(control) {
            function a(e) {
                var control = e.sender;
                var step = 1;
                var index = controls.indexOf(control);
                nextFocus(index);
                function nextFocus(index) {


                    var next = controls[index+1];
                    if (next) {
                        if (next.uiCls == "mini-textbox" || next.uiCls == "mini-textarea" || next.uiCls == "mini-password" || next.uiCls == "mini-treeselect" ||
                            (next.uiCls == "mini-combobox" && next.name != "pagesize") || next.uiCls == "mini-datepicker" || next.uiCls == "mini-monthpicker" ||
                            next.uiCls == "mini-yearpicker" || next.uiCls == "mini-timespinner" || next.uiCls == "mini-spinner" || next.uiCls == "mini-checkbox" ||
                            next.uiCls == "mini-radiobuttonlist" || next.uiCls == "mini-checkboxlist" || next.uiCls == "mini-autocomplete") {
                            if (next.isShowPopup && next.isShowPopup())
                                return;
                            next.focus();
                            if (next.showPopup && next.uiCls != "mini-autocomplete") {
                                setTimeout(function () {
                                    next.showPopup();
                                }, 1);

                            }

                        } else {
                            index++;
                            nextFocus(index);
                        }

                    }
                }
            }


            control.on("enter", a);
        }

        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            bind(control);
        }
    }
});
/**
 * 定义了form隐藏组件
 * @fileOverview Hidden.js
 * @author 殷文旭
 */

mini = mini || {};

/**
 * Hidden 是mini UI中的隐藏域组件属于form类组件，构造函数中调用了 Control父类的构造方法
 * @class mini.Hidden
 * @constructor
 * @extends mini.Control
 */
mini.Hidden = function () {
	mini.Hidden.superclass.constructor.call(this);
}
mini.extend(mini.Hidden, mini.Control,{
	_clearBorder: false,

	/**
	 * 标志此组件属于form元素组件
	 * @type Boolean
	 * @default true
	 * @const
	 */
	formField: true,

	/**
	 * 隐藏域的实际值
	 * @type String
	 * @default ""
	 */
	value: "",
	/**
	 * Hidden组件对应的样式类名。
	 * @type String
	 * @default "mini-hidden"
	 * @const
	 */
	uiCls: "mini-hidden",

	_create: function () {
		this.el = document.createElement("input");
		this.el.type = "hidden";
		this.el.className = "mini-hidden";
	},
	/**
	 * 改变Hidden组件name属性的值，同时改变对应标签的name属性值
	 * @param value {String} name值
	 */
	setName: function (value) {
		this.name = value;
		this.el.name = value;
	},
	/**
	 * 改变Hidden组件 对应标签的 value 属性值，当值为null 或 undefined时，将value置空。
	 * @param value {String} value值
	 */
	setValue: function (value) {
		if (value === null || value === undefined)
			value = "";
		this.value = value;
		if (mini.isDate(value)) {
			var y = value.getFullYear();
			var m = value.getMonth() + 1;
			var d = value.getDate();
			m = m < 10 ? "0" + m : m;
			d = d < 10 ? "0" + d : d;
			this.el.value = y + "-" + m + "-" + d;
		} else {
			this.el.value = value;
		}
	},
	/**
	 * 获取Hidden组件的value属性值。
	 * @return {String}
	 */
	getValue: function () {
		return this.value;
	},
	/**
	 * 获取Hidden组建相对于form提交的值，Hidden组件的FormValue 和Value并无二致
	 * @return {String}
	 */
	getFormValue: function () {
		return this.el.value;
	}
});

mini.regClass(mini.Hidden, "hidden");

mini.HtmlFile = function () {
    mini.HtmlFile.superclass.constructor.call(this);
    this.on("validation", this.__OnValidation, this);
}
mini.extend(mini.HtmlFile, mini.ButtonEdit, {
    width: 180,
    buttonText: "浏览...",
    _buttonWidth: 56,

    limitType: "",  
    

    limitTypeErrorText: "上传文件格式为：",

    allowInput: false,
    readOnly: true,
    _cellSpacing: 0,

    uiCls: "mini-htmlfile",
    _create: function () {
        mini.HtmlFile.superclass._create.call(this);

        this._fileEl = mini.append(this.el, '<input type="file" hideFocus class="mini-htmlfile-file" name="' + this.name + '" ContentEditable=false/>');
        mini.on(this._borderEl, "mousemove", this.__OnMouseMove, this);
        mini.on(this._fileEl, "change", this.__OnFileChange, this);
    },
    _getButtonHtml: function () {
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" '
                        + 'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span class="mini-buttonedit-button" ' + hover + '>' + this.buttonText + '</span>';
    },
    __OnFileChange: function (e) {
        this.value = this._textEl.value = this._fileEl.value;
        this._OnValueChanged();
        e = { htmlEvent: e };
        this.fire("fileselect", e);

    },
    __OnMouseMove: function (e) {

        var x = e.pageX, y = e.pageY;
        var box = mini.getBox(this.el);

        x = (x - box.x - 5);
        y = (y - box.y - 5);

        if (this.enabled == false) {

            x = -20;
            y = -20;
        }
        this._fileEl.style.display = "";
        this._fileEl.style.left = x + 'px';
        this._fileEl.style.top = y + 'px';
    },
    __OnValidation: function (e) {
        if (!this.limitType) return;

        var vs = e.value.split(".");
        var fileType = "*." + vs[vs.length - 1];
        var types = this.limitType.split(";");

        if (types.length > 0 && types.indexOf(fileType) == -1) {
            e.errorText = this.limitTypeErrorText + this.limitType;
            e.isValid = false;
        }
    },
    setName: function (value) {
        this.name = value;
        mini.setAttr(this._fileEl, "name", this.name);
    },
    getValue: function () {
        return this._textEl.value;
    },

    setButtonText: function (value) {
        this.buttonText = value;
        
    },
    getButtonText: function () {
        return this.buttonText;
    },
    setLimitType: function (value) {
        this.limitType = value;
    },
    getLimitType: function () {
        return this.limitType;
    },
    
    getAttrs: function (el) {
        var attrs = mini.HtmlFile.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["limitType", "buttonText", "limitTypeErrorText","onfileselect"
             ]
        );

        return attrs;
    }
});
mini.regClass(mini.HtmlFile, "htmlfile");

mini.Include = function () {
    mini.Include.superclass.constructor.call(this);
}
mini.extend(mini.Include, mini.Control, {

    url: "",
    

    uiCls: "mini-include",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-include";
    },
    _initEvents: function () {

    },
    doLayout: function () {
        if (!this.canLayout()) return;

        var cs = this.el.childNodes;
        if (cs) {
            for (var i = 0, l = cs.length; i < l; i++) {
                var cel = cs[i];
                mini.layout(cel);
            }
        }
    },
    setUrl: function (value) {
        this.url = this.parseUrl(value);
        mini.update({
            url: this.url,
            el: this.el,
            async: this.async
        });

        this.doLayout();
    },
    getUrl: function (value) {
        return this.url;
    },






    
    getAttrs: function (el) {
        var attrs = mini.Include.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["url"
             ]
        );

        return attrs;
    }
});
mini.regClass(mini.Include, "include");

/**
*   构造函数，调用mini.Control和mini.Component的构造函数，在父类的构造函数中执行_create和_initEvents
*   实现属性初始化
*   @author  王洪涛
*/
mini.Layout = function () {
    this.regions = [];
    this.regionMap = {};
    mini.Layout.superclass.constructor.call(this);
}
/**
*   采用属性复制的方式事项方法的继承，同时实现方法的重载。
*   @author  王洪涛
*/
mini.extend(mini.Layout, mini.Control, {
    regions: [],
    splitSize: 5,
    collapseWidth: 28,
    collapseHeight: 25,
    regionWidth: 150,
    regionHeight: 80,
    regionMinWidth: 50,
    regionMinHeight: 25,
    regionMaxWidth: 2000,
    regionMaxHeight: 2000,
    uiCls: "mini-layout",
    destroy: function (removeEl) {
        mini.clearEvent(document);
        if(this._borderEl){
            mini.clearEvent(this._borderEl);
            this._borderEl.parentNode.removeChild(this._borderEl);
            this._borderEl = null;
        }
        if(this.drag){
            mini.clearEvent(this.drag);
            this.drag.destroy(removeEl);
            this.drag = null;
        }
        var scope = this;
        $.each(this.regions, function(){
            scope._destroyRegionEl(this);
        });
        delete this.regions;
        delete this.regionMap;
        mini.Layout.superclass.destroy.call(this, removeEl);
    },
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-layout";
        this.el.innerHTML = '<div class="mini-layout-border"></div>';

        this._borderEl = this.el.firstChild;

        this.doUpdate();
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(this.el, "mouseout", this.__OnMouseOut, this);

            mini.on(document, "mousedown", this.__OnDocMouseDown, this);
        }, this);
    },	
	/**
	*   返回Layout组件的一个子区域
	*   @param  region 在页面定义子区域时所使用的region属性
	*/
    getRegionEl: function (region) {
        var region = this.getRegion(region);
        if (!region) return null;
        return region._el;
    },
    
    /**
	*   返回Layout组件的一个子区域;如果region定义返回指定的区域否则返回头部
	*   @param  region 在页面定义子区域时所使用的region属性
	*/
    getRegionHeaderEl: function (region) {
        var region = this.getRegion(region);
        if (!region) return null;
        return region._header;
    },
    /**
	*   返回Layout组件的一个子区域;如果region定义返回指定的区域否则返回区域本体
	*   @param  region 在页面定义子区域时所使用的region属性
	*/
    getRegionBodyEl: function (region) {
        var region = this.getRegion(region);
        if (!region) return null;
        return region._body;
    },
    getRegionSplitEl: function (region) {
        var region = this.getRegion(region);
        if (!region) return null;
        return region._split
    },
    getRegionProxyEl: function (region) {
        var region = this.getRegion(region);
        if (!region) return null;
        return region._proxy;
    },
    getRegionBox: function (region) {
        var el = this.getRegionEl(region);
        if (el) return mini.getBox(el);
        return null;
    },
    getRegion: function (region) {
        if (typeof region == "string") return this.regionMap[region];
        return region;
    },
    
    /**
	*   返回Layout组件的一个子区域中的控件，例如折叠控件或者隐藏控件
	*   @param  region 在页面定义子区域时所使用的region属性
	*   @param  name 子区域中控件的名字
	*/
	
    _getButton: function (region, name) {
        var buttons = region.buttons;
        for (var i = 0, l = buttons.length; i < l; i++) {
            var button = buttons[i];
            if (button.name == name) return button;
        }
    },
    /**
    *    创建一个region对象，即region的构造函数。
    */
    _createRegion: function (options) {

        var region = mini.copyTo({
            region: "", 
            title: "", 
            iconCls: "", 
            iconStyle: "",
            showCloseButton: false, showCollapseButton: true,
            buttons: [
                { name: "close", cls: "mini-tools-close", html: "", visible: false },
                { name: "collapse", cls: "mini-tools-collapse", html: "", visible: true }
            ],
            showSplitIcon: false, 
            showSplit: true,    
            showHeader: true,
            splitSize: this.splitSize, 
            collapseSize: this.collapseWidth,
            width: this.regionWidth, 
            height: this.regionHeight,
            minWidth: this.regionMinWidth, 
            minHeight: this.regionMinHeight,
            maxWidth: this.regionMaxWidth, 
            maxHeight: this.regionMaxHeight,
            allowResize: true,
            cls: "", 
            style: "",
            headerCls: "", 
            headerStyle: "",
            bodyCls: "", 
            bodyStyle: "",
            visible: true,
            expanded: true
        }, options);
        return region;
    },
    /**
    *  创建一个Region 对应的Dom元素,即为这个Region设置_el属性
    */
    _CreateRegionEl: function (region) {
        var region = this.getRegion(region);
        if (!region) return;
        mini.append(this._borderEl, '<div id="' + region.region + '" class="mini-layout-region"><div class="mini-layout-region-header" style="' + region.headerStyle + '"></div><div class="mini-layout-region-body '+region.bodyCls+'" style="' + region.bodyStyle + '"></div></div>');
        region._el = this._borderEl.lastChild;
        region._header = region._el.firstChild;
        region._body = region._el.lastChild;
        mini.on(region._body, "scroll", function(){
            $("body").trigger("mousedown");
        }, this);

        if (region.cls) mini.addClass(region._el, region.cls);
        if (region.style) mini.setStyle(region._el, region.style);

        mini.addClass(region._el, 'mini-layout-region-' + region.region);

        
        if (region.region != "center") {
            mini.append(this._borderEl, '<div uid="' + this.uid + '" id="' + region.region + '" class="mini-layout-split"><div class="mini-layout-spliticon"></div></div>');
            region._split = this._borderEl.lastChild;
            mini.addClass(region._split, 'mini-layout-split-' + region.region);
        }

        
        if (region.region != "center") {
            mini.append(this._borderEl, '<div id="' + region.region + '" class="mini-layout-proxy"></div>');
            region._proxy = this._borderEl.lastChild;
            mini.addClass(region._proxy, 'mini-layout-proxy-' + region.region);
        }

    },
    _destroyRegionEl : function(region){
        if (!region) return;
        if(region._header){
            mini.clearEvent(region._header);
            region._header.parentNode.removeChild(region._header);
            region._header = null;
        }
        if(region._body){
            mini.clearEvent(region._body);
            region._body.parentNode.removeChild(region._body);
            region._body = null;
        }
        if(region._el){
            mini.clearEvent(region._el);
            region._el.parentNode.removeChild(region._el);
            region._el = null;
        }
        if(region._split){
            mini.clearEvent(region._split);
            region._split.parentNode.removeChild(region._split);
            region._split = null;
        }
        if(region._proxy){
            mini.clearEvent(region._proxy);
            region._proxy.parentNode.removeChild(region._proxy);
            region._proxy = null;
        }
        mini.clearEvent(region);
        region = null;
    },
    setRegionControls: function (region, value) {
        var region = this.getRegion(region);
        if (!region) return;
        var el = this.getRegionBodyEl(region);
        __mini_setControls(value, el, this);
    },    
    
    /**
    *   Layout对象内的各region对象赋值，通常页面parse()函数中调用
    */
    setRegions: function (regions) {
        if (!mini.isArray(regions)) return;
        for (var i = 0, l = regions.length; i < l; i++) {
            this.addRegion(regions[i]);
        }

    },
    /**
    *   确定将一个region增加到Layout的容器中，增加到Layout的regions和regionMap属性内
    *
    */
    addRegion: function (region, index) {
        var r1 = region;
        region = this._createRegion(region);
        if (!region.region) region.region = "center";
        region.region = region.region.toLowerCase();
        if (region.region == "center" && r1 && !r1.showHeader) {
            region.showHeader = false;
        }
        if (region.region == "north" || region.region == "south") {
            if (!r1.collapseSize) {
                region.collapseSize = this.collapseHeight;
            }
        }

        this._measureRegion(region);

        if (typeof index != "number") index = this.regions.length;
        var r = this.regionMap[region.region];
        if (r) {
            
            return;
        }
        this.regions.insert(index, region);
        this.regionMap[region.region] = region;

        this._CreateRegionEl(region);

        var el = this.getRegionBodyEl(region);

        
        var cs = region.body;
        delete region.body;
        if (cs) {
            if (!mini.isArray(cs)) cs = [cs];
            for (var i = 0, l = cs.length; i < l; i++) {
                mini.append(el, cs[i]);
            }
        }

        
        if (region.bodyParent) {
            var p = region.bodyParent;
            while (p.firstChild) {
                el.appendChild(p.firstChild);
            }
        }
        delete region.bodyParent;

        
        if (region.controls) {        
            this.setRegionControls(region, region.controls);
            delete region.controls;
        }

        this.doUpdate();
    },
    /**
    *   删除一个region
    */
    removeRegion: function (region) {
        var region = this.getRegion(region);
        if (!region) return;
        this.regions.remove(region);
        delete this.regionMap[region.region];

        jQuery(region._el).remove();
        jQuery(region._split).remove();
        jQuery(region._proxy).remove();

        this.doUpdate();
    },
    
    moveRegion: function (region, index) {
        var region = this.getRegion(region);
        if (!region) return;
        var t = this.regions[index];
        if (!t || t == region) return;
        this.regions.remove(region);
        var index = this.region.indexOf(t);
        this.regions.insert(index, region);
        this.doUpdate();
    },
    _measureRegion: function (region) {
        var button = this._getButton(region, "close");
        button.visible = region.showCloseButton;
        var button = this._getButton(region, "collapse");
        button.visible = region.showCollapseButton;

        if (region.width < region.minWidth) region.width = region.minWidth;
        if (region.width > region.maxWidth) region.width = region.maxWidth;
        if (region.height < region.minHeight) region.height = region.minHeight;
        if (region.height > region.maxHeight) region.height = region.maxHeight;
    },
    /**
    *   更新region的属性
    */
    updateRegion: function (region, options) {
        region = this.getRegion(region);
        if (!region) return;
        if (options) delete options.region;
        mini.copyTo(region, options);

        this._measureRegion(region);

        this.doUpdate();
    },
    /**
    *   展开一个region
    */
    expandRegion: function (region) {
        region = this.getRegion(region);
        if (!region) return;
        region.expanded = true;
        this.doUpdate();
    },
    /**
    *   隐藏一个region
    */
    collapseRegion: function (region) {
        region = this.getRegion(region);
        if (!region) return;
        region.expanded = false;
        this.doUpdate();
    },
    toggleRegion: function (region) {
        region = this.getRegion(region);
        if (!region) return;
        if (region.expanded) {
            this.collapseRegion(region);
        } else {
            this.expandRegion(region);
        }
    },
    /**
    *    显示一个区域
    */
    showRegion: function (region) {
        region = this.getRegion(region);
        if (!region) return;
        region.visible = true;
        this.doUpdate();
    },
    /**
    *    隐藏一个区域
    */
    hideRegion: function (region) {
        region = this.getRegion(region);
        if (!region) return;
        region.visible = false;
        this.doUpdate();
    },
    /**
    *   判断一个区域的是否展看
    */
    isExpandRegion: function (region) {
        region = this.getRegion(region);
        if (!region) return null;
        return this.region.expanded;
    },
    /**
    *   判断是一个区域是否显示
    */
    isVisibleRegion: function (region) {
        region = this.getRegion(region);
        if (!region) return null;
        return this.region.visible;
    },
    _tryToggleRegion: function (region) {
        region = this.getRegion(region);

        var e = {
            region: region,
            cancel: false
        };
        if (region.expanded) {
            this.fire("BeforeCollapse", e);
            if (e.cancel == false) {
                this.collapseRegion(region);
            }
        } else {
            this.fire("BeforeExpand", e);
            if (e.cancel == false) {
                this.expandRegion(region);
            }
        }
    },
    
    _getProxyElByEvent: function (e) {
        var el = mini.findParent(e.target, 'mini-layout-proxy');
        return el;
    },
    _getRegionElByEvent: function (e) {
        var el = mini.findParent(e.target, 'mini-layout-region');
        return el;
    },
    __OnClick: function (e) {
        if (this._inAniming) return;
        var proxyEl = this._getProxyElByEvent(e);
        if (proxyEl) {
            var region = proxyEl.id;
            var collapseEl = mini.findParent(e.target, 'mini-tools-collapse');
            if (collapseEl) {
                this._tryToggleRegion(region);
            } else {
                this._VirtualToggle(region);
            }
        }

        var regionEl = this._getRegionElByEvent(e);
        if (regionEl && mini.findParent(e.target, 'mini-layout-region-header')) {
            var region = regionEl.id;
            var collapseEl = mini.findParent(e.target, 'mini-tools-collapse');
            if (collapseEl) {
                this._tryToggleRegion(region);
            }
            var closeEl = mini.findParent(e.target, 'mini-tools-close');
            if (closeEl) {
                this.updateRegion(region, { visible: false });
            }
        }
        if (mini.hasClass(e.target, 'mini-layout-spliticon')) {
            var region = e.target.parentNode.id;
            this._tryToggleRegion(region);
        }

    },
    _OnButtonClick: function (region, button, htmlEvent) {
        this.fire("buttonclick", {
            htmlEvent: htmlEvent,
            region: region,
            button: button,
            index: this.buttons.indexOf(button),
            name: button.name
        });
    },
    _OnButtonMouseDown: function (region, button, htmlEvent) {
        this.fire("buttonmousedown", {
            htmlEvent: htmlEvent,
            region: region,
            button: button,
            index: this.buttons.indexOf(button),
            name: button.name
        });
    },
    hoverProxyEl: null,
    __OnMouseOver: function (e) {
        var proxyEl = this._getProxyElByEvent(e);
        if (proxyEl) {
            mini.addClass(proxyEl, 'mini-layout-proxy-hover');
            this.hoverProxyEl = proxyEl;
        }
    },
    __OnMouseOut: function (e) {
        if (this.hoverProxyEl) {
            mini.removeClass(this.hoverProxyEl, 'mini-layout-proxy-hover');
        }
        this.hoverProxyEl = null;
    },

    onButtonClick: function (fn, scope) {
        this.on("buttonclick", fn, scope);
    },
    onButtonMouseDown: function (fn, scope) {
        this.on("buttonmousedown", fn, scope);
    }

});

mini.copyTo(mini.Layout.prototype, {
    _createHeader: function (region, proxy) {
        var s = '<div class="mini-tools">';
        if (proxy) {
            s += '<span class="mini-tools-collapse"></span>';
        } else {
            for (var i = region.buttons.length - 1; i >= 0; i--) {
                var button = region.buttons[i];
                s += '<span class="' + button.cls + '" style="'
                s += button.style + ';' + (button.visible ? "" : "display:none;") + '">' + button.html + '</span>';
            }
        }
        s += '</div>';

        s += '<div class="mini-layout-region-icon ' + region.iconCls + '" style="' + region.iconStyle + ';' + ((region.iconStyle || region.iconCls) ? "" : "display:none;") + '"></div>';
        s += '<div class="mini-layout-region-title">' + region.title + '</div>';
        return s;
    },
    doUpdate: function () {
        for (var i = 0, l = this.regions.length; i < l; i++) {
            var region = this.regions[i];
            var type = region.region;
            var el = region._el, split = region._split, proxy = region._proxy;

            if (region.cls) mini.addClass(el, region.cls);

            region._header.style.display = region.showHeader ? "" : "none";
            region._header.innerHTML = this._createHeader(region);
            if (region._proxy) region._proxy.innerHTML = this._createHeader(region, true);

            if (split) {
                mini.removeClass(split, 'mini-layout-split-nodrag');
                if (region.expanded == false || !region.allowResize) {
                    mini.addClass(split, 'mini-layout-split-nodrag')
                }
            }

        }

        this.doLayout();
    },
    doLayout: function () {

        if (!this.canLayout()) {

            return;
        }

        if (this._inAniming) {
            
            return;
        }
        var h = mini.getHeight(this.el, true); 
        var w = mini.getWidth(this.el, true); 
        var box = { x: 0, y: 0, width: w, height: h };

        var regions = this.regions.clone();
        var center = this.getRegion("center");
        regions.remove(center);
        if (center) {
            regions.push(center); //put the center at last place
        }

        for (var i = 0, l = regions.length; i < l; i++) {
            var region = regions[i];
            region._Expanded = false;
            mini.removeClass(region._el, "mini-layout-popup");

            var type = region.region;
            var el = region._el, split = region._split, proxy = region._proxy;
            if (region.visible == false) {
                el.style.display = "none";
                if (type != "center") split.style.display = proxy.style.display = "none";
                continue;
            }
            el.style.display = "";
            if (type != "center") split.style.display = proxy.style.display = "";

            var x = box.x, y = box.y, w = box.width, h = box.height;
            var cw = region.width, ch = region.height;
            
            if (!region.expanded) {
                if (type == "west" || type == "east") {
                    cw = region.collapseSize;
                    mini.setWidth(el, region.width);
                } else if (type == "north" || type == "south") {
                    ch = region.collapseSize;
                    mini.setHeight(el, region.height);
                }
            }

            switch (type) {
                case "north":
                    h = ch;
                    box.y += ch;
                    box.height -= ch;
                    break;
                case "south":
                    h = ch;
                    y = box.y + box.height - ch;
                    box.height -= ch;
                    break;
                case "west":
                    w = cw;
                    box.x += cw;
                    box.width -= cw;
                    break;
                case "east":
                    w = cw;
                    x = box.x + box.width - cw;
                    box.width -= cw;
                    break;
                case "center":
                    break;
                default:
                    continue;
            }
            if (w < 0) w = 0;
            if (h < 0) h = 0;

            
            if (type == "west" || type == "east") {
                mini.setHeight(el, h);
            }
            if (type == "north" || type == "south") {
                mini.setWidth(el, w);
            }

            var style = "left:" + x + "px;top:" + y + "px;";
            var d = el;
            if (!region.expanded) {
                d = proxy;
                el.style.top = "-100px";
                el.style.left = "-1500px";
            } else {
                if (proxy) {
                    proxy.style.left = "-1500px";
                    proxy.style.top = "-100px";
                }
            }
            d.style.left = x + "px";
            d.style.top = y + "px";

            mini.setWidth(d, w);
            mini.setHeight(d, h);
            if(isIE6){
            	mini.setWidth(region._body, w);
            }
            
            var regionH = jQuery(region._el).height()
            var headerH = region.showHeader ? jQuery(region._header).outerHeight() : 0;
            mini.setHeight(region._body, regionH - headerH);

            
            if (type == "center") continue;

            cw = ch = region.splitSize;
            var x = box.x, y = box.y, w = box.width, h = box.height;
            switch (type) {
                case "north":
                    h = ch;
                    box.y += ch;
                    box.height -= ch;
                    break;
                case "south":
                    h = ch;
                    y = box.y + box.height - ch;
                    box.height -= ch;
                    break;
                case "west":
                    w = cw;
                    box.x += cw;
                    box.width -= cw;
                    break;
                case "east":
                    w = cw;
                    x = box.x + box.width - cw;
                    box.width -= cw;
                    break;
                case "center":
                    break;
            }
            if (w < 0) w = 0;
            if (h < 0) h = 0;

            
            split.style.left = x + "px";
            split.style.top = y + "px";
            mini.setWidth(split, w);
            mini.setHeight(split, h);

            if (region.showSplit && region.expanded && region.allowResize == true) {
                mini.removeClass(split, 'mini-layout-split-nodrag');
            } else {
                mini.addClass(split, 'mini-layout-split-nodrag');
            }
            

            
            split.firstChild.style.display = region.showSplitIcon ? "block" : "none";
            if (region.expanded) {
                mini.removeClass(split.firstChild, 'mini-layout-spliticon-collapse');
            } else {
                mini.addClass(split.firstChild, 'mini-layout-spliticon-collapse');
            }
        }
        mini.layout(this._borderEl);
        this.fire("layout");
    },
    
    
    __OnMouseDown: function (e) {
        if (this._inAniming) return;
        if (mini.findParent(e.target, "mini-layout-split")) {
            var uid = jQuery(e.target).attr("uid");
            if (uid != this.uid) return;
            var region = this.getRegion(e.target.id);
            if (region.expanded == false || !region.allowResize || !region.showSplit) return;
            this.dragRegion = region;
            var drag = this._getDrag();
            drag.start(e);
        }
    },
    _getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function (drag) {
        this._maskProxy = mini.append(document.body, '<div class="mini-resizer-mask"></div>');

        this._dragProxy = mini.append(document.body, '<div class="mini-proxy"></div>');
        this._dragProxy.style.cursor = "n-resize";
        if (this.dragRegion.region == "west" || this.dragRegion.region == "east") {
            this._dragProxy.style.cursor = "w-resize";
        }

        this.splitBox = mini.getBox(this.dragRegion._split);
        mini.setBox(this._dragProxy, this.splitBox);

        this.elBox = mini.getBox(this.el, true);
    },
    _OnDragMove: function (drag) {
        var xOffset = drag.now[0] - drag.init[0];
        var x = this.splitBox.x + xOffset;
        var yOffset = drag.now[1] - drag.init[1];
        var y = this.splitBox.y + yOffset;
        var right = x + this.splitBox.width;
        var bottom = y + this.splitBox.height;

        var west = this.getRegion("west"),
            east = this.getRegion("east"),
            north = this.getRegion("north"),
            south = this.getRegion("south"),
            center = this.getRegion("center");
        var westWidth = west && west.visible ? west.width : 0;
        var eastWidth = east && east.visible ? east.width : 0;
        var northHeight = north && north.visible ? north.height : 0;
        var southHeight = south && south.visible ? south.height : 0;
        var westSplitWidth = west && west.showSplit ? mini.getWidth(west._split) : 0;
        var eastSplitWidth = east && east.showSplit ? mini.getWidth(east._split) : 0;
        var northSplitHeight = north && north.showSplit ? mini.getHeight(north._split) : 0;
        var southSplitHeight = south && south.showSplit ? mini.getHeight(south._split) : 0;

        var region = this.dragRegion, type = region.region;
        if (type == "west") {
            var maxWidth = this.elBox.width - eastWidth - eastSplitWidth - westSplitWidth - center.minWidth;
            if (x - this.elBox.x > maxWidth) x = maxWidth + this.elBox.x;

            if (x - this.elBox.x < region.minWidth) x = region.minWidth + this.elBox.x;
            if (x - this.elBox.x > region.maxWidth) x = region.maxWidth + this.elBox.x;

            mini.setX(this._dragProxy, x);
        } else if (type == "east") {
            var maxWidth = this.elBox.width - westWidth - westSplitWidth - eastSplitWidth - center.minWidth;
            if (this.elBox.right - (x + this.splitBox.width) > maxWidth) {
                x = this.elBox.right - maxWidth - this.splitBox.width;
            }

            if (this.elBox.right - (x + this.splitBox.width) < region.minWidth) {
                x = this.elBox.right - region.minWidth - this.splitBox.width;
            }
            if (this.elBox.right - (x + this.splitBox.width) > region.maxWidth) {
                x = this.elBox.right - region.maxWidth - this.splitBox.width;
            }

            mini.setX(this._dragProxy, x);
        } else if (type == "north") {
            var maxHeight = this.elBox.height - southHeight - southSplitHeight - northSplitHeight - center.minHeight;
            if (y - this.elBox.y > maxHeight) y = maxHeight + this.elBox.y;

            if (y - this.elBox.y < region.minHeight) y = region.minHeight + this.elBox.y;
            if (y - this.elBox.y > region.maxHeight) y = region.maxHeight + this.elBox.y;

            mini.setY(this._dragProxy, y);
        } else if (type == "south") {
            var maxHeight = this.elBox.height - northHeight - northSplitHeight - southSplitHeight - center.minHeight;
            if (this.elBox.bottom - (y + this.splitBox.height) > maxHeight) {
                y = this.elBox.bottom - maxHeight - this.splitBox.height;
            }

            if (this.elBox.bottom - (y + this.splitBox.height) < region.minHeight) {
                y = this.elBox.bottom - region.minHeight - this.splitBox.height;
            }
            if (this.elBox.bottom - (y + this.splitBox.height) > region.maxHeight) {
                y = this.elBox.bottom - region.maxHeight - this.splitBox.height;
            }

            mini.setY(this._dragProxy, y);
        }
    },
    _OnDragStop: function (drag) {
        var box = mini.getBox(this._dragProxy);

        var region = this.dragRegion, type = region.region;
        if (type == "west") {
            var width = box.x - this.elBox.x;
            this.updateRegion(region, { width: width });
        } else if (type == "east") {
            var width = this.elBox.right - box.right;
            this.updateRegion(region, { width: width });
        } else if (type == "north") {
            var height = box.y - this.elBox.y;
            this.updateRegion(region, { height: height });
        } else if (type == "south") {
            var height = this.elBox.bottom - box.bottom;
            this.updateRegion(region, { height: height });
        }

        jQuery(this._dragProxy).remove();
        this._dragProxy = null;
        this.elBox = this.handlerBox = null;

        jQuery(this._maskProxy).remove();
        this._maskProxy = null;
    },
    
    
    _VirtualToggle: function (region) {
        region = this.getRegion(region);

        if (region._Expanded === true) {
            this._VirtualCollapse(region);
        } else {
            this._VirtualExpand(region);
        }
    },
    _VirtualExpand: function (region) {
        if (this._inAniming) return;

        this.doLayout();

        var type = region.region, el = region._el;
        region._Expanded = true;
        mini.addClass(el, "mini-layout-popup");
        var proxyBox = mini.getBox(region._proxy);
        var box = mini.getBox(region._el);

        var config = {};
        if (type == "east") {
            var x = proxyBox.x;
            var y = proxyBox.y;
            var h = proxyBox.height;

            mini.setHeight(el, h);
            mini.setX(el, x);
            el.style.top = region._proxy.style.top;

            var left = parseInt(el.style.left);
            config = { left: left - box.width };
        } else if (type == "west") {
            var x = proxyBox.right - box.width;
            var y = proxyBox.y;
            var h = proxyBox.height;

            mini.setHeight(el, h);
            mini.setX(el, x);
            el.style.top = region._proxy.style.top;
            
            
            var left = parseInt(el.style.left);
            config = { left: left + box.width };
        } else if (type == "north") {
            var x = proxyBox.x;
            var y = proxyBox.bottom - box.height;
            var w = proxyBox.width;

            mini.setWidth(el, w);
            mini.setXY(el, x, y);

            var top = parseInt(el.style.top);
            config = { top: top + box.height };
        } else if (type == "south") {
            var x = proxyBox.x;
            var y = proxyBox.y;
            var w = proxyBox.width;

            mini.setWidth(el, w);
            mini.setXY(el, x, y);

            var top = parseInt(el.style.top);
            config = { top: top - box.height };
        }

        mini.addClass(region._proxy, "mini-layout-maxZIndex");
        this._inAniming = true;
        var sf = this;
        var jq = jQuery(el);
        jq.animate(
            config,
            250,
            function () {
                mini.removeClass(region._proxy, "mini-layout-maxZIndex");
                sf._inAniming = false;
            }
        );
    },
    _VirtualCollapse: function (region) {
        if (this._inAniming) return;
        region._Expanded = false;
        var type = region.region, el = region._el;

        var box = mini.getBox(el);

        var config = {};
        if (type == "east") {
            var left = parseInt(el.style.left);
            config = { left: left + box.width };
        } else if (type == "west") {
            var left = parseInt(el.style.left);
            config = { left: left - box.width };
        } else if (type == "north") {
            var top = parseInt(el.style.top);
            config = { top: top - box.height };
        } else if (type == "south") {
            var top = parseInt(el.style.top);
            config = { top: top + box.height };
        }

        mini.addClass(region._proxy, "mini-layout-maxZIndex");
        this._inAniming = true;
        var sf = this;
        var jq = jQuery(el);
        jq.animate(
            config,
            250,
            function () {
                mini.removeClass(region._proxy, "mini-layout-maxZIndex");
                sf._inAniming = false;
                sf.doLayout();
            }
        );
    },
    __OnDocMouseDown: function (e) {
        if (this._inAniming) return;
        for (var i = 0, l = this.regions.length; i < l; i++) {
            var region = this.regions[i];
            if (!region._Expanded) continue;
            if (mini.isAncestor(region._el, e.target)
              || mini.isAncestor(region._proxy, e.target)
              ) {

            } else {
                this._VirtualCollapse(region);
            }
        }
    },
    
    /**
    *	得到一个Dom元素的页面中设置的属性，并将页面中定义的region加入到加入到组件中
    */
    getAttrs: function (el) {
        var attrs = mini.Layout.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        var splitSize = parseInt(jq.attr("splitSize"));
        if (!isNaN(splitSize)) {
            attrs.splitSize = splitSize;
        }

        var regions = [];
        var nodes = mini.getChildNodes(el);
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];

            var o = {};
            regions.push(o);

            o.cls = node.className;

            o.style = node.style.cssText;
            mini._ParseString(node, o,
                ["region", "title", "iconCls", "iconStyle", "cls", "headerCls", "headerStyle",
                    "bodyCls", "bodyStyle"
                 ]
            );
            mini._ParseBool(node, o,
                ["allowResize", "visible", "showCloseButton", "showCollapseButton", "showSplit", "showHeader", "expanded",
                "showSplitIcon"
                 ]
            );
            mini._ParseInt(node, o,
                ["splitSize", "collapseSize", "width", "height", "minWidth", "minHeight"
                , "maxWidth", "maxHeight"
                 ]
            );

            
            
            o.bodyParent = node;
        }
        attrs.regions = regions;

        return attrs;
    }
});
mini.regClass(mini.Layout, "layout");
/**
 * 文件中定义了 ListBox 组件。
 * @fileOverview ListBox.js
 * @author 殷文旭
 */

/**
 * @class ListBox 是mini UI中的列表组件。
 * @constructor
 * @extends mini.ListControl
 * @requires mini.ListControl
 * @version 1.0
 */
mini.ListBox = function () {
	mini.ListBox.superclass.constructor.call(this);
}
mini.extend(mini.ListBox, mini.ListControl,{
	/**
	 * 标记，代表这是一个form组件
	 * @type Boolean
	 * @default true
	 */
	formField: true,
	/**
	 * 默认列表宽度
	 * @type Number
	 * @default 200
	 */
	width: 200,
	/**
	 * 列表项集合
	 * @type Array
	 * @default null
	 */
	columns: null,
	/**
	 * 默认列宽度
	 * @type Number
	 * @default 80
	 */
	columnWidth: 80,
	/**
	 * 是否显示空列表项
	 * @type Boolean
	 * @default false
	 */
	showNullItem: false,
	/**
	 * 空列表项显示的文本
	 * @type String
	 * @default ""
	 */
	nullItemText: "",
	/**
	 * 是否显示空信息
	 * @type Boolean
	 * @default false
	 */
	showEmpty: false,
	/**
	 * 空信息
	 * @type String
	 * @default ""
	 */
	emptyText: "",

	/**
	 * 是否显示选中复选框
	 * @type Boolean
	 * @default false
	 */
	showCheckBox: false,
	/**
	 * 是否显示全选复选框
	 * @type Boolean
	 * @default true
	 */
	showAllCheckBox: true,
	/**
	 * 是否支持多选开关
	 * @type Boolean
	 * @default false
	 */
	multiSelect: false,

	_itemCls: "mini-listbox-item",
	_itemHoverCls: "mini-listbox-item-hover",
	_itemSelectedCls: "mini-listbox-item-selected",
	/**
	 * 组件样式类
	 * @type String
	 * @default "mini-listbox"
	 */
	uiCls: "mini-listbox",
	/**
	 * 创建组件HTML结构，并绑定给组件实例。
	 * @default
	 */
	_create: function () {
		var el = this.el = document.createElement("div");
		this.el.className = "mini-listbox";

		this.el.innerHTML = '<div class="mini-listbox-border"><div class="mini-listbox-header"></div><div class="mini-listbox-view"></div><input type="hidden"/></div><div class="mini-errorIcon"></div>';

		this._borderEl = this.el.firstChild;
		this._headerEl = this._borderEl.firstChild;
		this._viewEl = this._borderEl.childNodes[1];
		this._valueEl = this._borderEl.childNodes[2];

		this._errorIconEl = this.el.lastChild;

		this._scrollViewEl = this._viewEl;
		this._viewEl.innerHTML = '<div class="mini-listbox-content"></div>';

	},
	/**
	 * 析构函数
	 */
	destroy: function (removeEl) {
	    if (this._viewEl) {
            this._viewEl.onscroll = null;
	        mini.clearEvent(this._viewEl);
	        this._borderEl.removeChild(this._viewEl);
	        this._scrollViewEl = null;
	        this._viewEl = null;
	    }
	    if (this._headerEl) {
	        mini.clearEvent(this._headerEl);
	        this._borderEl.removeChild(this._headerEl);
	        this._headerEl = null;
	    }
	    if (this._valueEl) {
	        mini.clearEvent(this._valueEl);
	        this._borderEl.removeChild(this._valueEl);
	        this._valueEl = null;
	    }
	    if (this._borderEl) {
	        mini.clearEvent(this._borderEl);
	        this.el.removeChild(this._borderEl);
	        this._borderEl = null;
	    }
	    if (this._errorIconEl) {
	        mini.clearEvent(this._errorIconEl);
	        this.el.removeChild(this._errorIconEl);
	        this._errorIconEl = null;
	    }
	    delete this.data;
	    delete this.columns;
	    mini.ListBox.superclass.destroy.call(this, removeEl);
	},
	/**
	 * 设置组件初始化完成后的需要执行的回调函数。
	 * 通常组件的非结构和样式相关操作都绑定在这里，这样可以提前绘制完成组件.
	 */
	_initEvents: function () {
		mini.ListBox.superclass._initEvents.call(this);
		mini._BindEvents( function () {
			mini_onOne(this._viewEl, "scroll", this.__OnScroll, this);
		}, this);
	},
	/**
	 * 设置列表项的头信息，可以使用HTML子标签添加 ，或者通过此方法添加 。<br/>
	 * 列表头支持如下一些可配置属性：<br/>
	 * header	String	表头列文本 <br/>
	   field	String	单元格值字段<br/>
        name	String	列标识名称<br/>
       width	Number	列宽度<br/>
       headerAlign	String	表头列文本位置。left/center/right。<br/>
       align	String	单元格文本位置。left/center/right。<br/>
       headerCls	String	表头列样式类。<br/>
       cellCls	String	单元格样式类<br/>
       headerStyle	String	表头列样式<br/>
        cellStyle	String	单元格样式<br/>
       renderer	Function	单元格绘制处理函数，同drawcell事件。<br/>

	 * @param value {Array}
	 * @example
	 * 通过方法添加
	 * mini.get('listbox2').setColumns([{header:'艾萨拉',field:'id',width:'80px'},
	 * 									{header:'泰兰德',field:'text',width:'80px'}]);
	 * 通过HTML子标签添加
	 * 		&lt;div id="listbox2" class="mini-listbox" style="width:400px;height:120px;"
		      showCheckBox="true"&gt;
				&lt;div property="columns"&gt;
					&lt;div header="ID" field="id"&gt;&lt;/div&gt;
					&lt;div header="国家" field="text"&gt;&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	 */
	setColumns: function (value) {

		if (!mini.isArray(value))
			value = [];
		this.columns = value;

		for (var i = 0, l = this.columns.length; i < l; i++) {
			var column = this.columns[i];
			if (column.type) {
				if (!mini.isNull(column.header) && typeof column.header !== "function") {
					if (column.header.trim() == "") {
						delete column.header;
					}
				}
				var col = mini._getColumn(column.type);
				if (col) {
					var _column = mini.copyTo({}, column);
					mini.copyTo(column, col);
					mini.copyTo(column, _column);
				}
			}

			var width = parseInt(column.width);
			if (mini.isNumber(width) && String(width) == column.width)
				column.width = width + "px";
			if (mini.isNull(column.width))
				column.width = this.columnWidth + "px";
		}

		this.doUpdate();
	},
	/**
	 * 获取列表项集合
	 * @return {Array|null}
	 */
	getColumns: function () {
		return this.columns;
	},
    /**
     * 文字过长出现省略号时增加title提示
     * @author 赵美丹
     * @param {} e
     */
    __OnMouseMove: function (e) {
        mini.ListBox.superclass.__OnMouseMove.call(this, e);
        var el = e.target;
        if(e.target.parentNode.tagName == 'TD'){
            el = e.target.parentNode;
        }
        if(el.tagName != 'TD'){
            return;
        }
        if (el.scrollWidth > el.clientWidth) {
            var s = el.innerText || el.textContent || "";
            el.title = s.trim();
        } else {
            el.title = "";
        }
            
    },
    /**
     * 解决title长时间停留后消失，此时移出再移入不显示title的问题
     * @author 赵美丹
     * @date 2013-03-25
     */
    __OnMouseOut: function(e) {
        mini.ListBox.superclass.__OnMouseOut.call(this, e);
        var el = e.target;
        if(e.target.parentNode.tagName == 'TD'){
            el = e.target.parentNode;
        }
        el.title = "";
    },
	/**
	 * 更新组件容器内元素。不建议组件使用者调用
	 */
	doUpdate: function () {
		if (this._allowUpdate === false)
			return;
		var hasColumns = this.columns && this.columns.length > 0;
		if (hasColumns) {
			mini.addClass(this.el, "mini-listbox-showColumns");
		} else {
			mini.removeClass(this.el, "mini-listbox-showColumns");
		}
		this._headerEl.style.display = hasColumns ? "" : "none";
		var sb = [];
		if (hasColumns && this.showColumns) {
			sb[sb.length] = '<table class="mini-listbox-headerInner" cellspacing="0" cellpadding="0"><tr>';
			var ckAllId = this.uid + "$ck$all";
			sb[sb.length] = '<td class="mini-listbox-checkbox"><input type="checkbox" id="' + ckAllId + '"></td>';
			for (var j = 0, k = this.columns.length; j < k; j++) {

				var column = this.columns[j];
				var header = column.header;
				if (mini.isNull(header))
					header = '&nbsp;';

				var w = column.width;
				if (mini.isNumber(w))
					w = w + "px";

				sb[sb.length] = '<td class="';
				if (column.headerCls)
					sb[sb.length] = column.headerCls;
				sb[sb.length] = '" style="';
				if (column.headerStyle)
					sb[sb.length] = column.headerStyle + ";";
				if (w) {
					sb[sb.length] = 'width:' + w + ';';
				}
				if (column.headerAlign) {
					sb[sb.length] = 'text-align:' + column.headerAlign + ';';
				}
				sb[sb.length] = '">';
				sb[sb.length] = header;
				sb[sb.length] = '</td>';
			}
			sb[sb.length] = '</tr></table>';
		}
		this._headerEl.innerHTML = sb.join('');
		var sb = [];
		var data = this.data;

		sb[sb.length] = '<table class="mini-listbox-items" cellspacing="0" cellpadding="0">';

		if (this.showEmpty && data.length == 0) {

			sb[sb.length] = '<tr><td colspan="20">' + this.emptyText + '</td></tr>';
		} else {
			this._doNullItem();

			for (var i = 0, l = data.length; i < l; i++) {
				var item = data[i];

				var rowClsIndex = -1;
				var rowCls = " ";
				var rowStyleIndex = -1;
				var rowStyle = " ";

				sb[sb.length] = '<tr id="';
				sb[sb.length] = this._createItemId(i);
				sb[sb.length] = '" index="';
				sb[sb.length] = i;
				sb[sb.length] = '" class="mini-listbox-item ';

				if (item.enabled === false) {
					sb[sb.length] = ' mini-disabled ';
				}

				rowClsIndex = sb.length;
				sb[sb.length] = rowCls;
				sb[sb.length] = '" style="';
				rowStyleIndex = sb.length;
				sb[sb.length] = rowStyle;
				sb[sb.length] = '">';

				var ckid = this._createCheckId(i);
				var ckName = this.name;
				var ckValue = this.getItemValue(item);

				var disable = '';
				if (item.enabled === false) {
					disable = 'disabled';
				}
				sb[sb.length] = '<td class="mini-listbox-checkbox"><input ' + disable + ' id="' + ckid + '" type="checkbox" ></td>';

				if (hasColumns) {
					for (var j = 0, k = this.columns.length; j < k; j++) {
						var column = this.columns[j];

						var e = this._OnDrawCell(item, i, column);

						var w = column.width;
						if (typeof w == "number")
							w = w + "px";

						sb[sb.length] = '<td class="';
						if (e.cellCls)
							sb[sb.length] = e.cellCls;
						sb[sb.length] = '" style="';
						if (e.cellStyle)
							sb[sb.length] = e.cellStyle + ";";
						if (w) {
							sb[sb.length] = 'width:' + w + ';';
						}
						if (column.align) {
							sb[sb.length] = 'text-align:' + column.align + ';';
						}
						sb[sb.length] = '">';
						sb[sb.length] = e.cellHtml;
						sb[sb.length] = '</td>';

						if (e.rowCls)
							rowCls = e.rowCls;
						if (e.rowStyle)
							rowStyle = e.rowStyle;
					}
				} else {
					var e = this._OnDrawCell(item, i, null);
					sb[sb.length] = '<td class="';
					if (e.cellCls)
						sb[sb.length] = e.cellCls;
					sb[sb.length] = '" style="';
					if (e.cellStyle)
						sb[sb.length] = e.cellStyle;
					sb[sb.length] = '">';
					sb[sb.length] = e.cellHtml;
					sb[sb.length] = '</td>';

					if (e.rowCls)
						rowCls = e.rowCls;
					if (e.rowStyle)
						rowStyle = e.rowStyle;
				}

				sb[rowClsIndex] = rowCls;
				sb[rowStyleIndex] = rowStyle;

				sb[sb.length] = '</tr>';
			}
		}
		sb[sb.length] = '</table>';

		var innerHTML = sb.join("");
		this._viewEl.firstChild.innerHTML = innerHTML;


		this._doSelects();

		this.doLayout();
	},
	/**
	 * 调整组件布局，不建议组件使用者调用。
	 */
	doLayout: function () {
		if (!this.canLayout())
			return;

		if (this.columns && this.columns.length > 0) {
			mini.addClass(this.el, "mini-listbox-showcolumns");
		} else {
			mini.removeClass(this.el, "mini-listbox-showcolumns");
		}
		if (this.showCheckBox) {
			mini.removeClass(this.el, "mini-listbox-hideCheckBox");
		} else {
			mini.addClass(this.el, "mini-listbox-hideCheckBox");
		}

		var ckAllId = this.uid + "$ck$all";
		var ck = document.getElementById(ckAllId);
		if (ck)
			ck.style.display = this.showAllCheckBox ? "" : "none";

		var autoHeight = this.isAutoHeight();

		h = this.getHeight(true);
		w = this.getWidth(true);
		var elWidth = w;

		var viewEl = this._viewEl;

		viewEl.style.width = w + "px";

		if (!autoHeight) {
			var h2 = mini.getHeight(this._headerEl);
			h = h - h2;
			viewEl.style.height = h + "px";
		} else {
			viewEl.style.height = "auto";
		}

		if (isIE) {
		    var table1 = this._headerEl.firstChild, table2 = this._viewEl.firstChild.firstChild;
			if (this._viewEl.offsetHeight >= this._viewEl.scrollHeight) {
				table2.style.width = "100%";
				if (table1)
					table1.style.width = "100%";
			} else {
				var w = parseInt(table2.parentNode.offsetWidth - 17) + 'px'
				if (table1)
					table1.style.width = w;
			}
		}
		if (this._viewEl.offsetHeight < this._viewEl.scrollHeight) {
			this._headerEl.style.width = (elWidth - 17) + "px";
		} else {
			this._headerEl.style.width = "100%";
		}

	},
	/**
	 * 设置是否显示复选框
	 * @param value {Boolean}
	 */
	setShowCheckBox: function (value) {
		this.showCheckBox = value;
		this.doLayout();
	},
	/**
	 * 获取是否显示复选框标记值
	 * @return {Boolean}
	 */
	getShowCheckBox: function () {
		return this.showCheckBox;
	},
	/**
	 * 设置是否显示全选复选框
	 * @param value {Boolean}
	 */
	setShowAllCheckBox: function (value) {
		this.showAllCheckBox = value;
		this.doLayout();
	},
	/**
	 * 获取是否显示全选复选框标记值
	 * @return {Boolean}
	 */
	getShowAllCheckBox: function () {
		return this.showAllCheckBox;
	},
	setShowColumns: function (value) {

	    this.showColumns = value;

	    this.doUpdate();

	},
	getShowColumns: function () {
	    return this.showColumns;
	},

	/**
	 * 设置是否显示空选项（也就是说，选项列表的第一项是空项）
	 * @param value {Boolean}
	 */
	setShowNullItem: function (value) {
		if (this.showNullItem != value) {
			this.showNullItem = value;
			this._doNullItem();
			this.doUpdate();
		}
	},
	/**
	 * 获取是否显示空选项标记值
	 * @return {Boolean}
	 */
	getShowNullItem: function () {
		return this.showNullItem;
	},
	/**
	 * 设置空选项显示的文本
	 * @param value {String}
	 */
	setNullItemText: function (value) {

		if (this.nullItemText != value) {
			this.nullItemText = value;
			this._doNullItem();
			this.doUpdate();
		}
	},
	/**
	 * 获取空选项显示的文本
	 * @return {String}
	 */
	getNullItemText: function () {
		return this.nullItemText;
	},
	/**
	 * 添加一个空选项
	 */
	_doNullItem: function () {
		for (var i = 0, l = this.data.length; i < l; i++) {
			var item = this.data[i];
			if (item.__NullItem) {
				this.data.removeAt(i);
				break;
			}
		}
		if (this.showNullItem) {
			var item = {
				__NullItem: true
			};
			item[this.textField] = this.nullItemText;
			item[this.valueField] = "";
			this.data.insert(0, item);
		}
	},
	
	_OnDrawCell: function (record, index, column) {
		var value = column ? record[column.field] : this.getItemText(record);
		var e = {
			sender: this,
			index: index,
			rowIndex: index,
			record: record,
			item: record,
			column: column,
			field: column ? column.field : null,
			value: value,
			cellHtml: value,
			rowCls: null,
			cellCls: column ? (column.cellCls || '') : "",
			rowStyle: null,
			cellStyle: column ? (column.cellStyle || '') : ""
		};

		var hasColumns = this.columns && this.columns.length > 0;
		if (!hasColumns) {
			if (index == 0 && this.showNullItem) {
				e.cellHtml = this.nullItemText;
			}
		}
		    e.cellHtml = mini.htmlEncode(e.cellHtml);

		if (column) {
			if (column.dateFormat) {
				if (mini.isDate(e.value))
					e.cellHtml = mini.formatDate(value, column.dateFormat);
				else
					e.cellHtml = value;
			}
			var renderer = column.renderer;
			if (renderer) {
				fn = typeof renderer == "function" ? renderer : window[renderer];
				if (fn) {
					e.cellHtml = fn.call(column, e);
				}
			}
		}

		this.fire("drawcell", e);

		if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "")
			e.cellHtml = "&nbsp;";

		return e;
	},
	__OnScroll: function (e) {
		this._headerEl.scrollLeft = this._viewEl.scrollLeft;
	},
	__OnClick: function (e) {
		var ckAllId = this.uid + "$ck$all";
		if (e.target.id == ckAllId) {
			var ck = document.getElementById(ckAllId);
			if (ck) {
				var checked = ck.checked;

				var value = this.getValue(); ;

				if (checked) {
					this.selectAll();
				} else {
					this.deselectAll();
				}
				this._OnSelectionChanged();

				if (value != this.getValue()) {
					this._OnValueChanged();

					this.fire("itemclick", {
						htmlEvent: e
					});
				}
			}
			return;
		}
		this._fireEvent(e, 'Click');
	},
	/**
	 * 用于从HTML标签中提取配置参数的方法。在此方法中有对 nullItemText, ondrawcell, showCheckBox, showAllCheckBox, showNullItem等属性。
	 * @param el {Object} DOM元素
	 * @returns {Object} JSON对象
	 */
	getAttrs: function (el) {
		var attrs = mini.ListBox.superclass.getAttrs.call(this, el);
		/**
		 * ondrawcell 事件当列表项被重绘时触发<br/>
		 * 支持标签配置。
		 * @name ondrawcell
		 * @event
		 * @memberOf mini.ListBox.prototype
		 */
		mini._ParseString(el, attrs,
		["nullItemText", "ondrawcell"
		]
		);
		mini._ParseBool(el, attrs,
		["showCheckBox", "showAllCheckBox", "showNullItem", "showColumns"
		]
		);
		if (el.nodeName.toLowerCase() != "select") {
			var cs = mini.getChildNodes(el);
			for (var i = 0, l = cs.length; i < l; i++) {
				var node = cs[i];
				var property = jQuery(node).attr("property");
				if (!property)
					continue;
				property = property.toLowerCase();
				if (property == "columns") {
					attrs.columns = mini._ParseColumns(node);
				} else if (property == "data") {
					attrs.data = node.innerHTML;
				}
			}
		}

		return attrs;
	}
});
mini.regClass(mini.ListBox, "listbox");
mini.Popup = function () {
    mini.Popup.superclass.constructor.call(this);
    this.setVisible(false);	//初始隐藏
    this.setAllowDrag(this.allowDrag);	//是否可拖拽
    this.setAllowResize(this.allowResize);	//是否可改变大小
}
mini.extend(mini.Popup, mini.Container, {

    _clearBorder: false,

    uiCls: "mini-popup",
    
    _create: function () {
        var el = this.el = document.createElement("div");
        this.el.className = "mini-popup";
        this._contentEl = this.el;
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);

        }, this);
    },
    /**
	 * 调整弹出面板布局。
	 */
    doLayout: function () {
        if (!this.canLayout())
            return;
        mini.Popup.superclass.doLayout.call(this);
        this._doShadow();
        var cs = this.el.childNodes;
        if (cs) {
            for (var i = 0, l = cs.length; i < l; i++) {
                var cel = cs[i];
                mini.layout(cel);
            }
        }
    },

    destroy: function (removeEl) {
        if (this.el) {
            this.el.onmouseover = null;
        }
        this._contentEl = null;
        mini.un(document, "mousedown", this.__OnBodyMouseDown, this);
        mini.un(window, "resize", this.__OnWindowResize, this);
        if (this._modalEl) {
            this._modalEl.parentNode.removeChild(this._modalEl);
            this._modalEl = null;
        }
        if (this.shadowEl) {
            this.shadowEl.parentNode.removeChild(this.shadowEl);
            this.shadowEl = null;
        }
        if(this.popupEl){
            this._unbindPopupEl();
            this.popupEl = null;
        }
        mini.Popup.superclass.destroy.call(this, removeEl);
    },
    setWidth: function (value) {
        if (parseInt(value) == value)
            value += "px";
        this.width = value;
        if (value.indexOf("px") != -1) {
            /**ie下css在元素未插入document前无效，导致计算错误，使得第一次弹出的宽度偏大 潘正锋 2013-06-06  */
            if (isIE) {
                var b = mini.getBorders(this.el);
                if (!b.left)
                  value = value.substring(0, value.indexOf("px")) - 2 + "px";
            }
            mini.setWidth(this.el, value);
        } else {
             /**auto时，直接赋值 潘正锋 2013-07-20*/
            this.el.style.width = value;
        }
        this._sizeChaned();
    },
    setHeight: function (value) {
        if (parseInt(value) == value)
            value += "px";
        this.height = value;
        if (value.indexOf("px") != -1) {
            mini.setHeight(this.el, value);
        } else {
            this.el.style.height = value;
        }
        this._sizeChaned();
    },
    /**
	 * 给窗口添加窗体内容元素
	 * @param value {DOMObject|String|Array} 如 setBody(el), setBody("<input.../>"), setBody([el,"input"])
	 */
    setBody: function (value) {
        if (!value)
            return;
        if (!mini.isArray(value))
            value = [value];
        for (var i = 0, l = value.length; i < l; i++) {
            mini.append(this._contentEl, value[i]);
        }
    },
    getAttrs: function (el) {
        var attrs = mini.Popup.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["popupEl", "popupCls", "showAction", "hideAction", "xAlign", "yAlign", "modalStyle",
            "onbeforeopen", "open", "onbeforeclose", "onclose"
            ]
        );
        mini._ParseBool(el, attrs,
            ["showModal", "showShadow", "allowDrag", "allowResize"
            ]
        );
        mini._ParseInt(el, attrs,
            ["showDelay", "hideDelay", "xOffset", "yOffset",
            "minWidth", "minHeight", "maxWidth", "maxHeight"
            ]
        );
        var cs = mini.getChildNodes(el, true);
        attrs.body = cs;
        return attrs;
    }

});
mini.regClass(mini.Popup, "popup");

mini.Popup_prototype = {

    isPopup: false,

    popupEl: null,
    popupCls: "",

    showAction: "mouseover",
    hideAction: "outerclick",
    showDelay: 300,
    hideDelay: 500,

    xAlign: "left",
    yAlign: "below",
    xOffset: 0,
    yOffset: 0,

    minWidth: 50,
    minHeight: 25,
    maxWidth: 2000,
    maxHeight: 2000,
    /**
	 * 是否显示遮罩
	 */
    showModal: false,
    /**
	 * 是否显示阴影开关
	 * @default true
	 */
    showShadow: true,

    modalStyle: "opacity:0.2",	//透明度0.2

    _dragCls: "mini-popup-drag",
    _resizeCls: "mini-popup-resize",
    allowDrag: false,
    allowResize: false,

    /**
	 * 取消弹出源对象的默认绑定事件
	 */
    _unbindPopupEl: function () {
        if (!this.popupEl)
            return;
        mini.un(this.popupEl, "click", this.__OnLeftClick, this);
        mini.un(this.popupEl, "contextmenu", this.__OnRightClick, this);
        mini.un(this.popupEl, "mouseover", this.__OnMouseOver, this);

    },
    _bindPopupEl: function () {
        if (!this.popupEl)
            return;
        mini.on(this.popupEl, "click", this.__OnLeftClick, this);
        mini.on(this.popupEl, "contextmenu", this.__OnRightClick, this);
        mini.on(this.popupEl, "mouseover", this.__OnMouseOver, this);
    },
    _doShim: function () {
        if (!mini.isIE || !mini_useShims) return;
        if (!this._shimEl) {
            var iframe = "<iframe frameborder='0' style='position: absolute; z-index: -1; width: 0; height: 0; top: 0;left:0;scrolling:no;'></iframe>";
            this._shimEl = mini.append(document.body, iframe);
        }
        function doShim() {
            this._shimEl.style.display = "";
            var box = mini.getBox(this.el);
            var s = this._shimEl.style;
            s.width = box.width + "px";
            s.height = box.height + "px";
            s.left = box.x + "px";
            s.top = box.y + "px";

            var zindex = mini.getStyle(this.el, 'zIndex');
            if (!isNaN(zindex)) {
                this._shimEl.style.zIndex = zindex - 3;
            }
        }
        this._shimEl.style.display = "none";
        if (this._doShimTimer) {
            clearTimeout(this._doShimTimer);
            this._doShimTimer = null;
        }
        var me = this;
        this._doShimTimer = setTimeout(function () {
            me._doShimTimer = null;
            doShim.call(me);
        }, 20);
    },

    /**
	 * 展现弹出层，并触发相应事件。
	 */
    doShow: function (e) {
        var ev = {
            popupEl: this.popupEl,
            htmlEvent: e,
            cancel: false
        };

        this.fire("BeforeOpen", ev);
        if (ev.cancel == true)
            return;

        this.fire("opening", ev);
        if (ev.cancel == true)
            return;

        if (!this.popupEl) {	//如果popupEl 不存在
            this.show();
        } else {
            var options = {};
            if (e)
                options.xy = [e.pageX, e.pageY];
            this.showAtEl(this.popupEl, options);
        }
    },
    /**
	 * 处理弹出层隐藏和事件触发功能。
	 */
    doHide: function (e) {
        var ev = {
            popupEl: this.popupEl,
            htmlEvent: e,
            cancel: false
        };
        this.fire("BeforeClose", ev);
        if (ev.cancel == true)
            return;
        this.close();
    },
    /**
	 * showAtPos方法的别名。两个方法没有区别。
	 */
    show: function (left, top) {
        this.showAtPos(left, top);
    },
    /**
	 * 负责实现弹出层实际展现功能。
	 */
    showAtPos: function (x, y) {

        this.render(document.body);

        if (!x)
            x = "center";
        if (!y)
            y = "middle";

        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";

        this._measureSize();	//调整弹出层的宽高。

        var vbox = mini.getViewportBox();
        var box = mini.getBox(this.el);

        if (x == "left")
            x = 0;
        if (x == 'center')
            x = vbox.width / 2 - box.width / 2;
        if (x == "right")
            x = vbox.width - box.width;

        if (y == "top")
            y = 0;
        if (y == "middle")
            y = vbox.y + vbox.height / 2 - box.height / 2;
        if (y == "bottom")
            y = vbox.height - box.height;

        if (x + box.width > vbox.right)
            x = vbox.right - box.width;
        if (y + box.height > vbox.bottom)
            y = vbox.bottom - box.height - 20;
        this._Show(x, y);
    },
    /**
	 * 绘制遮罩层
	 */
    _doModal: function () {
        jQuery(this._modalEl).remove();
        if (!this.showModal)
            return;
        if (this.visible == false)
            return;

        var dd = document.documentElement;
        var scrollWidth = parseInt(Math.max(document.body.scrollWidth, dd ? dd.scrollWidth : 0));
        var scrollHeight = parseInt(Math.max(document.body.scrollHeight, dd ? dd.scrollHeight : 0));

        var vbox = mini.getViewportBox();
        var height = vbox.height;
        if (height < scrollHeight)
            height = scrollHeight;

        var width = vbox.width;
        if (width < scrollWidth)
            width = scrollWidth;

        this._modalEl = mini.append(document.body, '<div class="mini-modal"></div>');
        this._modalEl.style.height = height + "px";
        this._modalEl.style.width = width + "px";
        this._modalEl.style.zIndex = mini.getStyle(this.el, 'zIndex') - 1;
        mini.setStyle(this._modalEl, this.modalStyle);
    },
    /**
	 * 添加阴影。
	 */
    _doShadow: function () {
        if (!this.shadowEl) {
            this.shadowEl = mini.append(document.body, '<div class="mini-shadow"></div>');
        }
        this.shadowEl.style.display = this.showShadow ? "" : "none";
        if (this.showShadow) {
            function doShadow() {
                this.shadowEl.style.display = "";

                var box = mini.getBox(this.el);
                var s = this.shadowEl.style;
                s.width = box.width + "px";
                s.height = box.height + "px";
                s.left = box.x + "px";
                s.top = box.y + "px";

                var zindex = mini.getStyle(this.el, 'zIndex');
                if (!isNaN(zindex)) {
                    this.shadowEl.style.zIndex = zindex - 2;
                }
            }
            this.shadowEl.style.display = "none";
            if (this._doShadowTimer) {
                clearTimeout(this._doShadowTimer);
                this._doShadowTimer = null;
            }
            var me = this;

            this._doShadowTimer = setTimeout(function () {
                me._doShadowTimer = null;
                doShadow.call(me);
            }, 20);

        }
    },
    /**
	 * 对el 重新设置最大、最小宽度和最大、最小高度。
	 */
    _measureSize: function () {
        this.el.style.display = "";
        var box = mini.getBox(this.el);

        if (box.width > this.maxWidth) {
            mini.setWidth(this.el, this.maxWidth);
            box = mini.getBox(this.el);
        }
        if (box.height > this.maxHeight) {
            mini.setHeight(this.el, this.maxHeight);

            box = mini.getBox(this.el);
        }
        if (box.width < this.minWidth) {
            mini.setWidth(this.el, this.minWidth);
            box = mini.getBox(this.el);
        }
        if (box.height < this.minHeight) {
            mini.setHeight(this.el, this.minHeight);
            box = mini.getBox(this.el);
        }
    },
    /**
	 * 展现绑定源对象的弹出层
	 */
    showAtEl: function (el, options) {
        el = mini.byId(el);
        if (!el)
            return;
        if (!this.isRender() || this.el.parentNode != document.body) {
            this.render(document.body);
            
        }

        var c = {
            xAlign: this.xAlign,
            yAlign: this.yAlign,
            xOffset: this.xOffset,
            yOffset: this.yOffset,
            popupCls: this.popupCls

        };
        mini.copyTo(c, options);

        mini.addClass(el, c.popupCls);
        el.popupCls = c.popupCls;
        this._popupEl = el;

        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";

        this.doLayout();
        this._measureSize();	//调整宽高。

        var vbox = mini.getViewportBox();
        var box = mini.getBox(this.el);
        var pbox = mini.getBox(el);
        var xy = c.xy;
        var h = c.xAlign, v = c.yAlign;

        var x = vbox.width / 2 - box.width / 2, y = 0;
        if (xy) {
            x = xy[0];
            y = xy[1];
        }

        switch (c.xAlign) {
            case "outleft":
                x = pbox.x - box.width;
                break;
            case "left":
                x = pbox.x;
                break;
            case "center":
                x = pbox.x + pbox.width / 2 - box.width / 2;
                break;
            case "right":
                x = pbox.right - box.width;
                break;
            case "outright":
                x = pbox.right;
                break;
            default:
                break;
        }

        switch (c.yAlign) {
            case "above":
                y = pbox.y - box.height;
                break;
            case "top":
                y = pbox.y;
                break;
            case "middle":
                y = pbox.y + pbox.height / 2 - box.height / 2;
                break;
            case "bottom":
                y = pbox.bottom - box.height;
                break;
            case "below":
                y = pbox.bottom;
                break;
            default:
                break;
        }
        x = parseInt(x);
        y = parseInt(y);

        if (c.outYAlign || c.outXAlign) {
            if (c.outYAlign == "above") {
                if (y + box.height > vbox.bottom) {
                    y = pbox.y - box.height;
                    if (y < 0) {
                        y = pbox.y - this.minHeight;
                        this.setHeight(this.minHeight);
                    }
                }
            }
            if (c.outXAlign == "outleft") {
                if (x + box.width > vbox.right) {
                    var left = pbox.x - vbox.x;
                    var right = vbox.right - pbox.right;
                    if (left > right) {
                        x = pbox.x - box.width;
                    }
                }
            }
            if (c.outXAlign == "right") {
                if (x + box.width > vbox.right) {
                    x = pbox.right - box.width;
                }
            }
            this._Show(x, y);
        } else {
            this.showAtPos(x + c.xOffset, y + c.yOffset);
        }
    },
    /**
	 * 弹出层功能。
	 */
    _Show: function (x, y) {
        this.el.style.display = "";
        this.el.style.zIndex = mini.getMaxZIndex();
        mini.setX(this.el, x);
        mini.setY(this.el, y);

        this.setVisible(true);

        if (this.hideAction == "mouseout") {
            mini.on(document, "mousemove", this.__OnBodyMouseMove, this);
        }
        var sf = this;
        this._doShadow();	//显然遮罩

        this._doModal();

        this._doShim();
        mini.layoutIFrames(this.el);

        this.isPopup = true;

        mini.on(document, "mousedown", this.__OnBodyMouseDown, this);	//案件任意按下。
        mini.on(window, "resize", this.__OnWindowResize, this);

        this.fire("Open");
    },
    /**
	 * 打开弹出层，不触发事件。
	 */
    open: function () {
        this.show();
    },
    /**
	 * hide函数的别名
	 */
    close: function () {
        this.hide();
    },
    /**
	 * 隐藏弹出层，隐藏阴影，删除遮罩等。
	 */
    hide: function () {

        if (!this.el)
            return;
        if (this.popupEl)
            mini.removeClass(this.popupEl, this.popupEl.popupCls);
        if (this._popupEl)
            mini.removeClass(this._popupEl, this._popupEl.popupCls);
        this._popupEl = null;
        jQuery(this._modalEl).remove();

        if (this.shadowEl)
            this.shadowEl.style.display = "none";
        if (this._shimEl) this._shimEl.style.display = "none";
        mini.un(document, "mousemove", this.__OnBodyMouseMove, this);
        mini.un(document, "mousedown", this.__OnBodyMouseDown, this);
        mini.un(window, "resize", this.__OnWindowResize, this);

        this.setVisible(false);

        this.isPopup = false;

        this.fire("Close");
    },
    /**
	 * 设置弹出层源元素
	 * @param el {String|DOMObject} ID或者是DOM对象
	 */
    setPopupEl: function (el) {
        el = mini.byId(el);
        if (!el)
            return;
        this._unbindPopupEl();	//取消事件绑定
        this.popupEl = el;	//可弹出元素
        this._bindPopupEl();	//重新绑定事件
    },
    /**
	 * 弹出层源元素样式类
	 * @param value {String} 样式类名
	 */
    setPopupCls: function (value) {
        this.popupCls = value;
    },
    /**
	 *
	 */
    setShowAction: function (value) {
        this.showAction = value;
    },
    setHideAction: function (value) {
        this.hideAction = value;
    },
    setShowDelay: function (value) {
        this.showDelay = value;
    },
    setHideDelay: function (value) {
        this.hideDelay = value;
    },
    setXAlign: function (value) {
        this.xAlign = value;
    },
    setYAlign: function (value) {
        this.yAlign = value;
    },
    setxOffset: function (value) {
        value = parseInt(value);
        if (isNaN(value)) value = 0;
        this.xOffset = value;
    },
    setyOffset: function (value) {
        value = parseInt(value);
        if (isNaN(value)) value = 0;
        this.yOffset = value;
    },
    setShowModal: function (value) {
        this.showModal = value;
    },
    setShowShadow: function (value) {
        this.showShadow = value;
    },
    setMinWidth: function (value) {
        if (isNaN(value))
            return;
        this.minWidth = value;
    },
    setMinHeight: function (value) {
        if (isNaN(value))
            return;
        this.minHeight = value;
    },
    setMaxWidth: function (value) {
        if (isNaN(value))
            return;
        this.maxWidth = value;
    },
    setMaxHeight: function (value) {
        if (isNaN(value))
            return;
        this.maxHeight = value;
    },
    /**
	 * 设置是否可以被拖拽
	 */
    setAllowDrag: function (value) {
        this.allowDrag = value;
        mini.removeClass(this.el, this._dragCls);
        if (value) {
            mini.addClass(this.el, this._dragCls);
        }
    },
    /**
	 * 是否可以改变大小
	 */
    setAllowResize: function (value) {
        this.allowResize = value;
        mini.removeClass(this.el, this._resizeCls);
        if (value) {
            mini.addClass(this.el, this._resizeCls);
        }
    },
    __OnLeftClick: function (e) {
        if (this._inAniming)
            return;
        if (this.showAction != "leftclick")
            return;
        var allowPopup = jQuery(this.popupEl).attr("allowPopup");
        if (String(allowPopup) == "false")
            return;
        this.doShow(e);
    },
    __OnRightClick: function (e) {
        if (this._inAniming)
            return;
        if (this.showAction != "rightclick")
            return;
        var allowPopup = jQuery(this.popupEl).attr("allowPopup");
        if (String(allowPopup) == "false")
            return;

        e.preventDefault();
        this.doShow(e);

    },
    /**
	 * 默认鼠标悬停事件响应函数。
	 */
    __OnMouseOver: function (e) {
        if (this._inAniming)
            return;
        if (this.showAction != "mouseover")
            return;
        var allowPopup = jQuery(this.popupEl).attr("allowPopup");
        if (String(allowPopup) == "false")
            return;

        clearTimeout(this._hideTimer);
        this._hideTimer = null;

        if (this.isPopup)
            return;

        var sf = this;
        this._showTimer = setTimeout(function () {
            sf.doShow(e);
        }, this.showDelay);
    },
    __OnBodyMouseMove: function (e) {
        if (this.hideAction != "mouseout")
            return;
        this._tryHide(e);
    },
    __OnBodyMouseDown: function (e) {
        if (this.hideAction != "outerclick")
            return;
        if (!this.isPopup)
            return;
        if (this.within(e) || (this.popupEl && mini.isAncestor(this.popupEl, e.target))) {
        } else {
            this.doHide(e);
        }
    },
    _tryHide: function (e) {
        if (mini.isAncestor(this.el, e.target)
		|| (this.popupEl && mini.isAncestor(this.popupEl, e.target))
		) {
        } else {
            clearTimeout(this._showTimer);
            this._showTimer = null;
            if (this._hideTimer)
                return;

            var sf = this;
            this._hideTimer = setTimeout(function () {
                sf.doHide(e);
            }, this.hideDelay);
        }
    },
    /**
	 * 同事调整遮罩层
	 */
    __OnWindowResize: function (e) {
        if (this.isDisplay() && !mini.isIE6) {
            this._doModal();
        }
    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target))
            return true;
        var controls = mini.getChildControls(this);

        for (var i = 0, l = controls.length; i < l; i++) {
            var c = controls[i];

            if (c.within(e))
                return true;
        }
        return false;
    }
};

mini.copyTo(mini.Popup.prototype, mini.Popup_prototype);

/**
 * @class mini.OutlookBar  是mini UI中的导航组件，构造函数中调用了Control方法及扩展的私有方法_initGroups
 * @constructor
 * @extends mini.Control 
 */
mini.OutlookBar = function () {    
    this._initGroups();
    mini.OutlookBar.superclass.constructor.call(this);
}
mini.extend(mini.OutlookBar, mini.Control, {
	
	/**
     * 组件宽度
     * @default 180
     */
    width: 180,
	/**
     * 加载后是否展开。比如：true展开所有节点；0展开第一级节点。以此类推。
     * @default true
     */
    expandOnLoad: true,
	/**
     * 选中面板的索引
     * @default -1
     */
    activeIndex: -1,
	/**
     * 是否自动折叠
     * @default false
     */
    autoCollapse: false, 
	/**
     * 以下几个都是空属性，没用到过
     */
    groupCls: "",
    groupStyle: "",
    groupHeaderCls: "",
    groupHeaderStyle: "",
    groupBodyCls: "",
    groupBodyStyle: "",
    groupHoverCls: "",
    groupActiveCls: "",
	
    allowAnim: true,
	/**
	 * 通用的设置属性方法，可以用于设置事件，设置属性。
	 * @param kv JSON对象
	 * @returns 组件实例本身
	 */
    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var _allowLayout = this._allowLayout;
        this._allowLayout = false;

        var activeIndex = kv.activeIndex;
        delete kv.activeIndex;

        mini.OutlookBar.superclass.set.call(this, kv);

        if (mini.isNumber(activeIndex)) {
            this.setActiveIndex(activeIndex);
        }

        this._allowLayout = _allowLayout;
        this.doLayout();

        return this;
    },
	/**
     * 组将样式类
     * @default "mini-outlookbar"
     */
    uiCls: "mini-outlookbar",
	/**
     * 创建组件最外层HTML结构，并绑定给组件实例。
     * @default
     * @private
     */
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-outlookbar";
        this.el.innerHTML = '<div class="mini-outlookbar-border"></div>';
        this._borderEl = this.el.firstChild;
        
    },
    destroy: function (removeEl) {
        if (this._borderEl) {
            mini.clearEvent(this._borderEl);
            this.el.removeChild(this._borderEl);
            this._borderEl = null;
        }
        
        mini.OutlookBar.superclass.destroy.call(this, removeEl);
    },
	/**
     * 设置组件初始化完成后的需要执行的回调函数，
     * 通常组件的非结构和样式相关操作都绑定在这里，这样可以提前绘制完成组件.
     * @private
     */
    _initEvents: function () {

        mini._BindEvents(function () {
            mini.on(this.el, "click", this.__OnClick, this);
        }, this);
    },
	/**
	 * 生成面板ID。
	 * @param group JSON对象
	 * @returns {String} 面板ID
	 * @private
	 */
    _createGroupId: function (group) {
        return this.uid + "$" + group._id;
    },
    _GroupId: 1,
	/**
	 * 初始化面板数组
	 */
    _initGroups: function () {
        this.groups = [];
    },
	/**
	 * 创建面板
	 * @param group JSON对象
	 * @returns {Object} 面板对象
	 * @private
	 */
    _createGroupEl: function (group) {

        var id = this._createGroupId(group);
        var s = '<div id="' + id + '" class="mini-outlookbar-group ' + group.cls + '" style="' + group.style + '">'
                    + '<div class="mini-outlookbar-groupHeader ' + group.headerCls + '" style="' + group.headerStyle + ';"></div>'
                    + '<div class="mini-outlookbar-groupBody ' + group.bodyCls + '" style="' + group.bodyStyle + ';"></div>'
                + '</div>';
        var el = mini.append(this._borderEl, s);

        var bodyEl = el.lastChild;
        var cs = group.body;
        delete group.body;
        if (cs) {
            if (!mini.isArray(cs)) cs = [cs];
            for (var i = 0, l = cs.length; i < l; i++) {
                var node = cs[i];
                mini.append(bodyEl, node);
                
            }
            cs.length = 0;
        }

        
        if (group.bodyParent) {
            var p = group.bodyParent;
            while (p.firstChild) {
                bodyEl.appendChild(p.firstChild);
            }
        }
        delete group.bodyParent;

        return el;
    },
	/**
	 * 创建group面板
	 * @param options Object group对象
	 * @returns {Object} 面板对象
	 */
    createGroup: function (options) {
        var group = mini.copyTo({
            _id: this._GroupId++,
            name: "",
            title: "",

            cls: "",
            style: "",
            iconCls: "",
            iconStyle: "",
            headerCls: "",
            headerStyle: "",
            bodyCls: "",
            bodyStyle: "",

            visible: true,
            enabled: true,
            showCollapseButton: true,
            expanded: this.expandOnLoad

        }, options);


        return group;
    },
	/**
	 * 设置groups数组
	 * @param groups Object group对象
	 * @returns {Object} 面板对象
	 */
    setGroups: function (groups) {
        if (!mini.isArray(groups)) return;
        this.removeAll();
        for (var i = 0, l = groups.length; i < l; i++) {
            this.addGroup(groups[i]);
        }
    },
	/**
	 * 获取groups数组
	 */
    getGroups: function () {
        return this.groups;
    },
	/**
	 * 将面板添加到指定的索引
	 * @param {Object} group对象
	 * @param {Number} index 索引号。
	 * @returns {Object} 面板对象
	 */
    addGroup: function (group, index) {
        if (typeof group == "string") {
            group = { title: group };
        }
        group = this.createGroup(group);

        if (typeof index != "number") index = this.groups.length;
        this.groups.insert(index, group);

        var el = this._createGroupEl(group);
        group._el = el;
        var index = this.groups.indexOf(group);
        var targetGroup = this.groups[index + 1];
        if (targetGroup) {
            var tEl = this.getGroupEl(targetGroup);
            jQuery(tEl).before(el);
        }
        this.doUpdate();
        return group;
    },
	/**
	 * 更新group面板
	 * @param {Object} group面板对象
	 * @param {Object} group对象
	 */
    updateGroup: function (group, options) {
        var group = this.getGroup(group);
        if (!group) return;
        mini.copyTo(group, options);
        this.doUpdate();
    },
	/**
	 * 删除group面板
	 * @param {String} name/index group名称或者索引
	 */
    removeGroup: function (group) {
        group = this.getGroup(group);
        if (!group) return;
        var groupEl = this.getGroupEl(group);
        if (groupEl) groupEl.parentNode.removeChild(groupEl);
        this.groups.remove(group);
        this.doUpdate();
    },
	/**
	 * 删除所有子Group
	 */
    removeAll: function () {
        for (var i = this.groups.length - 1; i >= 0; i--) {
            this.removeGroup(i);
        }
    },
	/**
	 * 移动group面板到新位置
	 * @param {Object} group面板对象
	 * @param {Number} index
	 */
    moveGroup: function (group, index) {
        group = this.getGroup(group);
        if (!group) return;
        target = this.getGroup(index);

        var groupEl = this.getGroupEl(group);
        this.groups.remove(group);

        if (target) {
            index = this.groups.indexOf(target);
            this.groups.insert(index, group);
            var tEl = this.getGroupEl(target);
            jQuery(tEl).before(groupEl);
        } else {
            this.groups.add(group);
            this._borderEl.appendChild(groupEl);
        }

        this.doUpdate();
    },
	/**
     * 更新组件函数
     */
    doUpdate: function () {
        for (var i = 0, l = this.groups.length; i < l; i++) {
            var group = this.groups[i];
            var groupEl = group._el;
            var headerEl = groupEl.firstChild;
            var groupBodyEl = groupEl.lastChild;

            var icons = '<div class="mini-outlookbar-icon ' + group.iconCls + '" style="' + group.iconStyle + ';"></div>';
            /**解决showCollapseButton不起作用的问题 赵美丹 2012-12-10  */
            var s = '';
            if(group.showCollapseButton){
                s += '<div class="mini-tools"><span class="mini-tools-collapse"></span></div>';
            }
            s += ((group.iconStyle || group.iconCls) ? icons : '')
                    + '<div class="mini-outlookbar-groupTitle">' + group.title + '</div><div style="clear:both;"></div>';

            headerEl.innerHTML = s;

            if (group.enabled) {
                mini.removeClass(groupEl, "mini-disabled");
            } else {
                mini.addClass(groupEl, "mini-disabled");
            }

            mini.addClass(groupEl, group.cls);
            mini.setStyle(groupEl, group.style);

            mini.addClass(groupBodyEl, group.bodyCls);
            mini.setStyle(groupBodyEl, group.bodyStyle);

            mini.addClass(headerEl, group.headerCls);
            mini.setStyle(headerEl, group.headerStyle);

            mini.removeClass(groupEl, "mini-outlookbar-firstGroup");
            mini.removeClass(groupEl, "mini-outlookbar-lastGroup");
            if (i == 0) {
                mini.addClass(groupEl, "mini-outlookbar-firstGroup");
            }
            if (i == l - 1) {
                mini.addClass(groupEl, "mini-outlookbar-lastGroup");
            }
        }
        this.doLayout();
    },
	/**
     * 重新调整组件布局
     */
    doLayout: function () {
        if (!this.canLayout()) return;
        if (this._inAniming) return;

        this._doLayoutInner();

        for (var i = 0, l = this.groups.length; i < l; i++) {
            var group = this.groups[i];
            var groupEl = group._el;
            var groupBodyEl = groupEl.lastChild;

            if (group.expanded) {
                mini.addClass(groupEl, "mini-outlookbar-expand");
                mini.removeClass(groupEl, "mini-outlookbar-collapse");
            } else {
                mini.removeClass(groupEl, "mini-outlookbar-expand");
                mini.addClass(groupEl, "mini-outlookbar-collapse");
            }
            groupBodyEl.style.height = "auto";
            groupBodyEl.style.display = group.expanded ? "block" : "none";

            groupEl.style.display = group.visible ? "" : "none";
            if(!isIE||isIE6){
	            var w = mini.getWidth(groupEl, true);
	            var padding = mini.getPaddings(groupBodyEl);
	            var border = mini.getBorders(groupBodyEl);
	            if (jQuery.boxModel) {
	                w = w - padding.left - padding.right - border.left - border.right;
	            }
	            groupBodyEl.style.width = w + "px";
            }
        }

        var autoHeight = this.isAutoHeight();

        var acGroup = this.getActiveGroup();
        if (!autoHeight && this.autoCollapse && acGroup) {
            var groupEl = this.getGroupEl(this.activeIndex);
            groupEl.lastChild.style.height = this._getFillGroupBodyHeight() + "px";
        } else {

        }
        if(isIE){
            var padding = mini.getPaddings(this.el.parentNode);
	        if(this._borderEl.offsetHeight > (this.el.parentNode.offsetHeight-padding.top-padding.bottom)){
                this.el.style.width = (this.el.parentNode.clientWidth-20)+"px";
	        }else{
	            this.el.style.width = this.width;
	        }
        }
        
        mini.layout(this._borderEl);
    },
	/**
     * 重新调整组件内部布局
     */
    _doLayoutInner: function () {
        if (this.isAutoHeight()) {
            this._borderEl.style.height = "auto";
        } else {
            var h = this.getHeight(true);
            if (!jQuery.boxModel) {
                var b2 = mini.getBorders(this._borderEl);
                h = h + b2.top + b2.bottom;
            }
            if (h < 0) h = 0;
            this._borderEl.style.height = h + "px";
        }
    },
	/**
     * 根据Body的高度自动填充Group面板
     */
    _getFillGroupBodyHeight: function () {

        var h = jQuery(this.el).height();
        var b2 = mini.getBorders(this._borderEl);
        h = h - b2.top - b2.bottom;

        var acGroup = this.getActiveGroup();
        var h2 = 0;
        for (var i = 0, l = this.groups.length; i < l; i++) {
            var group = this.groups[i];
            var div = this.getGroupEl(group);
            if (group.visible == false || group == acGroup) continue;
            var display = div.lastChild.style.display;
            div.lastChild.style.display = "none";
            var dh = jQuery(div).outerHeight();
            div.lastChild.style.display = display;
            
            var margin = mini.getMargins(div);

            dh = dh + margin.top + margin.bottom;

            h2 += dh;
        }
        h = h - h2;

        var groupEl = this.getGroupEl(this.activeIndex);
        if (!groupEl) return 0;
        h = h - jQuery(groupEl.firstChild).outerHeight();
        if (jQuery.boxModel) {

            var padding = mini.getPaddings(groupEl.lastChild);
            var border = mini.getBorders(groupEl.lastChild);
            h = h - padding.top - padding.bottom - border.top - border.bottom;
        }

        var padding = mini.getPaddings(groupEl);
        var border = mini.getBorders(groupEl);
        var margin = mini.getMargins(groupEl);

        h = h - margin.top - margin.bottom;
        h = h - padding.top - padding.bottom - border.top - border.bottom;

        if (h < 0) h = 0;
        return h;
    },
	/**
	 * 获取Group面板
	 * @param {Object/Number/String} 面板对象/面板名称/面板索引
	 * @return {Object} Group面板
	 */
    getGroup: function (index) {
        if (typeof index == "object") return index;
        if (typeof index == "number") {
            return this.groups[index];
        } else {
            for (var i = 0, l = this.groups.length; i < l; i++) {
                var group = this.groups[i];
                if (group.name == index) return group;
            }
        }
    },
	/**
	 * 获取Group面板
	 * @param {Number} 面板索引
	 * @return {Object} Group面板
	 * @private
	 */
    _getGroupById: function (id) {
        for (var i = 0, l = this.groups.length; i < l; i++) {
            var group = this.groups[i];
            if (group._id == id) return group;
        }
    },
	/**
	 * 获取Group面板元素对象
	 * @param {Number} 面板索引
	 * @return {Object} Group面板
	 */
    getGroupEl: function (index) {
        var group = this.getGroup(index);
        if (!group) return null;
        return group._el;
    },
	/**
	 * 获取group面板对象内容区DOM元素
	 * @param {Number} 面板索引
	 * @return {Object} Dom对象
	 */
    getGroupBodyEl: function (index) {
        var groupEl = this.getGroupEl(index);
        if (groupEl) return groupEl.lastChild;
        return null;
    },
	/**
	 * 设置是否自动折叠属性
	 * @param {Boolean} value 面板索引
	 */
    setAutoCollapse: function (value) {
        this.autoCollapse = value;
    },
	/**
	 * 获取是否自动折叠属性的值
	 * @return {Boolean} 
	 */
    getAutoCollapse: function () {
        return this.autoCollapse;
    },
	/**
     * 设置是否加载时展开节点
     */
    setExpandOnLoad: function (value) {
        this.expandOnLoad = value;
    },
	/**
     * 获取是否加载时展开属性的值
     */
    getExpandOnLoad: function () {
        return this.expandOnLoad;
    },
    /**
	 * 设置默认选中的面板
	 * @return {Number} 面板索引值
	 */
    setActiveIndex: function (value) {

        var group = this.getGroup(value);
        var acGroup = this.getGroup(this.activeIndex);
        var fire = group != acGroup;
        if (group) {
            this.activeIndex = this.groups.indexOf(group);
        } else {
            this.activeIndex = -1;
        }

        var group = this.getGroup(this.activeIndex);
        if (group) {
            var anim = this.allowAnim;
            this.allowAnim = false;
            this.expandGroup(group);
            this.allowAnim = anim;
        }
    },
	/**
	 * 获取当前选中面板的索引
	 * @return {Number} 面板索引值
	 */
    getActiveIndex: function () {
        return this.activeIndex;
    },
	/**
	 * 获取当前选中的面板对象
	 * @return {Object} 面板对象
	 */
    getActiveGroup: function () {
        return this.getGroup(this.activeIndex);
    },
	/**
	 * 显示指定的面板
	 * @param {Object/Number/String} 面板对象/面板名称/面板索引
	 */
    showGroup: function (group) {
        group = this.getGroup(group);
        if (!group || group.visible == true) return;
        group.visible = true;
        this.doUpdate();
    },
	/**
	 * 隐藏指定的面板
	 * @param {Object/Number/String} 面板对象/面板名称/面板索引
	 */
    hideGroup: function (group) {
        group = this.getGroup(group);
        if (!group || group.visible == false) return;
        group.visible = false;
        this.doUpdate();
    },
	/**
	 * 切换指定的面板折叠与展开
	 * @param {Object/Number/String} 面板对象/面板名称/面板索引
	 */
    toggleGroup: function (group) {
        group = this.getGroup(group);
        if (!group) return;
        this._allowLayout = false;
        if (group.expanded) {
            this.collapseGroup(group);
        } else {
            this.expandGroup(group);
        }
        this._allowLayout = true;
        this.doLayout();
    },
	/**
	 * 折叠指定的面板
	 * @param {Object/Number/String} 面板对象/面板名称/面板索引
	 */
    collapseGroup: function (group) {
        group = this.getGroup(group);
        if (!group) return;
        var expanded = group.expanded;

        var fillHeight = 0;
        if (this.autoCollapse && !this.isAutoHeight()) {
            fillHeight = this._getFillGroupBodyHeight();
        }

        var fire = false;
        group.expanded = false;
        var index = this.groups.indexOf(group);
        if (index == this.activeIndex) {
            this.activeIndex = -1;
            fire = true;
        }

        var el = this.getGroupBodyEl(group);
        if (this.allowAnim && expanded) {
            this._inAniming = true;

            el.style.display = "block";
            el.style.height = "auto";
            if (this.autoCollapse && !this.isAutoHeight()) {
                el.style.height = fillHeight + "px";
            }
            var config = { height: "1px" };
            mini.addClass(el, "mini-outlookbar-overflow");

            var sf = this;
            var jq = jQuery(el);
            jq.animate(
            config,
            180,
            function () {
                sf._inAniming = false;
                mini.removeClass(el, "mini-outlookbar-overflow");
                sf.doLayout();
            }
            );
        } else {
            this.doLayout();
        }
        var e = {
            group: group,
            index: this.groups.indexOf(group),
            name: group.name
        };
        this.fire("Collapse", e);
        if (fire) {
            this.fire("activechanged");
        }
    },
	/**
	 * 展开指定的面板
	 * @param {Object/Number/String} 面板对象/面板名称/面板索引
	 */
    expandGroup: function (group) {
        group = this.getGroup(group);
        if (!group) return;

        var expanded = group.expanded;
        group.expanded = true;
        this.activeIndex = this.groups.indexOf(group);

        fire = true;
        if (this.autoCollapse) {
            for (var i = 0, l = this.groups.length; i < l; i++) {
                var g = this.groups[i];
                if (g.expanded && g != group) {
                    this.collapseGroup(g);
                }
            }
        }

        var el = this.getGroupBodyEl(group);
        if (this.allowAnim && expanded == false) {
            this._inAniming = true;

            el.style.display = "block";
            if (this.autoCollapse && !this.isAutoHeight()) {
                var fillHeight = this._getFillGroupBodyHeight();
                el.style.height = (fillHeight) + "px";
            } else {
                el.style.height = "auto";
            }

            var h = mini.getHeight(el);
            el.style.height = "1px";
            var config = { height: h + "px" };

            var overflow = el.style.overflow;
            el.style.overflow = "hidden";
            mini.addClass(el, "mini-outlookbar-overflow");
            
            var sf = this;
            var jq = jQuery(el);
            jq.animate(
                config,
                180,
                function () {
                    el.style.overflow = overflow;
                    mini.removeClass(el, "mini-outlookbar-overflow");
                    sf._inAniming = false;
                    sf.doLayout();
                }
            );
        } else {
            this.doLayout();
        }

        var e = {
            group: group,
            index: this.groups.indexOf(group),
            name: group.name
        };
        this.fire("Expand", e);

        if (fire) {

            this.fire("activechanged");
        }
    },
	/**
	 * 切换指定的面板（折叠/展开）
	 * @param {Object/Number/String} 面板对象/面板名称/面板索引
	 */
    _tryToggleGroup: function (group) {
        group = this.getGroup(group);
        var e = {
            group: group,
            groupIndex: this.groups.indexOf(group),
            groupName: group.name,
            cancel: false
        };
        if (group.expanded) {
            this.fire("BeforeCollapse", e);
            if (e.cancel == false) {
                this.collapseGroup(group);
            }
        } else {
            this.fire("BeforeExpand", e);
            if (e.cancel == false) {
                this.expandGroup(group);
            }
        }
    },
    /**
     * 根据Event，获取面板对象
     * @param e Event
     */
    _getGroupByEvent: function (e) {
        var el = mini.findParent(e.target, 'mini-outlookbar-group');
        if (!el) return null;
        var ids = el.id.split("$");
        var id = ids[ids.length - 1];
        return this._getGroupById(id);
    },
	/**
     * 按钮组件实例的默认点击事件响应函数。
     * @param e Event
     */
    __OnClick: function (e) {
        if (this._inAniming) return;
        var hd = mini.findParent(e.target, 'mini-outlookbar-groupHeader');
        if (!hd) return;

        var group = this._getGroupByEvent(e);
        if (!group) return;

        this._tryToggleGroup(group);
    },
    /**
     * 解析面板对象并返回属性数组集合
     * @param nodes DOM元素
     * @returns {String[]} 属性集合
     */
    parseGroups: function (nodes) {
        var groups = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];

            var group = {};
            groups.push(group);

            group.style = node.style.cssText;
            mini._ParseString(node, group,
                ["name", "title", "cls", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle"
                 ]
            );
            mini._ParseBool(node, group,
                ["visible", "enabled", "showCollapseButton", "expanded"
                 ]
            );
            group.bodyParent = node;
        }
        return groups;
    },
	/**
     * 取得指定元素的属性JSON集合
     * @param el DOM元素
     * @returns JSON对象
     */
    getAttrs: function (el) {
        var attrs = mini.OutlookBar.superclass.getAttrs.call(this, el);
		/**
		 * onactivechanged 事件当列面板切换时触发<br/>
		 * 支持标签配置。
		 * @name onactivechanged
		 * @event
		 * @memberOf mini.OutlookBar.prototype
		 */
		/**
		 * oncollapse 事件当折叠其面板时触发<br/>
		 * 支持标签配置。
		 * @name oncollapse
		 * @event
		 * @memberOf mini.OutlookBar.prototype
		 */
		/**
		 * onexpand 事件当展开面板时触发<br/>
		 * 支持标签配置。
		 * @name onexpand
		 * @event
		 * @memberOf mini.OutlookBar.prototype
		 */
        mini._ParseString(el, attrs,
            ["onactivechanged", "oncollapse", "onexpand"
                ]
        );
        mini._ParseBool(el, attrs,
            ["autoCollapse", "allowAnim", "expandOnLoad"
                ]
        );
        mini._ParseInt(el, attrs,
            ["activeIndex"
                ]
        );
        var nodes = mini.getChildNodes(el);
        attrs.groups = this.parseGroups(nodes);
        return attrs;
    }
});
mini.regClass(mini.OutlookBar, "outlookbar");

/**
 * @class mini.MenuItem 是Mini UI中的菜单项组件，构造函数中调用了Control方法
 * @constructor 
 * @extends mini.Control 
 */
mini.MenuItem = function () {    
    mini.MenuItem.superclass.constructor.call(this);
}
mini.extend(mini.MenuItem, mini.Control,  {
	/**
	 * 菜单项文本
	 */
    text: "",
    /**
	 * 菜单项图标类
	 */
    iconCls: "",
    /**
	 * 菜单项图标CSS样式
	 */
    iconStyle: "",
    /**
	 * 菜单项图标位置
	 * @default left
	 */
    iconPosition: "left", 
    
    /**
	 * 是否显示图标
	 */
    showIcon: true,
    showAllow: true,

    /**
     * 菜单项选中状态
     */
    checked: false,
    /**
	 * 点击选中
	 */
    checkOnClick: false,
    /**
	 * 菜单项分组名称
	 */
    groupName: "",

    _hoverCls: "mini-menuitem-hover",
    _pressedCls: "mini-menuitem-pressed",
    _checkedCls: "mini-menuitem-checked",

    _clearBorder: false,

    menu: null,

    /**
	 * 菜单项控件标签class名称
	 */
    uiCls: "mini-menuitem",
    _create: function () {
        var el = this.el = document.createElement("div");
        this.el.className = "mini-menuitem";

        this.el.innerHTML = '<div class="mini-menuitem-inner"><div class="mini-menuitem-icon"></div><div class="mini-menuitem-text"></div><div class="mini-menuitem-allow"></div></div>';
        this._innerEl = this.el.firstChild;
        this._iconEl = this._innerEl.firstChild;
        this._textEl = this._innerEl.childNodes[1];
        this.allowEl = this._innerEl.lastChild;
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);
        }, this);

    },
    _inputEventsInited: false,
    _initInputEvents: function () {
        if (this._inputEventsInited) return;
        this._inputEventsInited = true;

        mini_onOne(this.el, "click", this.__OnClick, this);
        mini_onOne(this.el, "mouseup", this.__OnMouseUp, this);

        mini_onOne(this.el, "mouseout", this.__OnMouseOut, this);


    },
    destroy: function (removeEl) {
        if (this.el) {
            this.el.onmouseover = null
        }
        this.menu = this._innerEl = this._iconEl = this._textEl = this.allowEl = null;
        mini.MenuItem.superclass.destroy.call(this, removeEl);
    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this.menu && this.menu.within(e)) return true;
        return false;
    },
    _doUpdateIcon: function () {
        var hasIcon = this.iconStyle || this.iconCls || this.checkOnClick;
        if (this._iconEl) {
            mini.setStyle(this._iconEl, this.iconStyle);
            mini.addClass(this._iconEl, this.iconCls);
            this._iconEl.style.display = hasIcon ? "block" : "none";
        }
        if (this.iconPosition == "top") {
            mini.addClass(this.el, "mini-menuitem-icontop");
        } else {
            mini.removeClass(this.el, "mini-menuitem-icontop");
        }
    },
    doUpdate: function () {
        if (this._textEl) this._textEl.innerHTML = this.text;
        this._doUpdateIcon();


        if (this.checked) {
            mini.addClass(this.el, this._checkedCls);
        } else {
            mini.removeClass(this.el, this._checkedCls);
        }
        if (this.allowEl) {
            if (this.menu && this.menu.items.length > 0) {
                this.allowEl.style.display = "block";
            } else {
                this.allowEl.style.display = "none";
            }
        }
    },
    /**
	 * 设置菜单项显示文本
	 */
    setText: function (value) {
        this.text = value;
        
        if (this._textEl) this._textEl.innerHTML = this.text;
    },
    /**
	 * 获取菜单项文本
	 */
    getText: function () {
        return this.text;
    },
    /**
	 * 设置菜单项图标样式
	 */
    setIconCls: function (value) {
        mini.removeClass(this._iconEl, this.iconCls);
        this.iconCls = value;
        
        this._doUpdateIcon();
    },
    /**
	 * 获取菜单项图标样式
	 */
    getIconCls: function () {
        return this.iconCls;
    },
    /**
	 * 设置菜单项图标的CSS样式
	 */
    setIconStyle: function (value) {
        this.iconStyle = value;
        
        this._doUpdateIcon();
    },
    /**
	 * 获取菜单项图标的CSS样式
	 */
    getIconStyle: function () {
        return this.iconStyle;
    },
    /**
	 * 设置图标显示位置
	 */
    setIconPosition: function (value) {
        this.iconPosition = value;
        
        this._doUpdateIcon();
    },
    /**
	 * 获取图标显示位置
	 */
    getIconPosition: function () {
        return this.iconPosition;
    },
    /**
	 * 设置是否点击时选中
	 */
    setCheckOnClick: function (value) {
        this.checkOnClick = value;
        if (value) {
            mini.addClass(this.el, "mini-menuitem-showcheck");
        } else {
            mini.removeClass(this.el, "mini-menuitem-showcheck");
        }
        this.doUpdate();
    },
    /**
	 * 获取是否点击时选中
	 */
    getCheckOnClick: function () {
        return this.checkOnClick;
    },
    /**
	 * 设置菜单项选中状态
	 */
    setChecked: function (value) {
        if (this.checked != value) {
            this.checked = value;
            this.doUpdate();
            this.fire("checkedchanged");
        }
    },
    /**
	 * 获取菜单项的选中状态
	 */
    getChecked: function () {
        return this.checked;
    },
    /**
	 * 设置菜单项分组名称
	 */
    setGroupName: function (value) {
        if (this.groupName != value) {
            this.groupName = value;
        }
    },
    /**
	 * 获取菜单项分组名称
	 */
    getGroupName: function () {
        return this.groupName;
    },
    /**
	 * 设置菜单项的下级菜单
	 */
    setChildren: function (value) {
        this.setMenu(value);
    },
    /**
	 * 设置菜单项下级菜单
	 */
    setMenu: function (value) {

        if (mini.isArray(value)) {
            value = {
                type: "menu",
                items: value
            };
        }
        if (this.menu !== value) {
            this.menu = mini.getAndCreate(value);
            this.menu.hide();
            this.menu.ownerItem = this;
            this.doUpdate();
            this.menu.on("itemschanged", this.__OnItemsChanged, this);

        }
    },
    /**
	 * 获取菜单项下级菜单
	 */
    getMenu: function () {
        return this.menu;
    },
    getMenuItems: function () {
        return this.menu.items;
    },
    /**
	 * 显示菜单项下级菜单
	 */
    showMenu: function () {
        if (this.menu && this.menu.isDisplay() == false) {
            this.menu.setHideAction("outerclick");

            var options = {
                xAlign: "outright",
                yAlign: "top",
                outXAlign: "outleft",

                popupCls: "mini-menu-popup"
            };

            if (this.ownerMenu && this.ownerMenu.vertical == false) {

                options.xAlign = "left";
                options.yAlign = "below";
                options.outXAlign = null;
            }



            this.menu.showAtEl(this.el, options);

        }
    },
    /**
	 * 隐藏菜单项下级菜单
	 */
    hideMenu: function () {
        if (this.menu) this.menu.hide();
    },
    /**
	 * 隐藏菜单项
	 */
    hide: function () {
        this.hideMenu();
        this.setVisible(false);
    },

    __OnItemsChanged: function (e) {
        this.doUpdate();
    },
    /**
	 * 获取菜单项上级菜单
	 */
    getTopMenu: function () {
        if (this.ownerMenu) {
            if (this.ownerMenu.ownerItem) return this.ownerMenu.ownerItem.getTopMenu();
            else return this.ownerMenu;
        }
        return null;
    },
    
    __OnClick: function (e) {

        if (this.isReadOnly()) return;

        if (this.checkOnClick) {
            if (this.ownerMenu && this.groupName) {
                var groups = this.ownerMenu.getGroupItems(this.groupName);
                if (groups.length > 0) {
                    if (this.checked == false) {
                        for (var i = 0, l = groups.length; i < l; i++) {
                            var item = groups[i];
                            if (item != this) {

                                item.setChecked(false);
                            }
                        }
                        this.setChecked(true);
                    }
                } else {
                    this.setChecked(!this.checked);
                }
            } else {
                this.setChecked(!this.checked);
            }
        }

        this.fire("click");

        var topMenu = this.getTopMenu();
        if (topMenu) {
            topMenu._OnItemClick(this, e);
        }
    },
    __OnMouseUp: function (e) {
        if (this.isReadOnly()) return;

        if (this.ownerMenu) {
            var me = this;
            setTimeout(function () {
                if (me.isDisplay()) {
                    me.ownerMenu.showItemMenu(me);

                }
            }, 1);
        }
    },
    __OnMouseOver: function (e) {

        if (this.isReadOnly()) return;
        this._initInputEvents();
        mini.addClass(this.el, this._hoverCls);

        this.el.title = this.text;

        if (this._textEl.scrollWidth > this._textEl.clientWidth) {
            this.el.title = this.text;
        } else {
            this.el.title = "";
        }

        if (this.ownerMenu) {
            if (this.ownerMenu.isVertical() == true) {
                this.ownerMenu.showItemMenu(this);
            } else if (this.ownerMenu.hasShowItemMenu()) {
                this.ownerMenu.showItemMenu(this);
            }
        }
    },

    __OnMouseOut: function (e) {
        mini.removeClass(this.el, this._hoverCls);
    },
    onClick: function (fn, scope) {
        this.on("click", fn, scope);
    },
    /**
	 * 选中状态变更事件
	 */
    onCheckedChanged: function (fn, scope) {
        this.on("checkedchanged", fn, scope);
    },
    
    getAttrs: function (el) {
        var attrs = mini.MenuItem.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        attrs.text = el.innerHTML;
        mini._ParseString(el, attrs,
            ["text", "iconCls", "iconStyle", "iconPosition", "groupName", "onclick", "oncheckedchanged"
             ]
        );
        mini._ParseBool(el, attrs,
            ["checkOnClick", "checked"
             ]
        );

        return attrs;
    }
});
mini.regClass(mini.MenuItem, 'menuitem');

mini.MenuButton = function () {

    mini.MenuButton.superclass.constructor.call(this);
}
mini.extend(mini.MenuButton, mini.Button, {
    uiCls: "mini-menubutton",
    allowCls: "mini-button-menu",
    setMenu: function (value) {
        
        if (mini.isArray(value)) {
            value = {
                type: "menu",
                items: value
            };
        }
        if (typeof value == "string") {
            var el = mini.byId(value);
            if (!el) return;
            
            mini.parse(value);
            value = mini.get(value);
        }

        if (this.menu !== value) {
            this.menu = mini.getAndCreate(value);
            this.menu.setPopupEl(this.el);
            this.menu.setPopupCls("mini-button-popup");
            this.menu.setShowAction("leftclick");
            this.menu.setHideAction("outerclick");
            this.menu.setXAlign("left");
            this.menu.setYAlign("below");

            this.menu.hide();
            this.menu.owner = this;
        }
    },
    setEnabled: function (value) {
        this.enabled = value;
        if (value) {
            this.removeCls(this._disabledCls);
        } else {
            this.addCls(this._disabledCls);
        }
        
        jQuery(this.el).attr("allowPopup", !!value)
    }
});
mini.regClass(mini.MenuButton, "menubutton");



/**
 * @class mini.Menu 是Mini UI中的菜单组件，构造函数中调用了Control方法
 * @constructor 
 * @extends mini.Control 
 */
mini.Menu = function () {
    this.items = [];
    mini.Menu.superclass.constructor.call(this);

    
}
mini.extend(mini.Menu, mini.Control);
mini.copyTo(mini.Menu.prototype, mini.Popup_prototype);
var mini_Popup_prototype_hide = mini.Popup_prototype.hide;

mini.copyTo(mini.Menu.prototype, {
    height: "auto",
    width: "auto",
    minWidth: 140,
    /**
     * 是否竖向
     * @default true
     */
    vertical: true,
    /**
     * 是否允许选择菜单项
     * @default false
     */
    allowSelectItem: false,
    _selectedItem: null,
    _itemSelectedCls: "mini-menuitem-selected",
    /**
     * 文本字段名
     * @default text
     */
    textField: "text",
    /**
     * 是否树形结构
     * @default false
     */
    resultAsTree: false,
    /**
     * id字段名
     * @default id
     */
    idField: "id",
    /**
     * 父字段名
     * @default pid
     */
    parentField: "pid",
    /**
     * 菜单项字段名
     * @default children
     */
    itemsField: "children",
    showNavArrow: true,

    _clearBorder: false,

    showAction: "none", 
    hideAction: "outerclick", 

    /**
     * 按名称获取菜单项
     * @param name 菜单项的名称
     */
    getbyName: function (name) {

        for (var i = 0, l = this.items.length; i < l; i++) {
            var item = this.items[i];
            if (item.name == name) {
                return item;
            }
            if (item.menu) {
                var control = item.menu.getbyName(name);
                if (control) return control;
            }
        }
        return null;
    },
    /**
     * 批量设置属性和事件
     * @param obj 参数配置对象
     */
    set: function (obj) {
        if (typeof obj == 'string') {
            return this;
        }

        var url = obj.url;
        delete obj.url;

        mini.Menu.superclass.set.call(this, obj);

        if (url) {
            this.setUrl(url);
        }

        return this;
    },
    /**
     * 菜单组件class名
     */
    uiCls: "mini-menu",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-menu";
        this.el.innerHTML = '<div class="mini-menu-border"><a class="mini-menu-topArrow" href="#" onclick="return false"></a><div class="mini-menu-inner"></div><a class="mini-menu-bottomArrow" href="#" onclick="return false"></a></div>';
        this._borderEl = this.el.firstChild;

        this._topArrowEl = this._borderEl.childNodes[0];
        this._bottomArrowEl = this._borderEl.childNodes[2];

        this._innerEl = this._borderEl.childNodes[1];
        this._innerEl.innerHTML = '<div class="mini-menu-float"></div><div class="mini-menu-toolbar"></div><div style="clear:both;"></div>';
        this._contentEl = this._innerEl.firstChild;
        this._toolbarEl = this._innerEl.childNodes[1];




        if (this.isVertical() == false) mini.addClass(this.el, 'mini-menu-horizontal');

    },
    destroy: function (removeEl) {
        if (this._topArrowEl) {
            this._topArrowEl.onmousedown = this._bottomArrowEl.onmousedown = null;
        }

        this._popupEl = this.popupEl = this._borderEl = this._innerEl = this._contentEl = null;
        this._topArrowEl = this._bottomArrowEl = null;
        this.owner = null;
        mini.un(document, "mousedown", this.__OnBodyMouseDown, this);
        mini.un(window, "resize", this.__OnWindowResize, this);
        this.el.onmouseover = null;
        this.el.oncontextmenu = null;
        mini.Menu.superclass.destroy.call(this, removeEl);

    },
    _disableContextMenu: false,
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(document, "mousedown", this.__OnBodyMouseDown, this);
            mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(window, "resize", this.__OnWindowResize, this);
            if (this._disableContextMenu) {
                mini_onOne(this.el, "contextmenu", function (e) {
                    e.preventDefault();

                }, this);
            }

            mini_onOne(this._topArrowEl, "mousedown", this.__OnTopMouseDown, this);
            mini_onOne(this._bottomArrowEl, "mousedown", this.__OnBottomMouseDown, this);

        }, this);

    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        for (var i = 0, l = this.items.length; i < l; i++) {
            var item = this.items[i];
            if (item.within(e)) return true;
        }
        return false;
    },
   
    /**
     * 设置竖向显示方式
     * @param value true 或 false
     */
    setVertical: function (value) {
        this.vertical = value;
        if (!value) {
            mini.addClass(this.el, 'mini-menu-horizontal');
        } else {
            mini.removeClass(this.el, 'mini-menu-horizontal');
        }
       
    },
    /**
     * 获取控件是否竖向显示
     */
    getVertical: function () {
        return this.vertical;
    },
    /**
     * 获取控件是否竖向显示
     */
    isVertical: function () {
        return this.vertical;
    },
    /**
     * 显示控件
     */
    show: function () {
        this.setVisible(true);
    },
    /**
     * 隐藏控件
     */
    hide: function () {
        this.hideItems();
        mini_Popup_prototype_hide.call(this);
    },
    hideItems: function () {
        for (var i = 0, l = this.items.length; i < l; i++) {
            var menuitem = this.items[i];
            menuitem.hideMenu();
        }
    },
    /**
     * 显示菜单项
     */
    showItemMenu: function (item) {
        for (var i = 0, l = this.items.length; i < l; i++) {
            var menuitem = this.items[i];
            if (menuitem == item) {
                menuitem.showMenu();
            } else {
                menuitem.hideMenu();
            }
        }
    },
    hasShowItemMenu: function () {
        for (var i = 0, l = this.items.length; i < l; i++) {
            var menuitem = this.items[i];
            if (menuitem && menuitem.menu && menuitem.menu.isPopup) {
                return true;
            }
        }
        return false;
    },
    showAllItems: function (root) {
        if(!root) return;
        root.show();
        root.enable();

        var items = root.getMenuItems();
        items = mini.isNull(root) ? this.getItems() : items;
        showAllItems(items);
        function showAllItems(items) {

            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                item.show();
                item.enable();
                if (item.menu && item.menu.items) {
                    var _items = item.menu.items;
                    showAllItems(_items);
                }
            }
        }
    },
    hideAllItems: function (root) {
        if(!root) return;
        root.hide();

        var items = root.getMenuItems();
        items = mini.isNull(root) ? this.getItems() : items;
        hideAllItems(items);

        function hideAllItems(items) {

            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                item.hide();
                if (item.menu && item.menu.items) {
                    var _items = item.menu.items;
                    hideAllItems(_items);
                }
            }
        }
    },
    /**
     * 设置菜单项数据
     */
    setData: function (value) {
        if (!mini.isArray(value)) value = [];
        this.setItems(value);
    },
    /**
     * 获取获取菜单项数据
     */
    getData: function () {
        return this.getItems();
    },
    /**
     * 设置菜单项数据
     */
    setItems: function (items) {
        if (!mini.isArray(items)) items = [];

        this.removeAll();
        var sss = new Date();

        for (var i = 0, l = items.length; i < l; i++) {
            this.addItem(items[i]);
        }
        
    },
    /**
     * 获取获取菜单项数据
     */
    getItems: function () {
        return this.items;
    },
    /**
     * 添加菜单项
     */
    addItem: function (item) {
        if (item == "-" || item == "|" || item.type == "separator") {
            mini.append(this._contentEl, '<span class="mini-separator"></span>');
            return;
        }

        if (!mini.isControl(item) && !mini.getClass(item.type)) {
            item.type = "menuitem";
        }
        item = mini.getAndCreate(item);

        this.items.push(item);
        
        this._contentEl.appendChild(item.el);
        
        item.ownerMenu = this;

      

        this.fire("itemschanged");
    },
    /**
     * 移除菜单项
     * @param item 菜单项
     */
    removeItem: function (item) {
        item = mini.get(item);
        if (!item) return;
        this.items.remove(item);
        
        this._contentEl.removeChild(item.el);
        
        this.fire("itemschanged");
    },
    /**
     * 移除指定索引位置菜单项
     * @param index 菜单项索引位置
     */
    removeItemAt: function (index) {
        var item = this.items[index];
        this.removeItem(item);
    },
    /**
     * 移除所有菜单项
     */
    removeAll: function () {
        var items = this.items.clone();
        for (var i = items.length - 1; i >= 0; i--) {
            this.removeItem(items[i]);
        }
        this._contentEl.innerHTML = "";
    },
    /**
     * 获取菜单项组
     * @param name groupName
     */
    getGroupItems: function (name) {
        if (!name) return [];
        var items = [];
        for (var i = 0, l = this.items.length; i < l; i++) {
            var item = this.items[i];
            if (item.groupName == name) items.push(item);
        }
        return items;
    },
    /**
     * 获取指定索引位置的菜单项
     * @param item 菜单项索引位置
     */
    getItem: function (item) {
        if (typeof item == "number") return this.items[item];
        if (typeof item == "string") {
            for (var i = 0, l = this.items.length; i < l; i++) {
                var it = this.items[i];
                if (it.id == item) return it;
            }
            return null;
        }
        if (item && this.items.indexOf(item) != -1) return item;
        return null;
    },

    /**
     * 设置菜单项是否可选择
     */
    setAllowSelectItem: function (value) {
        this.allowSelectItem = value;
    },
    /**
     * 获取菜单项是否可选择
     */
    getAllowSelectItem: function () {
        return this.allowSelectItem;
    },
    /**
     * 设置菜单项的选中状态
     */
    setSelectedItem: function (item) {
        item = this.getItem(item);
        this._OnItemSelect(item);
    },
    /**
     * 获取已选中的菜单项
     */
    getSelectedItem: function (item) {
        return this._selectedItem;
    },
    setShowNavArrow: function (value) {
        this.showNavArrow = value;
    },
    getShowNavArrow: function () {
        return this.showNavArrow;
    },

    setTextField: function (value) {
        this.textField = value;
    },
    getTextField: function () {
        return this.textField;
    },
    setResultAsTree: function (value) {
        this.resultAsTree = value;
    },
    getResultAsTree: function () {
        return this.resultAsTree;
    },
    setIdField: function (value) {
        this.idField = value;
    },
    getIdField: function () {
        return this.idField;
    },
    setParentField: function (value) {
        this.parentField = value;
    },
    getParentField: function () {
        return this.parentField;
    },
    doLayout: function () {

        if (!this.canLayout()) return;

        if (!this.isAutoHeight()) {

            var height = mini.getHeight(this.el, true);

            mini.setHeight(this._borderEl, height);
            this._topArrowEl.style.display = this._bottomArrowEl.style.display = "none";
            this._contentEl.style.height = "auto";

            if (this.showNavArrow && this._borderEl.scrollHeight > this._borderEl.clientHeight) {
                this._topArrowEl.style.display = this._bottomArrowEl.style.display = "block";
                height = mini.getHeight(this._borderEl, true);
                var th = mini.getHeight(this._topArrowEl);
                var bh = mini.getHeight(this._bottomArrowEl);
                var h = height - th - bh;
                if (h < 0) h = 0;
                mini.setHeight(this._contentEl, h);
            } else {
                this._contentEl.style.height = "auto";
            }
        } else {
            this._borderEl.style.height = "auto";
            this._contentEl.style.height = "auto";
        }
    },
    _measureSize: function () {
        if (this.height == "auto") {
            this.el.style.height = "auto";
            this._borderEl.style.height = "auto";
            this._contentEl.style.height = "auto";
            this._topArrowEl.style.display = this._bottomArrowEl.style.display = "none";

            var vbox = mini.getViewportBox();
            var box = mini.getBox(this.el);
            this.maxHeight = vbox.height - 25;
            if (this.ownerItem) {
                var box = mini.getBox(this.ownerItem.el);
                var topH = box.top;
                var bottomH = vbox.height - box.bottom;
                var maxHeight = topH > bottomH ? topH : bottomH;
                maxHeight -= 10;
                this.maxHeight = maxHeight;
            }
        }

        this.el.style.display = "";
        var box = mini.getBox(this.el);

        if (box.width > this.maxWidth) {
            mini.setWidth(this.el, this.maxWidth);
            box = mini.getBox(this.el);
        }
        if (box.height > this.maxHeight) {
            mini.setHeight(this.el, this.maxHeight);
            box = mini.getBox(this.el);
        }
        if (box.width < this.minWidth) {
            mini.setWidth(this.el, this.minWidth);
            box = mini.getBox(this.el);
        }
        if (box.height < this.minHeight) {
            mini.setHeight(this.el, this.minHeight);
            box = mini.getBox(this.el);
        }
    },

    /**
     * 菜单数据地址
     */
    url: "",
    _doLoad: function () {

        var items = mini.getData(this.url);
        if (this.dataField) {
            items = mini._getMap(this.dataField, items);
        }

        if (!items) items = [];

        if (this.resultAsTree == false) {
            items = mini.arrayToTree(items, this.itemsField, this.idField, this.parentField)
        }

        var list = mini.treeToArray(items, this.itemsField, this.idField, this.parentField)
        for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];
            o.text = mini._getMap(this.textField, o);
            if (mini.isNull(o.text)) o.text = "";
        }
        var sss = new Date();
        this.setItems(items);
        
        this.fire("load");
    },
    loadList: function (list, idField, parentField) {
        if (!list) return;

        idField = idField || this.idField;
        parentField = parentField || this.parentField;

        for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];
            o.text = mini._getMap(this.textField, o);
            if (mini.isNull(o.text)) o.text = "";
        }

        var tree = mini.arrayToTree(list, this.itemsField, idField, parentField);

        this.load(tree);
    },

    /**
     * 加载菜单数据
     * @param url 菜单数据URL地址
     */
    load: function (url) {
        if (typeof url == "string") {
            this.setUrl(url);
        } else {
            this.setItems(url);
        }
    },
    setUrl: function (value) {
        this.url = this.parseUrl(value);

        this._doLoad();
    },
    getUrl: function () {
        return this.url;
    },
    hideOnClick: true,
    setHideOnClick: function (value) {
        this.hideOnClick = value;
    },
    getHideOnClick: function () {
        return this.hideOnClick;
    },

    _OnItemClick: function (item, htmlEvent) {
        var e = {
            item: item,
            isLeaf: !item.menu,
            htmlEvent: htmlEvent
        };
        if (this.hideOnClick) {
            if (this.isPopup) {
                this.hide();
            } else {
                this.hideItems();
            }
        }

        if (this.allowSelectItem && this._selectedItem != item) {
            this.setSelectedItem(item);
        }

        this.fire("itemclick", e);
        if (this.ownerItem) {

        }
    },
    _OnItemSelect: function (item) {
        if (this._selectedItem) {
            this._selectedItem.removeCls(this._itemSelectedCls);
        }
        this._selectedItem = item;

        if (this._selectedItem) {
            this._selectedItem.addCls(this._itemSelectedCls);
        }
        var e = {
            item: this._selectedItem
        };
        this.fire("itemselect", e);
    },
    /**
     * 菜单项点击事件
     */
    onItemClick: function (fn, scope) {
        this.on("itemclick", fn, scope);
    },
    /**
     * 菜单项选中事件
     */
    onItemSelect: function (fn, scope) {
        this.on("itemselect", fn, scope);
    },
    __OnTopMouseDown: function (e) {
        this._startScrollMove(-20);
    },
    __OnBottomMouseDown: function (e) {

        this._startScrollMove(20);
    },
    _startScrollMove: function (value) {
        clearInterval(this._scrollTimer);
        var fn = function () {
            clearInterval(me._scrollTimer);
            mini.un(document, "mouseup", fn);
        };
        mini.on(document, "mouseup", fn);

        var me = this;

        this._scrollTimer = setInterval(function () {
            me._contentEl.scrollTop += value;


        }, 50);
    },
    setToolbar: function (value) {
        __mini_setControls(value, this._toolbarEl, this);
    },

    parseItems: function (nodes) {

        var data = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];

            if (node.className == "separator") {
                data.add("-");
                continue;
            }

            var cnodes = mini.getChildNodes(node);

            var nodeItem = cnodes[0];
            var nodeChild = cnodes[1];

            var o = new mini.MenuItem();

            if (!nodeChild) {
                
                mini.applyTo.call(o, node);
                data.add(o);
                continue;
            }
            
            mini.applyTo.call(o, nodeItem);
            o.render(document.body);


            var menu = new mini.Menu();
            
            mini.applyTo.call(menu, nodeChild);

            o.setMenu(menu);

            menu.render(document.body);
            

            data.add(o);
        }
        return data.clone();
    },
    getAttrs: function (el) {

        var attrs = mini.Menu.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);

        mini._ParseString(el, attrs,
            ["popupEl", "popupCls", "showAction", "hideAction", "xAlign", "yAlign", "modalStyle",
            "onbeforeopen", "open", "onbeforeclose", "onclose", "url", "onitemclick", "onitemselect",
            "textField", "idField", "parentField"
            ]
        );
        mini._ParseBool(el, attrs,
            ["resultAsTree", "hideOnClick", "showNavArrow"
            ]
        );


        var nodes = mini.getChildNodes(el);

        for (var i = nodes.length - 1; i >= 0; i--) {
            var node = nodes[i];
            var property = jQuery(node).attr("property");
            if (!property) continue;
            property = property.toLowerCase();
            if (property == "toolbar") {
                attrs.toolbar = node;
                node.parentNode.removeChild(node);
            }
        }


        var nodes = mini.getChildNodes(el);
        var items = this.parseItems(nodes);
        if (items.length > 0) {
            attrs.items = items;
        }

        var vertical = jq.attr("vertical");
        if (vertical) {

            attrs.vertical = vertical == "true" ? true : false;
        }
        var allowSelectItem = jq.attr("allowSelectItem");
        if (allowSelectItem) {
            attrs.allowSelectItem = allowSelectItem == "true" ? true : false;
        }

        return attrs;
    }

});
mini.regClass(mini.Menu, 'menu');

mini.MenuBar = function () {
    mini.MenuBar.superclass.constructor.call(this);
}
mini.extend(mini.MenuBar, mini.Menu, {
    uiCls: "mini-menubar",
    vertical: false,
    setVertical: function (value) {
        this.vertical = false;
    }
});
mini.regClass(mini.MenuBar, 'menubar');


/** 
 * @class mini.OutlookMenu 是mini UI中的手风琴组件，构造函数中调用了mini.OutlookBar方法
 * @constructor
 * @extends mini.OutlookBar
 */
mini.OutlookMenu = function () {
	mini.OutlookMenu.superclass.constructor.call(this);
	this.data = [];
}
mini.extend(mini.OutlookMenu, mini.OutlookBar,{

	/**
	 * 数据地址
	 * @default 长度为零的字符串
	 */
	url: "",

	/**
	 * 节点文本字段
	 * @default text
	 */
	textField: "text",

	/**
	 * 图标字段
	 * @default iconCls
	 */
	iconField: "iconCls",

	/**
	 * 数据地址字段
	 * @default url
	 */
	urlField: "url",

	/**
	 * url数据是否列表
	 * @default false
	 */
	resultAsTree: false,

	/**
	 * 叶子节点字段
	 * @default children
	 */
	itemsField: "children",

	/**
	 * 值字段,节点的唯一标识
	 * @default id
	 */
	idField: "id",

	/**
	 * 父节点字段
	 * @default pid
	 */
	parentField: "pid",

	style: "width:100%;height:100%;",

	/**
	 * 通用的设置属性方法，可以用于设置事件，设置属性。
	 * @param kv JSON对象
	 * @returns 组件实例本身
	 */
	set: function (kv) {
		if (typeof kv == 'string') {
			return this;
		}

		var url = kv.url;
		delete kv.url;
		var activeIndex = kv.activeIndex;
		delete kv.activeIndex;

		mini.OutlookMenu.superclass.set.call(this, kv);

		if (url) {
			this.setUrl(url);
		}
		if (mini.isNumber(activeIndex)) {
			this.setActiveIndex(activeIndex);
		}
		return this;
	},
	/**
	 * 组件样式类名
	 * @default "mini-outlookmenu"
	 */
	uiCls: "mini-outlookmenu",

	/** 析构函数 */
	destroy: function (removeEl) {
		if (this._menus) {
			var cs = this._menus.clone();
			for (var i = 0, l = cs.length; i < l; i++) {
				var p = cs[i];
				p.destroy();
			}
			this._menus.length = 0;
		}

		mini.OutlookMenu.superclass.destroy.call(this, removeEl);
	},
	_doParseFields: function (list) {
	    for (var i = 0, l = list.length; i < l; i++) {
	        var o = list[i];
	        o.text = o[this.textField];
	        o.url = o[this.urlField];
	        o.iconCls = o[this.iconField];
	    }
	},

	/**
	 * 获取数据并创建导航菜单，包加载树形和列表数据
	 */
	_doLoad: function () {
		var items = [];
		try {
			items = mini.getData(this.url);
		} catch (ex) {

			if (mini_debugger == true) {
				alert("outlooktree json is error.");
			}
		}
		if (this.dataField) {
		    items = mini._getMap(this.dataField, items);
		}
		if (!items)
			items = [];

		if (this.resultAsTree == false) {
			items = mini.arrayToTree(items, this.itemsField, this.idField, this.parentField)
		}

		var list = mini.treeToArray(items, this.itemsField, this.idField, this.parentField)
		this._doParseFields(list);


		this.createNavBarMenu(items);
		this.fire("load");
	},
	/**
	 * 只加载树形数据
	 */
	loadList: function (list, idField, parentField) {
		idField = idField || this.idField;
		parentField = parentField || this.parentField;
		this._doParseFields(list);

		var tree = mini.arrayToTree(list, this.nodesField, idField, parentField);
		this.load(tree);
	},
	load: function (value) {
	    if (typeof value == "string") {
	        this.setUrl(value);
	    } else {
	        if (this.resultAsTree == false) {
	            value = mini.arrayToTree(value, this.itemsField, this.idField, this.parentField)
	        }
	        var list = mini.treeToArray(value, this.itemsField, this.idField, this.parentField)
	        this._doParseFields(list);

	        this.createNavBarMenu(value);
	    }
	},
	setData: function (value) {
	    this.load(value);
	},

	/** 设置url */
	setUrl: function (value) {
		this.url = this.parseUrl(value);
		this._doLoad();
	},
	/** 获取url */
	getUrl: function () {
		return this.url;
	},
	/** 设置textField */
	setTextField: function (value) {
		this.textField = value;
	},
	/** 获取textField */
	getTextField: function () {
		return this.textField;
	},
	/** 设置iconField */
	setIconField: function (value) {
		this.iconField = value;
	},
	/** 获取iconField */
	getIconField: function () {
		return this.iconField;
	},
	/** 设置urlField */
	setUrlField: function (value) {
		this.urlField = value;
	},
	/** 获取urlField */
	getUrlField: function () {
		return this.urlField;
	},
	/** 设置resultAsTree */
	setResultAsTree: function (value) {
		this.resultAsTree = value;
	},
	/** 获取resultAsTree */
	getResultAsTree: function () {
		return this.resultAsTree;
	},
	/** 设置nodesField */
	setNodesField: function (value) {
		this.nodesField = value;
	},
	/** 获取nodesField */
	getNodesField: function () {
		return this.nodesField;
	},
	/** 设置idField */
	setIdField: function (value) {
		this.idField = value;
	},
	/** 获取idField */
	getIdField: function () {
		return this.idField;
	},
	/** 设置parentField */
	setParentField: function (value) {
		this.parentField = value;
	},
	/** 获取parentField */
	getParentField: function () {
		return this.parentField;
	},
	/** 当前被选中的条目 */
	_selected: null,

	/** 获取_selected */
	getSelected: function () {
		return this._selected;
	},
	selectNode: function (node) {

	    node = this.getNode(node);
	    if (!node) return;

	    var menu = this._getOwnerMenu(node);
	    if (!menu) return;
	    this.expandGroup(menu._ownerGroup);

	    setTimeout(function () {
	        try {
	            menu.setSelectedItem(node);
	        } catch (ex) { }
	    }, 100);

	},
	findNodes: function (fn, scope) {
	    var nodes = [];
	    scope = scope || this;
	    for (var i = 0, l = this._menus.length; i < l; i++) {
	        var items = this._menus[i].getItems();
	        var nds = [];
	        for (var j = 0, k = items.length; j < k; j++) {
	            var item = items[j];
	            if (fn && fn.call(scope, item) === true) {
	                nds.push(item);
	            }
	        }
	        nodes.addRange(nds);
	    }
	    return nodes;
	},
	getNode: function (node) {
	    for (var i = 0, l = this._menus.length; i < l; i++) {
	        var menu = this._menus[i];
	        var n = menu.getItem(node);
	        if (n) return n;
	    }
	    return null;
	},
	getList: function () {
	    var list = [];
	    for (var i = 0, l = this._menus.length; i < l; i++) {
	        var menu = this._menus[i];
	        var items = menu.getItems();
	        list.addRange(items);
	    }
	    return list;
	},
	_getOwnerMenu: function (node) {
	    if (!node) return;
	    for (var i = 0, l = this._menus.length; i < l; i++) {
	        var menu = this._menus[i];
	        var n = menu.getItem(node);
	        if (n) return menu;
	    }
	},



	/**
	 * 取得指定元素的属性JSON集合
	 * @param el DOM元素
	 * @returns JSON对象
	 */
	getAttrs: function (el) {
		var attrs = mini.OutlookMenu.superclass.getAttrs.call(this, el);

		attrs.text = el.innerHTML;
		/**
		 * onitemclick 事件当菜单项被点击时触发<br/>
		 * 支持标签配置。
		 * @name onitemclick
		 * @event
		 * @memberOf mini.OutlookMenu.prototype
		 */
		/**
		 * onitemselect 事件当菜单项被选中时触发<br/>
		 * 支持标签配置。
		 * @name onitemselect
		 * @event
		 * @memberOf mini.OutlookMenu.prototype
		 */
		mini._ParseString(el, attrs,
		["url", "textField", "urlField", "idField", "parentField", "itemsField", "iconField",
		"onitemclick", "onitemselect"]
		);
		mini._ParseBool(el, attrs,
		["resultAsTree"]
		);

		return attrs;
	},
	/**
	 * 渲染菜单时是否折叠
	 * @default true
	 */
	autoCollapse: true,

	/**
	 * 当前被选中的条目的id
	 * @default 0
	 */
	activeIndex: 0,

	/**
	 * 创建导航菜单
	 * @param tree 菜单数据
	 */
	createNavBarMenu: function (tree) {
		if (!mini.isArray(tree))
			tree = [];
		this.data = tree;

		var groups = [];
		for (var i = 0, l = this.data.length; i < l; i++) {
			var o = this.data[i];
			var group = {};
			group.title = o.text;
			group.iconCls = o.iconCls;
			groups.push(group);

			group._children = o[this.itemsField];
		}

		this.setGroups(groups);
        /**解决expandOnLoad=false失效的问题  潘正锋 2013-11-20 */
        if(this.getExpandOnLoad())
		     this.setActiveIndex(this.activeIndex);

		this._menus = [];
		for (var i = 0, l = this.groups.length; i < l; i++) {
		    var group = this.groups[i];
		    var groupBodyEl = this.getGroupBodyEl(group);

		    var menu = new mini.Menu();
		    menu._ownerGroup = group;
		    menu.set({
		        showNavArrow: false,
		        style: "width:100%;height:100%;border:0;background:none",
		        borderStyle: "border:0",
		        allowSelectItem: true,
		        items: group._children
		    });
		    menu.render(groupBodyEl);
		    menu.on("itemclick", this.__OnItemClick, this);
		    menu.on("itemselect", this.__OnItemSelect, this);

		    this._menus.push(menu);
		    delete group._children


		}

	},
	/**
	 * 折叠菜单组件实例的默认项点击事件响应函数。
	 * @param e Event
	 */
	__OnItemClick: function (e) {
		var eve = {
			item: e.item,
			htmlEvent: e.htmlEvent
		};
		this.fire("itemclick", eve);
	},
	/**
	 * 折叠菜单组件实例的默认项选中事件响应函数。
	 * @param e Event
	 */
	__OnItemSelect: function (e) {
		if (!e.item)
			return;
		for (var i = 0, l = this._menus.length; i < l; i++) {
			var menu = this._menus[i];
			if (menu != e.sender) {
				menu.setSelectedItem(null);
			}
		}
		var eve = {
			item: e.item,
			htmlEvent: e.htmlEvent
		};
		this._selected = e.item;
		this.fire("itemselect", eve);
	}
});
mini.regClass(mini.OutlookMenu, "outlookmenu");
mini.ContextMenu = function () {
    mini.ContextMenu.superclass.constructor.call(this);
}
mini.extend(mini.ContextMenu, mini.Menu, {
    uiCls: "mini-contextmenu",
    vertical: true,
    visible: false,
    _disableContextMenu: true,

    setVertical: function (value) {
        this.vertical = true;
    }
});
mini.regClass(mini.ContextMenu, 'contextmenu');
mini.DataBinding = function () {
    this._bindFields = [];
    this._bindForms = [];
    mini.DataBinding.superclass.constructor.call(this);
}

mini.extend(mini.DataBinding, mini.Component, {
    bindField: function (control, source, field, mode, convert) {
        control = mini.get(control);
        source = mini.get(source);
        if (!control || !source || !field) return;
        var bind = { control: control, source: source, field: field, convert: convert, mode: mode };
        this._bindFields.push(bind);

        source.on("currentchanged", this.__OnCurrentChanged, this);
        control.on("valuechanged", this.__OnValueChanged, this);
    },
    bindForm: function (form, source, mode, convert) {
        form = mini.byId(form);
        source = mini.get(source);
        if (!form || !source) return;

        var form = new mini.Form(form);
        var controls = form.getFields();
        for (var i = 0, l = controls.length; i < l; i++) {
            var control = controls[i];
            this.bindField(control, source, control.getName(), mode, convert);
        }
    },
    
    __OnCurrentChanged: function (e) {
        if (this._doSetting) return;
        this._doSetting = true;

        var source = e.sender;
        var record = e.record;

        
        for (var i = 0, l = this._bindFields.length; i < l; i++) {
            var bind = this._bindFields[i];
            if (bind.source != source) continue;

            var control = bind.control;
            var field = bind.field;
            if (control.setValue) {
                if (record) {
                    var value = record[field];
                    control.setValue(value);
                } else {
                    control.setValue("");
                }
            }

            if (control.setText && control.textName) {
                if (record) {
                    control.setText(record[control.textName]);
                } else {
                    control.setText("");
                }
            }
        }

        var me = this;
        setTimeout(function () {
            me._doSetting = false;
        }, 10);
    },
    __OnValueChanged: function (e) {

        if (this._doSetting) return;
        this._doSetting = true;

        var control = e.sender;
        var value = control.getValue();

     
        
        for (var i = 0, l = this._bindFields.length; i < l; i++) {
            var bind = this._bindFields[i];

            if (bind.control != control || bind.mode === false) continue;
            var source = bind.source;
            var current = source.getCurrent();
            if (!current) continue;

            var obj = {};
            obj[bind.field] = value;

            if (control.getText && control.textName) {
                obj[control.textName] = control.getText();
            }

            source.updateRow(current, obj);

        }

        var me = this;
        setTimeout(function () {
            me._doSetting = false;
        }, 10);
    }
});
mini.regClass(mini.DataBinding, "databinding");

mini.MessageBox = {
    
    
    
    
    

    alertTitle: "提醒",
    confirmTitle: "确认",
    prompTitle: "输入",
    prompMessage: "请输入内容：",
    buttonText: {
        ok: "确定", 
        cancel: "取消", 
        yes: "是", 
        no: "否"
    },

    show: function (options) {

        options = mini.copyTo({
            width: "auto",
            height: "auto",
            showModal: true,

            minWidth: 150,
            maxWidth: 800,
            minHeight: 100,
            maxHeight: 350,
            showHeader: true,

            title: "",
            titleIcon: "",
            iconCls: "",
            iconStyle: "",
            message: "",
            html: "",

            spaceStyle: "margin-right:15px",

            showCloseButton: true,
            buttons: null,
            buttonWidth: 58,
            callback: null
        }, options);

        var callback = options.callback;

        var control = new mini.Window();
        control.setShowModal(options.showModal);
        control.setShowFooter(true);
        
        control.setTitle(options.title || "");
        control.setIconCls(options.titleIcon);
        control.setShowHeader(options.showHeader);
        control.setCls("mini-messagebox");
        
        control.setShowCloseButton(options.showCloseButton);

        var id1 = control.uid + "$table", id2 = control.uid + "$content";

        var icon = '<div class="' + options.iconCls + '" style="' + options.iconStyle + '"></div>';
        var s = '<table class="mini-messagebox-table" id="' + id1 + '" style="" cellspacing="0" cellpadding="0"><tr><td>'
         + icon + '</td><td id="' + id2 + '" class="mini-messagebox-content-text">'
         + (options.message || "") + '</td></tr></table>';
        var ws = '<div class="mini-messagebox-content"></div>';
        control._bodyEl.innerHTML = ws;
        control._footerEl.innerHTML = '<div class="mini-messagebox-buttons"></div>';
        var contentEl = control._bodyEl.firstChild;

        if (options.html) {
            if (typeof options.html == "string") {
                contentEl.innerHTML = options.html;
            } else if (mini.isElement(options.html)) {
                contentEl.appendChild(options.html);
            }
        } else {
            contentEl.innerHTML = s;
        }

        control._Buttons = [];
        var buttonsEl = control._footerEl.firstChild;
        
        if (options.buttons && options.buttons.length > 0) {
            for (var i = 0, l = options.buttons.length; i < l; i++) {
                var button = options.buttons[i];
                var text = mini.MessageBox.buttonText[button];
                if (!text) text = button;

                var btn = new mini.Button();
                btn.setText(text);
                btn.setWidth(options.buttonWidth);
                btn.render(buttonsEl);
                btn.action = button;
                btn.on("click", function (e) {
                    var button = e.sender;
                    if (callback) callback(button.action);
                    /* 如果上面的回调函数中直接关闭了页面 那么下面的就会报错了,必须增加判断 pzf*/
                    if(mini)
                       mini.MessageBox.hide(control);
                });

                if (i != l - 1) {
                    btn.setStyle(options.spaceStyle);
                }

                control._Buttons.push(btn);
            }
        } else {
            buttonsEl.style.display = "none";
        }

        control.setMinWidth(options.minWidth);
        control.setMinHeight(options.minHeight);
        control.setMaxWidth(options.maxWidth);
        control.setMaxHeight(options.maxHeight);
        control.setWidth(options.width);
        control.setHeight(options.height);
        control.show();




        var width = control.getWidth();
        control.setWidth(width);
        var height = control.getHeight();
        control.setHeight(height);

        var tb = document.getElementById(id1);
        if (tb) {
            tb.style.width = "100%";
        }
        var td = document.getElementById(id2);
        if (td) {
            td.style.width = "100%";
        }
        

        var firstButton = control._Buttons[0];
        if (firstButton) {
            setTimeout(function(){
                firstButton.focus();
            },100)

        } else {
            control.focus();
        }

        control.on("beforebuttonclick", function (e) {
            if (callback) callback("close");
            e.cancel = true;
            mini.MessageBox.hide(control);
        });
        mini.on(control.el, "keydown", function (e) {
            if (e.keyCode == 27) {
                if (callback) callback("close");
                e.cancel = true;
                mini.MessageBox.hide(control);
            }
        });

        return control.uid;
    },
    hide: function (id) {
        if (!id) return;
        var control = typeof id == "object" ? id : mini.getbyUID(id);
        if (!control) return;

        
        for (var i = 0, l = control._Buttons.length; i < l; i++) {
            var button = control._Buttons[i];
            button.destroy();
        }
        control._Buttons = null;

        control.destroy();
    },
    alert: function (message, title, callback) {
        return mini.MessageBox.show($.extend({
          maxWidth : 400,
          minWidth : 250,
          buttons : [ "ok" ],
          title : mini.MessageBox.alertTitle,
          iconCls : "mini-messagebox-warning"
        }, $.isPlainObject(message) ? message : {
          message : message,
          title : title || mini.MessageBox.alertTitle,
          callback : callback
        }));
    },
    confirm: function (message, title, callback) {
        return mini.MessageBox.show({
            maxWidth: 400,
            minWidth: 250,
            title: title || mini.MessageBox.confirmTitle,
            buttons: ["ok", "cancel"],
            message: message,
            iconCls: "mini-messagebox-question",
            callback: callback
        });
    },
    prompt: function (message, title, callback, multi) {
        var id = "prompt$" + new Date().getTime();
        var s = message || mini.MessageBox.promptMessage;
        var $html = jQuery('<div></div>');
        var obj;
        var height;

        if (multi) {
            obj = new mini.TextArea();
            obj.setWidth("230");
            obj.setHeight("70");
            height = "190";

        } else {
            obj = new mini.TextBox();
            obj.setWidth("230");
            height = "140";
            s = s + '<br/>';

        }

        var uid = mini.MessageBox.show({
            title: title || mini.MessageBox.promptTitle,
            buttons: ["ok", "cancel"],
            width: 280,
            height:height,
            html: '<div id="pzf" style="overflow:auto;padding:5px;padding-left:10px;">' + s  + '</div>',
            callback: function (action) {
                if (callback) callback(action, obj.getValue());
            }
        });
        obj.render(jQuery('#pzf')[0]);
        obj.focus();
        return uid;
    },
    loading: function (message, title) {
        return mini.MessageBox.show({
            maxWidth: 400,
            minHeight: 50,
            title: title,
            showCloseButton: false,
            message: message,
            iconCls: "mini-messagebox-waiting"
        });
    },
    showTips: function (options) {
        var $ = jQuery;

        options = $.extend({
            content: '',
            state: '',
            x: 'center',
            y: 'top',
            offset: [10, 10],
            fixed: true,
            timeout: 2000
        }, options);

        var cls = 'mini-tips-' + options.state;
        var html = '<div class="mini-tips ' + cls + '">' + options.content + '</div>';
        var jq = $(html).appendTo(document.body);

        options.el = jq[0];
        options.timeoutHandler = function () {
            jq.slideUp();
            setTimeout(function () {
                jq.remove();
            }, 2000);
        }

        mini.showAt(options);
        jq.hide().slideDown();

    }

};
mini.alert = mini.MessageBox.alert;
mini.confirm = mini.MessageBox.confirm;
mini.prompt = mini.MessageBox.prompt;
mini.loading = mini.MessageBox.loading;
mini.showMessageBox = mini.MessageBox.show;
mini.hideMessageBox = mini.MessageBox.hide;
mini.showTips = mini.MessageBox.showTips;


mini.NavBar = function () {
    mini.NavBar.superclass.constructor.call(this);
}
mini.extend(mini.NavBar, mini.OutlookBar, {
    uiCls: "mini-navbar"
});
mini.regClass(mini.NavBar, "navbar");
mini.NavBarMenu = function () {
    mini.NavBarMenu.superclass.constructor.call(this);
}
mini.extend(mini.NavBarMenu, mini.OutlookMenu, {
    uiCls: "mini-navbarmenu"
});
mini.regClass(mini.NavBarMenu, "navbarmenu");
/**
 * @fileOverview Panel.js文件定义了。
 * @requires jQuery
 */


/**
 * @class Panel 是mini UI中的面板组件
 * @constructor
 * @extends mini.Container
 * @requires mini.Container
 * @version 1.0
 */

mini.Panel = function () {
    this._initButtons();
    mini.Panel.superclass.constructor.call(this);

    if (this.url) this.setUrl(this.url);

    this._contentEl = this._bodyEl;

    this._doVisibleEls();

    this._Resizer = new mini._Resizer(this);

    this._doTools();
}
mini.extend(mini.Panel, mini.Container, {
    width: 250,
    title: "",
    iconCls: "",
    iconStyle: "",

    allowResize: false,

    url: "",

    refreshOnExpand: false,
    maskOnLoad: true,

    showCollapseButton: false,
    showCloseButton: false,
    closeAction: "display",
    showHeader: true,
    showToolbar: false,
    showFooter: false,

    headerCls: "",
    headerStyle: "",
    bodyCls: "",
    bodyStyle: "",
    footerCls: "",
    footerStyle: "",
    toolbarCls: "",
    toolbarStyle: "",

    minWidth: 180,
    minHeight: 100,
    maxWidth: 5000,
    maxHeight: 3000,

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var _allowLayout = this._allowLayout;
        this._allowLayout = false;

        var toolbar = kv.toolbar;
        delete kv.toolbar;
        var footer = kv.footer;
        delete kv.footer;
        var url = kv.url;
        delete kv.url;

        mini.Panel.superclass.set.call(this, kv);

        if (toolbar) {
            this.setToolbar(toolbar);
        }
        if (footer) {
            this.setFooter(footer);
        }
        if (url) {
            this.setUrl(url);
        }

        this._allowLayout = _allowLayout;
        this.doLayout();

        return this;
    },

    uiCls: "mini-panel",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-panel";

        var s = '<div class="mini-panel-border">'
            + '<div class="mini-panel-header" ><div class="mini-panel-header-inner" ><span class="mini-panel-icon"></span><div class="mini-panel-title" ></div><div class="mini-tools" ></div></div></div>'
            + '<div class="mini-panel-viewport">'
                + '<div class="mini-panel-toolbar"></div>'
                + '<div class="mini-panel-body" ></div>'
                + '<div class="mini-panel-footer"></div>'
                + '<div class="mini-resizer-trigger"></div>'
            + '</div>'
            + '</div>';
        this.el.innerHTML = s;

        this._borderEl = this.el.firstChild;
        this._headerEl = this._borderEl.firstChild;
        this._viewportEl = this._borderEl.lastChild;

        this._toolbarEl = mini.byClass('mini-panel-toolbar', this.el);
        this._bodyEl = mini.byClass('mini-panel-body', this.el);
        this._footerEl = mini.byClass('mini-panel-footer', this.el);
        this._resizeGridEl = mini.byClass('mini-resizer-trigger', this.el);

        var hi = mini.byClass('mini-panel-header-inner', this.el);
        this._iconEl = mini.byClass('mini-panel-icon', this.el);
        this._titleEl = mini.byClass('mini-panel-title', this.el);
        this._toolsEl = mini.byClass('mini-tools', this.el);

        mini.setStyle(this._bodyEl, this.bodyStyle);


        this._doTitle();
    },
    destroy: function (removeEl) {

        this._doRemoveIFrame();
        this._iframeEl = null;
        if (this._headerEl) {
            mini.clearEvent(this._headerEl);
            this._borderEl.removeChild(this._headerEl);
            this._headerEl = null;
        }
        if (this._viewportEl) {
            mini.clearEvent(this._viewportEl);
            this._borderEl.removeChild(this._viewportEl);
            this._viewportEl = null;
        }
        if (this._borderEl) {
            mini.clearEvent(this._borderEl);
            this.el.removeChild(this._borderEl);
            this._borderEl = null;
        }
        if (this._toolbarEl) {
            $(this._toolbarEl).remove();
            this._toolbarEl = null;
        }
        if (this._bodyEl) {
            $(this._bodyEl).remove();
            this._bodyEl = null;
        }
        if (this._footerEl) {
            $(this._footerEl).remove();
            this._footerEl = null;
        }
        if (this._resizeGridEl) {
            $(this._resizeGridEl).remove();
            this._resizeGridEl = null;
        }
        if (this._iconEl) {
            $(this._iconEl).remove();
            this._iconEl = null;
        }
        if (this._titleEl) {
            $(this._titleEl).remove();
            this._titleEl = null;
        }
        if (this._toolsEl) {
            $(this._toolsEl).remove();
            this._toolsEl = null;
        }

        mini.Panel.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(this.el, "click", this.__OnClick, this);
        }, this);
    },

    _doVisibleEls: function () {
        this._headerEl.style.display = this.showHeader ? "" : "none";
        this._toolbarEl.style.display = this.showToolbar ? "" : "none";
        this._footerEl.style.display = this.showFooter ? "" : "none";
    },
    doLayout: function () {
        if (!this.canLayout()) return;

        this._resizeGridEl.style.display = this.allowResize ? "" : "none";


        var autoHeight = this.isAutoHeight();
        var autoWidth = this.isAutoWidth();

        var w = mini.getWidth(this._viewportEl, true);
        var elWidth = w;



        if (!autoHeight) {
            var vh = this.getViewportHeight();
            mini.setHeight(this._viewportEl, vh);

            var bh = this.getBodyHeight(true);
            mini.setHeight(this._bodyEl, bh);
        } else {
            this._viewportEl.style.height = "auto";
            this._bodyEl.style.height = "auto";
        }

        mini.layout(this._borderEl);

        this.fire("layout");
    },
    deferLayout: function (time) {
        if (!time) time = 10;
        if (this._layoutTimer) return;
        var me = this;
        this._layoutTimer = setTimeout(function () {
            me._layoutTimer = null;
            me.doLayout();
        }, time);
    },
    _stopLayout: function () {
        clearTimeout(this._layoutTimer);
        this._layoutTimer = null;
    },
    getViewportWidth: function (content) {
        return mini.getWidth(this._viewportEl, content);
    },
    getViewportHeight: function (content) {
        var h = this.getHeight(true) - this.getHeaderHeight();
        if (content) {
            var padding2 = mini.getPaddings(this._viewportEl);
            var border2 = mini.getBorders(this._viewportEl);
            var margin2 = mini.getMargins(this._viewportEl);
            if (jQuery.boxModel) {
                h = h - padding2.top - padding2.bottom - border2.top - border2.bottom;
            }
            h = h - margin2.top - margin2.bottom;
        }
        return h;
    },
    getBodyHeight: function (content) {
        var h = this.getViewportHeight();
        var h = h - this.getToolbarHeight() - this.getFooterHeight();
        if (content) {
            var padding = mini.getPaddings(this._viewportEl);
            var border = mini.getBorders(this._viewportEl);
            var margin = mini.getMargins(this._viewportEl);
            if (jQuery.boxModel) {
                h = h - padding.top - padding.bottom - border.top - border.bottom;
            }
            h = h - margin.top - margin.bottom;
        }

        if (h < 0) h = 0;
        return h;
    },
    getHeaderHeight: function () {
        var h = this.showHeader ? jQuery(this._headerEl).outerHeight() : 0;
        return h;
    },
    getToolbarHeight: function () {
        var h = this.showToolbar ? jQuery(this._toolbarEl).outerHeight() : 0;
        return h;
    },
    getFooterHeight: function () {
        var h = this.showFooter ? jQuery(this._footerEl).outerHeight() : 0;
        return h;
    },

    setHeaderStyle: function (value) {
        this.headerStyle = value;
        mini.setStyle(this._headerEl, value);
        this.doLayout();
    },
    getHeaderStyle: function () {
        return this.headerStyle;
    },
    setBodyStyle: function (value) {
        this.bodyStyle = value;
        mini.setStyle(this._bodyEl, value);
        this.doLayout();
    },
    getBodyStyle: function () {
        return this.bodyStyle;
    },
    setToolbarStyle: function (value) {
        this.toolbarStyle = value;
        mini.setStyle(this._toolbarEl, value);
        this.doLayout();
    },
    getToolbarStyle: function () {
        return this.toolbarStyle;
    },
    setFooterStyle: function (value) {
        this.footerStyle = value;
        mini.setStyle(this._footerEl, value);
        this.doLayout();
    },
    getFooterStyle: function () {
        return this.footerStyle;
    },
    setHeaderCls: function (cls) {
        jQuery(this._headerEl).removeClass(this.headerCls);
        jQuery(this._headerEl).addClass(cls);
        this.headerCls = cls;
        this.doLayout();
    },
    getHeaderCls: function () {
        return this.headerCls;
    },
    setBodyCls: function (cls) {
        jQuery(this._bodyEl).removeClass(this.bodyCls);
        jQuery(this._bodyEl).addClass(cls);
        this.bodyCls = cls;
        this.doLayout();
    },
    getBodyCls: function () {
        return this.bodyCls;
    },
    setToolbarCls: function (cls) {
        jQuery(this._toolbarEl).removeClass(this.toolbarCls);
        jQuery(this._toolbarEl).addClass(cls);
        this.toolbarCls = cls;
        this.doLayout();
    },
    getToolbarCls: function () {
        return this.toolbarCls;
    },
    setFooterCls: function (cls) {
        jQuery(this._footerEl).removeClass(this.footerCls);
        jQuery(this._footerEl).addClass(cls);
        this.footerCls = cls;
        this.doLayout();
    },
    getFooterCls: function () {
        return this.footerCls;
    },
    _doTitle: function () {
        this._titleEl.innerHTML = this.title;

        this._iconEl.style.display = (this.iconCls || this.iconStyle) ? "inline" : "none";
        this._iconEl.className = "mini-panel-icon " + this.iconCls;
        mini.setStyle(this._iconEl, this.iconStyle);

    },
    setTitle: function (value) {
        this.title = value;
        this._doTitle();
    },
    getTitle: function () {
        return this.title;
    },
    setIconCls: function (value) {
        this.iconCls = value;
        this._doTitle();
    },
    getIconCls: function () {
        return this.iconCls;
    },
    _doTools: function () {
        var s = "";
        for (var i = this.buttons.length - 1; i >= 0; i--) {
            var button = this.buttons[i];
            s += '<span id="' + i + '" class="' + button.cls + ' '
                + (button.enabled ? "" : "mini-disabled") + '" style="'
                + button.style + ';' + (button.visible ? "" : "display:none;") + '"></span>';
        }
        this._toolsEl.innerHTML = s;
    },
    setShowCloseButton: function (value) {
        this.showCloseButton = value;
        var button = this.getButton("close");
        button.visible = value;
        this._doTools();
    },
    getShowCloseButton: function () {
        return this.showCloseButton;
    },
    setCloseAction: function (value) {
        this.closeAction = value;
    },
    getCloseAction: function () {
        return this.closeAction;
    },
    setShowCollapseButton: function (value) {
        this.showCollapseButton = value;
        var button = this.getButton("collapse");
        button.visible = value;
        this._doTools();
    },
    getShowCollapseButton: function () {
        return this.showCollapseButton;
    },
    setShowHeader: function (value) {
        this.showHeader = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    getShowHeader: function () {
        return this.showHeader;
    },
    setShowToolbar: function (value) {
        this.showToolbar = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    getShowToolbar: function () {
        return this.showToolbar;
    },
    setShowFooter: function (value) {
        this.showFooter = value;
        this._doVisibleEls();
        this.deferLayout();
    },
    getShowFooter: function () {
        return this.showFooter;
    },

    __OnClick: function (e) {
        if (mini.isAncestor(this._headerEl, e.target)) {
            var toolsEl = mini.findParent(e.target, 'mini-tools');
            if (toolsEl) {
                var button = this.getButton(parseInt(e.target.id));
                if (button) {
                    this._OnButtonClick(button, e);
                }
            }
        }
    },
    _OnButtonClick: function (button, htmlEvent) {
        var e = {
            button: button,
            index: this.buttons.indexOf(button),
            name: button.name.toLowerCase(),
            htmlEvent: htmlEvent,
            cancel: false
        };
        this.fire("beforebuttonclick", e);


        try {
            if (e.name == "close" && this.closeAction == "destroy" && this._iframeEl && this._iframeEl.contentWindow) {
                var ret = true;
                if (this._iframeEl.contentWindow.CloseWindow) {
                    ret = this._iframeEl.contentWindow.CloseWindow("close");
                } else if (this._iframeEl.contentWindow.CloseOwnerWindow) {
                    ret = this._iframeEl.contentWindow.CloseOwnerWindow("close");
                }
                if (ret === false) {
                    e.cancel = true;
                }
            }
        } catch (ex) { }

        if (e.cancel == true) return e;

        this.fire("buttonclick", e);

        if (e.name == "close") {
            if (this.closeAction == "destroy") {
                this.__HideAction = "close";
                this.destroy();
            } else {
                this.hide();
            }
        }
        if (e.name == "collapse") {
            this.toggle();
            if (this.refreshOnExpand && this.expanded && this.url) {
                this.reload();
            }
        }
        return e;
    },
    onButtonClick: function (fn, scope) {
        this.on("buttonclick", fn, scope);
    },


    _initButtons: function () {
        this.buttons = [];

        var close = this.createButton({ name: "close", cls: "mini-tools-close", visible: this.showCloseButton });
        this.buttons.push(close);

        var collapse = this.createButton({ name: "collapse", cls: "mini-tools-collapse", visible: this.showCollapseButton });
        this.buttons.push(collapse);
    },
    createButton: function (options) {
        var button = mini.copyTo({
            name: "",
            cls: "",
            style: "",
            visible: true,
            enabled: true,
            html: ""
        }, options);
        return button;
    },
    addButton: function (button, index) {
        if (typeof button == "string") {
            button = { iconCls: button };
        }
        button = this.createButton(button);
        if (typeof index != "number") index = this.buttons.length;
        this.buttons.insert(index, button);
        this._doTools();
    },
    updateButton: function (index, options) {
        var button = this.getButton(index);
        if (!button) return;
        mini.copyTo(button, options);
        this._doTools();
    },
    removeButton: function (index) {
        var button = this.getButton(index);
        if (!button) return;
        this.buttons.remove(button);
        this._doTools();
    },
    getButton: function (index) {
        if (typeof index == "number") {
            return this.buttons[index];
        } else {
            for (var i = 0, l = this.buttons.length; i < l; i++) {
                var button = this.buttons[i];
                if (button.name == index) return button;
            }
        }
    },
    setBody: function (value) {
        __mini_setControls(value, this._bodyEl, this);
    },
    set_bodyParent: function (value) {

    },
    setToolbar: function (value) {
        __mini_setControls(value, this._toolbarEl, this);
    },
    setFooter: function (value) {
        __mini_setControls(value, this._footerEl, this);
    },
    getHeaderEl: function () {
        return this._headerEl;
    },
    getToolbarEl: function () {
        return this._toolbarEl;
    },
    getBodyEl: function () {
        return this._bodyEl;
    },
    getFooterEl: function () {
        return this._footerEl;
    },
    getIFrameEl: function (index) {
        return this._iframeEl;
    },

    _getMaskWrapEl: function () {
        return this._bodyEl;
    },
    _doRemoveIFrame: function (removeAll) {
        if (this._iframeEl) {
            var iframe = this._iframeEl;
            /*
            iframe.onload = function () { };
            jQuery(iframe).unbind("load");
            iframe.src = "";
            try {
                iframe.contentWindow.document.write("");
                iframe.contentWindow.document.close();
            } catch (ex) { }
            */
            if (iframe._ondestroy) iframe._ondestroy();

            try {
                this._iframeEl.parentNode.removeChild(this._iframeEl);
                this._iframeEl.removeNode(true);
            } catch (ex) { }
        }
        this._iframeEl = null;





        if (removeAll === true) {
            mini.removeChilds(this._bodyEl);
        }
    },
    _deferLoadingTime: 80,
    _doLoad: function () {

        this._doRemoveIFrame(true);

        var st = new Date();
        var sf = this;

        this.loadedUrl = this.url;
        if (this.maskOnLoad) this.loading();


        jQuery(this._bodyEl).css("overflow", "hidden");

        var iframe = mini.createIFrame(this.url,
            function (_iframe, firstLoad) {
                var t = (st - new Date()) + sf._deferLoadingTime;

                if (t < 0) t = 0;
                setTimeout(function () {
                    sf.unmask();
                }, t);


                try {
                    sf._iframeEl.contentWindow.Owner = sf.Owner;
                    sf._iframeEl.contentWindow.CloseOwnerWindow = function (action) {

                        sf.__HideAction = action;


                        var ret = true;
                        if (sf.__onDestroy) ret = sf.__onDestroy(action);
                        if (ret === false) {
                            return false;
                        }

                        var e = {
                            iframe: sf._iframeEl,
                            action: action
                        };

                        sf.fire("unload", e);

                        setTimeout(function () {
                            sf.destroy();
                        }, 10);

                    }
                } catch (e) { }
                    if (sf.__onLoad) sf.__onLoad();

                    var e = {
                        iframe: sf._iframeEl
                    };


                    sf.fire("load", e);
            }
        );
        this._bodyEl.appendChild(iframe);
        this._iframeEl = iframe;

    },

    load: function (url, onload, ondestroy) {
        this.setUrl(url, onload, ondestroy);
    },
    reload: function () {
        this.setUrl(this.parseUrl(this.url));
    },
    setUrl: function (value, onload, ondestroy) {
        this.url = value;
        this.__onLoad = onload;
        this.__onDestroy = ondestroy;
        if (this.expanded) {
            this._doLoad();
        }
    },
    getUrl: function () {
        return this.url;
    },
    setRefreshOnExpand: function (value) {
        this.refreshOnExpand = value;
    },
    getRefreshOnExpand: function () {
        return this.refreshOnExpand;
    },
    setMaskOnLoad: function (value) {
        this.maskOnLoad = value;
    },
    getMaskOnLoad: function (value) {
        return this.maskOnLoad;
    },
    setAllowResize: function (value) {
        if (this.allowResize != value) {
            this.allowResize = value;
            this.doLayout();
        }
    },
    getAllowResize: function () {
        return this.allowResize;
    },

    expanded: true,
    setExpanded: function (value) {
        if (this.expanded != value) {
            this.expanded = value;
            if (this.expanded) {
                this.expand();
            } else {
                this.collapse();
            }
        }
    },
    toggle: function () {
        if (this.expanded) {
            this.collapse();
        } else {
            this.expand();
        }
    },
    collapse: function () {
        this.expanded = false;

        this._height = this.el.style.height;
        this.el.style.height = "auto";
        this._viewportEl.style.display = "none";

        mini.addClass(this.el, "mini-panel-collapse");
        this.doLayout();
    },
    expand: function () {
        this.expanded = true;

        this.el.style.height = this._height;
        this._viewportEl.style.display = "block";
        delete this._height;

        mini.removeClass(this.el, "mini-panel-collapse");


        if (this.url && this.url != this.loadedUrl) {
            this._doLoad();
        }
        this.doLayout();
    },

    getAttrs: function (el) {
        var attrs = mini.Panel.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["title", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle",
            "footerCls", "footerStyle", "toolbarCls", "toolbarStyle", "footer", "toolbar",
            "url", "closeAction", "loadingMsg",
            "onbeforebuttonclick", "onbuttonclick", "onload"
            ]
        );
        mini._ParseBool(el, attrs,
            ["allowResize", "showCloseButton", "showHeader", "showToolbar", "showFooter",
            "showCollapseButton", "refreshOnExpand", "maskOnLoad", "expanded"
            ]
        );

        var cs = mini.getChildNodes(el, true);
        for (var i = cs.length - 1; i >= 0; i--) {
            var node = cs[i];
            var property = jQuery(node).attr("property");
            if (!property) continue;
            property = property.toLowerCase();
            if (property == "toolbar") {
                attrs.toolbar = node;
            } else if (property == "footer") {
                attrs.footer = node;
            }
        }
        attrs.body = cs;

        return attrs;
    }


});
mini.regClass(mini.Panel, "panel");





/**
 * 文件中定义了文本录入框组件。
 * @fileOverview TextBox.js
 * @author 殷文旭
 */

mini = mini || {};

/**
 * TextBox 是mini UI中的文本录入框框组件，构造函数中调用了 ValidatorBase 方法
 * @class mini.TextBox
 * @constructor
 * @extends mini.ValidatorBase
 * @requires mini.ValidatorBase
 * @property allowInput {Boolean} 是否可录入标志
 */
mini.TextBox = function () {
    mini.TextBox.superclass.constructor.call(this);
}
mini.extend(mini.TextBox, mini.ValidatorBase,{

    /**
	 * 组件的name属性，与保存值的标签的name属性值一致
	 * @type String
	 * @default ""
	 */
    name: "",
    /**
	 * 标记，代表这是一个form组件
	 * @type Boolean
	 * @default true
	 */
    formField: true,
    /**
	 * 开关，获取焦点时是否自动选中文本
	 * @type Boolean
	 * @default false
	 */
    selectOnFocus: false,
    minWidth: 10,

    /**
	 * 文本框最小高度
	 * @type Number
	 * @default 15
	 */
    minHeight: 15,
    /**
	 * 文本最大可录入长度
	 * @type Number
	 * @default 1000
	 */
    maxLength: 5000,
    /**
	 * 空值时显示的文本，用于文本框内提示
	 * @type String
	 * @default ""
	 */
    emptyText: "",
    /**
	 * 文本
	 * @type String
	 * @default ""
	 */
    text: "",
    /**
	 * 值，注，此组件是 KEY-VALUE 形式组件，也就是说组件有两个值，一个用于展现，一个用于后台处理。
	 * 这里的值是是实际传递到后台的值。
	 * @type String
	 * @default ""
	 */
    value: "",
    /**
	 * 默认值
	 * @type String
	 * @default ""
	 */
    defaultValue: "",
    /**
	 * 组件宽度
	 * @type Number
	 * @default 125
	 */
    width: 125,
    /**
	 * 组件高度
	 * @type Number
	 * @default 21
	 */
    height: 21,
    /**
	 * 空值时的样式
	 */
    _emptyCls: "mini-textbox-empty",
    /**
	 * 获取焦点时的样式
	 */
    _focusCls: "mini-textbox-focus",
    /**
	 * 不可用样式
	 */
    _disabledCls: "mini-textbox-disabled",
    /**
	 * 组将样式类
	 * @type String
	 * @default "mini-textbox"
	 */
    uiCls: "mini-textbox",
    /**
	 * 输入框类型，包括两种选择"text","textarea"
	 * @default "text"
	 */
    _InputType: "text",

    /**
	 * 创建组件HTML结构，并绑定给组件实例。
	 * @default
	 */
    _create: function () {

        var html = '<input type="' + this._InputType + '" class="mini-textbox-input" autocomplete="off"/>';
        if (this._InputType == "textarea") {
            html = '<textarea class="mini-textbox-input" autocomplete="off"/></textarea>';
        }
        html = '<span class="mini-textbox-border">' + html + '</span>';
        html += '<input type="hidden"/>';

        this.el = document.createElement("span");
        this.el.className = "mini-textbox";
        this.el.innerHTML = html;

        this._borderEl = this.el.firstChild;
        this._textEl = this._borderEl.firstChild;
        this._valueEl = this.el.lastChild;

        this._doEmpty();

    },
    /**
	 * 设置组件初始化完成后的需要执行的回调函数。
	 * 通常组件的非结构和样式相关操作都绑定在这里，这样可以提前绘制完成组件.
	 */
    _initEvents: function () {
        mini._BindEvents(function () {
            mini_onOne(this._textEl, "drop", this.__OnDropText, this);
            mini_onOne(this._textEl, "change", this.__OnInputTextChanged, this);
            mini_onOne(this._textEl, "focus", this.__OnFocus, this);
            mini_onOne(this.el, "mousedown", this.__OnMouseDown, this);
            /**增加onpaste的支持 潘正锋 2013-10-12*/
            mini_onOne(this._textEl, "paste", this.__OnPaste, this);
            var v = this.value;
            /**原先是this.value=null,导致setValue方法中的if语句为真，改为“”，潘正锋 2013-05-06   */
            this.value = "";
            this.setValue(v);


        }, this);
        this.on("validation", this.__OnValidation, this);

    },
    /**
	 * 文本录入框的事件是否已经绑定。
	 */
    _inputEventsInited: false,
    /**
	 * 为录入框元素绑定默认事件
	 */
    _initInputEvents: function () {
        if (this._inputEventsInited)
            return;
        this._inputEventsInited = true;

        mini.on(this._textEl, "blur", this.__OnBlur, this);
        mini.on(this._textEl, "keydown", this.__OnInputKeyDown, this);
        mini.on(this._textEl, "keyup", this.__OnInputKeyUp, this);
        mini.on(this._textEl, "keypress", this.__OnInputKeyPress, this);
    },
    /**
	 * 析构函数
	 */
    destroy: function (removeEl) {
        if (this.el) {
            this.el.onmousedown = null;
        }
        if (this._textEl) {
            this._textEl.ondrop = null;
            this._textEl.onchange = null;
            this._textEl.onfocus = null;
            
            this._textEl.placeholder = null;
            this._textEl.onpropertychange = null;
            if(this._textEl._placeholder_label){
                this._textEl._placeholder_label.onmousedown = null;
                this._textEl._placeholder_label.parentNode.removeChild(this._textEl._placeholder_label);
                this._textEl._placeholder_label = null;
            }

            mini.clearEvent(this._textEl);
            this._textEl.parentNode.removeChild(this._textEl);

            this._textEl = null;
           
        }
        if (this._borderEl) {
            mini.clearEvent(this._borderEl);
            this._borderEl.parentNode.removeChild(this._borderEl);
            this._borderEl = null;
        }
        if (this._valueEl) {
            mini.clearEvent(this._valueEl);
            this._valueEl.parentNode.removeChild(this._valueEl);
            this._valueEl = null;
        }
        if (this._errorIconEl) {
            mini.clearEvent(this._errorIconEl);
            this._errorIconEl.parentNode.removeChild(this._errorIconEl);
            this._errorIconEl = null;
        }
        
        mini.TextBox.superclass.destroy.call(this, removeEl);
    },
    /**
	 * 调整组件布局。
	 */
    doLayout: function () {


    },
    /**
	 * 设置Height，为textarea模式时有效
	 * @param value {Number}
	 */
    setHeight: function (value) {
        if (parseInt(value) == value)
            value += "px";
        this.height = value;
        if (this._InputType == "textarea") {
            this.el.style.height = value;
            this.doLayout();
        }
    },
    /**
	 * 设置组件name属性
	 * @param value {String}
	 */
    setName: function (value) {
        if (this.name != value) {
            this.name = value;
            if (this._valueEl) mini.setAttr(this._valueEl, "name", this.name);

        }
    },
    /**
	 * 设置值
	 * @param value {String}
     * @param valid {Boolean}  是否触发校验
	 */
    setValue: function (value,firechangedevent) {
        if (value === null || value === undefined)
            value = "";
        value = String(value);
        if (value.length > this.maxLength) {
            value = value.substring(0, this.maxLength);
            /**解决ie下  长度校验在第二次粘贴后失效的问题  潘正锋 2013-10-14*/
            this._textEl.value = value;
        }
        if (this.value !== value) {
            this.value = value;
            this._valueEl.value = this._textEl.value = value;
            this._doEmpty();

            /* 解决setValue不触发valuechanged事件的问题 赵美丹 2012-01-17  */
            /* when call the setValue("") method,the valid event will be trigger,cause the error icon show pzf 2014-04 */
            if(firechangedevent === undefined)
                firechangedevent = true;
            if(firechangedevent)
               this._OnValueChanged();
        }
    },
    /**
	 * 获取值
	 * @returns value {String}
	 */
    getValue: function () {

        return this.value;
    },
    /**
	 * 获取表单值
	 * @returns value {String}
	 */
    getFormValue: function () {
        value = this.value;
        if (value === null || value === undefined)
            value = "";
        return String(value);
    },
    /**
	 * 设置是否可录入开关属性
	 * @param value {Boolean}
	 */
    setAllowInput: function (value) {
        if (this.allowInput != value) {
            this.allowInput = value;
            this.doUpdate();
        }
    },
    /**
	 * 获取是否可录入开关属性值
	 * @returns value {Boolean}
	 */
    getAllowInput: function () {
        return this.allowInput;
    },
    _placeholdered: false,
    /**
	 * 设置录入框为空时的样式
	 */
    _doEmpty: function () {
        this._textEl.placeholder = this.emptyText;
        if (this.emptyText) {
            mini._placeholder(this._textEl);
        }

    },
    /**
	 * 设置值为空时的文本。
	 * @param value {String}
	 */
    setEmptyText: function (value) {
        if (this.emptyText != value) {
            this.emptyText = value;
            this._doEmpty();
        }
    },
    /**
	 * 获取值为空时的文本
	 * @returns emptyText {String}
	 */
    getEmptyText: function () {
        return this.emptyText;
    },
    /**
	 * 设置最大可录入长度
	 * @param value {Number}
	 */
    setMaxLength: function (value) {
        this.maxLength = value;

        mini.setAttr(this._textEl, "maxLength", value);
        if (this._InputType == "textarea" && mini.isIE) {
            mini.on(this._textEl, "keypress", this.__OnMaxLengthKeyUp, this);
        }
    },
    /**
	 * 用于限定用户录入文本数目的时间相应函数。
	 */
    __OnMaxLengthKeyUp: function (e) {
        if (this._textEl.value.length >= this.maxLength) {
            e.preventDefault();
        }
    },
    /**
	 * 获取最大可录入长度
	 * @returns value {Number}
	 */
    getMaxLength: function () {
        return this.maxLength;
    },
    /**
	 * 设置是否只读
	 * @param value {Boolean}
	 */
    setReadOnly: function (value) {
        if (this.readOnly != value) {
            this.readOnly = value;
            this.doUpdate();
        }
    },
    /**
	 * 设置是否可用
	 * @param value {Boolean}
	 */
    setEnabled: function (value) {
        if (this.enabled != value) {
            this.enabled = value;
            this.doUpdate();
            this._tryValidate();
        }
    },
    /**
	 * 更新组件是否可用，是否必录，是否只读等样式
	 */
    doUpdate: function () {
        if (this.enabled) {
            this.removeCls(this._disabledCls);
        } else {
            this.addCls(this._disabledCls);
        }
        if (this.isReadOnly() || this.allowInput == false) {
            this._textEl.readOnly = true;
            mini.addClass(this.el, "mini-textbox-readOnly");
        } else {

            this._textEl.readOnly = false;
            mini.removeClass(this.el, "mini-textbox-readOnly");
        }
        if (this.required) {
            this.addCls(this._requiredCls);
        } else {
            this.removeCls(this._requiredCls);
        }

        if (this.enabled) {
            this._textEl.disabled = false;
        } else {
            this._textEl.disabled = true;
        }
    },
    /**
	 * 使组件获取焦点
	 */
    focus: function () {
        try {
            this._textEl.focus();
        } catch (e) {
        }
    },
    /**
	 * 使组件失去焦点
	 */
    blur: function () {
        try {
            this._textEl.blur();
        } catch (e) {
        }
    },
    /**
	 * 选中文本
	 */
    selectText: function () {
        var me = this;
        function doSelect() {
            try {
                me._textEl.select();
            } catch (ex) { }
        }
        doSelect();
        setTimeout(function () {
            doSelect();
        }, 30);
    },
    /**
	 * 获取录入框元素
	 * @returns {Object}
	 */
    getTextEl: function () {
        return this._textEl;
    },
    getInputText: function () {
        return this._textEl.value;
    },
    /**增加此方法来设置输入框的值 潘正锋 2013-08-24*/
    setInputText: function (value) {
        return this._textEl.value = value;
    },
    /**
	 * 置获取焦点时是否自动选中文本
	 * @param value {Boolean} true/false
	 */
    setSelectOnFocus: function (value) {
        this.selectOnFocus = value;
    },
    /**
	 * 获取，获取焦点时是否自动选中文本
	 * @returns {Boolean} true/false
	 */
    getSelectOnFocus: function (value) {
        return this.selectOnFocus;
    },
    _errorIconEl: null,

    /**
	 * 获取错误图标元素
	 * @returns DOMObject
	 */
    getErrorIconEl: function () {
        if (!this._errorIconEl) {
            this._errorIconEl = mini.append(this.el, '<span class="mini-errorIcon"></span>');
        }
        return this._errorIconEl;
    },
    /**
	 * 删除错误图标元素
	 */
    _RemoveErrorIcon: function () {
        if (this._errorIconEl) {
            var el = this._errorIconEl;
            jQuery(el).remove();
        }
        this._errorIconEl = null;
    },
    /**
	 * 默认鼠标左键按下事件的响应函数
	 */
    __OnMouseDown: function (e) {

        var sf = this;
        if (!mini.isAncestor(this._textEl, e.target)) {
            setTimeout(function () {
                sf.focus();
                mini.selectRange(sf._textEl, 1000, 1000);
            }, 1);
        } else {
            setTimeout(function () {
                try {
                    sf._textEl.focus();
                } catch (ex) {
                }
            }, 1);
        }
    },
    /**新增onpaste事件的支持 潘正锋 2013-10-12*/
    __OnPaste: function (e) {
        var self = this;
        setTimeout(function () {
            self.fire("paste", {
                htmlEvent: e, inputText: self.getInputText()
            });
        }, 1);
    },
    /**
	 * change事件的默认响应函数。
	 */
    __OnInputTextChanged: function (e, valid) {

        var value = this.value;
        this.setValue(this._textEl.value);

        if (value !== this.getValue() || valid === true) {
        }
    },
    __OnDropText: function (e) {
        var me = this;
        setTimeout(function () {
            me.__OnInputTextChanged(e);
        }, 0);
    },
    __OnInputKeyDown: function (e) {
        var ex = { htmlEvent: e };
        this.fire("keydown", ex);
  
        if(ex.cancel) {
            return false;
        }

        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }
        if (e.keyCode == 13 || e.keyCode == 9) {

            if (this._InputType == "textarea" && e.keyCode == 13) {
            }
            else {
                this.__OnInputTextChanged(null, true);
                if (e.keyCode == 13) {
                    var me = this;
                    me.fire("enter", ex);


                }
            }

        }

    },
    __OnInputKeyUp: function (e) {
        var ex = { htmlEvent: e };
        this.fire("keyup", ex);
        if(ex.cancel) {
            return false;
        }
    },
    __OnInputKeyPress: function (e) {
        var ex = { htmlEvent: e };
        this.fire("keypress", ex);
        if(ex.cancel) {
            return false;
        }
    },
    /**
	 * 默认获取焦点事件响应函数
	 */
    __OnFocus: function (e) {

        this.doUpdate();

        if (this.isReadOnly()) {
            return;
        }
        this._focused = true;
        this.addCls(this._focusCls);
        this._initInputEvents();
         
        if (this.selectOnFocus) {
            this.selectText();
        }
        this.fire("focus", {
            htmlEvent: e
        });
    },
    /**
	 * 默认失去焦点事件响应函数
	 */
    __OnBlur: function (e) {

        this._focused = false;
        var sf = this;
        setTimeout(function () {
            if (sf._focused == false) {
                sf.removeCls(sf._focusCls);
            }
        }, 2);
       
        this.fire("blur", {
            htmlEvent: e
        });
        if (this.validateOnLeave) {
            this._tryValidate();
        }
    },
    inputStyle: "",
    setInputStyle: function (value) {
        this.inputStyle = value;
        mini.setStyle(this._textEl, value);
    },
    /**
	 * 用于从HTML标签中提取配置参数的方法。在此方法中有对 value， text， emptyText， onenter，
	 * onkeydown， onkeyup， onkeypress， maxLengthErrorText， minLengthErrorText，
	 *  vtype， emailErrorText， urlErrorText，floatErrorText，intErrorText，
	 * dateErrorText，minErrorText，maxErrorText，rangeLengthErrorText，rangeErrorText，
	 * rangeCharErrorText，allowInput，selectOnFocus，maxLength，minLength，minHeight 等属性做提取。
	 * @param el {Object} DOM元素
	 * @returns {Object} JSON对象
	 */
    getAttrs: function (el) {
        var attrs = mini.TextBox.superclass.getAttrs.call(this, el);
        var jq = jQuery(el);
        /**新增onpaste事件的支持 潘正峰 2013-10-12*/
        mini._ParseString(el, attrs,
            ["value", "text", "emptyText", "inputStyle",
            "onenter", "onkeydown", "onkeyup", "onkeypress","onpaste",
            "maxLengthErrorText", "minLengthErrorText", "onfocus", "onblur",

            "vtype",
            "emailErrorText", "urlErrorText", "floatErrorText", "intErrorText", "dateErrorText",
            "minErrorText", "maxErrorText", "rangeLengthErrorText", "rangeErrorText", "rangeCharErrorText"
            ]
        );

        /**解决在ie7下面 width取不到的问题 潘正锋 2013-11-14*/
        if(isIE7){
            if(jQuery(el).attr("width"))
               attrs.width = jQuery(el).attr("width");
        }

        mini._ParseBool(el, attrs,
		     ["allowInput", "selectOnFocus"
		]
		);
        mini._ParseInt(el, attrs,
		     ["maxLength", "minLength", "minHeight", "minWidth"
		]
		);

        return attrs;
    },
    /**
	 * 验证规则，目前mini UI支持的默认验证规则请参见 mini.VTypes 对象
	 * @type String
	 * @default ""
	 */
    vtype: "",
    /**
	 * 设置属性vtype的值
	 * @param value {String}
	 */
    setVtype: function (value) {
        this.vtype = value;
    },
    /**
	 * 获取属性vtype的值
	 * @return {String}
	 */
    getVtype: function () {
        return this.vtype;
    },
    /**
	 * 默认的 validation 事件响应函数
	 */
    __OnValidation: function (e) {

        if (e.isValid == false)
            return;
        mini._ValidateVType(this.vtype, e.value, e, this);
    },
    /**
	 * 设置 Email 格式验证错误提示信息
	 * @param value {String}
	 */
    setEmailErrorText: function (value) {
        /**
		 * 自定义Email 格式验证错误提示信息
		 * @name emailErrorText
		 * @type String
		 * @memberOf mini.TextBox.prototype
		 */
        this.emailErrorText = value;
    },
    /**
	 * 获取 Email 格式验证错误提示信息
	 * @return {String}
	 */
    getEmailErrorText: function () {
        return this.emailErrorText;
    },
    /**
	 * 设置 url 格式验证错误提示信息
	 * @param value {String}
	 */
    setUrlErrorText: function (value) {
        /**
		 * 自定义 url 格式验证错误提示信息
		 * @name urlErrorText
		 * @type String
		 * @memberOf mini.TextBox.prototype
		 */
        this.urlErrorText = value;
    },
    /**
	 * 获取 url 格式验证错误提示信息
	 * @return {String}
	 */
    getUrlErrorText: function () {
        return this.urlErrorText;
    },
    /**
	 * 设置 浮点数 验证错误提示信息
	 * @param value {String}
	 */
    setFloatErrorText: function (value) {
        /**
		 * 自定义 浮点数 格式验证错误提示信息
		 * @name floatErrorText
		 * @type String
		 * @memberOf mini.TextBox.prototype
		 */
        this.floatErrorText = value;
    },
    /**
	 * 获取 浮点数 验证错误提示信息
	 * @return {String}
	 */
    getFloatErrorText: function () {
        return this.floatErrorText;
    },
    /**
	 * 设置 整数 验证错误提示信息
	 * @param value {String}
	 */
    setIntErrorText: function (value) {
        /**
		 * 自定义 整数 格式验证错误提示信息
		 * @name intErrorText
		 * @type String
		 * @memberOf mini.TextBox.prototype
		 */
        this.intErrorText = value;
    },
    /**
	 * 获取 整数 验证错误提示信息
	 * @return {String}
	 */
    getIntErrorText: function () {
        return this.intErrorText;
    },
    /**
	 * 设置 日期 验证错误提示信息
	 * @param value {String}
	 */
    setDateErrorText: function (value) {
        /**
		 * 自定义 日期 格式验证错误提示信息
		 * @name dateErrorText
		 * @type String
		 * @memberOf mini.TextBox.prototype
		 */
        this.dateErrorText = value;
    },
    /**
	 * 获取 日期 格式验证错误提示信息
	 * @return {String}
	 */
    getDateErrorText: function () {
        return this.dateErrorText;
    },
    /**
	 * 设置 最大长度 验证错误提示信息
	 * @param value {String}
	 */
    setMaxLengthErrorText: function (value) {
        /**
		 * 自定义 最大长度 验证错误提示信息
		 * @name maxLengthErrorText
		 * @type String
		 * @memberOf mini.TextBox.prototype
		 */
        this.maxLengthErrorText = value;
    },
    /**
	 * 获取 最大长度验证错误提示信息
	 * @return {String}
	 */
    getMaxLengthErrorText: function () {
        return this.maxLengthErrorText;
    },
    /**
	 * 设置最小长度 验证错误提示信息
	 * @param value {String}
	 */
    setMinLengthErrorText: function (value) {
        /**
		 * 自定义 最小长度 验证错误提示信息
		 * @name minLengthErrorText
		 * @type String
		 * @memberOf mini.TextBox.prototype
		 */
        this.minLengthErrorText = value;
    },
    /**
	 * 获取 最小长度验证错误提示信息
	 * @return {String}
	 */
    getMinLengthErrorText: function () {
        return this.minLengthErrorText;
    },
    /**
	 * 设置最大值 验证错误提示信息
	 * @param value {String}
	 */
    setMaxErrorText: function (value) {
        /**
		 * 自定义 最大值 验证错误提示信息
		 * @name maxErrorText
		 * @type String
		 * @memberOf mini.TextBox.prototype
		 */
        this.maxErrorText = value;
    },
    /**
	 * 获取最大值验证错误提示信息
	 * @return {String}
	 */
    getMaxErrorText: function () {
        return this.maxErrorText;
    },
    /**
	 * 设置最小值 验证错误提示信息
	 * @param value {String}
	 */
    setMinErrorText: function (value) {
        /**
		 * 自定义 最小值 验证错误提示信息
		 * @name minErrorText
		 * @type String
		 * @memberOf mini.TextBox.prototype
		 */
        this.minErrorText = value;
    },
    /**
	 * 获取 最小值验证错误提示信息
	 * @return {String}
	 */
    getMinErrorText: function () {
        return this.minErrorText;
    },
    /**
	 * 设置录入字符串长度区间 验证错误提示信息
	 * @param value {String}
	 */
    setRangeLengthErrorText: function (value) {
        /**
		 * 自定义 录入字符串长度区间 验证错误提示信息
		 * @name rangeLengthErrorText
		 * @type String
		 * @memberOf mini.TextBox.prototype
		 */
        this.rangeLengthErrorText = value;
    },
    /**
	 * 获取 录入字符串长度区间验证错误提示信息
	 * @return {String}
	 */
    getRangeLengthErrorText: function () {
        return this.rangeLengthErrorText;
    },
    /**
	 * 设置录入内容字符个数区间 验证错误提示信息
	 * @param value {String}
	 */
    setRangeCharErrorText: function (value) {
        /**
		 * 自定义 录入内容字符个数区间 验证错误提示信息
		 * @name rangeCharErrorText
		 * @type String
		 * @memberOf mini.TextBox.prototype
		 */
        this.rangeCharErrorText = value;
    },
    /**
	 * 获取 内容字符个数区间验证错误提示信息
	 * @return {String}
	 */
    getRangeCharErrorText: function () {
        return this.rangeCharErrorText;
    },
    /**
	 * 设置值区间验证错误提示信息
	 * @param value {String}
	 */
    setRangeErrorText: function (value) {
        /**
		 * 自定义 值区间 验证错误提示信息
		 * @name rangeErrorText
		 * @type String
		 * @memberOf mini.TextBox.prototype
		 */
        this.rangeErrorText = value;
    },
    /**
	 * 获取 值区间验证错误提示信息
	 * @return {String}
	 */
    getRangeErrorText: function () {
        return this.rangeErrorText;
    }
});

mini.regClass(mini.TextBox, 'textbox');
mini.MoneyBox = function () {
    mini.MoneyBox.superclass.constructor.call(this);
}
mini.extend(mini.MoneyBox, mini.TextBox,
    {
        digit: 2,
        minValue: NaN,
        maxValue: NaN,
        uiCls: "mini-moneybox",
        setText: function (value) {

            value = this._formatText(this.value);
            if (value === null || value === undefined) value = "";
            this.text = value;
            this._textEl.value = value;
        },
        setValue: function (value, firechangedevent) {
            if (value === null || value === undefined)
                value = "";
            value = String(value);
            if (value.length > this.maxLength) {
                value = value.substring(0, this.maxLength);
            }

            if (this.value !== value) {

                value = this._formatValue(value);
                this.value = value;
                this._valueEl.value = value;
                this.setText(value);
                this._doEmpty();
                if (firechangedevent === undefined)
                    firechangedevent = true;
                if (firechangedevent)
                    this._OnValueChanged();
            }
        },
        _formatText: function (value) {
            return mini.util.StringUtil.formatMoney(value, this.digit);
        },
        _formatValue: function (value) {
            if (undefined == value || value == "" || !value) {
                return "";
            }
            value = value.replace(/\,/g, "");
            var tpMoney = new Number(value);
            if (isNaN(tpMoney)) {
                return "";
            }
            tpMoney = new Number(this._ValueLimit(value));
            tpMoney = tpMoney.toFixed(this.digit);
            return tpMoney;
        },
        _ValueLimit: function (value) {
            if (isNaN(this.minValue) && isNaN(this.maxValue))
                return value;
            if (this.minValue > this.maxValue) {
                return value;
            }
            if (!isNaN(this.minValue) && value < this.minValue) {
                value = this.minValue;
            }
            if (!isNaN(this.maxValue) && value > this.maxValue) {
                value = this.maxValue;
            }
            return value;
        },
        getAttrs: function (el) {
            var attrs = mini.MoneyBox.superclass.getAttrs.call(this, el);
            mini._ParseInt(el, attrs, ["digit", "minValue", "maxValue"]);
            return attrs;
        }
    }
)

mini.regClass(mini.MoneyBox, 'moneybox');
/**
 * 定义了form 密码录入框组件
 * @fileOverview Password.js
 * @author 殷文旭
 */

mini = mini || {};

/**
 * Password 是mini UI中的密码录入框组件属于form类组件，构造函数中调用了 TextBox 父类的构造方法
 * @class mini.Password
 * @constructor
 * @extends mini.TextBox
 * @requires mini.TextBox
 */
mini.Password = function () {
	mini.Password.superclass.constructor.call(this);
}
mini.extend(mini.Password, mini.TextBox, {
	/**
	 * 密码录入框组件样式类名
	 * @type String
	 * @default "mini-textarea"
	 */
	uiCls: "mini-password",
	_InputType: "password",
	/**
	 * 设置当值为空时的显示文本。用于框内提示用途
	 * @param value {String}
	 */
	setEmptyText: function (value) {
		this.emptyText = "";
	}
});
mini.regClass(mini.Password, 'password');
/**
 * @fileOverview PopupEdit.js 文件定义了带弹出层的录入框组件。
 */

mini = mini || {};

/**
 * PopupEdit 是mini UI中的输入框下拉组件，构造函数中调用了 ButtonEdit 构造函数
 * @class mini.PopupEdit
 * @constructor
 * @extends mini.ValidatorBase
 */

mini.PopupEdit = function () {
	mini.PopupEdit.superclass.constructor.call(this);
	this._createPopup();
	this.el.className += ' mini-popupedit';	//PopupEdit只是在Popup上增加了一个样式名
}
mini.extend(mini.PopupEdit, mini.ButtonEdit, {
	uiCls: "mini-popupedit",
	popup: null,

	popupCls: "mini-buttonedit-popup",

	_hoverCls: "mini-buttonedit-hover",
	_pressedCls: "mini-buttonedit-pressed",

	destroy: function (removeEl) {
		if (this.isShowPopup()) {
			this.hidePopup();
		}
        if(this.el){
            this.el.onmouseover = null;
            this.el.onmouseout = null;
        }
		if (this._popupInner) {
		    this._popupInner.owner = null;
		    this._popupInner = null;
		}
		if (this.popup) {
			/**内存泄露问题优化 赵美丹 2013-04-17  */
            mini.clearEvent(this.popup.el);
            mini.clearEvent(this.popup);
            this.popup.owner = null;
			this.popup.destroy(removeEl);
			this.popup = null;
		}
        this._clickTarget = null;
        
        mini.un(document, "mouseup", this.__OnDocMouseUp, this);
        
		mini.PopupEdit.superclass.destroy.call(this, removeEl);
	},
	_initEvents: function () {
		mini.PopupEdit.superclass._initEvents.call(this);

		mini._BindEvents( function () {
			mini_onOne(this.el, "mouseover", this.__OnMouseOver, this);
			mini_onOne(this.el, "mouseout", this.__OnMouseOut, this);
		}, this);
	},
	_initButtons: function () {
		this.buttons = [];
		var button = this.createButton({
			cls: "mini-buttonedit-popup",
			iconCls: "mini-buttonedit-icons-popup",
			name: "popup"
		});
		this.buttons.push(button);
	},
	__OnBlur: function (e) {
	    this._focused = false;
	    if (this._clickTarget && mini.isAncestor(this.el, this._clickTarget)) return;
	    if (this.isShowPopup()) return;
	    mini.PopupEdit.superclass.__OnBlur.call(this, e);
	},
	/**
	 * 默认鼠标驻留事件响应函数
	 */
	__OnMouseOver: function (e) {
		if (this.isReadOnly() || this.allowInput)
			return;
		if (mini.findParent(e.target, "mini-buttonedit-border")) {
			this.addCls(this._hoverCls);
		}
	},
	/**
	 * 默认鼠标移出事件响应函数
	 */
	__OnMouseOut: function (e) {
		if (this.isReadOnly() || this.allowInput)
			return;
		this.removeCls(this._hoverCls);
	},
	__OnMouseDown: function (e) {
		if (this.isReadOnly())
			return;
		mini.PopupEdit.superclass.__OnMouseDown.call(this, e);
		if (this.allowInput == false && mini.findParent(e.target, "mini-buttonedit-border")) {
			mini.addClass(this.el, this._pressedCls);
			mini.on(document, "mouseup", this.__OnDocMouseUp, this);
		}
	},
	__OnInputKeyDown: function (e) {
		this.fire("keydown", {
			htmlEvent: e
		});
		if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
			return false;
		}
		if (e.keyCode == 9) {
			this.hidePopup();
			return;
		}
		if (e.keyCode == 27) {
			this.hidePopup();
			return;
		}
		if (e.keyCode == 13) {
			this.fire("enter");
		}

		if (this.isShowPopup()) {

			if (e.keyCode == 13 || e.keyCode == 27) {
				e.stopPropagation();
			}
		}
	},
	within: function (e) {
		if (mini.isAncestor(this.el, e.target))
			return true;
		if (this.popup.within(e))
			return true;
		return false;
	},
	popupWidth: "100%",
	popupMinWidth: 50,
	popupMaxWidth: 2000,

	popupHeight: "",
	popupMinHeight: 100,
	popupMaxHeight: 2000,

	setPopup: function (value) {
		if (typeof value == "string") {
			mini.parse(value);
			value = mini.get(value);
		}
		var p = mini.getAndCreate(value);
		if (!p)
			return;
		p.setVisible(true);
		p.render(this.popup._contentEl);

		p.owner = this;

		p.on("beforebuttonclick", this.__OnPopupButtonClick, this);
	},
	getPopup: function () {
		if (!this.popup) {
			this._createPopup();
		}
		return this.popup;
	},
	/**
	 * 创造弹出层组件实例
	 *
	 */
	_createPopup: function () {
		this.popup = new mini.Popup();
		this.popup.setShowAction("none");
		this.popup.setHideAction("outerclick");
		this.popup.setPopupEl(this.el);

		this.popup.on("BeforeClose", this.__OnPopupBeforeClose, this);
        this.popup.on("close", this.__OnPopupClose, this);
        mini.on(this.popup.el, "keydown", this.__OnPopupKeyDown, this);
	},
    __OnPopupClose: function (e) {

    },

    /**
	 * 默认事件，如果事件发生在弹出源元素内，则接收后续动作。
	 */
	__OnPopupBeforeClose: function (e) {
		if (this.within(e.htmlEvent))
			e.cancel = true;
	},
	__OnPopupKeyDown: function (e) {
	},
	showPopup: function () {
		var ex = {
			cancel: false
		};
		this.fire("beforeshowpopup", ex);
		if (ex.cancel == true)
			return false;       /**return改为return false 帮助外面程序判断 潘正锋 2013-07-08*/
		var popup = this.getPopup();
		this._syncShowPopup();

		popup.on("Close", this.__OnPopupHide, this);

		this.fire("showpopup");
	},
    doLayout: function () {
        mini.PopupEdit.superclass.doLayout.call(this);
        if (this.isShowPopup()) {

        }
    },
    _syncShowPopup: function () {
        var popup = this.getPopup();

        if (this._popupInner && this._popupInner.el.parentNode != this.popup._contentEl) {
            this.popup._contentEl.appendChild(this._popupInner.el);
            this._popupInner.setVisible(true);
        }

        var box = this.getBox();
       
		var w = this.popupWidth;
        /**原本只考虑到100%的情况 在这里进行修正 潘正锋 2013-07-20*/
        if (this.popupWidth) {
            if (typeof this.popupWidth == "string" && this.popupWidth.indexOf("%") != -1) {
                w = parseInt(box.width * this.popupWidth.substring(0,this.popupWidth.length-1)/100);
            }
        }
		popup.setWidth(w);
       
		var h = parseInt(this.popupHeight);
		if (!isNaN(h)) {
			popup.setHeight(h);
		} else {
			popup.setHeight("auto");
		}

		popup.setMinWidth(this.popupMinWidth);
		popup.setMinHeight(this.popupMinHeight);
		popup.setMaxWidth(this.popupMaxWidth);
		popup.setMaxHeight(this.popupMaxHeight);

		popup.showAtEl(this.el, {
		    xAlign: "left",
		    yAlign: "below",
		    outYAlign: "above",
		    outXAlign: "right",
		    popupCls: this.popupCls
		});

		
	},
    __OnPopupHide: function (e) {
        this.__doFocusCls();
		this.fire("hidepopup");
	},
    hidePopup: function () {
        if (this.isShowPopup()) {
            var popup = this.getPopup();
            popup.close();
        }

	},
	isShowPopup: function () {
	    if (this.popup && this.popup.isDisplay()) 
            return true;
		else
			return false;
	},
	setPopupWidth: function (value) {
		this.popupWidth = value;
	},
	setPopupMaxWidth: function (value) {
		this.popupMaxWidth = value;
	},
	setPopupMinWidth: function (value) {
		this.popupMinWidth = value;
	},
	getPopupWidth: function (value) {
		return this.popupWidth;
	},
	getPopupMaxWidth: function (value) {
		return this.popupMaxWidth;
	},
	getPopupMinWidth: function (value) {
		return this.popupMinWidth;
	},
	setPopupHeight: function (value) {
		this.popupHeight = value;
	},
	setPopupMaxHeight: function (value) {
		this.popupMaxHeight = value;
	},
	setPopupMinHeight: function (value) {
		this.popupMinHeight = value;
	},
	getPopupHeight: function (value) {
		return this.popupHeight;
	},
	getPopupMaxHeight: function (value) {
		return this.popupMaxHeight;
	},
	getPopupMinHeight: function (value) {
		return this.popupMinHeight;
	},
	__OnClick: function (e) {
		if (this.isReadOnly())
			return;

		if (mini.isAncestor(this._buttonEl, e.target)) {
			this._OnButtonClick(e);
		}
		if (mini.findParent(e.target, this._closeCls)) {
		    if (this.isShowPopup()) {
		        this.hidePopup();
		    }
		    this.fire("closeclick", { htmlEvent: e });
		    return;
		}

		if (this.allowInput == false || mini.isAncestor(this._buttonEl, e.target)) {
			if (this.isShowPopup()) {
				this.hidePopup();
			} else {
				var sf = this;
				setTimeout( function () {
					sf.showPopup();
                    sf.focus();
				}, 1);
			}
		}
	},
	__OnPopupButtonClick: function (e) {
		if (e.name == "close")
			this.hidePopup();
		e.cancel = true;
	},
	getAttrs: function (el) {
		var attrs = mini.PopupEdit.superclass.getAttrs.call(this, el);

		mini._ParseString(el, attrs,
		["popupWidth", "popupHeight", "popup", "onshowpopup", "onhidepopup", "onbeforeshowpopup"
		]
		);
		mini._ParseInt(el, attrs,
		["popupMinWidth", "popupMaxWidth", "popupMinHeight", "popupMaxHeight"
		]
		);

		return attrs;
	}
});
mini.regClass(mini.PopupEdit, 'popupedit');


mini.DatePicker = function () {
    mini.DatePicker.superclass.constructor.call(this);
    mini.addClass(this.el, "mini-datepicker");

    this.on("validation", this.__OnValidation, this);
}

mini.extend(mini.DatePicker, mini.PopupEdit, {
    valueFormat: "",
    format: "yyyy-MM-dd",


    maxDate: null,
    minDate: null,

    popupWidth: "",

    viewDate: new Date(),
    showTime: false,
    timeFormat: 'H:mm',

    showTodayButton: true,
    showClearButton: true,
    showOkButton: false,

    uiCls: "mini-datepicker",

    _getCalendar: function () {
        if (!mini.DatePicker._Calendar) {
            var calendar = mini.DatePicker._Calendar = new mini.Calendar();

            calendar.setStyle("border:0;");
        }
        return mini.DatePicker._Calendar;
    },

    _createPopup: function () {
        mini.DatePicker.superclass._createPopup.call(this);

        this._calendar = this._getCalendar();
    },
    __OnPopupClose: function (e) {
        if (this._calendar ) {
            this._calendar.hideMenu();
        }
    },

    destroy: function (removeEl) {
        delete this._calendar;
        mini.DatePicker.superclass.destroy.call(this, removeEl);
    },
    _monthPicker: false,
    showPopup: function () {
        this._calendar = this._getCalendar();
        this._calendar.beginUpdate();
        this._calendar._allowLayout = false;
        if (this._calendar.el.parentNode != this.popup._contentEl) {
            this._calendar.render(this.popup._contentEl);
        }

        this._calendar.set({
            monthPicker: this._monthPicker,
            showTime: this.showTime,
            timeFormat: this.timeFormat,
            showClearButton: this.showClearButton,
            showTodayButton: this.showTodayButton,
            showOkButton: this.showOkButton
        });

        this._calendar.setValue(this.value);

        if (this.value) {
            this._calendar.setViewDate(this.value);
        } else {
            this._calendar.setViewDate(this.viewDate);
        }
        if(mini.DatePicker.superclass.showPopup.call(this)===false)
            return;

        function doUpdate() {
            this._calendar.hideMenu();

            if (this._calendar._target) {
                var obj = this._calendar._target;
                this._calendar.un("timechanged", obj.__OnTimeChanged, obj);
                this._calendar.un("dateclick", obj.__OnDateClick, obj);
                this._calendar.un("drawdate", obj.__OnDrawDate, obj);
            }
            this._calendar.on("timechanged", this.__OnTimeChanged, this);
            this._calendar.on("dateclick", this.__OnDateClick, this);
            this._calendar.on("drawdate", this.__OnDrawDate, this);

            this._calendar.endUpdate();

            this._calendar._allowLayout = true;
            this._calendar.doLayout();

            this._calendar.focus();

            this._calendar._target = this;
        }

        var me = this;

        doUpdate.call(me);



    },
    hidePopup: function () {

        mini.DatePicker.superclass.hidePopup.call(this);
        if(this._calendar) {
            this._calendar.un("timechanged", this.__OnTimeChanged, this);
            this._calendar.un("dateclick", this.__OnDateClick, this);
            this._calendar.un("drawdate", this.__OnDrawDate, this);
        }

    },
    within: function (e) {
        if (mini.isAncestor(this.el, e.target)) return true;
        if (this._calendar.within(e)) return true;
        return false;
    },
    __OnPopupKeyDown: function (e) {
        if (e.keyCode == 13) {
            this.__OnDateClick();
        }
        if (e.keyCode == 27) {
            this.hidePopup();
            this.focus();
        }
    },
    minDateErrorText: '',
    maxDateErrorText: '',
    __OnValidation: function (e) {

        if (e.isValid == false) return;
        var date = this.value;

        if (!mini.isDate(date)) return;
        var maxDate = mini.parseDate(this.maxDate);
        var minDate = mini.parseDate(this.minDate);
        var maxDateErrorText = this.maxDateErrorText || mini.VTypes.maxDateErrorText;
        var minDateErrorText = this.minDateErrorText || mini.VTypes.minDateErrorText;
        if (mini.isDate(maxDate)) {
            if (date.getTime() > maxDate.getTime()) {
                e.isValid = false;
                e.errorText = String.format(maxDateErrorText, mini.formatDate(maxDate, this.format));
            }
        }
        if (mini.isDate(minDate)) {
            if (date.getTime() < minDate.getTime()) {
                e.isValid = false;
                e.errorText = String.format(minDateErrorText, mini.formatDate(minDate, this.format));
            }
        }

    },
    __OnDrawDate: function (e) {
        var date = e.date;
        var maxDate = mini.parseDate(this.maxDate);
        var minDate = mini.parseDate(this.minDate);
        if (mini.isDate(maxDate)) {
            if (date.getTime() > maxDate.getTime()) {
                e.allowSelect = false;
            }
        }
        if (mini.isDate(minDate)) {
            if (date.getTime() < minDate.getTime()) {
                e.allowSelect = false;
            }
        }

        this.fire("drawdate", e);
    },
    __OnDateClick: function (e) {

        if (this.showOkButton && e.action != "ok") return;

        var date = this._calendar.getValue();
        var value = this.getFormValue('U');

        this.setValue(date);

        this.hidePopup();

        this.focus();
    },
    __OnTimeChanged: function (e) {
        if (this.showOkButton) return;
        var date = this._calendar.getValue();
        this.setValue(date);
    },
    setFormat: function (value) {
        if (typeof value != "string") return;
        if (this.format != value) {
            this.format = value;
            this._textEl.value = this._valueEl.value = this.getFormValue();
        }
    },
    getFormat: function () {
        return this.format;
    },
    setValueFormat: function (value) {
        if (typeof value != "string") return;
        if (this.valueFormat != value) {
            this.valueFormat = value;
        }
    },
    getValueFormat: function () {
        return this.valueFormat;
    },

    setValue: function (value,valid) {
        value = mini.parseDate(value);
        if (mini.isNull(value)) value = "";
        if (mini.isDate(value)) value = new Date(value.getTime());
        if (!mini.isEquals(this.value,value)) {
            this.value = value;
            this.text = this._textEl.value = this._valueEl.value = this.getFormValue();
            if(valid === undefined)
                valid = true;
            if(valid)
                this._OnValueChanged();

        }
    },
    nullValue: "",
    setNullValue: function (value) {
        if (value == "null") value = null;
        this.nullValue = value;
    },
    getNullValue: function () {
        return this.nullValue;
    },

    getValue: function () {
        if (!mini.isDate(this.value)) return this.nullValue;
        var v = this.value;
        if (this.valueFormat) {
            v = mini.formatDate(v, this.valueFormat);
        }
        return v;
    },
    getFormValue: function (format) {

        if (!mini.isDate(this.value)) return "";
        format = format || this.format;
        return mini.formatDate(this.value, format);
    },
    setViewDate: function (value) {
        value = mini.parseDate(value);
        if (!mini.isDate(value)) return;
        this.viewDate = value;
    },
    getViewDate: function () {
        return this._calendar.getViewDate();
    },
    setShowTime: function (value) {
        if (this.showTime != value) {
            this.showTime = value;

        }
    },
    getShowTime: function () {
        return this.showTime;
    },
    setTimeFormat: function (value) {
        if (this.timeFormat != value) {
            this.timeFormat = value;

        }
    },
    getTimeFormat: function () {
        return this.timeFormat;
    },
    setShowTodayButton: function (value) {
        this.showTodayButton = value;

    },
    getShowTodayButton: function () {
        return this.showTodayButton;
    },
    setShowClearButton: function (value) {
        this.showClearButton = value;

    },
    getShowClearButton: function () {
        return this.showClearButton;
    },
    setShowOkButton: function (value) {
        this.showOkButton = value;
    },
    getShowOkButton: function () {
        return this.showOkButton;
    },

    setMaxDate: function (value) {
        this.maxDate = value;
    },
    getMaxDate: function () {
        return this.maxDate;
    },
    setMinDate: function (value) {
        this.minDate = value;
    },
    getMinDate: function () {
        return this.minDate;
    },

    setMaxDateErrorText: function (value) {
        this.maxDateErrorText = value;
    },
    getMaxDateErrorText: function () {
        return this.maxDateErrorText;
    },
    setMinDateErrorText: function (value) {
        this.minDateErrorText = value;
    },
    getMinDateErrorText: function () {
        return this.minDateErrorText;
    },

    __OnInputTextChanged: function (e) {
        var v = this._textEl.value;
        var d = mini.parseDate(v);

        if (!d || isNaN(d) || d.getFullYear() == 1970) {
            d = null;
        }

        var value = this.getFormValue('U');

        this.setValue(d);
        if (d == null) this._textEl.value = "";

    },
    __OnInputKeyDown: function (e) {
        var ex = { htmlEvent: e };
        this.fire("keydown", ex);
        if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }

        if (e.keyCode == 9) {
            if (this.isShowPopup()) {
                this.hidePopup();
            }
            return;
        }

        if (this.isReadOnly()) return;

        switch (e.keyCode) {
            case 27:
                e.preventDefault();
                if (this.isShowPopup()) {
                    e.stopPropagation();
                }

                this.hidePopup();
                break;
            case 9:
            case 13:

                if (this.isShowPopup()) {
                    e.preventDefault();
                    e.stopPropagation();


                    this.hidePopup();


                } else {
                    this.__OnInputTextChanged(null);
                    var me = this;
                    setTimeout(function () {
                        me.fire("enter", ex);
                    }, 10);
                }
                break;
            case 37:
                break;
            case 38:
                e.preventDefault();
                break;
            case 39:
                break;
            case 40:
                e.preventDefault();
                this.showPopup();
                break;
            default:
                break;
        }
    },

    getAttrs: function (el) {
        var attrs = mini.DatePicker.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["format", "viewDate", "timeFormat", "ondrawdate", "minDate", "maxDate",
            "valueFormat", "nullValue", "minDateErrorText", "maxDateErrorText"
            ]
        );
        mini._ParseBool(el, attrs,
            ["showTime", "showTodayButton", "showClearButton", "showOkButton"
            ]
        );


        return attrs;
    }
});

mini.regClass(mini.DatePicker, 'datepicker');


mini.MonthPicker = function () {
    mini.MonthPicker.superclass.constructor.call(this);

}

mini.extend(mini.MonthPicker, mini.DatePicker, {
    uiCls: 'mini-monthpicker',
    valueFormat: "",
    format: "yyyy-MM",
    _monthPicker: true
});
mini.regClass(mini.MonthPicker, 'monthpicker');
mini.YearPicker = function () {
    mini.YearPicker.superclass.constructor.call(this);
    mini.addClass(this.el, "mini-datepicker");
    this.on("validation", this.__OnValidation, this);
}
mini.extend(mini.YearPicker, mini.PopupEdit, {
    uiCls: 'mini-yearpicker',
    popupWidth: "",
    _getCalendar: function () {
        if (!mini.YearPicker._Calendar) {
            var calendar = mini.YearPicker._Calendar = new mini.CalendarYear();

            calendar.setStyle("border:0;");
        }
        return mini.YearPicker._Calendar;
    },

    _createPopup: function () {
        mini.YearPicker.superclass._createPopup.call(this);

        this._calendar = this._getCalendar();
    },
    showPopup: function () {
        this._calendar = this._getCalendar();
        this._calendar.beginUpdate();
        this._calendar._allowLayout = false;
        if (this._calendar.el.parentNode != this.popup._contentEl) {
            this._calendar.render(this.popup._contentEl);
        }



        /**增加返回值判断 解决父类return后子类任然 潘正锋 2013-07-08*/
        if (mini.YearPicker.superclass.showPopup.call(this) === false)
            return;

        function doUpdate() {
            if (!this._checkYear(this.value)) {
                this._calendar.setValue(mini.formatDate(new Date(),"yyyy"));
                this._calendar.updateYears();
            }
            else {
                this._calendar.setValue(this.value);
                this._calendar.updateYears();
            }

            if (this._calendar._target) {
                var obj = this._calendar._target;

                this._calendar.un("dateclick", obj.__OnDateClick, obj);

            }

            this._calendar.on("dateclick", this.__OnDateClick, this);


            this._calendar.endUpdate();

            this._calendar._allowLayout = true;

            this._calendar.focus();

            this._calendar._target = this;
        }

        var me = this;

        doUpdate.call(me);


    },
    hidePopup: function () {

        mini.YearPicker.superclass.hidePopup.call(this);
        this._calendar.un("dateclick", this.__OnDateClick, this);

    },
    setValue: function (value) {
        if (this.value != value) {
            this.value = value;
            this.text = this._textEl.value = this._valueEl.value = this.value;
            this._calendar.setValue(this.value);
            this._calendar.updateYears();
            this._OnValueChanged();

        }

    },
    __OnDateClick: function (e) {

        if (this.showOkButton && e.action != "ok") return;

        var date = this._calendar.getValue();


        this.setValue(date);


        this.hidePopup();

        this.focus();
    },
    __OnValidation: function (e) {

        if (e.isValid == false) return;
        if (this.value == "") return;
        if (!this._checkYear(this.value)) {
            e.isValid = false;
            e.errorText = "格式错误";
        }

    },
    _checkYear:function(year){
        var re = /^[1-9]\d{3}$/;
        return re.test(year);
    }


});
mini.regClass(mini.YearPicker, 'yearpicker');

/**
 * 文件定义了下拉框组件。
 * @fileOverview ComboBox.js
 * @author 陈师东
 */

/**
 * ComboBox 是mini UI中的下拉框组件，构造函数中调用了 PopupEdit的构造方法，并为组件的数据源和列头声明了数组。
 * @class mini.ComboBox
 * @constructor
 * @extends mini.PopupEdit
 * @requires mini.Listbox
 */
mini.ComboBox = function () {
	this.data = [];
	this.columns = [];
	mini.ComboBox.superclass.constructor.call(this);
	var me = this;
	if (isFirefox) {
		/** @ignore */
		this._textEl.oninput = function () {
			me._tryQuery();
		}
	}
}
mini.extend(mini.ComboBox, mini.PopupEdit,{
	/**
	 * 选项文本
	 * @type String
	 * @default ''
	 */
	text: '',
	/**
	 * 选项值
	 * @type String
	 * @default ''
	 */
	value: '',
	/**
	 * 取选项值时对应的属性名
	 * @type String
	 * @default 'id'
	 */
	valueField: "id",
	/**
	 * 取选项文本时对应的属性名
	 * @type String
	 * @default 'text'
	 */
	textField: "text",
	/**
	 * 多选时，选中项之间的分隔符，但好像没实现
	 * @type String
	 * @deprecated
	 * @private
	 */
	delimiter: ',',

	/**
	 * 是否多选
	 * @type boolean
	 * @default false
	 */
	multiSelect: false,
	/**
	 * 数据源数组
	 * @type Array
	 * @default []
	 */
	data: [],
	/**
	 * 动态加载数据url
	 * @type String
	 * @default ''
	 */
	url: "",

	/**
	 * 列头数组
	 * @type Array
	 * @default []
	 */
	columns: [],

	/**
	 * 是否允许输入
	 * @type boolean
	 * @default false
	 */
	allowInput: false,

	/**
	 * 单选时，值是否只来自选择
	 * @type Boolean
	 * @default true
	 */
	valueFromSelect: false,

	/**
	 * 下拉框的最大高度，包括padding与border，
	 * 一般情况下为popupMaxHeight-2，css文件中mini-listbox-border样式设置border为1
	 * @type Number
	 * @default ''
	 */
	popupMaxHeight: 200,

	/**
	 * 将声明组建时设置的属性应用到组件对象上，包括待选项数据，属性与事件。
	 * @param kv {Object} JSON对象
	 * @returns {Object} 组件实例本身
	 */
	set: function (kv) {
		if (typeof kv == 'string') {
			return this;
		}
		var value = kv.value;
		delete kv.value;
		var url = kv.url;
		delete kv.url;
		var data = kv.data;
		delete kv.data;
        if(!kv.onvaluechanged)
            this.defaultValueTriggerChange = false;
		mini.ComboBox.superclass.set.call(this, kv);
		
		// issue enable flase?
		this._listbox.set($.extend(kv||{}, {enabled:true}));
		
		if (!mini.isNull(data)) {
			this.setData(data);

			kv.data = data;
		}else if (!mini.isNull(url)) {
			this.setUrl(url);

			kv.url = url;
		}else if(!mini.isNull(kv.code)){
			kv.url = mini.globalOpts.codeUrl + this.code;
			this.setUrl(kv.url);
		}
		if (!mini.isNull(value)) {
			this.setValue(value,this.defaultValueTriggerChange);

			kv.value = value;
		}

		return this;
	},
	/**
	 * 组件样式名
	 * @type String
	 * @default 'mini-combobox'
	 */
	uiCls: "mini-combobox",
    destroy: function (removeEl) {
        if(this._listbox){
            mini.clearEvent(this._listbox);
            this._listbox.destroy(removeEl);
            this._listbox = null;
        }
        delete this.data;
        delete this.columns;
        mini.ComboBox.superclass.destroy.call(this, removeEl);
    },
	/**
	 * ComboBox继承PopupEdit，依赖于ListBox，
	 * 此方法对这两个组件进行创建并设置部分样式与事件
	 */
	_createPopup: function () {
		mini.ComboBox.superclass._createPopup.call(this);

		this._listbox = new mini.ListBox();

		this._listbox.setBorderStyle("border:0;");
		this._listbox.setStyle("width:100%;height:auto;");
		this._listbox.render(this.popup._contentEl);

		this._listbox.on("itemclick", this.__OnItemClick, this);
		this._listbox.on("drawcell", this.__OnItemDrawCell, this);
		var me = this;
		this._listbox.on("beforeload", function (e) {
		    me.fire("beforeload", e);
		}, this);
		this._listbox.on("load", function (e) {
		    me.fire("load", e);
		}, this);
		this._listbox.on("loaderror", function (e) {
		    me.fire("loaderror", e);
		}, this);

	},
	/**
	 * 显示弹出层并设值
	 */
	showPopup: function () {
		/** 将这里的代码提前 解决两次弹出高度不一样的问题 潘正锋*/
        this._listbox.setHeight("auto");
        /**增加返回值判断 解决父类return后子类任然 潘正锋 2013-07-08*/
        if(mini.ComboBox.superclass.showPopup.call(this)===false)
            return;
		var h = this.popup.el.style.height;
		if (h == "" || h == "auto") {
			this._listbox.setHeight("auto");
		} else {
			this._listbox.setHeight("100%");
		}
		this._listbox.setValue(this.value);

    },
	/**
	 * 选项选择事件
	 * !!从代码上来看，此方法与父类无联系
	 * !!经测试，此方法属未曾被调用过，即无任何作用
	 * @param item项目对象
	 * @deprecated
	 */
	select: function (item) {
		this._listbox.deselectAll();
		item = this.getItem(item);
		if (item) {
			this._listbox.select(item);
			this.__OnItemClick();
            this._listbox.setValue("");
		}
	},
	/**
	 * 获取项目对象
	 * @param item 项目对象或选项id
	 */
	getItem: function (item) {
		return typeof item == "object" ? item : this.data[item];
	},
	/**
	 * 从数据源数组中找出该项目对象
	 * @type 项目对象
	 * @return 该项目对象在数组中下标
	 */
	indexOf: function (item) {
		return this.data.indexOf(item);
	},
	/**
	 * 根据下标从数据源数组中获取项目对象
	 * @type int
	 */
	getAt: function (index) {
		return this.data[index];
	},
	/**
	 * 为组件加载数据，根据参数类型调用不同加载方式
	 * @type String或{}
	 */
	load: function (data, param) {
		if (typeof data == "string") {
			this.setUrl(data, param);
		} else {
			this.setData(data);
		}
	},
	/**
	 * 非ajax方式为组件加载数据
	 * @type String或{}
	 * @default ''
	 */
	setData: function (data) {

		if (typeof data == "string") {

			data = eval('(' + data + ')');

		}
		if (!mini.isArray(data))
			data = [];
        this._listbox.setData(mini.clone(data));
		this.data = this._listbox.data;

        /* 新的问题出来了，假如data是后面set的，那么valueFromSelect=true时，永远都无法取到值 潘正锋 2014-07-14 */
        if(this.valueFromSelect){
            this.setValue(this.tempvalue,false);
        }else{
            var vts = this._listbox.getValueAndText(this.value);
            this.text = this._textEl.value = vts[1];
        }
    },
	/**
	 * 获取数据源数组
	 */
	getData: function () {
		return this.data;
	},
	/**
	 * ajax方式为组件加载数据
	 * @type String
	 */
	setUrl: function (url, param) {
		this.getPopup();

		this._listbox.setUrl(this.parseUrl(url), param);
		this.url = this._listbox.url;
		this.data = this._listbox.data;

		var vts = this._listbox.getValueAndText(this.value);
		this.text = this._textEl.value = vts[1];

	},
	/**
	 * 获取url
	 */
	getUrl: function () {
		return this.url;
	},
	/**
	 * 设置从data中取值时的字面量
	 * @type String
	 */
	setValueField: function (valueField) {
		this.valueField = valueField;
		if (this._listbox) {
			this._listbox.setValueField(valueField);
		}
	},
	/**
	 * 获取从data中取值时的字面量
	 */
	getValueField: function () {
		return this.valueField;
	},
	/**
	 * 设置从data中取文本时的字面量
	 * @type String
	 * @default ''
	 */
	setTextField: function (value) {
		if (this._listbox)
			this._listbox.setTextField(value);
		this.textField = value;
	},
	/**
	 * 获取从data中取文本时的字面量
	 * @type String
	 * @default ''
	 */
	getTextField: function () {
		return this.textField;
	},
	/**
	 * 设置从data中取文本时的字面量（此为多余方法）
	 * @type String
	 */
	setDisplayField: function (value) {
		this.setTextField(value);
	},
	setDataField: function (value) {
	    if (this._listbox) this._listbox.setDataField(value);
	    this.dataField = value;
	},

	/**
	 * 为组件设置值，针对单选
	 * @type String
	 * @default ''
	 */
	setValue: function (value,valid) {
	    var oldvalue = this.value;
        var vts = this._listbox.getValueAndText(value);
        /* 新的问题出来了，假如data是后面set的，那么valueFromSelect=true时，永远都无法取到值 潘正锋 2014-07-14 */
        if (this.valueFromSelect) {
            this.value = vts[0];
            this.tempvalue = value; //先记下来，setData的时候来读取
        }
         else
            this.value = value;
	     this._valueEl.value = this.value;
         this.setText(vts[1]);
		 if (!mini.isEquals(oldvalue, this.value)){
             /* when call the setValue("") method,the valid event will be trigger,cause the error icon show pzf 2014-04 */
             if(valid === undefined)
                 valid = true;
             if(valid)
             this._OnValueChanged();
         }

	},
    setText : function(text){
        if(mini.isEquals(this.emptyText, text)){
            mini.ComboBox.superclass.setText.call(this, "");
        }else{
            mini.ComboBox.superclass.setText.call(this, text);
        }
    },
	/**
	 * 设置/取消多选，相应各选项前的checkbox也会同步变化
	 * @type boolean
	 */
	setMultiSelect: function (value) {
		if (this.multiSelect != value) {
			this.multiSelect = value;
			if (this._listbox) {
				this._listbox.setMultiSelect(value);
				this._listbox.setShowCheckBox(value);
			}
		}
	},
	/**
	 * 返回是否多选
	 */
	getMultiSelect: function () {
		return this.multiSelect;
	},
	/**
	 * 设置列
	 * @type object 类似于[{header:"val",field:"id"},{header:"country",field:"text"}]
	 */
	setColumns: function (value) {
		if (!mini.isArray(value))
			value = [];
		this.columns = value;
		this._listbox.setColumns(value);
	},
	/**
	 * 获取列对象
	 */
	getColumns: function () {
		return this.columns;
	},
	/**
	 * 是否显示空选项
	 * @type String
	 * @default ''
	 */
	showNullItem: false,
	/**
	 * 设置是否显示空选项
	 * @type boolean
	 */
	setShowNullItem: function (value) {
		if (this.showNullItem != value) {
			this.showNullItem = value;
			this._listbox.setShowNullItem(value);
		}
	},
	/**
	 * 获取空选项对象
	 */
	getShowNullItem: function () {
		return this.showNullItem;
	},
	/**
	 * 设置空选项的文本（对应的value默认为''）
	 * @type String
	 */
	setNullItemText: function (value) {
		if (this.nullItemText != value) {
			this.nullItemText = value;
            this.emptyText = value;
			this._listbox.setNullItemText(value);
		}
	},
	/**
	 * 获取空选项的文本
	 */
	getNullItemText: function () {
		return this.nullItemText;
	},
	/**
	 * 设置【单选时，值是否只来自选择】
	 * @type boolean
	 */
	setValueFromSelect: function (value) {
		this.valueFromSelect = value;
	},
	/**
	 * 获取【单选时，值是否只来自选择】
	 */
	getValueFromSelect: function () {
		return this.valueFromSelect;
	},
	/**
	 * change事件
	 */
	_OnValueChanged: function () {
		if (this.validateOnChanged) {
			this.validate();
		}
		var value = this.getValue();
		var selecteds = this.getSelecteds();
		var selected = selecteds[0];
		var sf = this;

		sf.fire("valuechanged", {
			value: value,
			selecteds: selecteds,
			selected: selected
		});

	},
	/**
	 * （复选时）获取已选择的项目
	 */
	getSelecteds: function () {
		return this._listbox.findItems(this.value);
	},
	/**
	 * （单选时）获取已选择的项目
	 * @type String
	 * @default ''
	 */
	getSelected: function () {
		return this.getSelecteds()[0];
	},
	/**
	 * （自定义事件）项目绘制单元格时的事件
	 * @param [event] {Event}可以是一个JSON对象
	 */
	__OnItemDrawCell: function (e) {

		this.fire("drawcell", e);
	},
	/**
	 * 项目单击事件
	 * @param [event] {Event}可以是一个JSON对象
	 */
	__OnItemClick: function (e) {

		var items = this._listbox.getSelecteds();
		var vts = this._listbox.getValueAndText(items);

		var value = this.getValue();
		this.setValue(vts[0]);
		if (e) {
		    /*
		    if (value != this.getValue()) {
		        var sf = this;
		        setTimeout(function () {
		            sf._OnValueChanged();
		        }, 1);
		    }
            */
		    if (!this.multiSelect) {
		        this.hidePopup();
		    }

		    this.focus();


		    this.fire("itemclick", { item: e.item });
		}

	},
	/**
	 * 文本框keydown事件
	 */
	__OnInputKeyDown: function (e) {
		this.fire("keydown", {
			htmlEvent: e
		});
		if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
			return false;
		}
		if (e.keyCode == 9) {
			this.hidePopup();
			return;
		}
		if (this.isReadOnly()) return;

		switch (e.keyCode) {
			case 27:
				e.preventDefault();
				if (this.isShowPopup()) {
					e.stopPropagation();
				}

				this.hidePopup();
				break;
			case 13:
				if (this.isShowPopup()) {
					e.preventDefault();
					e.stopPropagation();

					var index = this._listbox.getFocusedIndex();
					if (index != -1) {
						var item = this._listbox.getAt(index);
						if (this.multiSelect) {

						} else {
							this._listbox.deselectAll();
							this._listbox.select(item);
						}
						var items = this._listbox.getSelecteds();
						var vts = this._listbox.getValueAndText(items);
						this.setValue(vts[0]);
						this.setText(vts[1]);

					}
					this.hidePopup();
				} else {
					this.fire("enter");
				}
				break;
			case 37:
				break;
			case 38:
			    e.preventDefault();

				var index = this._listbox.getFocusedIndex();
				if (index == -1) {
					index = 0;
					if (!this.multiSelect) {
						var item = this._listbox.findItems(this.value)[0];
						if (item) {
							index = this._listbox.indexOf(item);
						}
					}
				}
				if (this.isShowPopup()) {
					if (!this.multiSelect) {
						index -= 1;
						if (index < 0)
							index = 0;
						this._listbox._focusItem(index, true);
					}
				}
				break;
			case 39:
				break;
			case 40:
			    e.preventDefault();

				var index = this._listbox.getFocusedIndex();
				if (index == -1) {
					index = 0;
					if (!this.multiSelect) {
						var item = this._listbox.findItems(this.value)[0];
						if (item) {
							index = this._listbox.indexOf(item);
						}
					}
				}
				if (this.isShowPopup()) {
					if (!this.multiSelect) {
						index += 1;
						if (index > this._listbox.getCount() - 1)
							index = this._listbox.getCount() - 1;
						this._listbox._focusItem(index, true);
					}
				} else {
					this.showPopup();
					if (!this.multiSelect) {
						this._listbox._focusItem(index, true);
					}
				}
				break;
			default:
				this._tryQuery(this._textEl.value);
				break;
		}
	},
	/**
	 * 文本框keyup事件
	 */
	__OnInputKeyUp: function (e) {
		this.fire("keyup", {
			htmlEvent: e
		});
	},
	/**
	 * 文本框keypress事件
	 */
	__OnInputKeyPress: function (e) {
		this.fire("keypress", {
			htmlEvent: e
		});
	},
	/**
	 * 若前后文本不一致则进行选项搜索
	 * @type String
	 */
	_tryQuery: function (oldText) {

		var sf = this;
		setTimeout( function () {
			var text = sf._textEl.value;
			if (text != oldText) {
				sf._doQuery(text);

			}
		}, 10);
	},
	/**
	 * 根据文本框内容搜索选项
	 * @type String
	 */
	_doQuery: function (key) {
		if (this.multiSelect == true)
			return;
		var view = [];
		for (var i = 0, l = this.data.length; i < l; i++) {
			var o = this.data[i];
			var text = mini._getMap(this.textField, o);
            var value = mini._getMap(this.valueField, o);
			if (typeof text == "string") {
				text = text.toUpperCase();
                value = value.toUpperCase();
				key = key.toUpperCase();
                /* list options when input dm pzf 2014-06*/
				if (text.indexOf(key) != -1 || value.indexOf(key) != -1) {
					view.push(o);
				}
			}
		}
		this._listbox.setData(view);
		this._filtered = true;
		if (key !== "" || this.isShowPopup()) {
			this.showPopup();

			var index = 0;
			if (this._listbox.getShowNullItem())
				index = 1;
			var me = this;
			me._listbox._focusItem(index, true);
		}
	},
	/**
	 * 弹出层隐藏事件
	 * @type String
	 * @default ''
	 */
	__OnPopupHide: function (e) {
		if (this._filtered) {
			this._filtered = false;
			if (this._listbox.el) {
				this._listbox.setData(this.data);
			}
		}
		this.fire("hidepopup");
	},
	/**
	 * 根据给定的值查找所有选项，value即为combobox对应的value，可能含分隔符
	 * @type String
	 */
	findItems: function (value) {
		return this._listbox.findItems(value);
	},
	/**
	 * 文本框内容改变事件（单选时）
	 * @type String
	 * @default ''
	 */
	__OnInputTextChanged: function (e) {
		if (this.multiSelect == false) {

			var text = this._textEl.value;

			var data = this.getData();
			var selected = null;
			for (var i = 0, l = data.length; i < l; i++) {
				var item = data[i];
				var itemText = item[this.textField];
				if (itemText == text) {
					selected = item;
					break;
				}
			}
			if (selected) {
				this._listbox.setValue(selected ? selected[this.valueField] : "");

				var v = this._listbox.getValue();
				var vts = this._listbox.getValueAndText(v);

				var value = this.getValue();
				this.setValue(v);
				this.setText(vts[1]);
			} else {
				if (this.valueFromSelect) {
					this.setValue("");
					this.setText("");
				} else {
					this.setValue(text);
					this.setText(text);
				}
			}
			/*if (value != this.getValue()) {
				var sf = this;

				sf._OnValueChanged();

			}*/

		}

	},
	/**
	 * 根据页面声明的元素获取属性值
	 * @type String
	 * @default ''
	 */
	getAttrs: function (el) {

		var attrs = mini.ComboBox.superclass.getAttrs.call(this, el);

		/**
		 * ondrawcell 渲染元素时触发<br/>
		 * 通过在html标签声明。
		 * @name ondrawcell
		 * @event
		 * @memberOf mini.ComboBox.prototype
		 */
		mini._ParseString(el, attrs,
		["url", "data", "textField", "valueField", "displayField", "nullItemText",
		 "ondrawcell", "onbeforeload", "onload", "onloaderror", "onitemclick"
		]
		);
		mini._ParseBool(el, attrs,
		["multiSelect", "showNullItem", "valueFromSelect"
		]
		);

		if (attrs.displayField)
			attrs.textField = attrs.displayField;

		var valueField = attrs.valueField || this.valueField;
		var textField = attrs.textField || this.textField;
		if (el.nodeName.toLowerCase() == "select") {

			var data = [];
			for (var i = 0, l = el.length; i < l; i++) {
				var op = el.options[i];
				var o = {};
				o[textField] = op.text;
				o[valueField] = op.value;

				data.push(o);
			}
			if (data.length > 0) {
				attrs.data = data;
			}
		} else {
			var cs = mini.getChildNodes(el);
			for (var i = 0, l = cs.length; i < l; i++) {
				var node = cs[i];
				var property = jQuery(node).attr("property");
				if (!property)
					continue;
				property = property.toLowerCase();
				if (property == "columns") {
					attrs.columns = mini._ParseColumns(node);
				} else if (property == "data") {
					attrs.data = node.innerHTML;
				}
			}
		}

		return attrs;
	}
});

/**
 * 注册ComboBox组件
 * @type String
 */
mini.regClass(mini.ComboBox, 'combobox');
/**
 * 文件中定义了 AutoComplete 组件。
 * @fileOverview AutoComplete.js
 * @author 殷文旭
 */

/**
 * @class AutoComplete 是mini UI中的自动补全组件
 * @constructor
 * @extends mini.ComboBox
 * @requires mini.ComboBox
 * @version 1.0
 */
mini.AutoComplete = function () {
	mini.AutoComplete.superclass.constructor.call(this);

	var sf = this;
	sf._ValueChangeTimer = null;
	this._buttonEl.style.display = "none";
	this._doInputLayout();

}
mini.extend(mini.AutoComplete, mini.ComboBox,{
	/**
	 * 数据的远程加载地址
	 * @type String
	 * @default ""
	 */
	url: "",
	/**
	 * 是否可录入标志
	 * @type Boolean
	 * @default true
	 */
	allowInput: true,
	/**
	 * 查询延迟时间
	 * @priate
	 */
	delay: 150,

	searchField: "key",

	/** @private 未被使用的参数*/
	minChars: 0,
	_buttonWidth: 0,
	/**
	 * 组将样式类
	 * @type String
	 * @default "mini-textbox"
	 */
	uiCls: "mini-autocomplete",
	/**
	 * 设置 url 属性并从url地址获取数据更新组件。
	 * @param url {String}
	 */
	setUrl: function (value) {
		this.url = this.parseUrl(value);
	},
	/**
	 * 设置值
	 * @param value {String}
	 */
	setValue: function (value) {
	    if (mini.isNull(value)) value = "";
        var oldvalue = this.value;
        this.value = value;
        if (!mini.isEquals(oldvalue, this.value))  {
            this.value = value;
            this._valueEl.value = this.value;
            var vts = this._listbox.getValueAndText(value);
            if(vts[0]&&vts[1]){   //初始化时 配置了value属性时 执行setValue，不需要执行setText
                 this.setText(vts[1]);
            }
            this._OnValueChanged();
        }


    },
	/**
	 * 设置显示文本
	 * @param value {String}
	 */
	setText: function (value) {
	    if (mini.isNull(value)) value = "";

		if (this.text != value) {
			this.text = value;
			this._LastInputText = value;
		}
		this._textEl.value = this.text;
	},

    /* 整个方法是为了解决 通过代码搜索，而且代码写全时，无法赋值text pzf 2014-8 */
    __OnItemClick: function (e) {

        var items = this._listbox.getSelecteds();
        var vts = this._listbox.getValueAndText(items);

        var value = this.getValue();
        this.setValue(vts[0]);
        /* 整个方法是为了解决 通过代码搜索，而且代码写全时，无法赋值text pzf 2014-8 */
        this.setText(vts[1]);
        if (e) {

            if (!this.multiSelect) {
                this.hidePopup();
            }

            this.focus();


            this.fire("itemclick", { item: e.item });
        }

    },
	
	/** @private 未被使用的参数set方法*/
	setMinChars: function (value) {
		this.minChars = value;
	},
	/** @private 未被使用的参数的get方法*/
	getMinChars: function () {
		return this.minChars;
	},
	setSearchField: function (value) {
	    this.searchField = value;
	},
	getSearchField: function () {
	    return this.searchField;
	},


	popupLoadingText: "<span class='mini-textboxlist-popup-loading'>Loading...</span>",
	popupErrorText: "<span class='mini-textboxlist-popup-error'>Error</span>",
	popupEmptyText: "<span class='mini-textboxlist-popup-noresult'>No Result</span>",
	/**
	 * 显示弹出层
	 * @param action {String} 目前action支持loading 和 error 分别用于给出等待和错误提示。
	 */
	showPopup: function (action) {

		var popup = this.getPopup();
		var control = this._listbox;
		control.showEmpty = true;
		control.emptyText = this.popupEmptyText;
		if (action == "loading") {
			control.emptyText = this.popupLoadingText;
			this._listbox.setData([]);
		} else if (action == "error") {
			control.emptyText = this.popupLoadingText;
			this._listbox.setData([]);
		}
		this._listbox.doUpdate();

		mini.AutoComplete.superclass.showPopup.call(this);

	},
	__OnInputKeyDown: function (e) {

	    this.fire("keydown", { htmlEvent: e });
	    if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
	        return false;
	    }
	    if (e.keyCode == 9) {
	        this.hidePopup();
	        return;
	    }

	    if (this.isReadOnly()) return;

	    switch (e.keyCode) {
	        case 27:      //Escape
	            if (this.isShowPopup()) {
	                e.stopPropagation();
	            }

	            this.hidePopup();
	            break;
	        case 13:       //Enter
	            if (this.isShowPopup()) {
	                e.preventDefault();
	                e.stopPropagation();

	                var index = this._listbox.getFocusedIndex();

	                if (index != -1) {
	                    var item = this._listbox.getAt(index);
	                    var vts = this._listbox.getValueAndText([item]);
	                    var value = vts[0];

	                    this.setText(vts[1]);
	                    if (mini.isFirefox) {
	                        this.blur();
	                        this.focus();
	                    }

	                    this.setValue(value, false);

	                    this.hidePopup();

	                }
	            } else {
	                this.fire("enter");
	            }
	            break;
	        case 37:
	            break;
	        case 38:     //UP
	            var index = this._listbox.getFocusedIndex();
	            if (index == -1) {
	                index = 0;
	                if (!this.multiSelect) {
	                    var item = this._listbox.findItems(this.value)[0];
	                    if (item) {
	                        index = this._listbox.indexOf(item);
	                    }
	                }
	            }
	            if (this.isShowPopup()) {
	                if (!this.multiSelect) {
	                    index -= 1;
	                    if (index < 0) index = 0;
	                    this._listbox._focusItem(index, true);
	                }
	            }
	            break;
	        case 39:
	            break;
	        case 40:   //DOWN

	            var index = this._listbox.getFocusedIndex();
	            if (this.isShowPopup()) {
	                if (!this.multiSelect) {
	                    index += 1;
	                    if (index > this._listbox.getCount() - 1) index = this._listbox.getCount() - 1;
	                    this._listbox._focusItem(index, true);
	                }
	            } else {
	                this._tryQuery(this._textEl.value);
	            }
	            break;
	        default:
	            this._tryQuery(this._textEl.value);
	            break;
	    }
	},

	/**
	 * 查询匹配项
	 */
	doQuery: function () {
		this._tryQuery();
	},
	
	_tryQuery: function (oldText) {
		var sf = this;
		if (this._queryTimer) {
			clearTimeout(this._queryTimer);
			this._queryTimer = null;
		}
		this._queryTimer = setTimeout( function () {
			var text = sf._textEl.value;
			sf._doQuery(text);
		}, this.delay);
		this.showPopup("loading");
	},
	_doQuery: function (key) {
	    if (!this.url) return;
	    if (this._ajaxer) {
	        this._ajaxer.abort();
	    }

	    var url = this.url;
	    var ajaxMethod = "post";
	    if (url) {
	        if (url.indexOf(".txt") != -1 || url.indexOf(".json") != -1) {
	            ajaxMethod = "get";
	        }
	    }

	    var params = {};
	    params[this.searchField] = key;

	    var e = {
	        url: url,
	        async: true,
	        params: params,
	        data: params,
	        type: ajaxMethod,
	        cache: false,
	        cancel: false
	    };
	    this.fire("beforeload", e);
	    if (e.data != e.params && e.params != params) {
	        e.data = e.params;
	    }
	    if (e.cancel) return;

	    var me = sf = this;
	    mini.copyTo(e, {
	        success: function (text) {
	            try {
	                var data = mini.decode(text);
	            } catch (ex) {
	                throw new Error("autocomplete json is error");
	            }
	            if (sf.dataField) {
	                data = mini._getMap(sf.dataField, data);
	            }
	            if (!data) data = [];

	            me._listbox.setData(data);
	            me.showPopup();
	            me._listbox._focusItem(0, true);
	            me.data = data;
	            me.fire("load", { data: data });

	        },
	        error: function (jqXHR, textStatus, errorThrown) {
	            me.showPopup("error");
	        }
	    });

	    this._ajaxer = mini.ajax(e);
	},

	getAttrs: function (el) {
	    var attrs = mini.AutoComplete.superclass.getAttrs.call(this, el);

	    mini._ParseString(el, attrs,
            ["searchField"]
        );

	    return attrs;
	}

});

mini.regClass(mini.AutoComplete, "autocomplete");
mini.Lookup = function () {
	this.data = [];
	mini.Lookup.superclass.constructor.call(this);

	mini.on(this._textEl, "mouseup", this.__OnMouseUp, this);
	this.on("showpopup", this.__OnShowPopup, this);
}
mini.extend(mini.Lookup, mini.PopupEdit, {
	allowInput: true,

	valueField: "id",
	textField: "text",
	delimiter: ',',

	multiSelect: false,

	data: [],

	grid: null,

	uiCls: "mini-lookup",
	destroy: function (removeEl) {
		if (this.grid) {
			this.grid.un("rowclick", this.__OnGridRowClickChanged, this);
			this.grid.un("load", this.__OnGridLoad, this);
			this.grid = null;
		}
		mini.Lookup.superclass.destroy.call(this, removeEl);
	},
	setMultiSelect: function (value) {
		this.multiSelect = value;

		if (this.grid)
			this.grid.setMultiSelect(value);
	},
	setGrid: function (value) {
		if (typeof value == "string") {
			mini.parse(value);
			value = mini.get(value);
		}
		this.grid = mini.getAndCreate(value);
		if (this.grid) {
			this.grid.setMultiSelect(this.multiSelect);
			this.grid.setCheckSelectOnLoad(false);
			this.grid.on("rowclick", this.__OnGridRowClickChanged, this);
			this.grid.on("load", this.__OnGridLoad, this);
			this.grid.on("checkall", this.__OnGridRowClickChanged, this);
		}
	},
	getGrid: function () {
		return this.grid;
	},
	setValueField: function (valueField) {
		this.valueField = valueField;

	},
	getValueField: function () {
		return this.valueField;
	},
	setTextField: function (value) {

		this.textField = value;
	},
	getTextField: function () {
		return this.textField;
	},
	deselectAll: function () {
		this.data = [];
		this.setValue("");
		this.setText("");
		if(this.grid)
			this.grid.deselectAll();
	},
	getItemValue: function (item) {
		return String(item[this.valueField]);
	},
	getItemText: function (item) {
		var t = item[this.textField];
		return mini.isNull(t) ? '' : String(t);
	},
	getValueAndText: function (records) {
		if (mini.isNull(records))
			records = [];

		var values = [];
		var texts = [];
		for (var i = 0, l = records.length; i < l; i++) {
			var record = records[i];
			if (record) {
				values.push(this.getItemValue(record));
				texts.push(this.getItemText(record));
			}
		}
		return [values.join(this.delimiter), texts.join(this.delimiter)];
	},
	_createData: function () {
		if (typeof this.value != "string")
			this.value = "";
		if (typeof this.text != "string")
			this.text = "";

		var data = [];
		var values = this.value.split(this.delimiter);
		var texts = this.text.split(this.delimiter);
		var len = values.length;

		if (this.value) {
			for (var i = 0, l = len; i < l; i++) {
				var row = {};
				var id = values[i];
				var text = texts[i];
				row[this.valueField] = id ? id : "";
				row[this.textField] = text ? text : "";
				data.push(row);
			}
		}
		this.data = data;

	},
	_getValueMaps: function (rows) {
		var vs = {};
		for (var i = 0, l = rows.length; i < l; i++) {
			var row = rows[i];
			var id = row[this.valueField];
			vs[id] = row;
		}
		return vs;
	},
	setValue: function (value) {
		mini.Lookup.superclass.setValue.call(this, value);
		this._createData();
	},
	setText: function (value) {
		mini.Lookup.superclass.setText.call(this, value);
		this._createData();
	},
	__OnGridRowClickChanged: function (e) {

		var rows = this._getValueMaps(this.grid.getData());
		var sels = this._getValueMaps(this.grid.getSelecteds());
		var vs = this._getValueMaps(this.data);
		if (this.multiSelect == false) {
			vs = {};
			this.data = [];
		}

		var removes = {};
		for (var id in vs) {
			var o = vs[id];
			if (rows[id]) {
				if (sels[id]) {

				} else {
					removes[id] = o;
				}
			}
		}
		for (var i = this.data.length - 1; i >= 0; i--) {
			var o = this.data[i];
			var id = o[this.valueField];
			if (removes[id])
				this.data.removeAt(i);
		}

		for (var id in sels) {
			var o = sels[id];
			if (!vs[id])
				this.data.push(o);
		}

		var vts = this.getValueAndText(this.data);
		this.setValue(vts[0]);
		this.setText(vts[1]);

		this._OnValueChanged();
	},
	__OnGridLoad: function (e) {
        this.__OnShowPopup(e);
    },
    __OnShowPopup: function (e) {
		var vsb = String(this.value).split(this.delimiter);
		var vs = {};
		for (var i = 0, l = vsb.length; i < l; i++) {
			var v = vsb[i];
			vs[v] = 1;
		}

		var rows = this.grid.getData();

		var sels = [];
		for (var i = 0, l = rows.length; i < l; i++) {
			var row = rows[i];
			var id = row[this.valueField];
			if (vs[id])
				sels.push(row);
		}

		this.grid.selects(sels);
	},
	doUpdate: function () {
		mini.Lookup.superclass.doUpdate.call(this);
		this._textEl.readOnly = true;
		this.el.style.cursor = "default";

	},
	__OnInputKeyDown: function (e) {
		mini.Lookup.superclass.__OnInputKeyDown.call(this, e);

		switch (e.keyCode) {
			case 46:
			case 8:

				break;
			case 37:

				break;
			case 39:

				break;
		}

	},
	__OnMouseUp: function (e) {
		if (this.isReadOnly())
			return;

		var rg = mini.getSelectRange(this._textEl);
		var start = rg[0], end = rg[1];

		var index = this._findTextIndex(start);

	},
	_findTextIndex: function (rgIndex) {
		var index = -1;
		if (this.text == "")
			return index;

		var texts = String(this.text).split(this.delimiter);
		var len = 0;
		for (var i = 0, l = texts.length; i < l; i++) {
			var text = texts[i];
			if (len < rgIndex && rgIndex <= len + text.length) {
				index = i;
				break;
			}
			len = len + text.length + 1;
		}
		return index;
	},
	getAttrs: function (el) {
		var attrs = mini.Lookup.superclass.getAttrs.call(this, el);

		mini._ParseString(el, attrs,
		["grid", "valueField", "textField"
		]
		);
		mini._ParseBool(el, attrs,
		["multiSelect"
		]
		);

		return attrs;
	}
});

mini.regClass(mini.Lookup, 'lookup');


mini.Pager = function () {
    mini.Pager.superclass.constructor.call(this);
}
mini.extend(mini.Pager, mini.Control, {
    pageIndex: 0,
    pageSize: 10,
    totalCount: 0,
    totalPage: 0,

    showPageIndex: true,
    showPageSize: true,
    showTotalCount: true,

    showPageInfo: true,
    showReloadButton: true,

    _clearBorder: false,

    showButtonText: false,
    showButtonIcon: true,

    firstText: "首页",
    prevText: "上一页",
    nextText: "下一页",
    lastText: "尾页",

    pageInfoText: "每页 {0} 条, 共 {1} 条",
    sizeList: [10, 20, 50, 100],

    uiCls: "mini-pager",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-pager";


        var s = '<div class="mini-pager-left"></div><div class="mini-pager-right"></div>';
        this.el.innerHTML = s;

        this.buttonsEl = this._leftEl = this.el.childNodes[0];
        this._rightEl = this.el.childNodes[1];


        this.sizeEl = mini.append(this.buttonsEl, '<span class="mini-pager-size"></span>');


        this.sizeCombo = new mini.ComboBox();
        this.sizeCombo.setName("pagesize");
        this.sizeCombo.setWidth(48);
        this.sizeCombo.render(this.sizeEl);
        mini.append(this.sizeEl, '<span class="separator"></span>');

        this.firstButton = new mini.Button();
        this.firstButton.render(this.buttonsEl);

        this.prevButton = new mini.Button();
        this.prevButton.render(this.buttonsEl);

        this.indexEl = document.createElement("span");
        this.indexEl.className = 'mini-pager-index';
        this.indexEl.innerHTML = '<input id="" type="text" class="mini-pager-num"/><span class="mini-pager-pages">/ 0</span>';
        this.buttonsEl.appendChild(this.indexEl);

        this.numInput = this.indexEl.firstChild;
        this.pagesLabel = this.indexEl.lastChild;

        this.nextButton = new mini.Button();
        this.nextButton.render(this.buttonsEl);

        this.lastButton = new mini.Button();
        this.lastButton.render(this.buttonsEl);

        mini.append(this.buttonsEl, '<span class="separator"></span>');

        this.reloadButton = new mini.Button();
        this.reloadButton.render(this.buttonsEl);

        this.firstButton.setPlain(true);
        this.prevButton.setPlain(true);
        this.nextButton.setPlain(true);
        this.lastButton.setPlain(true);
        this.reloadButton.setPlain(true);

        this.update();
    },
    destroy: function (removeEl) {
        if (this.pageSelect) {
            mini.clearEvent(this.pageSelect);
            this.pageSelect = null;
        }
        if (this.sizeCombo) {
            mini.clearEvent(this.sizeCombo);
            this.sizeCombo.destroy(removeEl);
            this.sizeCombo = null;
        }
        if (this.sizeEl) {
            mini.clearEvent(this.sizeEl);
            this.buttonsEl.removeChild(this.sizeEl);
            this.sizeEl = null;
        }
        if (this.firstButton) {
            mini.clearEvent(this.firstButton);
            this.firstButton.destroy(removeEl);
            this.firstButton = null;
        }
        if (this.prevButton) {
            mini.clearEvent(this.prevButton);
            this.prevButton.destroy(removeEl);
            this.prevButton = null;
        }
        if (this.numInput) {
            mini.clearEvent(this.numInput);
            this.indexEl.removeChild(this.numInput);
            this.numInput = null;
        }
        if (this.pagesLabel) {
            mini.clearEvent(this.pagesLabel);
            this.indexEl.removeChild(this.pagesLabel);
            this.pagesLabel = null;
        }
        if (this.indexEl) {
            mini.clearEvent(this.indexEl);
            this.buttonsEl.removeChild(this.indexEl);
            this.indexEl = null;
        }
        if (this.nextButton) {
            mini.clearEvent(this.nextButton);
            this.nextButton.destroy(removeEl);
            this.nextButton = null;
        }
        if (this.lastButton) {
            mini.clearEvent(this.lastButton);
            this.lastButton.destroy(removeEl);
            this.lastButton = null;
        }
        if (this.reloadButton) {
            mini.clearEvent(this.reloadButton);
            this.reloadButton.destroy(removeEl);
            this.reloadButton = null;
        }
        if (this.buttonsEl) {
            mini.clearEvent(this.buttonsEl);
            this.el.removeChild(this.buttonsEl);
            this.buttonsEl = null;
            this._leftEl = null;
        }
        if (this._rightEl) {
            mini.clearEvent(this._rightEl);
            this.el.removeChild(this._rightEl);
            this._rightEl = null;
        }

        mini.Pager.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {

        mini.Pager.superclass._initEvents.call(this);

        this.firstButton.on("click", function (e) {
            this._OnPageChanged(0);
        }, this);
        this.prevButton.on("click", function (e) {
            this._OnPageChanged(this.pageIndex - 1);
        }, this);
        this.nextButton.on("click", function (e) {
            this._OnPageChanged(this.pageIndex + 1);
        }, this);
        this.lastButton.on("click", function (e) {
            this._OnPageChanged(this.totalPage);
        }, this);
        this.reloadButton.on("click", function (e) {
            this._OnPageChanged();
        }, this);


        function doPage() {
            if (changing) return;
            changing = true;
            var index = parseInt(this.numInput.value);
            if (isNaN(index)) {
                this.update();
            } else {
                this._OnPageChanged(index - 1);
            }
            setTimeout(function () {
                changing = false;
            }, 100);
        }

        var changing = false;
        mini.on(this.numInput, "change", function (e) {
            doPage.call(this);
        }, this);

        mini.on(this.numInput, "keydown", function (e) {
            if (e.keyCode == 13) {
                doPage.call(this);
                e.stopPropagation();
            }
        }, this);


        this.sizeCombo.on("valuechanged", this.__OnPageSelectChanged, this);
    },
    doLayout: function () {
        if (!this.canLayout()) return;
        mini.layout(this._leftEl);
        mini.layout(this._rightEl);
    },
    setPageIndex: function (value) {
        if (isNaN(value)) return;
        this.pageIndex = value;
        this.update();
    },
    getPageIndex: function () {
        return this.pageIndex;
    },
    setPageSize: function (value) {
        if (isNaN(value)) return;
        this.pageSize = value;
        this.update();
    },
    getPageSize: function () {
        return this.pageSize;
    },
    setTotalCount: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.totalCount = value;
        this.updateTotal();
    },
    getTotalCount: function () {
        return this.totalCount;
    },
    setSizeList: function (value) {
        if (!mini.isArray(value)) return;
        this.sizeList = value;
        this.update();
    },
    getSizeList: function () {
        return this.sizeList;
    },
    setShowPageSize: function (value) {
        this.showPageSize = value;
        this.update();
    },
    getShowPageSize: function () {
        return this.showPageSize;
    },
    setShowPageIndex: function (value) {
        this.showPageIndex = value;
        this.update();
    },
    getShowPageIndex: function () {
        return this.showPageIndex;
    },
    setShowTotalCount: function (value) {
        this.showTotalCount = value;
        this.update();
    },
    getShowTotalCount: function () {
        return this.showTotalCount;
    },
    setShowPageInfo: function (value) {
        this.showPageInfo = value;
        this.update();
    },
    getShowPageInfo: function () {
        return this.showPageInfo;
    },
    setShowReloadButton: function (value) {
        this.showReloadButton = value;
        this.update();
    },
    getShowReloadButton: function () {
        return this.showReloadButton;
    },


    getTotalPage: function () {
        return this.totalPage;
    },
    updateTotal: function (index, size, total) {
    	
    	if (mini.isNumber(index)) this.pageIndex = parseInt(index);
    	if (mini.isNumber(size)) this.pageSize = parseInt(size);
    	if (mini.isNumber(total)) this.totalCount = parseInt(total);
    	
    	this.totalPage = parseInt(this.totalCount / this.pageSize) + 1;
    	if ((this.totalPage - 1) * this.pageSize == this.totalCount) {
    		this.totalPage -= 1;
    	}
    	if (this.totalCount == 0) this.totalPage = 0;
    	
    	if (this.pageIndex > this.totalPage - 1) {
    		this.pageIndex = this.totalPage - 1;
    	}
    	if (this.pageIndex <= 0) this.pageIndex = 0;
    	if (this.totalPage <= 0) this.totalPage = 0;
    	
    	this.firstButton.enable();
    	this.prevButton.enable();
    	this.nextButton.enable();
    	this.lastButton.enable();
    	
    	if (this.pageIndex == 0) {
    		this.firstButton.disable();
    		this.prevButton.disable();
    	}
    	if (this.pageIndex >= this.totalPage - 1) {
    		this.nextButton.disable();
    		this.lastButton.disable();
    	}
    	this.numInput.value = this.pageIndex > -1 ? this.pageIndex + 1 : 0;
    	this.pagesLabel.innerHTML = "/ " + this.totalPage;
    	
    	var sizeList = this.sizeList.clone();
    	if (sizeList.indexOf(this.pageSize) == -1) {
    		sizeList.push(this.pageSize);
    		sizeList = sizeList.sort(function (a, b) {
    			return a > b;
    		});
    	}
    	var sizes = [];
    	for (var i = 0, l = sizeList.length; i < l; i++) {
    		var num = sizeList[i];
    		var option = {};
    		option.text = num;
    		option.id = num;
    		sizes.push(option);
    	}
    	
    	var firstText = this.firstText, prevText = this.prevText, nextText = this.nextText, lastText = this.lastText;
    	if (this.showButtonText == false) {
    		firstText = prevText = nextText = lastText = "";
    	}
    	this.firstButton.setText(firstText);
    	this.prevButton.setText(prevText);
    	this.nextButton.setText(nextText);
    	this.lastButton.setText(lastText);
    	
    	var firstText = this.firstText, prevText = this.prevText, nextText = this.nextText, lastText = this.lastText;
    	if (this.showButtonText == true) {
    		firstText = prevText = nextText = lastText = "";
    	}
    	this.firstButton.setTooltip(firstText);
    	this.prevButton.setTooltip(prevText);
    	this.nextButton.setTooltip(nextText);
    	this.lastButton.setTooltip(lastText);
    	
    	this.firstButton.setIconCls(this.showButtonIcon ? "mini-pager-first" : "");
    	this.prevButton.setIconCls(this.showButtonIcon ? "mini-pager-prev" : "");
    	this.nextButton.setIconCls(this.showButtonIcon ? "mini-pager-next" : "");
    	this.lastButton.setIconCls(this.showButtonIcon ? "mini-pager-last" : "");
    	
    	this.reloadButton.setIconCls(this.showButtonIcon ? "mini-pager-reload" : "");
    	this.reloadButton.setVisible(this.showReloadButton);
    	
    	var s = this.reloadButton.el.previousSibling;
    	if (s) {
    		s.style.display = this.showReloadButton ? "" : "none";
    	}
    	
    	
    	this._rightEl.innerHTML = String.format(this.pageInfoText, this.pageSize, this.totalCount);
    	
    	this.indexEl.style.display = this.showPageIndex ? "" : "none";
    	this.sizeEl.style.display = this.showPageSize ? "" : "none";
    	this._rightEl.style.display = this.showPageInfo ? "" : "none";
    	
    	
    	
    	
    },
    update: function (index, size, total) {

        if (mini.isNumber(index)) this.pageIndex = parseInt(index);
        if (mini.isNumber(size)) this.pageSize = parseInt(size);
        if (mini.isNumber(total)) this.totalCount = parseInt(total);

        this.totalPage = parseInt(this.totalCount / this.pageSize) + 1;
        if ((this.totalPage - 1) * this.pageSize == this.totalCount) {
            this.totalPage -= 1;
        }
        if (this.totalCount == 0) this.totalPage = 0;

        if (this.pageIndex > this.totalPage - 1) {
            this.pageIndex = this.totalPage - 1;
        }
        if (this.pageIndex <= 0) this.pageIndex = 0;
        if (this.totalPage <= 0) this.totalPage = 0;

        this.firstButton.enable();
        this.prevButton.enable();
        this.nextButton.enable();
        this.lastButton.enable();

        if (this.pageIndex == 0) {
            this.firstButton.disable();
            this.prevButton.disable();
        }
        if (this.pageIndex >= this.totalPage - 1) {
            this.nextButton.disable();
            this.lastButton.disable();
        }
        this.numInput.value = this.pageIndex > -1 ? this.pageIndex + 1 : 0;
        this.pagesLabel.innerHTML = "/ " + this.totalPage;

        var sizeList = this.sizeList.clone();
        if (sizeList.indexOf(this.pageSize) == -1) {
            sizeList.push(this.pageSize);
            sizeList = sizeList.sort(function (a, b) {
                return a > b;
            });
        }
        var sizes = [];
        for (var i = 0, l = sizeList.length; i < l; i++) {
            var num = sizeList[i];
            var option = {};
            option.text = num;
            option.id = num;
            sizes.push(option);
        }
        this.sizeCombo.setData(sizes);
        this.sizeCombo.setValue(this.pageSize);


        var firstText = this.firstText, prevText = this.prevText, nextText = this.nextText, lastText = this.lastText;
        if (this.showButtonText == false) {
            firstText = prevText = nextText = lastText = "";
        }
        this.firstButton.setText(firstText);
        this.prevButton.setText(prevText);
        this.nextButton.setText(nextText);
        this.lastButton.setText(lastText);

        var firstText = this.firstText, prevText = this.prevText, nextText = this.nextText, lastText = this.lastText;
        if (this.showButtonText == true) {
            firstText = prevText = nextText = lastText = "";
        }
        this.firstButton.setTooltip(firstText);
        this.prevButton.setTooltip(prevText);
        this.nextButton.setTooltip(nextText);
        this.lastButton.setTooltip(lastText);

        this.firstButton.setIconCls(this.showButtonIcon ? "mini-pager-first" : "");
        this.prevButton.setIconCls(this.showButtonIcon ? "mini-pager-prev" : "");
        this.nextButton.setIconCls(this.showButtonIcon ? "mini-pager-next" : "");
        this.lastButton.setIconCls(this.showButtonIcon ? "mini-pager-last" : "");

        this.reloadButton.setIconCls(this.showButtonIcon ? "mini-pager-reload" : "");
        this.reloadButton.setVisible(this.showReloadButton);

        var s = this.reloadButton.el.previousSibling;
        if (s) {
            s.style.display = this.showReloadButton ? "" : "none";
        }


        this._rightEl.innerHTML = String.format(this.pageInfoText, this.pageSize, this.totalCount);

        this.indexEl.style.display = this.showPageIndex ? "" : "none";
        this.sizeEl.style.display = this.showPageSize ? "" : "none";
        this._rightEl.style.display = this.showPageInfo ? "" : "none";




    },
    __OnPageSelectChanged: function (e) {
        var size = parseInt(this.sizeCombo.getValue());
        this._OnPageChanged(0, size);
    },
    _OnPageChanged: function (index, size) {

        var e = {
            pageIndex: mini.isNumber(index) ? index : this.pageIndex,
            pageSize: mini.isNumber(size) ? size : this.pageSize,
            totalCount : this.totalCount,
            cancel: false,
            isreload: index===undefined && size === undefined
        };
        if (e.pageIndex > this.totalPage - 1) {
            e.pageIndex = this.totalPage - 1;
        }
        if (e.pageIndex < 0) e.pageIndex = 0;

        this.fire("beforepagechanged", e);
        if (e.cancel == true) {
            return;
        }

        this.fire("pagechanged", e);
        this.update(e.pageIndex, e.pageSize);

    },
    onPageChanged: function (fn, scope) {
        this.on("pagechanged", fn, scope);
    },
    getAttrs: function (el) {
        var attrs = mini.Pager.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["onpagechanged", "sizeList", "onbeforepagechanged"
            ]
        );
        mini._ParseBool(el, attrs,
            ["showPageIndex", "showPageSize", "showTotalCount", "showPageInfo", "showReloadButton"
            ]
        );
        mini._ParseInt(el, attrs,
            ["pageIndex", "pageSize", "totalCount"
            ]
        );



        if (typeof attrs.sizeList == "string") {
            attrs.sizeList = eval(attrs.sizeList);
        }

        return attrs;
    }

});
mini.regClass(mini.Pager, "pager");

/**
 * @fileOverview 表格组件，主要实现分页加载、自定义列、单元格渲染、行编辑器、锁定列、过滤行、汇总行等功能。
 */
mini.DataGrid = function () {
    this.data = [];
    this._idRows = {};
    this._removes = [];
    this._originals = {};

    this.columns = [];
    this._bottomColumns = [];
    this._idColumns = {};
    this._nameColumns = {};

    this._selecteds = [];
    this._idSelecteds = {};

    this._cellErrors = [];
    this._cellMapErrors = {};

    mini.DataGrid.superclass.constructor.call(this);

    this.doUpdate();


    var sf = this;
    setTimeout(function () {
        if (sf.autoLoad) {

            sf.reload();
        }
    }, 1);



}
mini.DataGrid.RowID = 0;
mini.DataGrid.ColumnID = 0;
mini.extend(mini.DataGrid, mini.Control, {
    _displayStyle: "block",
    width: 300,
    height: "auto",
    onlyCheckSelection: false,
    allowCellValid: false,
    cellEditAction: "cellclick",

    showEmptyText: true,
    dataLoaded : true,
    emptyText : "没有数据",
    showModified: true,

    dependMerge: false,//合并相同值单元格时，列之间是否关联

    minWidth: 300,
    minHeight: 150,
    maxWidth: 5000,
    maxHeight: 3000,

    _viewRegion: null,
    _virtualRows: 50,
    virtualScroll: false,
    allowCellWrap: false,

    allowHeaderWrap: false,

    showColumnsMenu: false,

    bodyCls: "",
    bodyStyle: "",

    footerCls: "",
    footerStyle: "",

    pagerCls: "",
    pagerStyle: "",

    idField: "id",
    data: [],
    columns: null,

    allowResize: false,

    selectOnLoad: false,

    _rowIdField: "_uid",

    columnWidth: 120,
    columnMinWidth: 20,
    columnMaxWidth: 2000,
    fitColumns: true,

    autoHideRowDetail: true,

    showHeader: true,
    showFooter: true,
    showTop: false,

    showHGridLines: true,
    showVGridLines: true,
    showFilterRow: false,
    showSummaryRow: false,

    sortMode: "server",
    allowSortColumn: true,
    allowMoveColumn: true,
    allowResizeColumn: true,

    enableHotTrack: true,
    allowRowSelect: true,
    multiSelect: false,
    allowAlternating: false,
    _alternatingCls: "mini-grid-row-alt",

    allowUnselect: false,


    _frozenCls: "mini-grid-frozen",
    _frozenCellCls: "mini-grid-frozenCell",
    frozenStartColumn: -1,
    frozenEndColumn: -1,
    isFrozen: function () {
        return this.frozenStartColumn >= 0 && this.frozenEndColumn >= this.frozenStartColumn;
    },

    _rowCls: "mini-grid-row",
    _rowHoverCls: "mini-grid-row-hover",
    _rowSelectedCls: "mini-grid-row-selected",

    _headerCellCls: "mini-grid-headerCell",
    _cellCls: "mini-grid-cell",

    set: function (kv) {
        var columns = kv.columns;
        delete kv.columns;
        var pageSize = kv.pageSize;
        delete kv.pageSize;

        var pager = kv.pager;
        delete kv.pager;

        mini.DataGrid.superclass.set.call(this, kv);

        if (pageSize) {
            this.setPageSize(pageSize);
        }
        if (pager) {
            this.setPager(pager);
        }
        if (columns)
            this.setColumns(columns);

        return this;
    },

    uiCls: "mini-datagrid",
    _create: function () {

        var el = this.el = document.createElement("div");
        this.el.className = "mini-grid";
        this.el.style.display = "block";

        this.el.tabIndex = 1;
        var s = '<div class="mini-grid-border">'
                    + '<div class="mini-grid-header"><div class="mini-grid-headerInner"></div></div>'
                    + '<div class="mini-grid-filterRow"></div>'
                    + '<div class="mini-grid-body"><div class="mini-grid-bodyInner"></div><div class="mini-grid-body-scrollHeight"></div></div>'
                    + '<div class="mini-grid-scroller"><div></div></div>'
                    + '<div class="mini-grid-summaryRow"></div>'
                    + '<div class="mini-grid-footer"></div>'
                    + '<div class="mini-resizer-trigger" style=""></div>'
                    + '<a href="#" class="mini-grid-focus" style="position:absolute;left:-10px;top:-10px;width:0px;height:0px;outline:none;" hideFocus onclick="return false" ></a>'
                    + '</div>';
        this.el.innerHTML = s;

        this._borderEl = this.el.firstChild;
        this._headerEl = this._borderEl.childNodes[0];
        this._filterEl = this._borderEl.childNodes[1];
        this._bodyEl = this._borderEl.childNodes[2];
        this._bodyInnerEl = this._bodyEl.childNodes[0];
        this._bodyScrollEl = this._bodyEl.childNodes[1];

        this._headerInnerEl = this._headerEl.firstChild;

        this._scrollEl = this._borderEl.childNodes[3];
        this._summaryEl = this._borderEl.childNodes[4];
        this._footerEl = this._borderEl.childNodes[5];
        this._resizeEl = this._borderEl.childNodes[6];
        this._focusEl = this._borderEl.childNodes[7];

        this._doUpdateFilterRow();
        this._doUpdateSummaryRow();

        mini.setStyle(this._bodyEl, this.bodyStyle);
        mini.addClass(this._bodyEl, this.bodyCls);

        this._createPager();

        this._doShowRows();
    },
    destroy: function (removeEl) {
        this._destroyEditors();
        
        this._Resizer.destroy(removeEl);
        this._Splitter.destroy(removeEl);
        this._ColumnMove.destroy(removeEl);
        this._Select.destroy(removeEl);
        this._CellTip.destroy(removeEl);
        this._Sort.destroy(removeEl);
        this._ColumnsMenu.destroy(removeEl);
        if (this._scrollEl) {
            mini.clearEvent(this._scrollEl);
            this._borderEl.removeChild(this._scrollEl);
            this._scrollEl = null;
        }

        if (this._summaryEl) {
            mini.clearEvent(this._summaryEl);
            this._borderEl.removeChild(this._summaryEl);
            this._summaryEl = null;
        }

        if (this.pager) {
            mini.clearEvent(this.pager);
            this.pager.destroy(removeEl);
            this.pager = null;
        }

        if (this._footerEl) {
            mini.clearEvent(this._footerEl);
            this._borderEl.removeChild(this._footerEl);
            this._footerEl = null;
        }

        if (this._resizeEl) {
            mini.clearEvent(this._resizeEl);
            this._borderEl.removeChild(this._resizeEl);
            this._resizeEl = null;
        }

        if (this._focusEl) {
            mini.clearEvent(this._focusEl);
            this._borderEl.removeChild(this._focusEl);
            this._focusEl = null;
        }

        if (this._bodyInnerEl) {
            mini.clearEvent(this._bodyInnerEl);
            this._bodyEl.removeChild(this._bodyInnerEl);
            this._bodyInnerEl = null;
        }

        if (this._bodyScrollEl) {
            mini.clearEvent(this._bodyScrollEl);
            this._bodyEl.removeChild(this._bodyScrollEl);
            this._bodyScrollEl = null;
        }

        if (this._bodyEl) {
            mini.clearEvent(this._bodyEl);
            this._borderEl.removeChild(this._bodyEl);
            this._bodyEl = null;
        }

        if (this._filterEl) {
            mini.clearEvent(this._filterEl);
            this._borderEl.removeChild(this._filterEl);
            this._filterEl = null;
        }
        
        if(this._topRightCellEl){
            mini.clearEvent(this._topRightCellEl);
            this._headerInnerEl.removeChild(this._topRightCellEl);
            this._topRightCellEl = null;
        }

        if (this._headerInnerEl) {
            mini.clearEvent(this._headerInnerEl);
            this._headerEl.removeChild(this._headerInnerEl);
            this._headerInnerEl = null;
        }

        if (this._headerEl) {
            mini.clearEvent(this._headerEl);
            this._borderEl.removeChild(this._headerEl);
            this._headerEl = null;
        }

        if (this._borderEl) {
            mini.clearEvent(this._borderEl);
            this.el.removeChild(this._borderEl);
            this._borderEl = null;
        }

        delete this.data;
        delete this._idRows;
        delete this._removes;
        delete this._originals;

        delete this.columns;
        delete this._bottomColumns;
        delete this._idColumns;
        delete this._nameColumns;

        delete this._selecteds;
        delete this._idSelecteds;

        delete this._cellErrors;
        delete this._cellMapErrors;
        
        delete this._margedCells;
        delete this._mergedCellMaps;
        delete this._groupDataView;

        mini.DataGrid.superclass.destroy.call(this, removeEl);
    },
    _initEvents: function () {
        js_touchScroll(this._bodyEl);

        mini._BindEvents(function () {
            mini.on(this.el, 'click', this.__OnClick, this);
            mini.on(this.el, 'dblclick', this.__OnDblClick, this);

            mini.on(this.el, 'mousedown', this.__OnMouseDown, this);
            mini.on(this.el, 'mouseup', this.__OnMouseUp, this);
            mini.on(this.el, 'mousemove', this.__OnMouseMove, this);
            mini.on(this.el, 'mouseover', this.__OnMouseOver, this);
            mini.on(this.el, 'mouseout', this.__OnMouseOut, this);

            mini.on(this.el, 'keydown', this.__OnKeyDown, this);
            mini.on(this.el, 'keyup', this.__OnKeyUp, this);

            mini.on(this.el, 'contextmenu', this.__OnContextMenu, this);

            mini.on(this._bodyEl, "scroll", this.__OnBodyScroll, this);//横向滚动条
            mini.on(this._scrollEl, "scroll", this.__OnHScroll, this);//虚拟滚动条

            mini.on(this.el, "mousewheel", this.__OnMousewheel, this);





        }, this);

        this._Resizer = new mini._Resizer(this);
        this._Splitter = new mini._ColumnSplitter(this);
        this._ColumnMove = new mini._ColumnMove(this);
        this._Select = new mini._GridSelect(this);
        this._CellTip = new mini._CellToolTip(this);
        this._Sort = new mini._GridSort(this);
        this._ColumnsMenu = new mini._ColumnsMenu(this);
    },

    _doShowRows: function () {
        this._resizeEl.style.display = this.allowResize ? "" : "none";
        this._footerEl.style.display = this.showFooter ? "" : "none";
        this._summaryEl.style.display = this.showSummaryRow ? "" : "none";
        this._filterEl.style.display = this.showFilterRow ? "" : "none";
        this._headerEl.style.display = this.showHeader ? "" : "none";
    },
    focus: function () {
        try {
            var row = this.getCurrent();
            if (row) {
                var rowEl = this._getRowEl(row);
                if (rowEl) {
                    var rowBox = mini.getBox(rowEl);
                    mini.setY(this._focusEl, rowBox.top);

                    if (isOpera) {
                        rowEl.focus();
                    } else if (isChrome) {
                        this.el.focus();
                    } else if (isGecko) {
                        this.el.focus();
                    } else {
                        this._focusEl.focus();
                    }
                }
            } else {
                this._focusEl.focus();
            }

        } catch (e) { }
    },
    _createPager: function () {
        this.pager = new mini.Pager();
        this.pager.render(this._footerEl);
        this.bindPager(this.pager);


    },
    setPager: function (value) {
        if (typeof value == "string") {
            var el = mini.byId(value);
            if (!el)
                return;
            mini.parse(value);
            value = mini.get(value);
            /* 当存在diypage时，调用setPageXXX时，diypage的数据不更新 潘正锋 2014-02-10 */
            this.diypager = value;
        }
        if (value) {
            value.update(this.pageIndex, this.pageSize, this.totalCount);
            this.bindPager(value);
        }
    },
    bindPager: function (pager) {
//    	pager.on("beforepagechanged", this.__OnPageChanged, this);
        pager.on("pagechanged", this.__OnPageChanged, this);
        this.on("load", function (e) {
            pager.update(this.pageIndex, this.pageSize, this.totalCount);
            this.totalPage = pager.totalPage;
        }, this);
    },

    setIdField: function (value) {
        this.idField = value;
    },
    getIdField: function () {
        return this.idField;
    },
    setUrl: function (url) {
        this.url = this.parseUrl(url);
    },
    getUrl: function (url) {
        return this.url;
    },
    setAutoLoad: function (value) {
        this.autoLoad = value;
    },
    getAutoLoad: function (value) {
        return this.autoLoad;
    },
    setCheckSelectionOnly: function (value) {
        this.onlyCheckSelection = value;
    },
    getCheckSelectionOnly: function () {
        return this.onlyCheckSelection;
    },
    accept: function () {
        this._canUpdateRowEl = false;
        /**因为在getData里面有clone方法，所以在类的内部一律用原始的方法获取 潘正锋 2013-10-14*/
        var data = this.data;
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            this.acceptRecord(row);
        }
        this._canUpdateRowEl = true;

        this.doUpdate();
    },
    acceptRecord: function (row) {
        row = this._getRow(row);
        if (!row) return;

        if (row._state == "removed") {
            this._removes.remove(row);
        }

        delete this._originals[row._uid];
        delete row._state;

        if (this._canUpdateRowEl) {
            this._updateRowEl(row);
        }
    },
    _clearOriginals: true,
    loadData: function (data) {

        if (!mini.isArray(data)) data = [];

        this.data = data;

        if (this._clearOriginals == true) {
            this._originals = {};
        }
        this._removes = [];
        this._idRows = {};
        this._selecteds = [];
        this._idSelecteds = {};

        this._cellErrors = [];
        this._cellMapErrors = {};

        this._margedCells = null;
        this._mergedCellMaps = null;

        this._groupDataView = null;

        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            row._uid = mini.DataGrid.RowID;

            row._index = i;
            this._idRows[row._uid] = row;

            mini.DataGrid.RowID += 1;
        }
        if (this.isVirtualScroll()) {
            /* ie下 滚动到最后，然后调用setData方法，会触发上百次srcoll事件 pzf 2014-08 */
            this.scrollIntoView (this._getRow(0));
        }
        this.doUpdate();

    },
    setData: function (data) {
        this.dataLoaded = true;
        this.loadData(data);
        if (data.length == 0 && this.pager) {
            this.pageIndex = 0;
            this.totalCount = 0;

            var ex = {
                result: {
                    data: data,
                    total: data.length
                },
                data: data,
                total: this.totalCount,
                cancel: false
            }
            this.fire("load", ex);
        }
    },
    getData: function () {
        /**解决用上面的克隆方式很卡的问题 潘正锋 2013-10-14*/
        return mini.clone(this.data,false);
    },
    toArray: function () {
        return this.data.clone();
    },
    getRange: function (start, end) {
        if (start > end) {
            var t = start;
            start = end;
            end = t;
        }
        var data = this.data;
        var range = [];
        for (var i = start, l = end; i <= l; i++) {
            var o = data[i];
            range.push(o);
        }
        return range;
    },
    selectRange: function (start, end) {
        if (!mini.isNumber(start)) start = this.indexOf(start);
        if (!mini.isNumber(end)) end = this.indexOf(end);
        if (mini.isNull(start) || mini.isNull(end)) return;

        var rs = this.getRange(start, end);
        this.selects(rs);
    },

    getHeaderHeight: function () {
        return this.showHeader ? mini.getHeight(this._headerEl) : 0;
    },
    getFooterHeight: function () {

        return this.showFooter ? mini.getHeight(this._footerEl) : 0;
    },
    getFilterRowHeight: function () {
        return this.showFilterRow ? mini.getHeight(this._filterEl) : 0;
    },
    getSummaryRowHeight: function () {
        return this.showSummaryRow ? mini.getHeight(this._summaryEl) : 0;
    },
    _getScrollHeight: function () {
        return this.isFrozen() ? mini.getHeight(this._scrollEl) : 0;
    },

    _CreateTopTr: function (name) {
        var isEmpty = name == "empty";
        var height = 0;
        if (isEmpty && this.showEmptyText == false) height = 1;

        var s = "";
        var columns = this.getBottomColumns();
        if (isEmpty) {
            s += '<tr style="height:' + height + 'px">';
        } else {
            if (isIE) {
                if (isIE6 || isIE7 || (isIE8 && !mini.boxModel) || (isIE9 && !mini.boxModel)) {
                    s += '<tr style="display:none;">';
                } else {
                    s += '<tr >';
                }
            } else {
                s += '<tr style="height:' + height + 'px">';
            }
        }
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var width = column.width;
            var id = this._createColumnId(column) + "$" + name;

            s += '<td id="' + id + '" style="padding:0;border:0;margin:0;height:' + height + 'px;';
            if (column.width) s += 'width:' + column.width;

            if (i < this.frozenStartColumn || column.visible == false) {
                s += ";display:none;";
            }

            s += '" ></td>';
        }
        s += "</tr>";
        return s;
    },

    _doUpdateFilterRow: function () {

        if (this._filterEl.firstChild) {
            this._filterEl.removeChild(this._filterEl.firstChild);
        }
        var isFrozen = this.isFrozen();
        var columns = this.getBottomColumns();
        var sb = [];
        sb[sb.length] = '<table class="mini-grid-table" cellspacing="0" cellpadding="0">';
        sb[sb.length] = this._CreateTopTr("filter");
        sb[sb.length] = '<tr >';
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var id = this._createFilterCellId(column);

            sb[sb.length] = '<td id="';
            sb[sb.length] = id;
            sb[sb.length] = '" class="mini-grid-filterCell" style="';
            if ((isFrozen && i < this.frozenStartColumn)
                    || column.visible == false
                    || column._hide == true) {
                sb[sb.length] = ";display:none;";
            }
            sb[sb.length] = '"><span class="mini-grid-hspace"></span></td>';
        }

        sb[sb.length] = '</tr></table><div class="mini-grid-scrollCell"></div>';
        this._filterEl.innerHTML = sb.join('');



        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (column.filter) {

                var cellEl = this.getFilterCellEl(i);
                column.filter.render(cellEl);
            }
        }
    },
    _deferUpdateSummaryRow: function () {
        var me = this;
        if (this._summaryTimer) return;
        this._summaryTimer = setTimeout(function () {
            me._doUpdateSummaryRow();
            me._summaryTimer = null;
        }, 1);
    },
    /**
    * 重绘汇总行
    * @private
    */
    _doUpdateSummaryRow: function () {
        var records = this.data;
        if (this._summaryEl.firstChild) {
            this._summaryEl.removeChild(this._summaryEl.firstChild);
        }
        var isFrozen = this.isFrozen();
        var columns = this.getBottomColumns();
        var sb = [];
        sb[sb.length] = '<table class="mini-grid-table" cellspacing="0" cellpadding="0">';
        sb[sb.length] = this._CreateTopTr("summary");
        sb[sb.length] = '<tr >';
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var id = this._createSummaryCellId(column);

            var e = this._OnDrawSummaryCell(records, column);
            var align = column.dataType == 'currency' || column.dataType == 'percent' ? 'fn-ar ' : '';
            sb[sb.length] = '<td id="';
            sb[sb.length] = id;
            sb[sb.length] = '" class="mini-grid-summaryCell ' + align + e.cellCls + '" style="' + e.cellStyle + ';';
            if ((isFrozen && i < this.frozenStartColumn)
                    || column.visible == false
                    || column._hide == true) {
                sb[sb.length] = ";display:none;";
            }
            sb[sb.length] = '"';
            sb[sb.length] = ' title="' + (e.title || '') + '"';
            sb[sb.length] = '>';
            sb[sb.length] = e.cellHtml;
            sb[sb.length] = '</td>';
        }

        sb[sb.length] = '</tr></table><div class="mini-grid-scrollCell"></div>';
        this._summaryEl.innerHTML = sb.join('');
        this.fire("updatesummary", e);
    },
    _createHeaderText: function (column) {
        var header = column.header;
        if (typeof header == "function") header = header.call(this, column);
        if (mini.isNull(header) || header === "") header = "&nbsp;";
        return header;
    },
    _isLastColumn: function (column) {
        var lastLevelOneColumns = this.columns[this.columns.length-1];//第一层最后一个
        var thiscolumns = this.columns;
        if(!getParent(column, thiscolumns)) return true;
        if(parentIsLast(column)) return true;
        function parentIsLast(column) {
            var parent = getParent(column, thiscolumns);
            if(!parent) return false;
            var pp = getParent(parent, thiscolumns);
            if(!pp) {
                if (parent._id == lastLevelOneColumns._id)
                    return true;
                return false;
            }
            var index = pp.columns.indexOf(parent);
            if (index == pp.columns.length - 1) {
                var p = getParent(parent, thiscolumns);
                if (p) {
                    if(parentIsLast(parent)) return true;
                }else return true;//没有上级就返回true

            } else
                return false;


        }
        function getParent(column) {

            for(var i = 0;i<thiscolumns.length;i++){
                var parent = getParentInner(column,thiscolumns[i]);
                if(parent) return parent;

            }

        }
        function getParentInner(column,rootColumn){
            if (column._pid == rootColumn._id ) {
                return  rootColumn;
            }
            var columns = rootColumn.columns;
            if (!columns) return null;
            for (var i = 0; i < columns.length; i++) {
                var parent = getParentInner(column,columns[i])
                if(parent) return parent;

            }
        }
    },
    /**
    * 重绘列头
    * @private
    * @param String 列头样式，默认为""。
    */
    _doUpdateHeader: function (style) {
        style = style || "";
        var isFrozen = this.isFrozen();
        var rows = this.getColumnRows();

        var bottomColumns = this.getBottomColumns();
        var columnLength = bottomColumns.length;

        var sb = [];
        sb[sb.length] = '<table style="' + style + ';display:table" class="mini-grid-table" cellspacing="0" cellpadding="0"  id="mini-grid-table-head'+this.getId()+'">';
        sb[sb.length] = this._CreateTopTr("header");

        for (var j = 0, k = rows.length; j < k; j++) {
            var columns = rows[j];

            sb[sb.length] = '<tr >';
            for (var i = 0, l = columns.length; i < l; i++) {
                var column = columns[i];
                var header = this._createHeaderText(column);

                var columnId = this._createColumnId(column);

                var sortCls = "";
                if (this.sortField == column.field) {
                    sortCls = this.sortOrder == "asc" ? "mini-grid-asc" : "mini-grid-desc";
                }

                sb[sb.length] = '<td id="';
                sb[sb.length] = columnId;
                sb[sb.length] = '" class="mini-grid-headerCell ' + sortCls + ' ' + (column.headerCls || "") + ' ';
                if (i == l - 1) {
                    if (this._isLastColumn(column))
                        sb[sb.length] = " mini-grid-last-column ";

                }
                var bottomIndex = bottomColumns.indexOf(column);
                sb[sb.length] = '" style="';
                if ((isFrozen && bottomIndex != -1 && bottomIndex < this.frozenStartColumn)
                    || column.visible == false
                    || column._hide == true) {
                    sb[sb.length] = ";display:none;";
                }

                if (column.columns && column.columns.length > 0 && column.colspan == 0) {
                    sb[sb.length] = ";display:none;";
                }

                if (column.headerStyle) {
                    sb[sb.length] = column.headerStyle + ';';
                }
                if (column.headerAlign) {
                    sb[sb.length] = 'text-align:' + column.headerAlign + ';';
                }

                sb[sb.length] = '" ';

                if (column.rowspan) {
                    sb[sb.length] = 'rowspan="' + column.rowspan + '" ';
                }
                if (column.colspan) {
                    sb[sb.length] = 'colspan="' + column.colspan + '" ';
                }

                sb[sb.length] = '><div class="mini-grid-cellInner">';

                sb[sb.length] = header;

                if (sortCls) {
                    sb[sb.length] = '<span class="mini-grid-sortIcon"></span>';
                }

                sb[sb.length] = '</div>';

                sb[sb.length] = '</td>';
            }
            sb[sb.length] = '</tr>';
        }
        sb[sb.length] = '</table>';

        var s = sb.join("");
        s = '<div class="mini-grid-header">' + s + '</div>';

        var s = '<div class="mini-grid-scrollHeaderCell"></div>';
        s += '<div class="mini-grid-topRightCell"></div>';

        this._headerInnerEl.innerHTML = sb.join('') + s;
        this._topRightCellEl = this._headerInnerEl.lastChild;




        this.fire("refreshHeader");
    },
    _destroyEditors: function () {
        var controls = mini.getChildControls(this);
        var editors = [];
        for (var i = 0, l = controls.length; i < l; i++) {
            var ui = controls[i];
            if (ui.el && mini.findParent(ui.el, this._rowCls)) {
                editors.push(ui);
                ui.destroy();
            }
        }

    },
    /**
    * 重绘表格区，包括列头区及数据区
    * @private
    */
    _doUpdateBody: function () {

        this._destroyEditors();


        var columns = this.getBottomColumns();

        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            delete column._hide;
        }


        this._doUpdateHeader();


        var data = this.data;


        var isVirtualScroll = this.isVirtualScroll();
        var viewRegion = this._markRegion();

        var sb = [];

        var autoHeight = this.isAutoHeight();
        var top = 0;

        if (isVirtualScroll) {
            top = viewRegion.top;
        }

        if (autoHeight) {
            sb[sb.length] = '<table class="mini-grid-table" cellspacing="0" cellpadding="0" id="mini-grid-table-body'+this.getId()+'">';
        } else {
            sb[sb.length] = '<table style="position:absolute;top:' + top + 'px;left:0;" class="mini-grid-table" cellspacing="0" cellpadding="0" id="mini-grid-table-body'+this.getId()+'">';
        }

        sb[sb.length] = this._CreateTopTr("body");

        if (data.length > 0) {
            if (this.isGrouping()) {
                var rowIndex = 0;

                var groups = this._getGroupDataView();
                var visibleColumns = this.getVisibleColumns();

                for (var j = 0, k = groups.length; j < k; j++) {
                    var group = groups[j];
                    var id = this.uid + "$group$" + group.id;
                    var e = this._OnDrawGroup(group);
				  /** 增加分组行统计功能 2013-05-10 潘正锋  */
                  sb[sb.length] = '<tr id="' + id + '" class="mini-grid-groupRow">';
					if(this.__fzhj){
						var hjtr = {};
						for(var g = 0, gl = group.rows.length; g < gl; g++){
							for(var key in this.__fzhj){
								if( !this.__fzhj[key]){
									this.__fzhj[key] = function(h, v){return h + v};
								}
								hjtr[key] = this.__fzhj[key]( hjtr[key] || 0, group.rows[g][key], group);
							}
						}
						
						var c = 0,cl = this.columns.length;
						for(; c < cl; c++){
							if(this.columns[c].field == this._groupField){
								sb.push('<td class="mini-grid-groupCell"><div class="mini-grid-groupHeader">');
			                    sb[sb.length] = '<div class="mini-grid-group-ecicon"></div>';
			                    sb[sb.length] = '<div class="mini-grid-groupTitle">' + e.cellHtml + '</div>';
			                    sb[sb.length] = '</div></td>';
							}else{
								sb.push('<td class="mini-grid-groupCell">' + (hjtr[this.columns[c].field] || '') + '</td>');
							}
						}
					}else{
						sb.push('<td class="mini-grid-groupCell" colspan="' + visibleColumns.length + '"><div class="mini-grid-groupHeader">');
	                    sb[sb.length] = '<div class="mini-grid-group-ecicon"></div>';
	                    sb[sb.length] = '<div class="mini-grid-groupTitle">' + e.cellHtml + '</div>';
	                    sb[sb.length] = '</div></td>';
					}
					sb.push('</tr>');

                    var rows = group.rows;
                    for (var i = 0, l = rows.length; i < l; i++) {
                        var row = rows[i];
                        this._createRow(row, sb, rowIndex++);
                    }

                    if (this.showGroupSummary) {

                    }
                }

            } else {

                if (isVirtualScroll) {

                    var start = viewRegion.start, end = viewRegion.end;
                    for (var i = start, l = end; i < l; i++) {
                        var row = data[i];
                        this._createRow(row, sb, i);
                    }

                } else {
                    for (var i = 0, l = data.length; i < l; i++) {
                        var row = data[i];
                        this._createRow(row, sb, i);
                    }
                }
            }
        } else {
            if (this.showEmptyText && (this._resultObject||this.dataLoaded)) {
                sb[sb.length] = '<tr ><td class="mini-grid-emptyText" colspan="' + this.getVisibleColumns().length + '">' + this.emptyText + '</td></tr>';
            }
        }
        sb[sb.length] = '</table>';

        if (this._bodyInnerEl.firstChild) {
            this._bodyInnerEl.removeChild(this._bodyInnerEl.firstChild);
        }

        this._bodyInnerEl.innerHTML = sb.join('');

        if (isVirtualScroll) {

            this._rowHeight = 23;
            try {
                var rowEl = this._bodyInnerEl.firstChild.rows[1];
                if (rowEl) this._rowHeight = rowEl.offsetHeight;
            } catch (ex) { }
            var rowAllHeight = this._rowHeight * this.data.length;

            this._bodyScrollEl.style.display = "block";
            this._bodyScrollEl.style.height = rowAllHeight + "px";
        } else {
            this._bodyScrollEl.style.display = "none";
        }
    },
    /**
    * 是否显示新增数据标识
    * @default true
    * @type Boolean
    */
    showNewRow: true,
    /**
    * 获取创建表格数据行的html
    * @private
    * @param row 行对象
    * @param sb html字符串数据，默认为[]
    * @param rowIndex 数据行rowIndex
    * @returns String 当!sb为true时，返回表格数据行的html，否则无返回值
    */
    _createRow: function (row, sb, rowIndex) {
        if (!mini.isNumber(rowIndex)) rowIndex = this.indexOf(row);

        var lastRow = rowIndex == this.data.length - 1;

        var isFrozen = this.isFrozen();
        var ret = !sb;
        if (!sb) sb = [];
        var columns = this.getBottomColumns();

        var rowClsIndex = -1;
        var rowCls = " ";
        var rowStyleIndex = -1;
        var rowStyle = " ";

        sb[sb.length] = '<tr id="';
        sb[sb.length] = this._createRowId(row);
        sb[sb.length] = '" class="mini-grid-row ';
        if (this.isSelected(row)) {
            sb[sb.length] = this._rowSelectedCls;
            sb[sb.length] = " ";
        }

        if (row._state == "deleted") sb[sb.length] = "mini-grid-deleteRow ";
        if (row._state == "added" && this.showNewRow) sb[sb.length] = "mini-grid-newRow ";


        if (this.allowAlternating && rowIndex % 2 == 1) {
            sb[sb.length] = this._alternatingCls;
            sb[sb.length] = " ";
        }

        rowClsIndex = sb.length;
        sb[sb.length] = rowCls;
        sb[sb.length] = '" style="';
        rowStyleIndex = sb.length;
        sb[sb.length] = rowStyle;
        sb[sb.length] = '">';

        var columnsCount = columns.length - 1;

        for (var j = 0, k = columnsCount; j <= k; j++) {
            var column = columns[j];

            var isModified = column.field ? this._HasRowModified(row, column.field) : false;
            var error = this.getCellError(row, column);

            var e = this._OnDrawCell(row, column, rowIndex, j);

            var cellId = this._createCellId(row, column);


            sb[sb.length] = '<td id="';
            sb[sb.length] = cellId;
            sb[sb.length] = '" class="mini-grid-cell ';
            if (e.cellCls) sb[sb.length] = e.cellCls;
            if (error) sb[sb.length] = " mini-grid-cell-error ";

            if (this._currentCell && this._currentCell[0] == row && this._currentCell[1] == column) {
                sb[sb.length] = " ";
                sb[sb.length] = this._cellSelectedCls;
            }

            if (lastRow) {
                sb[sb.length] = " mini-grid-last-row ";
            }
            if (j == columnsCount) {
                sb[sb.length] = " mini-grid-last-column ";
            }

            if (isFrozen && this.frozenStartColumn <= j && j <= this.frozenEndColumn) {
                sb[sb.length] = " ";
                sb[sb.length] = this._frozenCellCls + " ";
            }

            sb[sb.length] = '" style="';

            if (column.align) {
                sb[sb.length] = 'text-align:';
                sb[sb.length] = column.align;
                sb[sb.length] = ';';
            }

            if (e.allowCellWrap) {

                sb[sb.length] = "white-space:normal;text-overflow:normal;word-break:break-all;";
            }

            if (e.cellStyle) {
                sb[sb.length] = e.cellStyle;
                sb[sb.length] = ";";
            }

            if (isFrozen && j < this.frozenStartColumn || column.visible == false || column._hide == true) {

                sb[sb.length] = "display:none;";
            }
            if (e.visible == false) {

                sb[sb.length] = "display:none;";
            }

            sb[sb.length] = '" ';

            if (e.rowSpan) {
                sb[sb.length] = 'rowspan="' + e.rowSpan + '"';
            }
            if (e.colSpan) {
                sb[sb.length] = 'colspan="' + e.colSpan + '"';
            }

            sb[sb.length] = '>';

            if (isModified && this.showModified) {
                sb[sb.length] = '<div class="mini-grid-cell-inner mini-grid-cell-dirty" style="';





                sb[sb.length] = '">';
            }

            sb[sb.length] = e.cellHtml;
            if (isModified) {
                sb[sb.length] = '</div>';
            }
            sb[sb.length] = '</td>';

            if (e.rowCls) rowCls = e.rowCls;
            if (e.rowStyle) rowStyle = e.rowStyle;
        }

        sb[rowClsIndex] = rowCls;
        sb[rowStyleIndex] = rowStyle;

        sb[sb.length] = '</tr>';

        if (ret) {

            return sb.join('');
        }
    },
    /**
    * 是否虚拟滚动
    * @returns Boolean
    */
    isVirtualScroll: function () {
        return this.virtualScroll && this.isAutoHeight() == false && this.isGrouping() == false;
    },
    /**
    * 获取表格的scrollLeft
    * @returns Number
    */
    getScrollLeft: function () {
        return this.isFrozen() ? this._scrollEl.scrollLeft : this._bodyEl.scrollLeft;
    },
    /**
    * 重绘表格，当_allowUpdate为true时有效
    */
    doUpdate: function () {

        var sss = new Date();
        if (this._allowUpdate === false) return;



        if (this.isAutoHeight() == true) {
            this.addCls("mini-grid-auto");
        } else {
            this.removeCls("mini-grid-auto");
        }

        if (this._doUpdateSummaryRow) this._doUpdateSummaryRow();

        this._doUpdateBody();



        if (this.isFrozen()) {
            var me = this;
            me.__OnHScroll();

        } else {

        }
        this.doLayout();
    },
    /**
    * 修改IE下的样式问题
    * @private
    */
    _fixIE: function () {
        if (isIE) {

            this._borderEl.style.display = "none";
            h = this.getHeight(true);
            w = this.getWidth(true);
            this._borderEl.style.display = "";
        }
    },
    /**
    * 延迟调整布局
    * @private
    */
    _deferLayout: function () {


        var me = this;
        if (this._layoutTimer) return;
        this._layoutTimer = setTimeout(function () {
            me.doLayout();
            me._layoutTimer = null;
        }, 1);
    },

    /**
    * 调整布局
    */
    doLayout: function () {

        if (!this.canLayout()) return;   //行详请的时候使用


        this._filterEl.scrollLeft = this._summaryEl.scrollLeft = this._headerInnerEl.scrollLeft = this._bodyEl.scrollLeft;


        var sss = new Date();

        var isFrozen = this.isFrozen();

        var headerTable = this._headerInnerEl.firstChild, bodyTable = this._bodyInnerEl.firstChild;
        var filterTable = this._filterEl.firstChild, summaryTable = this._summaryEl.firstChild;


        var autoHeight = this.isAutoHeight();

        h = this.getHeight(true);
        w = this.getWidth(true);
        /** 解决当列表为空时，不出现滚动条的问题 潘正锋2013-05-06   */
        /**因为在getData里面有clone方法，所以在这里用原始的方法获取 潘正锋 2013-10-14*/
        var data = this.data;
        var elWidth = w;
        if (elWidth < 17) elWidth = 17;
        if (h < 0) h = 0;

        var bodyWidth = elWidth, bodyHeight = 2000;
        if (!autoHeight) {
            h = h - this.getHeaderHeight() - this.getFooterHeight() - this.getFilterRowHeight() - this.getSummaryRowHeight() - this._getScrollHeight();
            if (h < 0) h = 0;
            this._bodyEl.style.height = h + "px";
            bodyHeight = h;
        }
        else {
            this._bodyEl.style.height = "auto";
        }

        var bodyScrollHeight = this._bodyEl.scrollHeight;
        var bodyClientHeight = this._bodyEl.clientHeight;

        /* 删除if中的hiddenY判断 解决在ie8下，起初没有滚动条，然后改变每页数量后 依然没有滚动条的问题 pzf 2014 */
        if (this.isFitColumns()) {

            var maxLevel = this.getMaxColumnLevel();
            /* 删除if中的hiddenY判断 解决在ie8下，起初没有滚动条，然后改变每页数量后 依然没有滚动条的问题 pzf 2014 */
            if (bodyClientHeight >= bodyScrollHeight || autoHeight) {
                var w = (bodyWidth - 1) + 'px';
                headerTable.style.width = w;
                bodyTable.style.width = w;
                filterTable.style.width = w;
                summaryTable.style.width = w;
                /*解决多层表头右侧双边框问题 赵美丹 2013-05-27 */
                this._topRightCellEl.style.borderLeftWidth = "0px";
                /**解决IE8下表格在进行合并单元格后出现纵向滚动条的问题 潘正锋 2013-08*/
                if (mini.isIE8 && this.data.length>0) mini.addClass(this._bodyEl, 'mini-grid-hidden-y');

            } else {
                var w = parseInt(bodyWidth - 18);
                if (w < 0) w = 0;
                w = w + 'px';
                headerTable.style.width = w;
                bodyTable.style.width = w;
                filterTable.style.width = w;
                summaryTable.style.width = w;
		        if(maxLevel > 0){
		            this._topRightCellEl.style.borderLeftWidth = "1px";
		        }
                /**解决IE8下表格在进行合并单元格后出现纵向滚动条的问题 潘正锋 2013-08*/
                if (mini.isIE8 && this.data.length>0) mini.removeClass(this._bodyEl, 'mini-grid-hidden-y');
            }
            /** 解决当列表为空时，不出现滚动条的问题 潘正锋2013-05-06   */

            if (data.length == 0) {
                bodyTable.style.height = "1px";
                if (this._bodyEl.scrollWidth > this._bodyEl.clientWidth) {
                    bodyTable.style.height = "1px";
                } else {
                    bodyTable.style.height = "auto";
                }
            }
            if (autoHeight) {

                if (bodyWidth >= this._bodyEl.scrollWidth - 1) {
                    this._bodyEl.style.height = "auto";
                } else {
                    this._bodyEl.style.height = (bodyTable.offsetHeight + 17) + "px";
                }
            }
            if (autoHeight && isFrozen) {
                this._bodyEl.style.height = "auto";
            }

        } else {
            headerTable.style.width = bodyTable.style.width = "0px";
            filterTable.style.width = summaryTable.style.width = "0px";
            /**解决IE8下表格在进行合并单元格后出现纵向滚动条的问题 潘正锋 2013-08*/
            /* 删除if中的hiddenY判断 解决在ie8下，起初没有滚动条，然后改变每页数量后 依然没有滚动条的问题 pzf 2014 */
            if (bodyClientHeight >= bodyScrollHeight || autoHeight) {
                if (mini.isIE8 && this.data.length>0) mini.addClass(this._bodyEl, 'mini-grid-hidden-y');
            }else{
                if (mini.isIE8 && this.data.length>0) mini.removeClass(this._bodyEl, 'mini-grid-hidden-y');
            }
            /** 解决当列表为空时，不出现滚动条的问题 潘正锋2013-05-06   */
            if (data.length == 0) {
                bodyTable.style.height = "1px";
                if (this._bodyEl.scrollWidth > this._bodyEl.clientWidth) {
                    bodyTable.style.height = "1px";
                } else {
                    bodyTable.style.height = "auto";
                }
            }

        }

        if (this.isFitColumns()) {
            /* 删除if中的hiddenY判断 解决在ie8下，起初没有滚动条，然后改变每页数量后 依然没有滚动条的问题 pzf 2014 */
            if (bodyClientHeight < bodyScrollHeight) {
                var w = elWidth - 18;
                if (w < 0) w = 0;

            } else {
                this._headerInnerEl.style.width = "100%";
                this._filterEl.style.width = "100%";
                this._summaryEl.style.width = "100%";
                this._footerEl.style.width = "auto";
            }

        } else {
            this._headerInnerEl.style.width = "100%";
            this._filterEl.style.width = "100%";
            this._summaryEl.style.width = "100%";
            this._footerEl.style.width = "auto";
        }


        if (this.isFrozen()) {
            /* 删除if中的hiddenY判断 解决在ie8下，起初没有滚动条，然后改变每页数量后 依然没有滚动条的问题 pzf 2014 */
            if (bodyClientHeight < this._bodyEl.scrollHeight) {

                this._scrollEl.style.width = (elWidth - 17) + "px";
            } else {

                this._scrollEl.style.width = (elWidth) + "px";
            }

            if (this._bodyEl.offsetWidth < bodyTable.offsetWidth || this.isFrozen()) {

                this._scrollEl.firstChild.style.width = this._getColumnsScrollWidth() + "px";
                headerTable.style.width = bodyTable.style.width = "0px";
                filterTable.style.width = summaryTable.style.width = "0px";
            } else {
                this._scrollEl.firstChild.style.width = "0px";
            }


        }

        if (this.data.length == 0) {
            this._doInnerLayout();
        } else {
            var me = this;
            if (!this._innerLayoutTimer) {
                this._innerLayoutTimer = setTimeout(function () {
                    me._doInnerLayout();
                    me._innerLayoutTimer = null;
                }, 10);
            }
        }

        this._doLayoutTopRightCell();

        this.fire("layout");

        if (this.isFrozen()) {
            if (this._scrollEl.scrollLeft != this.__frozenScrollLeft) {
                this._doScrollFrozen();
            }
        }

    },
    /**
    * 调整列头最后一个单元格的布局
    * @private
    */
    _doLayoutTopRightCell: function () {
        var headerTable = this._headerInnerEl.firstChild;
        var width = headerTable.offsetWidth + 1;
        var height = headerTable.offsetHeight - 1;
        if (height < 0) height = 0;
        this._topRightCellEl.style.left = width + "px";
        this._topRightCellEl.style.height = height + "px";
    },

  /**
    * 调整表格内部布局
    * @private
    */
    _doInnerLayout: function () {
        this._doLayoutDetailRows();
        this._doLayoutEditingRows();
        mini.layout(this._filterEl);
        mini.layout(this._summaryEl);
        mini.layout(this._footerEl);
        mini.repaint(this.el);
        this._doLayouted = true;
    },









    /**
    * 设置固定列宽，为true时调整表格布局为固定列宽，否则，取消表格固定列宽布局
    * @param Boolean value
    */
    setFitColumns: function (value) {
        this.fitColumns = value;

        if (this.fitColumns) {
            mini.removeClass(this.el, "mini-grid-fixcolumns");


        } else {
            mini.addClass(this.el, "mini-grid-fixcolumns");
        }

        this.doLayout();
    },
    /**
    * 获取是否固定列宽
    * @returns Boolean
    */
    getFitColumns: function (value) {
        return this.fitColumns;
    },
    /**
    * 判断是否固定列宽
    * @returns Boolean fitColumns为true且无冻结列时返回true
    */
    isFitColumns: function () {
        return this.fitColumns && !this.isFrozen();
    },
    /**
   * 获取列滚动区域宽度
   * @returns Number 当表格存在横向滚动条时返回所有列宽度之和，否则返回0
   */
    _getColumnsScrollWidth: function () {

        if (this._bodyEl.offsetWidth < this._bodyInnerEl.firstChild.offsetWidth || this.isFrozen()) {
            var width = 0;
            var columns = this.getBottomColumns();
            for (var i = 0, l = columns.length; i < l; i++) {
                var column = columns[i];

                width += this.getColumnWidth(column);

            }
            return width;

        } else {
            return 0;
        }
    },
    /**
    * 获取rowId
    * @private
    * @param Object row 行对象
    * @returns String
    */
    _createRowId: function (row) {
        return this.uid + "$" + row._uid;
    },
    /**
    * 获取单元格id
    * @private
    * @param Object row  行对象
    * @param Object column 列信息
    * @returns String
    */
    _createCellId: function (row, column) {
        return this.uid + "$" + row._uid + "$" + column._id;
    },
    /**
    * 获取过滤行单元格id
    * @private
    * @param Object column 列信息
    * @returns String
    */
    _createFilterCellId: function (column) {
        return this.uid + "$filter$" + column._id;
    },
    /**
   * 获取汇总行单元格id
   * @private
   * @param Object column 列信息
   * @returns String
   */
    _createSummaryCellId: function (column) {
        return this.uid + "$summary$" + column._id;
    },
    /**
    * 获取行详情id
    * @private
    * @param Object row 行对象
    * @returns String
    */
    _createRowDetailId: function (row) {
        return this.uid + "$detail$" + row._uid;
    },
    /**
    * 获取列头inner DOM对象
    * @private
    * @returns DOM对象
    */
    _getHeaderScrollEl: function () {
        return this._headerInnerEl;
    },
    /**
    * 获取过滤行单元格DOM对象
    * @param Object/Number/String column 列对象或列index或列name
    * @returns DOM对象
    */
    getFilterCellEl: function (column) {
        column = this.getColumn(column);
        if (!column) return null;

        return mini.byId(this._createFilterCellId(column), this.el);
    },
    /**
    * 获取汇总行单元格DOM对象
    * @param Object/Number/String column 列信息或列index或列name
    * @returns DOM对象
    */
    getSummaryCellEl: function (column) {
        column = this.getColumn(column);
        if (!column) return null;
        return mini.byId(this._createSummaryCellId(column), this.el);
    },
    /**
    * 获取数据行DOM对象
    * @private
    * @param Object/Number row 行对象或行rowIndex
    * @returns DOM对象
    */
    _getRowEl: function (row) {
        row = this._getRow(row);
        if (!row) return null;
        var id = this._createRowId(row);
        return mini.byId(id, this.el);
    },
    /**
    * 获取单元格的布局
    * @param Object/Number row 行对象或行rowIndex
    * @param Object/Number/String column 列信息或列index或列name
    * @returns Object 单元格不存在时返回null，否则返回布局信息，格式：{x:0,y:0,width:100,height:100,left:0,right:10,top:0, bottom:10}
    */
    getCellBox: function (row, column) {
        row = this._getRow(row);
        column = this.getColumn(column);
        if (!row || !column) return null;
        var cellEl = this._getCellEl(row, column);
        if (!cellEl) return null;
        return mini.getBox(cellEl);
    },
    /**
    * 获取数据行的布局
    * @param Object/Number row 行对象或行rowIndex
    * @returns Object 单元格不存在时返回null，否则返回布局信息，格式：{x:0,y:0,width:100,height:100,left:0,right:10,top:0, bottom:10}
    */
    getRowBox: function (row) {
        var rowEl = this._getRowEl(row);
        if (rowEl) return mini.getBox(rowEl);
        return null;
    },
    /**
   * 获取所有数据行的布局
   * @returns Array 格式：[{top: 0, height: 10, bottom: 10}]
   */
    getRowsBox: function () {
        var rowBoxs = [];
        var rows = this.data;
        var top = 0;

        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            var id = this._createRowId(row);
            var rowEl = document.getElementById(id);
            if (rowEl) {
                var h = rowEl.offsetHeight;
                rowBoxs[i] = { top: top, height: h, bottom: top + h };
                top += h;
            }
        }
        return rowBoxs;
    },
    /**
    * 设置列宽，并重新布局
    * @param Object/Number/String column 列信息或列index或列name
    * @param Number/String width 列宽
    */
    setColumnWidth: function (column, width) {
        column = this.getColumn(column);
        if (!column) return;
        if (mini.isNumber(width)) width += "px";
        column.width = width;

        var id1 = this._createColumnId(column) + "$header";
        var id2 = this._createColumnId(column) + "$body";
        var id3 = this._createColumnId(column) + "$filter";
        var id4 = this._createColumnId(column) + "$summary";
        var el1 = document.getElementById(id1);
        var el2 = document.getElementById(id2);
        var el3 = document.getElementById(id3);
        var el4 = document.getElementById(id4);
        if (el1) el1.style.width = width;
        if (el2) el2.style.width = width;
        if (el3) el3.style.width = width;
        if (el4) el4.style.width = width;

        this.doLayout();

        this.fire("columnschanged");
    },
    /**
    * 获取列宽
    * @param Object/Number/String column 列信息或列index或列name
    * @returns Number
    */
    getColumnWidth: function (column) {
        column = this.getColumn(column);
        if (!column)
            return 0;
        if (column.visible == false)
            return 0;

        var w = 0;
        var id = this._createColumnId(column) + "$body";
        var el = document.getElementById(id);
        if (el) {
            var display = el.style.display;
            el.style.display = "";
            w = mini.getWidth(el);
            el.style.display = display;
        }
        return w;
    },
    /**
    * 调整列的显示/隐藏
    * @private
    * @param Object column 列信息
    * @param Boolean visible 是否显示
    */
    _doVisibleColumn: function (column, visible) {

        var columnEl = document.getElementById(this._createColumnId(column));
        if (columnEl) columnEl.style.display = visible ? "" : "none";

        var filterCell = document.getElementById(this._createFilterCellId(column));
        if (filterCell) filterCell.style.display = visible ? "" : "none";

        var summaryCell = document.getElementById(this._createSummaryCellId(column));
        if (summaryCell) summaryCell.style.display = visible ? "" : "none";


        var id1 = this._createColumnId(column) + "$header";
        var id2 = this._createColumnId(column) + "$body";
        var id3 = this._createColumnId(column) + "$filter";
        var id4 = this._createColumnId(column) + "$summary";
        var el1 = document.getElementById(id1);
        if (el1) el1.style.display = visible ? "" : "none";
        var el3 = document.getElementById(id3);
        if (el3) el3.style.display = visible ? "" : "none";
        var el4 = document.getElementById(id4);
        if (el4) el4.style.display = visible ? "" : "none";




        if (el2) {
            if (visible && el2.style.display == "") return;
            if (!visible && el2.style.display == "none") return;
        }

        var el2 = document.getElementById(id2);
        if (el2) el2.style.display = visible ? "" : "none";

        var data = this.data;

        if (this.isVirtualScroll()) {
            var viewRegion = this._markRegion();
            var start = viewRegion.start, end = viewRegion.end;
            for (var i = start, l = end; i < l; i++) {
                var row = data[i];
                var cellId = this._createCellId(row, column);
                var cellEl = document.getElementById(cellId);
                if (cellEl) {
                    cellEl.style.display = visible ? "" : "none";
                }
            }
        } else {
            for (var i = 0, l = this.data.length; i < l; i++) {
                var row = this.data[i];
                var cellId = this._createCellId(row, column);
                var cellEl = document.getElementById(cellId);
                if (cellEl) {
                    cellEl.style.display = visible ? "" : "none";
                }
            }
        }



    },
    /**
    * 调整列的样式
    * @private
    */
    _doClassColumn: function (column, cls, add) {

        var data = this.data;

        if (this.isVirtualScroll()) {
            var viewRegion = this._markRegion();
            var start = viewRegion.start, end = viewRegion.end;
            for (var i = start, l = end; i < l; i++) {
                var row = data[i];
                var cellId = this._createCellId(row, column);
                var cellEl = document.getElementById(cellId);
                if (cellEl) {
                    if (add) {
                        mini.addClass(cellEl, cls);
                    } else {
                        mini.removeClass(cellEl, cls);
                    }
                }
            }
        } else {
            for (var i = 0, l = this.data.length; i < l; i++) {
                var row = this.data[i];
                var cellId = this._createCellId(row, column);
                var cellEl = document.getElementById(cellId);
                if (cellEl) {
                    if (add) {
                        mini.addClass(cellEl, cls);
                    } else {
                        mini.removeClass(cellEl, cls);
                    }
                }
            }
        }
    },

    /**
    * 调整列的锁定状态
    * @private
    */
    __doFrozen: function () {

        this._scrollEl.scrollLeft = this._headerInnerEl.scrollLeft = this._bodyEl.scrollLeft = 0;

        var isFrozen = this.isFrozen();
        if (isFrozen) {
            mini.addClass(this.el, this._frozenCls);
        } else {
            mini.removeClass(this.el, this._frozenCls);
        }

        var columns = this.getBottomColumns();

        var filterTable = this._filterEl.firstChild, summaryTable = this._summaryEl.firstChild;

        if (isFrozen) {
            filterTable.style.height = jQuery(filterTable).outerHeight() + "px";
            summaryTable.style.height = jQuery(summaryTable).outerHeight() + "px";
        } else {
            filterTable.style.height = "auto";
            summaryTable.style.height = "auto";
        }

        if (this.isFrozen()) {

            for (var i = 0, l = columns.length; i < l; i++) {
                var column = columns[i];
                if (this.frozenStartColumn <= i && i <= this.frozenEndColumn) {
                    this._doClassColumn(column, this._frozenCellCls, true);
                } else {
                    this._doClassColumn(column, this._frozenCellCls, false);
                }
            }


            this._doFixRowsHeight(true);
        } else {
            for (var i = 0, l = columns.length; i < l; i++) {
                var column = columns[i];
                delete column._hide;
                if (column.visible) {
                    this._doVisibleColumn(column, true);
                }
                this._doClassColumn(column, this._frozenCellCls, false);
            }
            this._doUpdateHeader();


            this._doFixRowsHeight(false);
        }

        this.doLayout();


        this._fixIE();


    },
    /**
    * 延迟1毫秒调整列锁定状态
    * @private
    */
    _deferFrozen: function () {
        this._headerTableHeight = mini.getHeight(this._headerInnerEl.firstChild);

        var me = this;
        if (this._deferFrozenTimer) clearTimeout(this._deferFrozenTimer);
        this._deferFrozenTimer = setTimeout(function () {

            me.__doFrozen();
        }, 1);
    },
    /**
    * 设置锁定开始列，并重新布局
    * @param Number value 列index
    */
    setFrozenStartColumn: function (value) {

        var sss = new Date();
        value = parseInt(value);
        if (isNaN(value)) return;
        this.frozenStartColumn = value;
        this._deferFrozen();
    },
    /**
    * 获取锁定开始列
    * @returns Number
    */
    getFrozenStartColumn: function () {
        return this.frozenStartColumn;
    },
    /**
    * 设置锁定截止列，并重新布局
    * @param Number value 列index
    */
    setFrozenEndColumn: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.frozenEndColumn = value;

        this._deferFrozen();
    },
    /**
    * 获取锁定截止列
    * @returns Number
    */
    getFrozenEndColumn: function () {
        return this.frozenEndColumn;
    },
    /**
    * 解除列锁定
    */
    unFrozenColumns: function () {
        this.setFrozenStartColumn(-1);
        this.setFrozenEndColumn(-1);
    },
    /**
    * 锁定列
    * @param Number start 锁定开始列
    * @param Number end 锁定截止列
    */
    frozenColumns: function (start, end) {
        this.unFrozenColumns();
        this.setFrozenStartColumn(start);
        this.setFrozenEndColumn(end);
    },
    /**
    * 数据行高度，修改表格行样式时需同步调整该值
    * @default 23
    * @private
    * @type Number
    */
    _rowHeight: 23,
    /**
    * 获取虚拟滚动的布局信息
    * @private
    * @returns Object 格式：{start: 起始行rowIndex, end: 截止行rowIndex, top: top坐标 }
    */
    _markRegion: function () {
        var region = this._getViewNowRegion();

        var rowHeight = this._rowHeight;
        var scrollTop = this._bodyEl.scrollTop;

        var start = region.start, end = region.end;
        for (var i = 0, l = this.data.length; i < l; i += this._virtualRows) {
            var i2 = i + this._virtualRows;
            if (i <= start && start < i2) {
                start = i;
            }
            if (i < end && end <= i2) {
                end = i2;
            }
        }
        if (end > this.data.length) end = this.data.length;

        var top = start * rowHeight;

        this._viewRegion = { start: start, end: end, top: top };

        return this._viewRegion;
    },
    /**
   * 获取当前表格已加载数据区域的布局信息
   * @private
   * @returns Object 格式：{start: 起始行rowIndex, end: 截止行rowIndex}
   */
    _getViewNowRegion: function () {

        var rowHeight = this._rowHeight;
        var scrollTop = this._bodyEl.scrollTop;
        var bodyHeight = this._bodyEl.offsetHeight;

        var startRow = parseInt(scrollTop / rowHeight);
        var endRow = parseInt((scrollTop + bodyHeight) / rowHeight) + 1;
        var region = { start: startRow, end: endRow };
        return region;
    },
    /**
    * 是否需要虚拟滚动
    * @private
    * @returns Boolean 当前滚动区域数据已加载时返回false，否则返回true
    */
    _canVirtualUpdate: function () {
        if (!this._viewRegion) return true;
        var region = this._getViewNowRegion();
        if (this._viewRegion.start <= region.start && region.end <= this._viewRegion.end) return false;
        return true;
    },
    /**
    * 绘制虚拟滚动区
    * @private
    */
    _tryUpdateScroll: function () {
        var doUpdate = this._canVirtualUpdate();
        if (doUpdate) {
            this.doUpdate();
        }
    },
    /**
    * 表格数据区滚动事件处理函数（非锁定列情况下）
    * @private
    * @param DataGrid e
    */
    __OnBodyScroll: function (e) {


        this._filterEl.scrollLeft = this._summaryEl.scrollLeft = this._headerInnerEl.scrollLeft = this._bodyEl.scrollLeft;

        var me = this;
        setTimeout(function () {
            me._headerInnerEl.scrollLeft = me._bodyEl.scrollLeft;
        }, 10);

        if (this.isVirtualScroll()) {

            var me = this;
            if (this._scrollTopTimer) {
                clearTimeout(this._scrollTopTimer);
            }
            this._scrollTopTimer = setTimeout(function () {
                me._scrollTopTimer = null;
                me._tryUpdateScroll();
            }, 100);

        }
    },
    /**
    * 表格数据区滚动事件处理函数（锁定列情况下）
    * @private
    * @param DataGrid e
    */
    __OnHScroll: function (e) {

        var me = this;
        if (this._HScrollTimer) return;
        this._HScrollTimer = setTimeout(function () {
            me._doScrollFrozen();
            me._HScrollTimer = null;

        }, 30);




    },
    /**
    * 表格数据区滚动处理（锁定列情况下）
    * @private
    */
    _doScrollFrozen: function () {

        if (!this.isFrozen()) return;

        var columns = this.getBottomColumns();

        var x = this._scrollEl.scrollLeft;
        this.__frozenScrollLeft = x;

        var startColumn = this.frozenEndColumn;
        var left = 0;
        for (var i = startColumn + 1, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (!column.visible) {
                continue;
            }
            var w = this.getColumnWidth(column);
            if (x <= left) break;
            startColumn = i;
            left += w;
        }

        if (this._lastStartColumn === startColumn) {

            return;
        }

        this._lastStartColumn = startColumn;
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            delete column._hide;
            if (this.frozenEndColumn < i && i <= startColumn) {
                column._hide = true;
            }
        }


        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];

            if (i < this.frozenStartColumn
                || (i > this.frozenEndColumn && i < startColumn)
                || column.visible == false
                ) {
                this._doVisibleColumn(column, false);
            } else {
                this._doVisibleColumn(column, true);
            }
        }


        var style = "width:100%;";
        if (this._scrollEl.offsetWidth < this._scrollEl.scrollWidth || !this.isFitColumns()) {
            style = "width:0px";
        }

        this._doUpdateHeader(style);








        var h = this._headerTableHeight;
        if (mini.isIE9) h -= 1;
        mini.setHeight(this._headerInnerEl.firstChild, h);



        for (var i = this.frozenEndColumn + 1, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (!column.visible) continue;
            if (i <= startColumn) {
                this._doVisibleColumn(column, false);
            } else {
                this._doVisibleColumn(column, true);
            }
        }


        this._doUpdateDetailColSpan();


        this._doMargeCells();

        this._doLayoutTopRightCell();

        this.fire("layout");
    },
    /**
    * 调整数据行的高度
    * @private
    * @param Boolean fix 为true时将数据行的高度修改为0px，为false时将数据行的高度修改为空
    */
    _doFixRowsHeight: function (fix) {

        var data = this.data;
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            var rowEl = this._getRowEl(row);
            if (rowEl) {
                if (fix) {
                    var h = 0;





                    rowEl.style.height = h + "px";
                } else {
                    rowEl.style.height = "";
                }
            }
        }
    },
    /**
    * 绘制表格线条
    * @private
    */
    _doGridLines: function () {

        if (this.showVGridLines) {
            mini.removeClass(this.el, "mini-grid-hideVLine");
        } else {
            mini.addClass(this.el, "mini-grid-hideVLine");
        }
        if (this.showHGridLines) {
            mini.removeClass(this.el, "mini-grid-hideHLine");
        } else {
            mini.addClass(this.el, "mini-grid-hideHLine");
        }
    },
    /**
    * 设置横向表格线条的显示/隐藏
    * @param Boolean value 是否显示
    */
    setShowHGridLines: function (value) {
        if (this.showHGridLines != value) {
            this.showHGridLines = value;
            this._doGridLines();
            this.doLayout();
        }
    },
    /**
    * 获取是否显示横向表格线条
    * @returns Boolean
    */
    getShowHGridLines: function () {
        return this.showHGridLines;
    },
    /**
    * 设置纵向表格线条的显示/隐藏
    * @param Boolean value 是否显示
    */
    setShowVGridLines: function (value) {
        if (this.showVGridLines != value) {
            this.showVGridLines = value;
            this._doGridLines();
            this.doLayout();
        }
    },
    /**
    * 获取是否显示纵向表格线条
    * @returns Boolean
    */
    getShowVGridLines: function () {
        return this.showVGridLines;
    },
    /**
    * 设置是否显示过滤行
    * @param Boolean value 是否显示
    */
    setShowFilterRow: function (value) {
        if (this.showFilterRow != value) {
            this.showFilterRow = value;
            this._doShowRows();
            this.doLayout();
        }
    },
    /**
    * 获取是否显示过滤行
    * @returns Boolean
    */
    getShowFilterRow: function () {
        return this.showFilterRow;
    },
    /**
    * 设置是否显示汇总行
    * @param Boolean value 是否显示
    */
    setShowSummaryRow: function (value) {
        if (this.showSummaryRow != value) {
            this.showSummaryRow = value;
            this._doShowRows();
            this.doLayout();
        }
    },
    /**
    * 获取是否显示汇总行
    * @returns Boolean
    */
    getShowSummaryRow: function () {
        return this.showSummaryRow;
    },
    /**
    * 绘制斑马纹
    * @private
    */
    _doAlternating: function () {
        if (this.allowAlternating == false) return;
        var data = this.data;
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            var rowEl = this._getRowEl(row);
            if (rowEl) {
                if (this.allowAlternating && i % 2 == 1) {
                    mini.addClass(rowEl, this._alternatingCls);
                } else {
                    mini.removeClass(rowEl, this._alternatingCls);
                }
            }
        }
    },
    /**
    * 设置是否显示斑马纹
    * @param Boolean value 是否显示
    */
    setAllowAlternating: function (value) {
        if (this.allowAlternating != value) {
            this.allowAlternating = value;
            this._doAlternating();
        }
    },
    /**
    * 获取是否显示斑马纹
    * @returns Boolean
    */
    getAllowAlternating: function () {
        return this.allowAlternating;
    },
    /**
    * 设置是否移动到行时高亮显示
    * @param Boolean value 是否高亮显示
    */
    setEnableHotTrack: function (value) {
        if (this.enableHotTrack != value) {
            this.enableHotTrack = value;
        }
    },
    /**
    * 获取是否移动到行时高亮显示
    * @returns Boolean
    */
    getEnableHotTrack: function () {
        return this.enableHotTrack;
    },
    /**
    * 设置是否显示Loading遮罩效果
    * @param Boolean value 是否显示
    */
    setShowLoading: function (value) {
        this.showLoading = value;
    },
    /**
    * 设置是否允许单元格换行
    * @param Boolean value 是否允许
    */
    setAllowCellWrap: function (value) {

        if (this.allowCellWrap != value) {
            this.allowCellWrap = value;
        }
    },
    /**
   * 获取是否允许单元格换行
   * @returns Boolean
   */
    getAllowCellWrap: function () {
        return this.allowCellWrap;
    },
    /**
    * 设置是否允许列头文本换行
    * @param Boolean value 是否允许
    */
    setAllowHeaderWrap: function (value) {
        this.allowHeaderWrap = value;
        mini.removeClass(this.el, "mini-grid-headerWrap");
        if (value) {
            mini.addClass(this.el, "mini-grid-headerWrap");
        }
    },
    /**
    * 获取是否允许列头文本换行
    * @returns Boolean
    */
    getAllowHeaderWrap: function () {
        return this.allowHeaderWrap;
    },
    /**
    * 设置是否显示列头菜单
    * @param Boolean value 是否显示
    */
    setShowColumnsMenu: function (value) {
        this.showColumnsMenu = value;
    },
    /**
    * 获取是否显示列头菜单
    * @returns Boolean
    */
    getShowColumnsMenu: function () {
        return this.showColumnsMenu;
    },
    setEditNextOnEnterKey: function (value) {
        this.editNextOnEnterKey = value;
    },
    getEditNextOnEnterKey: function () {
        return this.editNextOnEnterKey;
    },
    setEditOnTabKey: function (value) {
        this.editOnTabKey = value;
    },
    getEditOnTabKey: function () {
        return this.editOnTabKey;
    },

    /**
    * 设置是否虚拟滚动
    * @param Boolean value 是否虚拟滚动
    */
    setVirtualScroll: function (value) {
        if (this.virtualScroll != value) {
            this.virtualScroll = value;
        }
    },
    /**
    * 获取是否虚拟滚动
    * @returns Boolean
    */
    getVirtualScroll: function () {
        return this.virtualScroll;
    },
    /**
    * 设置表格数据区的scrollTop
    * @param Number value scrollTop值
    */

    setScrollTop: function (value) {
        this.scrollTop = value;
        this._bodyEl.scrollTop = value;



    },
    /**
    * 获取表格数据区的scrollTop
    * @returns Number
    */
    getScrollTop: function () {
        return this._bodyEl.scrollTop;
    },
    /**
    * 设置表格数据区样式
    * @param String value 样式
    */
    setBodyStyle: function (value) {
        this.bodyStyle = value;
        mini.setStyle(this._bodyEl, value);
    },
    /**
   * 获取表格数据区样式
   * @returns String
   */
    getBodyStyle: function () {
        return this.bodyStyle;
    },
    /**
    * 设置表格数据区样式类
    * @param String value 样式类
    */
    setBodyCls: function (value) {
        this.bodyCls = value;
        mini.addClass(this._bodyEl, value);
    },
    /**
    * 获取表格数据区样式类
    * @returns String
    */
    getBodyCls: function () {
        return this.bodyCls;
    },
    /**
    * 设置表格底部工具条样式
    * @param String value 样式
    */
    setFooterStyle: function (value) {
        this.footerStyle = value;
        mini.setStyle(this._footerEl, value);
    },
    /**
    * 获取表格底部工具条样式
    * @returns String
    */
    getFooterStyle: function () {
        return this.footerStyle;
    },
    /**
    * 设置表格底部工具条样式类
    * @param String value 样式类
    */
    setFooterCls: function (value) {
        this.footerCls = value;
        mini.addClass(this._footerEl, value);
    },
    /**
    * 获取表格底部工具条样式类
    * @returns String
    */
    getFooterCls: function () {
        return this.footerCls;
    },
    /**
    * 设置是否显示列头
    * @param Boolean value 是否显示
    */
    setShowHeader: function (value) {
        this.showHeader = value;
        this._doShowRows();
        this.doLayout();
    },
    setShowPager: function (value) {
        this.setShowFooter(value);
    },
    getShowPager: function () {
        return this.showFooter;
    },
    setShowFooter: function (value) {
        this.showFooter = value;
        this._doShowRows();
        this.doLayout();
    },
    getShowFooter: function () {
        return this.showFooter;
    },
    /**
    * 设置是否自动收起其他行的行详情，展开行详情时触发
    * @param Boolean value 是否显示
    */
    setAutoHideRowDetail: function (value) {
        this.autoHideRowDetail = value;

    },











    /**
    * 设置排序模式
    * @param String 取值范围server、client
    */
    setSortMode: function (value) {
        this.sortMode = value;
    },
    /**
    * 获取排序模式
    * @returns String
    */
    getSortMode: function () {
        return this.sortMode;
    },
    /**
    * 设置是否允许列排序
    * @param Boolean value 是否允许
    */
    setAllowSortColumn: function (value) {
        this.allowSortColumn = value;
    },
    /**
    * 获取是否允许列排序
    * @returns Boolean
    */
    getAllowSortColumn: function () {
        return this.allowSortColumn;
    },
    /**
    * 设置是否允许移动列
    * @param Boolean value 是否允许
    */
    setAllowMoveColumn: function (value) {
        this.allowMoveColumn = value;
    },
    /**
    * 获取是否允许移动列
    * @returns Boolean
    */
    getAllowMoveColumn: function () {
        return this.allowMoveColumn;
    },
    /**
    * 设置是否允许拖拽调节列宽度
    * @param Boolean value 是否允许
    */
    setAllowResizeColumn: function (value) {
        this.allowResizeColumn = value;
    },
    /**
    * 获取是否允许拖拽调节列宽度
    * @returns Boolean
    */
    getAllowResizeColumn: function () {
        return this.allowResizeColumn;
    },
    /**
    * 设置是否加载完是否自动选中
    * @param Boolean value 是否加载完是否自动选中
    */
    setSelectOnLoad: function (value) {
        this.selectOnLoad = value;
    },
    /**
    * 获取是否加载完是否自动选中
    * @returns Boolean
    */
    getSelectOnLoad: function () {
        return this.selectOnLoad;
    },
    /**
    * 设置是否允许拖拽调节表格尺寸
    * @param Boolean value 是否允许
    */
    setAllowResize: function (value) {
        this.allowResize = value;

        this._resizeEl.style.display = this.allowResize ? "" : "none";
    },
    /**
    * 获取是否允许拖拽调节表格尺寸
    * @returns Boolean
    */
    getAllowResize: function () {
        return this.allowResize;
    },
    /**
    * 设置是否允许数据为空时显示提示文本
    * @param Boolean value 是否允许
    */
    setShowEmptyText: function (value) {
        this.showEmptyText = value;
    },
    /**
    * 获取是否允许数据为空时显示提示文本
    * @returns Boolean
    */
    getShowEmptyText: function () {
        return this.showEmptyText;
    },
    /**
    * 设置数据为空时的提示文本
    * @param String value 提示文本
    */
    setEmptyText: function (value) {
        this.emptyText = value;
    },
    /**
    * 获取数据为空时的提示文本
    * @returns String
    */
    getEmptyText: function () {
        return this.emptyText;
    },
    /**
    * 设置是否显示修改标识
    * @param Boolean value 是否允许
    */
    setShowModified: function (value) {
        this.showModified = value;
    },
    /**
    * 获取是否显示修改标识
    * @returns Boolean
    */
    getShowModified: function () {
        return this.showModified;
    },
    /**
    * 设置是否显示新增标识
    * @param Boolean value 是否允许
    */
    setShowNewRow: function (value) {
        this.showNewRow = value;
    },
    /**
    * 获取是否显示新增标识
    * @returns Boolean
    */
    getShowNewRow: function () {
        return this.showNewRow;
    },

    /**
    * 设置触发单元格编辑的事件，取值范围：cellclick、celldblclick
    * @param String value 事件名称
    */
    setCellEditAction: function (value) {
        this.cellEditAction = value;
    },
    /**
    * 获取触发单元格编辑的事件
    * @returns String
    */
    getCellEditAction: function () {
        return this.cellEditAction;
    },
    /**
   * 设置编辑单元格时是否自动验证
   * @param Boolean value 是否自动验证
   */
    setAllowCellValid: function (value) {
        this.allowCellValid = value;
    },
    /**
    * 获取编辑单元格时是否自动验证
    * @returns Boolean
    */
    getAllowCellValid: function () {
        return this.allowCellValid;
    },


    /**
    * 是否允许重新布局，行详情的显示/隐藏时使用
    * @private
    * @default true
    * @type Boolean
    */

    __allowLayout: true,
    /**
    * 显示所有行详情
    */
    showAllRowDetail: function () {
        this.__allowLayout = false;
        for (var i = 0, l = this.data.length; i < l; i++) {
            var row = this.data[i];
            this.showRowDetail(row);
        }
        this.__allowLayout = true;
        this.doLayout();
    },
    /**
    * 隐藏所有行详情
    */
    hideAllRowDetail: function () {
        this.__allowLayout = false;
        for (var i = 0, l = this.data.length; i < l; i++) {
            var row = this.data[i];
            if (this.isShowRowDetail(row)) {
                this.hideRowDetail(row);
            }
        }
        this.__allowLayout = true;
        this.doLayout();
    },
    /**
    * 显示行详情
    * @param Object/Number row 行对象或行rowIndex 
    */
    showRowDetail: function (row) {
        row = this._getRow(row);
        if (!row) return;
        var tr = this.getRowDetailEl(row);
        tr.style.display = "";

        row._showDetail = true;

        var rowEl = this._getRowEl(row);
        mini.addClass(rowEl, "mini-grid-expandRow");

        this.fire("showrowdetail", { record: row });

        if (this.__allowLayout) {
            this.doLayout();
        }
        var me = this;




    },
    /**
    * 隐藏行详情
    * @param Object/Number row 行对象或行rowIndex 
    */
    hideRowDetail: function (row) {
        row = this._getRow(row);
        if (!row) return;
        var id = this._createRowDetailId(row);
        var tr = document.getElementById(id);
        if (tr) {
            tr.style.display = "none";
        }
        delete row._showDetail;
        var rowEl = this._getRowEl(row);
        mini.removeClass(rowEl, "mini-grid-expandRow");

        this.fire("hiderowdetail", { record: row });
        if (this.__allowLayout) {
            this.doLayout();
        }
    },
    /**
   * 切换行详情的显示/隐藏
   * @param Object/Number row 行对象或行rowIndex 
   */
    toggleRowDetail: function (row) {
        row = this._getRow(row);
        if (!row) return;
        if (grid.isShowRowDetail(row)) {
            grid.hideRowDetail(row);
        } else {
            grid.showRowDetail(row);
        }
    },
    /**
    * 是否显示行详情
    * @param Object/Number row 行对象或行rowIndex 
    * @returns Boolean
    */
    isShowRowDetail: function (row) {
        row = this._getRow(row);
        if (!row) return false;
        return !!row._showDetail;
    },
    /**
    * 获取行详情DOM对象
    * @param Object/Number row 行对象或行rowIndex 
    * @returns DOM对象
    */
    getRowDetailEl: function (row) {

        row = this._getRow(row);
        if (!row) return null;
        var id = this._createRowDetailId(row);
        var el = document.getElementById(id);
        if (!el) {
            el = this._createRowDetail(row);
        }
        return el;
    },
    /**
    * 获取行详情第0个单元格DOM元素
    * @param Object/Number row 行对象或行rowIndex 
    * @returns DOM对象
    */
    getRowDetailCellEl: function (row) {
        var el = this.getRowDetailEl(row);
        if (el) return el.cells[0];
    },
    /**
    * 创建行详情tr
    * @private
    * @param Object/Number row 行对象或行rowIndex 
    * @returns DOM对象
    */
    _createRowDetail: function (row) {
        var tr = this._getRowEl(row);
        var id = this._createRowDetailId(row);
        var colSpan = this.getBottomColumns().length;
        jQuery(tr).after('<tr id="' + id + '" class="mini-grid-detailRow"><td class="mini-grid-detailCell" colspan="' + colSpan + '"></td></tr>');
        this._doUpdateDetailColSpan();
        return document.getElementById(id);
    },
    /**
    * 获取显示列数
    * @private
    * @returns Number
    */
    _getColSpan: function () {
        var tr = this._bodyInnerEl.firstChild.getElementsByTagName("tr")[0];
        var tds = tr.getElementsByTagName("td");
        var colSpan = 0;
        for (var i = 0, l = tds.length; i < l; i++) {
            var td = tds[i];
            if (td.style.display != "none") {
                colSpan++;
            }
        }
        return colSpan;
    },
    /**
    * 合并行详情的列
    * @private
    */
    _doUpdateDetailColSpan: function () {

        var trs = jQuery(".mini-grid-detailRow", this.el);

        var colSpan = this._getColSpan();
        for (var i = 0, l = trs.length; i < l; i++) {
            var tr = trs[i];
            var td = tr.firstChild;
            td.colSpan = colSpan;
        }
    },
    /**
    * 调整行详情的布局
    * @private
    */
    _doLayoutDetailRows: function () {
        for (var i = 0, l = this.data.length; i < l; i++) {
            var row = this.data[i];
            if (row._showDetail == true) {
                var id = this._createRowDetailId(row);
                var el = document.getElementById(id);
                if (el) {
                    mini.layout(el);
                }
            }
        }

    },
    /**
    * 调整编辑行的布局
    * @private
    */
    _doLayoutEditingRows: function () {

        for (var i = 0, l = this.data.length; i < l; i++) {
            var row = this.data[i];
            if (row._editing == true) {
                var el = this._getRowEl(row);
                if (el) {
                    mini.layout(el);
                }
            }
        }
    },



    /**
    * 翻页处理
    * @private
    * @param DataGrid e
    */
    __OnPageChanged: function (e) {

        /** 解决当列表为空时，翻页加载,以及每页记录数在查询后失效的问题 潘正锋 2013-05-04 */
        /** 解决当列表为空时，刷新无效 潘正锋 2013-05-04 */
        if (this.data.length == 0 && !e.isreload){
            this.setPageSize(e.pageSize);
            return;
        }
        /*添加pagechanged事件 潘正锋 2014-06*/
        this.fire("pagechanged", e);
        e.cancel = true;
        this.gotoPage(e.pageIndex, e.pageSize, e.totalCount);
    },
    setShowReloadButton: function (value) {
        this.pager.setShowReloadButton(value);
    },
    getShowReloadButton: function () {
        return this.pager.getShowReloadButton();
    },
    /**
     * 设置是否显示翻页信息
     * @param {Boolean} 是否显示翻页信息
     */
    setShowPageInfo: function (value) {
        this.pager.setShowPageInfo(value);
    },
    /**
     * 获取是否显示翻页信息
     * @return {Boolean}
     */
    getShowPageInfo: function () {
        return this.pager.getShowPageInfo();
    },
    /**
    * 设置每页显示记录数选择集合，如[5,10,100]
    * @param Array value
    */
    setSizeList: function (value) {
        if (!mini.isArray(value)) return;
        this.pager.setSizeList(value);
    },
    /**
    * 获取每页显示记录数选择集合
    * @return Array
    */
    getSizeList: function () {
        return this.pager.getSizeList();
    },
    /**
    * 设置每页显示记录数
    * @param Number value
    */
    setPageSize: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.pageSize = value;
        if (this.pager) this.pager.update(this.pageIndex, this.pageSize, this.totalCount);
        /**当存在diypage时，调用setPageSize时，diypage的数据不更新 潘正锋 2014-02-10 */
        if(this.diypager)
            this.diypager.update(this.pageIndex, this.pageSize, this.totalCount);
    },
    /**
    * 获取每页显示记录数
    * @return Number
    */
    getPageSize: function () {
        return this.pageSize;
    },
    /**
    * 设置当前页码
    * @param Number value
    */
    setPageIndex: function (value) {
        value = parseInt(value);
        if (isNaN(value)) return;
        this.pageIndex = value;
        if (this.pager) this.pager.update(this.pageIndex, this.pageSize, this.totalCount);
        /**当存在diypage时，调用setPageIndex时，diypage的数据不更新 潘正锋 2014-02-10 */
        if(this.diypager)
            this.diypager.update(this.pageIndex, this.pageSize, this.totalCount);
    },
    /**
    * 获取当前页码
    * @return Number
    */
    getPageIndex: function () {
        return this.pageIndex;
    },
   /**
   * 设置是否显示每页显示记录数
   * @param Boolean value
   */
    setShowPageSize: function (value) {
        this.showPageSize = value;
        this.pager.setShowPageSize(value);
    },
    /**
    * 获取是否显示每页显示记录数
    * @returns Boolean
    */
    getShowPageSize: function () {
        return this.showPageSize;
    },
    /**
    * 设置是否显示当前页码
    * @param Boolean value
    */
    setShowPageIndex: function (value) {
        this.showPageIndex = value;
        this.pager.setShowPageIndex(value);
    },
    /**
    * 获取是否显示当前页码
    * @returns Boolean
    */
    getShowPageIndex: function () {
        return this.showPageIndex;
    },
    /**
    * 设置是否显示总记录数
    * @param Boolean value
    */
    setShowTotalCount: function (value) {
        this.showTotalCount = value;
        this.pager.setShowTotalCount(value);
    },
    /**
    * 获取是否显示总记录数
    * @returns Boolean
    */
    getShowTotalCount: function () {
        return this.showTotalCount;
    },
    /**
     * 设置当前页标识字段
     * @param {String} 当前页标识字段
     */
    setPageIndexField: function (value) {
        this.pageIndexField = value;
    },
    /**
     * 获取当前页标识字段
     * @return {String}
     */
    getPageIndexField: function () {
        return this.pageIndexField;
    },
    /**
     * 设置每页显示记录数标识字段
     * @param {String} 每页显示记录数标识字段
     */
    setPageSizeField: function (value) {
        this.pageSizeField = value;
    },
    /**
    * 获取每页显示记录数标识字段
    * @return {String}
    */
    getPageSizeField: function () {
        return this.pageSizeField;
    },
    /**
     * 设置排序字段标识字段
     * @param {String} 排序字段标识字段
     */
    setSortFieldField: function (value) {
        this.sortFieldField = value;
    },
    /**
     * 设置排序字段标识字段
     * @return {String}
     */
    getSortFieldField: function () {
        return this.sortFieldField;
    },
    /**
     * 设置排序方式标识字段
     * @param {String} 排序方式标识字段
     */
    setSortOrderField: function (value) {
        this.sortOrderField = value;
    },
    /**
    * 获取排序方式标识字段
    * @return {String}
    */
    getSortOrderField: function () {
        return this.sortOrderField;
    },
    /**
     * 设置总记录数标识字段
     * @param {String} 总记录数标识字段
     */
    setTotalField: function (value) {
        this.totalField = value;
    },
    /**
     * 获取总记录数标识字段
     * @return {String}
     */
    getTotalField: function () {
        return this.totalField;
    },
    setDependMerge:function(value){
        this.dependMerge = value;
    },
    getDependMerge:function(){
        return this.dependMerge;
    },
    setDataField: function (value) {
        this.dataField = value;
    },
    getDataField: function () {
        return this.dataField;
    },
    /**
     * 获取排序字段
     * @return {String}
     */
    getSortField: function () {
        return this.sortField;
    },
    /**
    * 获取排序方式
    * @return {String}
    */
    getSortOrder: function () {
        return this.sortOrder;
    },

    pageIndex: 0,
    pageSize: 10,
    totalCount: 0,
    totalPage: 0,
    showPageInfo: true,

    pageIndexField: "pageIndex",
    pageSizeField: "pageSize",
    sortFieldField: "sortField",
    sortOrderField: "sortOrder",
    totalField: "total",

    showPageSize: true,
    showPageIndex: true,
    showTotalCount: true,
    /**
    * 设置总记录数
    * @param Number value
    */
    setTotalCount: function (value) {
        this.totalCount = value;
        this.pager.setTotalCount(value);
        /* 当存在diypage时，调用setTotalCount时，diypage的数据不更新 潘正锋 2014-02-10 */
        if(this.diypager)
            this.diypager.setTotalCount(value);
    },
    /**
    * 获取总记录数
    * @return Number
    */
    getTotalCount: function () {
        return this.totalCount;
    },
    /**
    * 获取总页数
    * @return Number
    */
    getTotalPage: function () {
        return this.totalPage;
    },

    sortField: "",
    sortOrder: "",

    url: "",
    autoLoad: false,
    loadParams: null,



    ajaxAsync: true,
    ajaxMethod: "post",
    /**
    * 超时时间
    * @default 30000
    * @type Number
    * @author 赵美丹 2013-04-24
    */
    ajaxTimeout: 30000,
    showLoading: true,
    /**
   * 是否请求返回结果为数据对象，为true时返回结果直接作为data值，total值由data的长度获得
   * @default false
   * @type Boolean
   */
    resultAsData: false,
    /**
    * 数据加载完成后是否选中当前选中数据
    * @default true
    * @type Boolean
    */
    checkSelectOnLoad: true,
    /**
    * 设置数据加载完成后是否选中当前选中数据
    * @param Boolean value
    */
    setCheckSelectOnLoad: function (value) {
        this.checkSelectOnLoad = value;
    },
    /**
    * 获取数据加载完成后是否选中当前选中数据
    * @returns Boolean
    */
    getCheckSelectOnLoad: function () {
        return this.checkSelectOnLoad;
    },

    totalField: "total",
    dataField: "data",
    /**
    * 获取结果集中的数据
    * @param Object result ajax请求结果集
    * @returns Array 数据集合
    */
    _getFromData: function (result) {
        return result.data;
    },
    /**
    * 获取结果数据
    * @return {Object} this._resultObject||{}
    */
    getResultObject: function () {
        return this._resultObject ? this._resultObject : {};
    },
    /**
    * 加载数据
    * @private
    * @param Object params 请求参数，可选
    * @param Function success 加载成功的回调函数，可选
    * @param Function fail 加载失败的回调函数，可选
    */
    _doLoad: function (params, success, fail) {

        try {
            var url = eval(this.url);
            if (url != undefined) {
                this.url = url;
            }
        } catch (e) {
        	console && console.log(e);
        }
        if (!this.url) {
            return;
        }


        params = params || {};
        if (mini.isNull(params.pageIndex)) params.pageIndex = 0;
        if (mini.isNull(params.pageSize)) params.pageSize = this.pageSize;
        params.sortField = this.sortField;
        params.sortOrder = this.sortOrder;

        if (this.sortMode != "server") {
            params.sortField = this.sortField = "";
            params.sortOrder = this.sortOrder = "";
        }

        this.loadParams = params;

        var o = {};
        o[this.pageIndexField] = params.pageIndex;
        o[this.pageSizeField] = params.pageSize;
        if (params.sortField) o[this.sortFieldField] = params.sortField;
        if (params.sortOrder) o[this.sortOrderField] = params.sortOrder;




        mini.copyTo(params, o);

        var url = this.url;
        var ajaxMethod = this.ajaxMethod;
        if (url) {
            if (url.indexOf(".txt") != -1 || url.indexOf(".json") != -1) {
                ajaxMethod = "get";
            }
        } else {
            ajaxMethod = "get";
        }

        var e = {
            url: url,
            async: this.ajaxAsync,
            type: ajaxMethod,
            data: params,
            params: params,
            /** ajax 超时配置扩展 赵美丹 2013-04-24*/
            timeout: this.ajaxTimeout,
            cache: false,
            cancel: false
        };
        this.fire("beforeload", e);
        if (e.data != e.params && e.params != params) {
            e.data = e.params;
        }
        if (e.cancel == true) {
            params.pageIndex = this.getPageIndex();
            params.pageSize = this.getPageSize();

            return;
        }
        if (this.showLoading) {
            this.loading();
        }

        this._selectedValue = this._selected ? this._selected[this.idField] : null;

        var sf = me = this;
        var url = e.url;

        mini.copyTo(e, {
            success: function (text, code, jqXHR) {
                var result = null;
                try {
                    result = mini.decode(text);
                } catch (ex) {
                    if (mini_debugger == true) {
                        alert(url + "\ndatagrid json is error.");
                    }
                }

                if (result && !mini.isArray(result)) {
                    result.total = parseInt(mini._getMap(me.totalField, result));
                    result.data = mini._getMap(me.dataField, result);
                } else {
                    if (result == null) {
                        result = {};
                        result.data = [];
                        result.total = 0;
                    } else if (mini.isArray(result)) {
                        var r = {};
                        r.data = result;
                        r.total = result.length;
                        result = r;
                    }
                }
                if (!result.data) result.data = [];
                if (!result.total) result.total = 0;
                var pageIndex = sf.getPageIndex();
                if (pageIndex > 0 && result.total > 0 && result.data.length == 0) {
                    pageIndex -= 1;
                    sf.gotoPage(pageIndex);
                    return;
                }
                sf._resultObject = result;

                sf.unmask();

                if (mini.isNumber(result.error) && result.error != 0) {
                    var e = { errorCode: result.error, xmlHttp: jqXHR, errorMsg: result.message, result: result };
                    /**因为用户都自行出现这类错误，所以这里就别添乱了  潘正锋 2014-01-01*/
                    sf.fire("loaderror", e);
                    if (fail) {
                        fail.call(sf, e);
                    }
                    return;
                }


                var total = result.total;
                var data = sf._getFromData(result);


                if (mini.isNumber(params.pageIndex)) sf.pageIndex = params.pageIndex;
                if (mini.isNumber(params.pageSize)) sf.pageSize = params.pageSize;
                if (mini.isNumber(total)) sf.totalCount = total;

                var ex = { result: result, data: data, total: total, cancel: false, xmlHttp: jqXHR }
                sf.fire("preload", ex);
                if (ex.cancel == true) return;

                var allowLayout = sf._allowLayout;
                sf._allowLayout = false;
                sf.loadData(ex.data);





                if (sf._selectedValue && sf.checkSelectOnLoad) {
                    var o = sf.getRowById(sf._selectedValue);

                    if (o) {
                        sf.select(o);
                    } else {
                        sf.deselectAll();
                    }
                } else if (sf._selected) {
                    sf.deselectAll();
                }


                if (sf.getSelected() == null && sf.selectOnLoad && sf.data.length > 0) {

                    sf.select(0);
                }


                if (sf.collapseGroupOnLoad) {
                    sf.collapseGroups();
                }




                sf._allowLayout = allowLayout;
                sf.doLayout();

                /**将下面代码从上面移到最底部，防止此组件还没渲染完成后调用其他组件布局出错 潘正锋 2013-06-26 */
                sf.fire("load", ex);

                if (success) success.call(sf, ex);


            },
            error: function (jqXHR, textStatus, errorThrown) {

                var ex = {
                    xmlHttp: jqXHR,
                    errorMsg: jqXHR.responseText,
                    errorCode: jqXHR.status
                };

                if (mini_debugger == true) {
                    alert(url + "\n" + ex.errorCode + "\n" + ex.errorMsg);
                }
                sf.fire("loaderror", ex);

                sf.unmask();

                if (fail) {
                    fail.call(sf, ex);
                }

            }
        });

        this._ajaxer = mini.ajax(e);
    },
    /**
    * 加载数据
    * @param Object params 请求参数，可选
    * @param Function success 加载成功的回调函数，可选
    * @param Function fail 加载失败的回调函数，可选
    */
    load: function (params, success, fail) {
        if (this._loadTimer) clearTimeout(this._loadTimer);
        var sf = this;

        var el = mini.byClass('mini-grid-emptyText', this.el);
        if (el) el.style.display = "none";

        this.cancelEdit();

        this.loadParams = params || {};

        if (this.ajaxAsync) {
            this._loadTimer = setTimeout(function () {
                sf._doLoad(params, success, fail);
            }, 1);
        } else {
            sf._doLoad(params, success, fail);
        }
    },
    /**
    * 重新加载数据
    * @param Function success 加载成功的回调函数，可选
    * @param Function error 加载失败的回调函数，可选
    */
    reload: function (success, error) {
        this.accept();
        this.load(this.loadParams, success, error);
    },
    /**
    * 加载某页数据
    * @param Number index 页码
    * @param Number size 每页记录数
    */
    gotoPage: function (index, size, total ) {
        var params = this.loadParams || {};
        if (mini.isNumber(index)) params.pageIndex = index;
        if (mini.isNumber(size)) params.pageSize = size;
        if (mini.isNumber(total)) params.totalCount = total;
        this.load(params);
    },
    /**
    * 排序
    * @param String sortField 排序字段
    * @param String sortOrder 排序方向，默认desc
    */
    sortBy: function (sortField, sortOrder) {
        this.sortField = sortField;
        this.sortOrder = sortOrder == "asc" ? "asc" : "desc";
        if (this.sortMode == "server" && this.url && this.data.length>0) {
            var params = this.loadParams || {};
            params.sortField = sortField;
            params.sortOrder = sortOrder;
            params.pageIndex = this.pageIndex;
            var me = this;
            this.load(params, function () {
                me.fire("sort");
            });
        } else {
            /**因为在getData里面有clone方法，所以在这里用原始的方法获取 潘正锋 2013-10-14*/
            var data = this.data.clone();
            var sortFn = this._getSortFnByField(sortField);
            if (!sortFn) return;


            var arr1 = [];
            for (var i = data.length - 1; i >= 0; i--) {
                var o = data[i];
                var v = mini._getMap(sortField, o);

                if (mini.isNull(v) || v === "") {
                    arr1.insert(0, o);
                    data.removeAt(i);
                }
            }
            data = data.clone();
            mini.sort(data, sortFn, this);
            data.insertRange(0, arr1);

            if (this.sortOrder == "desc") {
                data.reverse();
            }

            this.data = data;
            this.doUpdate();

            this.fire("sort");
        }
    },
    /**
    * 取消排序，并重新加载数据
    */
    clearSort: function () {
        this.sortField = "";
        this.sortOrder = "";
        this.reload();
    },
    /**
    * 根据column的dataType获取排序方法
    * @param String field column的field值
    * @return Function
    */
    _getSortFnByField: function (field) {
        if (!field) return null;
        var sortType = "string";
        var sortFn = null;
        var columns = this.getBottomColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (column.field == field) {
                if (column.dataType) sortType = column.dataType.toLowerCase();
                break;
            }
        }

        var typeFn = mini.sortTypes[sortType];
        if (!typeFn) typeFn = mini.sortTypes["string"];
        function sortBy(a, b) {

            var a1 = mini._getMap(field, a), b1 = mini._getMap(field, b);




            var v1 = typeFn(a1);
            var v2 = typeFn(b1);
            if (v1 > v2) return 1;
            else if (v1 == v2) return 0;
            else return -1;
        }

        sortFn = sortBy;
        return sortFn;
    },

    /**
    * 是否允许选中单元格
    * @default false
    * @type Boolean
    */
    allowCellSelect: false,
    /**
    * 允许单元格编辑，为true时行编辑将失效。
    * @default false
    * @type Boolean
    */
    allowCellEdit: false,
    /**
    * 单元格选中样式类
    * @private
    * @default mini-grid-cell-selected
    * @type String
    */
    _cellSelectedCls: "mini-grid-cell-selected",
    /**
    * 当前单元格，格式：[行对象对象, 列信息]
    * @private
    * @type Array 
    */
    _currentCell: null,
    /**
    * 当前编辑单元格，格式：[行对象对象, 列信息]
    * @private
    * @type Array
    */
    _editingCell: null,
    /**
    * 当前编辑单元格的editor
    * @private
    * @type Mini组件
    */
    _editingControl: null,
   /**
   * editor的容器DOM元素
   * @private
   * @type DOM元素
   */
    _editWrap: null,
    /**
    * 设置当前单元格的样式
    * @private
    * @param Boolean select 为true时，添加选中样式，为false，取消选中样式
    */
    _doCurrentCell: function (select) {
        if (this._currentCell) {
            var record = this._currentCell[0], column = this._currentCell[1];
            var cellEl = this._getCellEl(record, column);
            if (cellEl) {
                if (select) {
                    mini.addClass(cellEl, this._cellSelectedCls);
                } else {
                    mini.removeClass(cellEl, this._cellSelectedCls);
                }
            }
        }
    },
    /**
    * 设置当前单元格，并滚动至视线范围内
    * @param Array cell 格式：[行对象对象, 列信息]
    */
    setCurrentCell: function (cell) {
        if (this._currentCell != cell) {
            this._doCurrentCell(false);
            this._currentCell = cell;
            if (cell) {
                var row = this._getRow(cell[0]);
                var column = this.getColumn(cell[1]);
                if (row && column) {
                    this._currentCell = [row, column];
                } else {
                    this._currentCell = null;
                }
            }
            this._doCurrentCell(true);
            if (cell) {

                if (this.isFrozen()) {
                    this.scrollIntoView(cell[0]);
                } else {
                    this.scrollIntoView(cell[0]);

                }
            }
            this.fire("currentcellchanged");

        }
    },
    /**
    * 获取当前单元格
    * @returns Array cell，格式：[行对象对象, 列信息]
    */
    getCurrentCell: function () {
        var cc = this._currentCell;
        if (cc) {
            if (this.data.indexOf(cc[0]) == -1) {
                this._currentCell = null;
                cc = null;
            }
        }
        return cc;
    },
    /**
    * 设置是否允许选中单元格
    * @param Boolean value
    */
    setAllowCellSelect: function (value) {
        this.allowCellSelect = value;
    },
    /**
    * 获取是否允许选中单元格
    * @return Boolean
    */
    getAllowCellSelect: function (value) {
        return this.allowCellSelect;
    },
    /**
    * 设置是否允许单元格编辑
    * @param Boolean value
    */
    setAllowCellEdit: function (value) {
        this.allowCellEdit = value;
    },
    /**
    * 获取是否允许单元格编辑
    * @return Boolean
    */
    getAllowCellEdit: function (value) {
        return this.allowCellEdit;
    },
    /**
    * 对当前选中单元格启动编辑
    * @param Object row 行对象对象
    * @param Object column 列信息
    */
    beginEditCell: function (row, column) {
        row = this._getRow(row);
        column = this.getColumn(column);
        var cell = [row, column];
        if (row && column) {
            this.setCurrentCell(cell);
        }

        var cell = this.getCurrentCell();
        if (this._editingCell && cell) {
            if (this._editingCell[0] == cell[0] && this._editingCell[1] == cell[1]) return;
        }

        if (this._editingCell) this.commitEdit();
        if (cell) {
            var row = cell[0], column = cell[1];
            var canEdit = this._OnCellBeginEdit(row, column, this.getCellEditor(column));
            if (canEdit !== false) {
                this.scrollIntoView(row, column);
                this._editingCell = cell;
                this._OnCellShowingEdit(row, column);
            }
        }
    },
    isEditingCell: function (cell) {
        return this._editingCell && this._editingCell[0] == cell[0] && this._editingCell[1] == cell[1];
    },

    /**
    * 取消所有行编辑
    */
    cancelEdit: function () {
        if (this.allowCellEdit) {
            if (this._editingCell) {
                this._OnCellEndEdit();
            }
        } else {
            if (this.isEditing()) {
                this._allowLayout = false;
                var data = this.data.clone();
                for (var i = 0, l = data.length; i < l; i++) {
                    var row = data[i];
                    if (row._editing == true) this.cancelEditRow(i);
                }
                this._allowLayout = true;
                this.doLayout();
            }
        }
    },
    /**
    * 提交所有行编辑
    */
    commitEdit: function () {

        if (this.allowCellEdit) {

            if (this._editingCell) {
                this._OnCellCommitEdit(this._editingCell[0], this._editingCell[1]);
                this._OnCellEndEdit();
            }
        } else {
            if (this.isEditing()) {
                this._allowLayout = false;
                var data = this.data.clone();
                for (var i = 0, l = data.length; i < l; i++) {
                    var row = data[i];
                    if (row._editing == true) this.commitEditRow(i);
                }
                this._allowLayout = true;

                this.doLayout();
            }
        }
    },
    /**
    * 获取指定单元格的editor控件对象
    * @param Object/Number/String column 列信息或列index或列name
    * @param Object/Number row 行对象或行rowIndex
    * @returns Mini组件
    */
    getCellEditor: function (column, row) {
        column = this.getColumn(column);
        if (!column) return;
        if (this.allowCellEdit) {

            var editor = column.__editor;

            if (!editor) editor = mini.getAndCreate(column.editor);
            if (editor && editor != column.editor) {
                column.editor = editor;
            }
            return editor;
        } else {
            row = this._getRow(row);
            column = this.getColumn(column);
            if (!row) row = this.getEditingRow();
            if (!row || !column) return null;
            var id = this.uid + "$" + row._uid + "$" + column._id + "$editor";
            return mini.get(id);
        }
    },
    /**
    * 单元格启动编辑处理
    * @private
    * @param Object record 行对象
    * @param Object column 列信息
    * @param Mini组件 editor 编辑器
    * @return Boolean 
    */
    _OnCellBeginEdit: function (record, column, editor) {

        var value = mini._getMap(column.field, record);
        var e = {
            sender: this,
            rowIndex: this.data.indexOf(record),
            row: record,
            record: record,
            column: column,
            field: column.field,
            editor: editor,
            value: value,
            cancel: false
        };

        this.fire("cellbeginedit", e);

        if (!mini.isNull(column.defaultValue) && (mini.isNull(e.value) || e.value === "")) {
            var defaultValue = column.defaultValue;




            var obj = mini.clone({ d: defaultValue });
            e.value = obj.d;
        }

        var editor = e.editor;
        value = e.value;

        if (e.cancel) {
            return false;
        }
        if (!editor) return false;



        if (mini.isNull(value)) value = "";
        if (editor.setValue) {

            editor.setValue(value);
        }
        editor.ownerRowID = record._uid;

        if (column.displayField && editor.setText) {

            var text = mini._getMap(column.displayField, record);

            if (!mini.isNull(column.defaultText) && (mini.isNull(text) || text === "")) {
                var obj = mini.clone({ d: column.defaultText });
                text = obj.d;
            }

            editor.setText(text);
        }

        if (this.allowCellEdit) {
            this._editingControl = e.editor;
        }

        return true;
    },
    /**
    * 单元格提交编辑处理
    * @private
    * @param Object record 行对象
    * @param Object column 列信息
    * @param Object value 单元格值
    * @param Mini组件 editor 编辑器
    * @return Object {
    *        sender: this,
    *        record: record,
    *        row: record,
    *        column: column,
    *        field: column.field,
    *        editor: editor ? editor : this.getCellEditor(column),
    *        value: mini.isNull(value) ? "" : value,
    *        text: "",
    *        cancel: false
    *    }
    */
    _OnCellCommitEdit: function (record, column, value, editor) {
        var e = {
            sender: this,
            record: record,
            rowIndex: this.data.indexOf(record),
            row: record,
            column: column,
            field: column.field,
            editor: editor ? editor : this.getCellEditor(column),
            value: mini.isNull(value) ? "" : value,
            text: "",
            cancel: false
        };

        if (e.editor && e.editor.getValue) {
            if (e.editor.getFormValue) {
                e.value = e.editor.getFormValue();
            } else {
                e.value = e.editor.getValue();
            }
        }
        if (e.editor && e.editor.getText) {
            e.text = e.editor.getText();
        }


        var oldValue = record[column.field], newValue = e.value;
        if (mini.isEquals(oldValue, newValue)) return e;

        this.fire("cellcommitedit", e);

        if (e.cancel == false) {

            if (this.allowCellEdit) {
                var o = {};
                mini._setMap(column.field, e.value, o);
                if (column.displayField) {

                    mini._setMap(column.displayField, e.text, o);
                }
                this.updateRow(record, o);
                /**要在这里做点手脚 让它支持合并单元格编辑后数据的更新 潘正锋 2013-12-11*/
                if (this._mergedCellMaps) {
                    var bottomColumns = this.getBottomColumns();
                    var rowIndex = record._index;
                    var colIndex = bottomColumns.indexOf(column);
                    if (this._mergedCellMaps[rowIndex + ":" + colIndex]) {
                        for (var i = rowIndex + 1; i < this.data.length; i++) {
                            if (this._mergedCellMaps[i + ":" + colIndex] == true)
                                this.updateRow(this._getRow(i), o);
                            else
                                break;
                        }
                    }
                }
            }
        }
        return e;
    },
    /**
    * 单元格结束编辑处理
    * @private
    */
    _OnCellEndEdit: function () {
        if (!this._editingCell) return;
        var record = this._editingCell[0];
        var column = this._editingCell[1];
        var e = {
            sender: this,
            record: record,
            rowIndex: this.data.indexOf(record),
            row: record,
            column: column,
            field: column.field,
            editor: this._editingControl,
            value: record[column.field]
        };

        this.fire("cellendedit", e);

        if (this.allowCellEdit) {
            var editor = e.editor;
            if (editor && editor.setIsValid) {

                editor.setIsValid(true);
            }

            if (this._editWrap) this._editWrap.style.display = 'none';
            var childNodes = this._editWrap.childNodes;
            for (var i = childNodes.length - 1; i >= 0; i--) {
                var el = childNodes[i];
                this._editWrap.removeChild(el);
            }


            if (editor && editor.hidePopup) {
                editor.hidePopup();
            }
            if (editor && editor.setValue) {
                editor.setValue("");
            }

            this._editingControl = null;
            this._editingCell = null;

            if (this.allowCellValid) {
                this.validateCell(record, column);

            }
        }
    },
    /**
   * 单元格渲染为编辑单元格处理
   * @private
   * @param Object record 行对象
   * @param Object column 列信息
   * @return Boolean
   */
    _OnCellShowingEdit: function (record, column) {
        if (!this._editingControl) return false;

        var cellBox = this.getCellBox(record, column);
        var viewWidth = mini.getViewportBox().width;
        if (cellBox.right > viewWidth) {

            cellBox.width = viewWidth - cellBox.left;
            if (cellBox.width < 10) cellBox.width = 10;
            cellBox.right = cellBox.left + cellBox.width;
        }
        var e = {
            sender: this,
            rowIndex: this.data.indexOf(record),
            record: record,
            row: record,
            column: column,
            field: column.field,
            cellBox: cellBox,
            editor: this._editingControl
        };

        this.fire("cellshowingedit", e);

        var editor = e.editor;
        if (editor && editor.setIsValid) {

            editor.setIsValid(true);
        }
        /* 让editor实现垂直对齐 所以要取row(合并后的cell就不准了) 潘正锋 2014-02 */
        var cellEl = this._getCellEl(record,column);
        var editWrap = this._getEditWrap(cellBox,cellEl);
        this._editWrap.style.zIndex = mini.getMaxZIndex();

        if (editor.render) {
            editor.render(this._editWrap);
            setTimeout(function () {
                editor.focus();
                if (editor.selectText) editor.selectText();
                /* radiobuttonlist无法赋值，原因是前面setValue时，dom元素不存在，所以这里再次赋值 潘正锋 2013-03 */
                if(editor.type == "radiobuttonlist"){
                    var value = editor.getValue();
                    editor.setValue("");  //不清空无法再次设置value
                    editor.setValue(value);
                }
            }, 50);
            if (editor.setVisible) editor.setVisible(true);
        } else if (editor.el) {
            this._editWrap.appendChild(editor.el);
            setTimeout(function () {
                try {
                    editor.el.focus();
                } catch (e) {
                }
            }, 50);
        }

        if (editor.setWidth) {
            var width = cellBox.width;
            if (width < 20) width = 20;
            editor.setWidth(width);
        }
        if (editor.setHeight && editor.type == "textarea") {

            var height = cellBox.height - 1;
            if (editor.minHeight && height < editor.minHeight) height = editor.minHeight;
            editor.setHeight(height);
        }
        if (editor.setWidth && editor.type == "textarea") {
            var width = cellBox.width - 1;
            if (editor.minWidth && width < editor.minWidth) width = editor.minWidth;
            editor.setWidth(width);
        }
        mini.on(document, 'mousedown', this.__OnBodyMouseDown, this);

        if (column.autoShowPopup && editor.showPopup) {

            editor.showPopup();
        }
    },
    /**
    * document触发mousedown的处理方法
    * @private
    * @param {} e
    * @return {Boolean}
    */
    __OnBodyMouseDown: function (e) {
        if (this._editingControl) {
            var cell = this._getCellByEvent(e);

            if (this._editingCell && cell) {
                if (this._editingCell[0] == cell.record && this._editingCell[1] == cell.column) {
                    return false;
                }
            }

            var within = false;
            if (this._editingControl.within) within = this._editingControl.within(e);
            else within = mini.isAncestor(this._editWrap, e.target);

            if (within == false) {
                var me = this;
                if (mini.isAncestor(this._bodyEl, e.target) == false) {
                    setTimeout(function () {

                        me.commitEdit();

                    }, 1);
                } else {

                    var cell1 = me._editingCell;
                    setTimeout(function () {
                        var cell2 = me._editingCell;
                        if (cell1 == cell2) {
                            me.commitEdit();
                        }
                    }, 70);
                }
                mini.un(document, 'mousedown', this.__OnBodyMouseDown, this);
            }
        }
    },
    /**
    * 获取editor的容器DOM元素
    * @private
    * @param Object box 单元格布局信息，格式：{x:x,y:y,width:width,height:height}
    * @return DOM元素
    */
    _getEditWrap: function (box,cellEl) {
        /* 增加rowEl参数 让editor实现垂直对齐 所以要取row(合并后的cell就不准了) 潘正锋 2014-02*/
        if (!this._editWrap) {
            this._editWrap = mini.append(document.body, '<div class="mini-grid-editwrap" style="position:absolute;"></div>');


            mini.on(this._editWrap, "keydown", this.___OnEditControlKeyDown, this);
        }
        var lineHeight = $(cellEl).css("line-height");
        if (lineHeight.indexOf("px"))
            lineHeight = lineHeight.substr(0, lineHeight.length - 2);
        var wrapHeightY = box.y + (box.height - lineHeight) / 2; //计算出偏差

        this._editWrap.style.zIndex = 1000000000;
        this._editWrap.style.display = 'block';
        mini.setXY(this._editWrap, box.x, wrapHeightY);
        mini.setWidth(this._editWrap, box.width);
        /* 让editor垂直居中，主要是实现合并单元格中的编辑 潘正锋 2014-02-27 */

        mini.setHeight(this._editWrap,  lineHeight);

        var viewWidth = mini.getViewportBox().width;
        if (box.x > viewWidth) mini.setX(this._editWrap, -1000);

        return this._editWrap;
    },
    /**
    * editor的容器DOM元素触发keydown事件的处理方法
    * @private
    * @param DataGrid e
    */
    ___OnEditControlKeyDown: function (e) {

        var editor = this._editingControl;

        if (e.keyCode == 13 && editor && editor.type == "textarea") {

            return;
        }






        if (e.keyCode == 13) {

            var cell = this._editingCell;
            if (cell && cell[1] && cell[1].enterCommit === false) return;

            this.commitEdit();
            this.focus();

            if (this.editNextOnEnterKey) {
                /* 增加celleditenter事件 潘正锋 2014-02-24 */
                this.fire("celleditenter", { record: cell[0] });
                this._beginEditNextCell(e.shiftKey == false);
            } else {


            }
        } else if (e.keyCode == 27) {
            this.cancelEdit();
            this.focus();
        } else if (e.keyCode == 9) {
            this.commitEdit();
            if (this.editOnTabKey) {
                e.preventDefault();
                this.commitEdit();
                this._beginEditNextCell(e.shiftKey == false);
            } else {

            }
        }
    },

    editNextOnEnterKey: false,
    editOnTabKey: true,
    createOnEnter: false,
    _beginEditNextCell: function (next) {
        var grid = this;
        var currentCell = this.getCurrentCell();
        if (!currentCell) return;
        this.focus();
        var columns = grid.getBottomVisibleColumns();

        var column = currentCell ? currentCell[1] : null,
            record = currentCell ? currentCell[0] : null;

        var columnIndex = columns.indexOf(column);
        var rowIndex = grid.indexOf(record);
        /**因为在getData里面有clone方法，所以在这里用原始的方法获取 潘正锋 2013-10-14*/
        var count = grid.data.length;


        if (next === false) {

            columnIndex -= 1;
            column = columns[columnIndex];
            if (!column) {
                column = columns[columns.length - 1];
                record = grid.getAt(rowIndex - 1);
                if (!record) {

                    return;
                }
            }
        } else {
            columnIndex += 1;
            column = columns[columnIndex];
            if (!column) {
                column = columns[0];
                record = grid.getAt(rowIndex + 1);
                if (!record) {
                    if (this.createOnEnter) {
                        record = {};

                        this.addRow(record);
                    } else {
                        return;
                    }
                }
            }
        }

        var currentCell = [record, column];
        grid.setCurrentCell(currentCell);
        if (!grid.onlyCheckSelection) {
            if (grid.getCurrent() != record) {
                grid.deselectAll();
                grid.setCurrent(record);
            }
        }
        grid.scrollIntoView(record, column);

        grid.beginEditCell();
    },


    /**
    * 根据editor获取其行对象
    * @param DOM元素 editor
    * @return Object row行对象
    */
    getEditorOwnerRow: function (editor) {
        var uid = editor.ownerRowID;
        return this.getRowByUID(uid);
    },
    /**
    * 启动行编辑，allowCellEdit为true时无效
    * @param Object/Number row 行对象或行rowIndex
    */
    beginEditRow: function (row) {
        if (this.allowCellEdit) return;

        var sss = new Date();

        row = this._getRow(row);
        if (!row) return;
        var rowEl = this._getRowEl(row);
        if (!rowEl) return;




        row._editing = true;

        var s = this._createRow(row);
        var rowEl = this._getRowEl(row);
        jQuery(rowEl).before(s);
        rowEl.parentNode.removeChild(rowEl);

        var rowEl = this._getRowEl(row);
        mini.addClass(rowEl, "mini-grid-rowEdit");

        var columns = this.getBottomColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var value = row[column.field];

            var cellId = this._createCellId(row, columns[i]);
            var cellEl = document.getElementById(cellId);
            if (!cellEl) continue;

            if (typeof column.editor == "string") {
                column.editor = eval('(' + column.editor + ')');
            }

            var editorConfig = mini.copyTo({}, column.editor);

            editorConfig.id = this.uid + "$" + row._uid + "$" + column._id + "$editor";
            var editor = mini.create(editorConfig);

            if (this._OnCellBeginEdit(row, column, editor)) {
                if (editor) {
                    mini.addClass(cellEl, "mini-grid-cellEdit");
                    cellEl.innerHTML = "";
                    cellEl.appendChild(editor.el);
                    mini.addClass(editor.el, "mini-grid-editor");
                    /* radiobuttonlist无法赋值，原因是前面setValue时，dom元素不存在，所以这里再次赋值 潘正锋 2013-03 */
                    if(editor.type == "radiobuttonlist"){
                        var value = editor.getValue();
                        editor.setValue("");  //不清空无法再次设置value
                        editor.setValue(value);
                    }
                }
            }
        }

        this.doLayout();


    },
    /**
    * 取消行编辑
    * @param Object/Number row 行对象或行rowIndex
    */
    cancelEditRow: function (row) {
        if (this.allowCellEdit) return;

        row = this._getRow(row);
        if (!row || !row._editing) return;
        delete row._editing;

        var rowEl = this._getRowEl(row);

        var columns = this.getBottomColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];

            var cellId = this._createCellId(row, columns[i]);
            var cellEl = document.getElementById(cellId);

            var editorEl = cellEl.firstChild;
            var editor = mini.get(editorEl);
            if (!editor) continue;

            editor.destroy();
        }

        var s = this._createRow(row);
        jQuery(rowEl).before(s);
        rowEl.parentNode.removeChild(rowEl);

        this.doLayout();

    },
    /**
    * 提交编辑行
    * @param Object/Number row 行对象或行rowIndex
    */
    commitEditRow: function (row) {
        if (this.allowCellEdit) return;

        row = this._getRow(row);
        if (!row || !row._editing) return;

        var rowData = this.getEditRowData(row);

        this._canUpdateRowEl = false;
        this.updateRow(row, rowData);
        this._canUpdateRowEl = true;

        this.cancelEditRow(row);
    },
    /**
    * 表格是否处于编辑状态
    * @returns Boolean
    */
    isEditing: function () {
        for (var i = 0, l = this.data.length; i < l; i++) {
            var row = this.data[i];
            if (row._editing == true) return true;
        }
        return false;
    },
    /**
    * 指定行是否处于编辑状态
    * @param Object/Number row 行对象或行rowIndex
    * @return Boolean
    */
    isEditingRow: function (row) {
        row = this._getRow(row);
        if (!row) return false;
        return !!row._editing;
    },
    /**
    * 指定行是否为新增行
    * @param Object/Number row 行对象或行rowIndex
    * @return Boolean
    */
    isNewRow: function (row) {
        return row._state == "added";
    },
    /**
    * 获取处于编辑状态的所有行
    * @return Array
    */
    getEditingRows: function () {
        var rows = [];
        for (var i = 0, l = this.data.length; i < l; i++) {
            var row = this.data[i];
            if (row._editing == true) rows.push(row);
        }
        return rows;
    },
    /**
    * 获取第一个处于编辑状态的行
    * @return Object row行对象
    */
    getEditingRow: function () {
        var rows = this.getEditingRows();
        return rows[0];
    },
    /**
    * 获取所有编辑行对象
    * @param Boolean all 为true时返回编辑数据及行对象，false时返回编辑数据
    * @return Array
    */
    getEditData: function (all) {
        var data = [];
        for (var i = 0, l = this.data.length; i < l; i++) {
            var row = this.data[i];
            if (row._editing == true) {
                var rowData = this.getEditRowData(i, all);
                rowData._index = i;

                data.push(rowData);
            }
        }
        return data;
    },
    /**
    * 获取指定编辑行对象
    * @param Object/Number row 行对象或行rowIndex
    * @param Boolean all 为true时返回编辑数据及行对象，false时返回编辑数据
    * @return Array
    */
    getEditRowData: function (row, all) {
        row = this._getRow(row);

        if (!row || !row._editing) return null;

        var rowData = {};

        var columns = this.getBottomColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var cellId = this._createCellId(row, columns[i]);
            var cellEl = document.getElementById(cellId);

            var e = null;
            if (column.type == "checkboxcolumn"|| column.type == "radiobuttoncolumn") {
                var ck = column.getCheckBoxEl(row);
                var value = ck.checked ? column.trueValue : column.falseValue;
                e = this._OnCellCommitEdit(row, column, value);
            } else {
                var editorEl = cellEl.firstChild;
                var editor = mini.get(editorEl);
                if (!editor) continue;
                e = this._OnCellCommitEdit(row, column, null, editor);
            }

            mini._setMap(column.field, e.value, rowData);
            if (column.displayField) {

                mini._setMap(column.displayField, e.text, rowData);
            }
        }

       
        mini._setMap(this.idField, row[this.idField], rowData);
        if (all) {
            var o = mini.copyTo({}, row);
            rowData = mini.copyTo(o, rowData);
        }

        return rowData;
    },
    /**
    * 获取增加、删除、修改后的数据集合。row._state为added/modified/removed
    * @param String state 数据状态，取值范围：added、modified、removed
    * @return Array
    */
    getChanges: function (state, onlyField) {
        var rows = [];
        if (!state || state == "removed") {
            rows.addRange(this._removes);
        }
        for (var i = 0, l = this.data.length; i < l; i++) {
            var row = this.data[i];
            if (row._state && (!state || state == row._state)) {
                rows.push(row);
            }
        }
        if (onlyField) {
            for (var i = 0, l = rows.length; i < l; i++) {
                var row = rows[i];
                if (row._state == "modified") {
                    var newRow = {};
                    newRow[this.idField] = row[this.idField];
                    for (var field in row) {
                        var modifed = this._HasRowModified(row, field);
                        if (modifed) {
                            newRow[field] = row[field];
                        }
                    }
                    rows[i] = newRow;
                }
            }
        }
        return rows;
    },
    /**
    * 数据是否发生变化
    * @return Boolean
    */
    isChanged: function () {
        var data = this.getChanges();
        return data.length > 0;
    },
    /**
    * 修改数据行id标识
    * @private
    * @default _uid
    * @type String
    */
    _originalIdField: "_uid",
    /**
    * 获取数据修改记录
    * @private
    * @param Object record 行对象
    * @return Object
    */
    _getOriginal: function (record) {
        var rid = record[this._originalIdField];
        var or = this._originals[rid];
        if (!or) {
            or = this._originals[rid] = {};
        }
        return or;
    },
    /**
    * 行对象是否修改
    * @param Object reocrd 行对象
    * @param String field column的field
    * @return Boolean
    */
    _HasRowModified: function (reocrd, field) {
        var or = this._originals[reocrd[this._originalIdField]];
        if (!or) return false;
        if (mini.isNull(field)) return false;
        return or.hasOwnProperty(field);
    },
    /**
    * 修改行对象时，保存数据修改记录信息
    * @param Object row 行对象
    * @param Object rowData 最新行对象
    * @return Boolean
    */
    _doUpdateRow: function (row, rowData) {

        var updated = false;
        for (var field in rowData) {
            var newValue = rowData[field];
            var oldValue = mini._getMap(field, row);

            if (mini.isEquals(oldValue, newValue)) continue;

            mini._setMap(field, newValue, row);

            if (row._state != "added") {
                row._state = "modified";
                var or = this._getOriginal(row);
                if (!or.hasOwnProperty(field)) {
                    or[field] = oldValue;
                }
            }

            updated = true;
        }
        return updated;
    },
    /**
    * 是否允许行编辑
    * @private
    * @default true
    * @type Boolean
    */
    _canUpdateRowEl: true,
    /**
    * 更新行
    * @param Object/Number row 行对象或行rowIndex
    * @param String/Object rowData 行对象，当rowData为String类型时表示更新列的field
    * @param String/Number/Boolean value 当rowData为String类型时，更新列对应的value
    */
    _updateRowEl: function (row) {
        var me = this;

        var s = me._createRow(row);
        var rowEl = me._getRowEl(row);
        jQuery(rowEl).before(s);
        rowEl.parentNode.removeChild(rowEl);

    },
    updateSummary : function(){
      this._doUpdateSummaryRow();
    },
    /**
     * 更新行数据
     * @param Object/Number row 行对象或行rowIndex
     * @param String/Object rowData 行对象，当rowData为String类型时表示更新列的field
     * @param String/Number/Boolean value 当rowData为String类型时，更新列对应的value
     */
    updateRow: function (row, rowData, value) {

        row = this._getRow(row);
        if (!row || !rowData) return;


        if (typeof rowData == "string") {
            var o = {};
            o[rowData] = value;
            rowData = o;
        }

        var updated = this._doUpdateRow(row, rowData);
        if (updated == false) return;

        if (this._canUpdateRowEl) {
            this._updateRowEl(row);
        }

        if (row._state == "modified") {
            this.fire("updaterow", { record: row, row: row });
        }

        if (row == this.getSelected()) {
            this._OnCurrentChanged(row);
        }



        this._doMargeCells();
        this._deferUpdateSummaryRow();

        this._deferLayout();
    },
    /**
    * 批量删除行
    * @param Array rows 行对象或行rowIndex数组
    */
    deleteRows: function (rows) {
        if (!mini.isArray(rows)) return;
        rows = rows.clone();
        for (var i = 0, l = rows.length; i < l; i++) {
            this.deleteRow(rows[i]);
        }
    },
    /**
    * 删除行
    * @param Object/Number row 行对象或行rowIndex
    */
    deleteRow: function (row) {
        row = this._getRow(row);
        if (!row || row._state == "deleted") return;
        if (row._state == "added") {
            this.removeRow(row, true);
        } else {

            if (this.isEditingRow(row)) this.cancelEditRow(row);

            row._state = "deleted";
            var rowEl = this._getRowEl(row);
            mini.addClass(rowEl, "mini-grid-deleteRow");

            this.fire("deleterow", { record: row, row: row });
        }
        this._doUpdateSummaryRow();
    },
    /**
    * 批量删除行
    * @param Array rows 行对象或行rowIndex数组
    * @param Boolean autoSelect 是否自动选择下一条记录
    */
    removeRows: function (rows, autoSelect) {
        if (!mini.isArray(rows)) return;
        rows = rows.clone();
        for (var i = 0, l = rows.length; i < l; i++) {
            this.removeRow(rows[i], autoSelect);
        }
    },
    /**
    * 删除选中行（单选），并自动选择下一条记录
    */
    removeSelected: function () {
        var row = this.getSelected();
        if (row) {
            this.removeRow(row, true);
        }
    },
    /**
    * 删除行
    * @param Object/Number row 行对象或行rowIndex
    * @param Boolean autoSelect 是否自动选择下一条记录
    */
    removeRow: function (row, autoSelect) {
        row = this._getRow(row);
        if (!row) return;

        var isCurrent = row == this.getSelected();

        var isSelected = this.isSelected(row);
        var index = this.data.indexOf(row);

        this.data.remove(row);

        if (row._state != "added") {
            row._state = "removed";
            this._removes.push(row);
            delete this._originals[row[this._originalIdField]];
        }

        delete this._idRows[row._uid];

        var s = this._createRow(row);
        var rowEl = this._getRowEl(row);
        if (rowEl) rowEl.parentNode.removeChild(rowEl);



        var id = this._createRowDetailId(row);
        var tr = document.getElementById(id);
        if (tr) {
            tr.parentNode.removeChild(tr);
        }

        if (isSelected && autoSelect) {
            var newSelected = this.getAt(index);
            if (!newSelected) newSelected = this.getAt(index - 1);
            this.deselectAll();
            this.select(newSelected);
        }

        this._checkSelecteds();

        this._removeRowError(row);
        this.fire("removerow", { record: row, row: row });

        if (isCurrent) {
            this._OnCurrentChanged(row);
        }
        this._doAlternating();
        this._deferLayout();

        /* 当删除行时 需要更新合并信息，防止错乱 潘正锋 2014-02 */
        this._deferUpdateMergeCells(); //更新合并信息
        this._deferUpdateSummaryRow();
    },
    /**
    * 是否自动创建行对象中idField对应的字段值，新增行时有效
    * @default false
    * @type Boolean
    */
    autoCreateNewID: false,
    /**
    * 批量新增行
    * @param Array rows 行对象或行rowIndex数组
    * @param Number index 插入位置，默认为表格最后
    */
    addRows: function (rows, index) {
        if (!mini.isArray(rows)) return;

        rows = rows.clone();
        for (var i = 0, l = rows.length; i < l; i++) {
            this.addRow(rows[i], index);
            if (!mini.isNull(index) && mini.isNumber(index))
                index++;
        }
    },
    /**
    * 新增行
    * @param Object/Number row 行对象或行rowIndex
    * @param Number index 插入位置，默认为表格最后
    */
    addRow: function (row, index) {
        if (mini.isNull(index)) index = this.data.length;
        index = this.indexOf(index);
        var indexRow = this._getRow(index);
        this.data.insert(index, row);

        if (!row[this.idField]) {
            if (this.autoCreateNewID) {
                row[this.idField] = UUID();
            }
            var e = { row: row, record: row };
            this.fire("beforeaddrow", e);
        }

        row._state = "added";

        delete this._idRows[row._uid];
        row._uid = mini.DataGrid.RowID++;
        this._idRows[row._uid] = row;

        var s = this._createRow(row);
        if (indexRow) {
            var rowEl = this._getRowEl(indexRow);
            jQuery(rowEl).before(s);
        } else {
            mini.append(this._bodyInnerEl.firstChild, s);
        }

        this._doAlternating();

        this._deferLayout();


        this.fire("addrow", { record: row, row: row });


        var el = jQuery(".mini-grid-emptyText", this._bodyEl)[0];
        if (el) {

            mini.removeNode(el.parentNode);
        }
       /* 当插入行时 需要更新合并信息，防止错乱 潘正锋 2014-02 */
       this._deferUpdateMergeCells(); //更新合并信息
       this._deferUpdateSummaryRow();
    },
    /**
    * 移动行
    * @param Object/Number row 行对象或行rowIndex
    * @param Number index 插入位置
    */
    moveRow: function (row, index) {

        row = this._getRow(row);
        if (!row) return;
        if (index < 0) return;

        if (index > this.data.length) return;

        var targetRow = this._getRow(index);

        if (row == targetRow) return;
        this.data.remove(row);

        var rowEl = this._getRowEl(row);
        if (targetRow) {
            index = this.data.indexOf(targetRow);
            this.data.insert(index, row);
            var rowEl2 = this._getRowEl(targetRow);
            jQuery(rowEl2).before(rowEl);
        } else {

            this.data.insert(this.data.length, row);

            var table = this._bodyInnerEl.firstChild;
            mini.append(table.firstChild || table, rowEl);
        }
        this._doAlternating();
        this._deferLayout();

        this.scrollIntoView(row);

        this.fire("moverow", { record: row, row: row, index: index });


        this._doMargeCells();
    },
    moveUp: function (items) {

        if (!mini.isArray(items)) return;

        var me = this;
        items = items.sort(function (a, b) {
            var i1 = me.indexOf(a);
            var i2 = me.indexOf(b);
            if (i1 > i2) return 1;
            return -1;
        });
        for (var i = 0, l = items.length; i < l; i++) {
            var item = items[i];
            var index = this.indexOf(item);
            this.moveRow(item, index - 1);
        }
    },
    moveDown: function (items) {
        if (!mini.isArray(items)) return;

        var me = this;
        items = items.sort(function (a, b) {
            var i1 = me.indexOf(a);
            var i2 = me.indexOf(b);
            if (i1 > i2) return 1;
            return -1;
        });
        items.reverse();
        for (var i = 0, l = items.length; i < l; i++) {
            var item = items[i];
            var index = this.indexOf(item);
            this.moveRow(item, index + 2);
        }
    },
    /**
    * 清除所有行
    */
    clearRows: function () {
        this.data = [];
        this.doUpdate();
    },
    /**
    * 获取行索引号
    * @param Object/Number row 行对象或行rowIndex
    * @return Number
    */
    indexOf: function (row) {
        if (typeof row == "number") return row;
        if (this.isGrouping()) {

            var g = this._getGroupDataView();
            return g.data.indexOf(row);
        } else {
            return this.data.indexOf(row);
        }
    },
    /**
    * 根据rowIndex获取行对象
    * @param Number index 行rowIndex
    * @return Object
    */
    getAt: function (index) {
        if (this.isGrouping()) {
            var g = this._getGroupDataView();
            return g.data[index];
        } else {
            return this.data[index];
        }


    },
    /**
    * 获取行对象
    * @param Object/Number index 行对象或行rowIndex
    * @return Object
    */
    getRow: function (index) {
        if(index == null) return null;
        var t = typeof index;
        if (t == "number") return this.data[index];
        else if (t == "object") {
            if(index._index == undefined) return index;
            return this.data[index._index];
        }
        else return this.getRowById(index);
    },
    _getRow: function (index) {
        var t = typeof index;
        if (t == "number") return this.data[index];
        else if (t == "object") return index;
        else return this.getRowById(index);
    },
    /**
    * 根据行对象唯一标识（idField）值获取行对象
    * @param String value 行对象唯一标识（idField）值
    * @return Object
    */
    getRowByValue: function (value) {
        for (var i = 0, l = this.data.length; i < l; i++) {
            var o = this.data[i];
            if (o[this.idField] == value) return o;
        }
    },
    
    getRowById: function (id) {
        return this.getRowByValue(id);
    },
    /**
    * 根据行id字段（_uid）值获取行对象
    * @param String uid 行id字段（_uid）值
    * @return Object
    */
    getRowByUID: function (uid) {
        return this._idRows[uid];
    },
    /**
    * 通过查询函数获取行对象数组
    * @param Function fn 过滤方法，return true时该行对象数据返回，否则不返回该行对象
    * @return Array
    */
    findRows: function (fn) {
        var rows = [];
        if (fn) {
            for (var i = 0, l = this.data.length; i < l; i++) {
                var row = this.data[i];
                var ret = fn(row);
                if (ret === true)
                    rows.push(row);
                if (ret === 1)
                    break;
            }
        }
        return rows;
    },
    /**
    * 通过查询函数获取行对象
    * @param Function fn 过滤方法，return true时该行对象数据返回
    * @return Object
    */
    findRow: function (fn) {
        if (fn) {
            for (var i = 0, l = this.data.length; i < l; i++) {
                var row = this.data[i];
                if (fn(row) === true) return row;
            }
        }
    },



    /**
     * 加载完是否折叠分组
     * @default false
     * @type Boolean
     */
    collapseGroupOnLoad: false,
    /**
     * 设置加载完是否折叠分组
     * @param {Boolean} 加载完是否折叠分组
     */
    setCollapseGroupOnLoad: function (value) {
        this.collapseGroupOnLoad = value;

    },
    /**
     * 获取加载完是否折叠分组
     * @return {Boolean}
     */
    getCollapseGroupOnLoad: function () {
        return this.collapseGroupOnLoad;
    },

    /**
     * 是否显示分组汇总信息
     * @default false
     * @type Boolean
     */
    showGroupSummary: false,
    /**
     * 设置是否显示分组汇总信息
     * @param {Boolean} value
     */
    setShowGroupSummary: function (value) {
        this.showGroupSummary = value;

    },
    /**
     * 获取是否显示分组汇总信息
     * @return {Boolean}
     */
    getShowGroupSummary: function () {
        return this.showGroupSummary;
    },
    /**
     * 折叠所有分组
     */
    collapseGroups: function () {
        if (!this._groupDataView) return;
        for (var i = 0, l = this._groupDataView.length; i < l; i++) {
            var g = this._groupDataView[i];
            this._CollapseGroup(g);
        }
    },
    /**
     * 展开所有分组
     */
    expandGroups: function () {
        if (!this._groupDataView) return;
        for (var i = 0, l = this._groupDataView.length; i < l; i++) {
            var g = this._groupDataView[i];
            this._ExpandGroup(g);
        }
    },
    _CollapseGroup: function (group) {
        var rows = group.rows;
        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            var rowEl = this._getRowEl(row);
            if (rowEl) rowEl.style.display = "none";

            var rowEl = this.getRowDetailEl(row);
            if (rowEl) rowEl.style.display = "none";

        }
        group.expanded = false;
        var id = this.uid + "$group$" + group.id;
        var rowGroupEl = document.getElementById(id);
        if (rowGroupEl) mini.addClass(rowGroupEl, "mini-grid-group-collapse");

        this.doLayout();
    },
    _ExpandGroup: function (group) {
        var rows = group.rows;
        for (var i = 0, l = rows.length; i < l; i++) {
            var row = rows[i];
            var rowEl = this._getRowEl(row);
            if (rowEl) rowEl.style.display = "";

            var rowEl = this.getRowDetailEl(row);
            if (rowEl) rowEl.style.display = row._showDetail ? "" : "none";
        }
        group.expanded = true;
        var id = this.uid + "$group$" + group.id;
        var rowGroupEl = document.getElementById(id);
        if (rowGroupEl) mini.removeClass(rowGroupEl, "mini-grid-group-collapse");
        this.doLayout();
    },

    _GroupID: 1,
    _groupField: "",
    _groupDir: "",
    /**
     * 分组
     * @param {String} field 分组字段
     * @param {Stirng} dir 排序方式
     */
    groupBy: function (field, dir, fzhj) {/**新增参数fzhj(分组合计) 潘正锋 2013-05-05 */
        if (!field) return;
        this._groupField = field;
        if (typeof dir == "string") dir = dir.toLowerCase();
        this._groupDir = dir;
        this.__fzhj = fzhj;
        this._groupDataView = null;
        this.doUpdate();
    },
    /**
     * 取消分组
     */
    clearGroup: function () {
        this._groupField = "";
        this._groupDir = "";
        this._groupDataView = null;
        this.doUpdate();
    },
    /**
     * 获取分组字段
     * @return {String}
     */
    getGroupField: function () {
        return this._groupField;
    },
    /**
     * 获取分组排序方式
     * @return {}
     */
    getGroupDir: function () {
        return this._groupDir;
    },
    /**
     * 是否分组
     * @return {Boolean}
     */
    isGrouping: function () {
        return this._groupField != "";
    },
    _getGroupDataView: function () {
        if (this.isGrouping() == false) return null;

        if (!this._groupDataView) {
            var field = this._groupField, dir = this._groupDir;

            var data = this.data.clone();


            if (typeof dir == "function") {
                mini.sort(data, dir);
            } else {
                mini.sort(data, function (a, b) {
                    var v1 = a[field];
                    var v2 = b[field];
                    if (v1 > v2) return 1;
                    else return 0;
                }, this);
                if (dir == "desc") data.reverse();

            }

            var groups = [];
            var groupMaps = {};
            for (var i = 0, l = data.length; i < l; i++) {
                var o = data[i];
                var v = o[field];
                var p = mini.isDate(v) ? v.getTime() : v;
                var group = groupMaps[p];
                if (!group) {
                    group = groupMaps[p] = {};
                    group.header = field;
                    group.field = field;
                    group.dir = dir;
                    group.value = v;
                    group.rows = [];
                    groups.push(group);
                    group.id = this._GroupID++;
                }
                group.rows.push(o);
            }

            this._groupDataView = groups;

            var data = [];
            for (var i = 0, l = groups.length; i < l; i++) {
                data.addRange(groups[i].rows);
            }

            this._groupDataView.data = data;
        }
        return this._groupDataView;
    },

    _getGroupByID: function (id) {
        if (!this._groupDataView) return null;
        var groups = this._groupDataView;
        for (var i = 0, l = groups.length; i < l; i++) {
            var group = groups[i];
            if (group.id == id) return group;
        }
    },
    _OnDrawGroup: function (group) {
        var e = {
            group: group,
            rows: group.rows,
            field: group.field,
            dir: group.dir,
            value: group.value,
            cellHtml: group.header + " : " + group.value
        };
        this.fire("drawgroup", e);
        return e;
    },
    /**
     * 绘制分组标题事件监听绑定
     * @param {function} fn 监听函数
     * @param {Object} scope 作用域
     */
    onDrawGroupHeader: function (fn, scope) {
        this.on("drawgroupheader", fn, scope);
    },
    /**
     * 绘制分组汇总信息事件监听绑定
     * @param {function} fn 监听函数
     * @param {Object} scope 作用域
     */
    onDrawGroupSummary: function (fn, scope) {
        this.on("drawgroupsummary", fn, scope);
    },
    /**
     * 合并相同值单元格
     * @param {Array/String/Number} columns 合并列的name或index
     * @example grid.margeColumns(["company"]);//company是某列的name
     */
    mergeColumns: function (columns) {
        if (columns && mini.isArray(columns) == false) columns = [columns];
        /* 把合并列记录下来 新增和删除行时要用到 潘正锋 20014-02 */
        this.mergeColumnsData = columns;
        var grid = this;
        var bottomColumns = grid.getBottomColumns();
        if (!columns) columns = bottomColumns;
        /**因为在getData里面有clone方法，所以在这里用原始的方法获取 潘正锋 2013-10-14*/
        var data = grid.data.clone();
        data.push({});

        var __cells = [];
        var frontMergeCell;//记录上次的合并信息
        var frontMergeColumn;//前面的和并列
        if (this.dependMerge)
            columns = sortMergeColumn(columns); //因为有了依赖关系，所以这里要进行排序
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            column = grid.getColumn(column);
            if (!column) continue;
            var cells;
            if (this.dependMerge) {
               
                if (i == 0)
                    cells = margeCells(column);
                else {
                    cells = margeCellsDepend(column, frontMergeCell, frontMergeColumn);
                }
                frontMergeCell = cells;
                frontMergeColumn = column;
            } else {
                cells = margeCells(column);
            }
            if (cells)
                __cells.addRange(cells);
        }

        grid.mergeCells(__cells);

        function sortMergeColumn(columns) {
            var sorted = [];
           
            for (var i = 0; i< bottomColumns.length; i++) {
                for (var j = 0; j < columns.length; j++) {
                    if (bottomColumns[i].name == columns[j])
                        sorted.push(columns[j]);
                }
            }
            return sorted;
        }
        function margeCells(column) {
            if (!column.field) return;
            var cells = [];
            var rowIndex = -1, rowSpan = 1, columnIndex = bottomColumns.indexOf(column);
            var cellValue = null;
            for (var i = 0, l = data.length; i < l; i++) {
                var row = data[i];
                var value = row[column.field];


                if (rowIndex == -1 || value != cellValue) {
                    if (rowSpan > 1) {
                        var cell = { rowIndex: rowIndex, columnIndex: columnIndex, rowSpan: rowSpan, colSpan: 1 };
                        cells.push(cell);
                    }
                    rowIndex = i;
                    rowSpan = 1;
                    cellValue = value;
                } else {
                    rowSpan++;
                }

            }

            return cells;
        }


        function margeCellsDepend(column, frontMargeCell, frontMergeColumn) {
            if (!column.field) return;
            var cells = [];
            var rowIndex = -1, rowSpan = 1, columnIndex = bottomColumns.indexOf(column), frontColumnIndex = bottomColumns.indexOf(frontMergeColumn);
            /**去除不连续返回的判断   潘正锋 2013-07-12*/
            var cellValue = null;
            for (var i = 0, l = frontMargeCell.length; i < l; i++) {
                var cell = margeCellsInFront(column, frontMargeCell[i], data);
                if (cell)
                    cells.addRange(cell);

            }

            return cells;

            function margeCellsInFront(column, mergeCell, data) {
                var cells = [];
                var rowIndex = -1, rowSpan = 1, columnIndex = bottomColumns.indexOf(column);
                var cellValue = null;
                for (var i = 0, l = mergeCell.rowSpan; i <= l; i++) {//这里要多循环一次
                    var row = data[mergeCell.rowIndex + i];
                    var value = row[column.field];
                    if (rowIndex == -1 || value != cellValue || i == l) {
                        if (rowSpan > 1) {
                            var cell = { rowIndex: rowIndex, columnIndex: columnIndex, rowSpan: rowSpan, colSpan: 1 };
                            cells.push(cell);
                        }
                        rowIndex = mergeCell.rowIndex + i;
                        rowSpan = 1;
                        cellValue = value;
                    } else {
                        rowSpan++;
                    }
                }
                return cells;
            }
        }
    },
    /**
     * 合并单元格
     * @param {Array} cells
     * @example 
     * var cells = [
	 *	    { rowIndex: 1, columnIndex: 0, rowSpan: 1, colSpan: 2 },
	 *	    { rowIndex: 3, columnIndex: 0, rowSpan: 4, colSpan: 3 }
	 *	];
	 *	grid.margeCells(marges);
     */
    mergeCells: function (cells) {
        if (!mini.isArray(cells)) return;
        this._margedCells = cells;
        this._doMargeCells();


        var _mergedCellMaps = this._mergedCellMaps = {};
        function doMargedCellMaps(rowIndex, columnIndex, rowSpan, colSpan, cell) {
            for (var i = rowIndex, l = rowIndex + rowSpan; i < l; i++) {
                for (var j = columnIndex, k = columnIndex + colSpan; j < k; j++) {
                    if (i == rowIndex && j == columnIndex) {
                        _mergedCellMaps[i + ":" + j] = cell;
                    } else {
                        _mergedCellMaps[i + ":" + j] = true;
                    }
                }
            }
        }
        var cells = this._margedCells;
        if (cells) {
            for (var i = 0, l = cells.length; i < l; i++) {
                var cell = cells[i];
                if (!cell.rowSpan) cell.rowSpan = 1;
                if (!cell.colSpan) cell.colSpan = 1;
                doMargedCellMaps(cell.rowIndex, cell.columnIndex, cell.rowSpan, cell.colSpan, cell);
            }
        }
    },
    /**
     * 合并单元格，同mergeCells
     * @param {} cells
     */
    margeCells: function (cells) {
        this.mergeCells(cells);
    },
    _isCellVisible: function (rowIndex, columnIndex) {
        if (!this._mergedCellMaps) return true;
        var ret = this._mergedCellMaps[rowIndex + ":" + columnIndex];
        return !(ret === true);
    },
    _deferUpdateMergeCells: function () {


        var me = this;
        if (this._mergeTimer) return;
        this._mergeTimer = setTimeout(function () {
            me._doUpdateMergeCells();
            me._mergeTimer = null;
        }, 1);
    },
    /* 在addrow removeRow时更新merge数据 潘正锋 2014-02 */
    _doUpdateMergeCells: function () {
        var cells = this._margedCells;
        if (!cells) return;
        function structByColumn(cells){
            var data = {};
            for (var i = 0, l = cells.length; i < l; i++) {
                var cell = cells[i];
                if(data[cell.columnIndex]){
                  data[cell.columnIndex].push(cell);
                }else{
                    data[cell.columnIndex] = [];
                    data[cell.columnIndex].push(cell);
                }
            }
            return data;
        }
        var cellsStruts = structByColumn(cells);

        this._clearMergeCell(cellsStruts);
        this.mergeColumns(this.mergeColumnsData);
        this._doUpdateBody();

    },

    /*
    取消合并
     */
    _clearMergeCell: function (cellsStruts) {
        var cells = [];
        for (rowIndex in cellsStruts) {
            for (var i = 0, l = this.getData().length; i < l; i++) {
                var newCell = {rowIndex: i, columnIndex: rowIndex, rowSpan: 1, colSpan: 1}
                cells.push(newCell);
            }
        }
        this.mergeCells(cells);
     },

    _doMargeCells: function () {

        function _doMargeCells() {
            var cells = this._margedCells;
            if (!cells) return;
            for (var i = 0, l = cells.length; i < l; i++) {
                var cell = cells[i];
                if (!cell.rowSpan) cell.rowSpan = 1;
                if (!cell.colSpan) cell.colSpan = 1;
                var cellEls = this._getCellEls(cell.rowIndex, cell.columnIndex, cell.rowSpan, cell.colSpan);

                for (var j = 0, k = cellEls.length; j < k; j++) {
                    var el = cellEls[j];
                    if (j != 0) {
                        el.style.display = "none";
                    } else {
                        el.rowSpan = cell.rowSpan;
                        el.colSpan = cell.colSpan;
                    }
                }
            }
        }

        _doMargeCells.call(this);








    },
    _getCellEls: function (rowIndex, columnIndex, rowSpan, colSpan) {
        var cells = [];
        if (!mini.isNumber(rowIndex)) return [];
        if (!mini.isNumber(columnIndex)) return [];


        var columns = this.getBottomColumns();
        var data = this.data;

        for (var i = rowIndex, l = rowIndex + rowSpan; i < l; i++) {
            for (var j = columnIndex, k = columnIndex + colSpan; j < k; j++) {
                var cell = this._getCellEl(i, j);
                if (cell) cells.push(cell);
            }
        }

        return cells;
    },



    _selected: null,
    _selecteds: [],
    _checkSelecteds: function () {






        var rows = this._selecteds;
        for (var i = rows.length - 1; i >= 0; i--) {
            var row = rows[i];
            if (!!this._idRows[row._uid] == false) {
                rows.removeAt(i);
                delete this._idSelecteds[row._uid];
            }
        }
        if (this._selected) {
            if (!!this._idSelecteds[this._selected._uid] == false) {
                this._selected = null;
            }
        }
    },
    /**
    * 设置是否允许反选
    * @param {Boolean} value 是否允许反选
    */
    setAllowUnselect: function (value) {
        this.allowUnselect = value;
    },
    /**
     * 获取是否允许反选
     * @return {Boolean}
     */
    getAllowUnselect: function (value) {
        return this.allowUnselect;
    },
    /**
     * 设置是否允许选择行
     * @param {Boolean} value
     */
    setAllowRowSelect: function (value) {
        this.allowRowSelect = value;
    },
    
    /**
     * 获取是否允许选择行
     * @return {Boolean}
     */
    getAllowRowSelect: function (value) {
        return this.allowRowSelect;
    },
    /**
     * 设置是否多选
     * @param {Boolean} value
     */
    setMultiSelect: function (value) {
        if (this.multiSelect != value) {
            this.multiSelect = value;
            this._doUpdateHeader();
        }
    },
    getMultiSelect: function () {
        return this.multiSelect;
    },
    _getSelectAllCheckState: function () {
        /**因为在getData里面有clone方法，所以在这里用原始的方法获取 潘正锋 2013-10-14*/
        var data = this.data;
        var state = true;
        if (data.length == 0) {
            state = false;
            return state;
        }

        var selectedCount = 0;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = data[i];
            if (this.isSelected(o)) {
                selectedCount++;
            } else {

            }
        }

        if (data.length == selectedCount) {
            state = true;
        } else if (selectedCount == 0) {
            state = false;
        } else {
            state = "has"
        }

        return state;
    },
    _fireSelect: function (record, name) {
        var e = { record: record, cancel: false };
        this.fire(name, e);
        return !e.cancel;
    },
    /**
     * 是否选中当前行
     * @param Object/Number record 行对象或行rowIndex
     * @return {Boolean}
     */
    isSelected: function (record) {
        record = this._getRow(record);
        if (!record) return false;
        return !!this._idSelecteds[record._uid];
    },
    /**
     * 获取所有选中的行
     * @return {Array}
     */
    getSelecteds: function () {
        this._checkSelecteds();
        return this._selecteds.clone();
    },
    /**
     * 设置当前选中行
     * @param Object/Number record 行对象或行rowIndex
     */
    setCurrent: function (record) {
        this.setSelected(record);
    },
    /**
     * 获取当前选中行，同getSelected
     * @return {Object}
     */
    getCurrent: function () {
        return this.getSelected();
    },
    /**
     * 获取当前选中行，同getCurrent
     * @return {Object}
     */
    getSelected: function () {
        this._checkSelecteds();
        return this._selected;
    },
    /**
     * 定位滚动条到某行
     * @param Object/Number record 行对象或行rowIndex
     * @param {Array/String/Number} columns 合并列的name或index
     */
    scrollIntoView: function (row, column) {
        try {

            if (column) {
                var cellEl = this._getCellEl(row, column);
                mini.scrollIntoView(cellEl, this._bodyEl, true);
            } else {
                var rowEl = this._getRowEl(row);
                mini.scrollIntoView(rowEl, this._bodyEl, false);
            }
        } catch (e) { }
    },
    /**
     * 当record不为空时，选中该行，并定位滚动条至该行，否则取消当前选中行的选中状态
     * @param Object/Number record 行对象或行rowIndex，可选
     */
    setSelected: function (record) {
        if (record) {
            this.select(record);
        } else {
            this.deselect(this._selected);
        }
        if (this._selected) {
            this.scrollIntoView(this._selected);
        }
        this._blurRow();
    },
    /**
     * 选中某行
     * @param Object/Number record 行对象或行rowIndex
     */
    select: function (record,fireEvent) {
        if (this.multiSelect == false) {
            this.deselectAll();
        }

        record = this._getRow(record);
        if (!record) return;

        this._selected = record;
        this.selects([record],fireEvent);
    },
    /**
     * 取消选中某行
     * @param Object/Number record 行对象或行rowIndex
     */
    deselect: function (record,fireEvent) {
        record = this._getRow(record);
        if (!record) return;

        this.deselects([record],fireEvent);
    },
    /**
     * 全选
     */
    selectAll: function (fireEvent) {

        var data = this.data.clone();
        this.selects(data,fireEvent);
    },
    /**
     * 取消全选，同clearSelect
     */
    deselectAll: function (fireEvent) {
        var selecteds = this._selecteds.clone();
        this._selected = null;
        this.deselects(selecteds,fireEvent);
    },
    /**
     * 取消全选，同deselectAll
     */
    clearSelect: function (fireEvent) {
        this.deselectAll(fireEvent);
    },
    /**
     * 选中行
     * @param {Array} records
     */
    selects: function (records,fireEvent) {
        if (!records || records.length == 0) return;
        var sss = new Date();

        records = records.clone();
        for (var i = records.length - 1; i >= 0; i--) {
            var record = this._getRow(records[i]);
            if (record) {
                records[i] = record;
            } else {
                records.removeAt(i);
            }
        }


        var idRows = {};
        /**因为在getData里面有clone方法，所以在这里用原始的方法获取 潘正锋 2013-10-14*/
        var data = this.data;
        for (var i = 0, l = data.length; i < l; i++) {
            var o = this._getRow(data[i]);

            var id = o[this.idField];
            if (id) {
                idRows[o[this.idField]] = o;
            }
        }
        var newRows = [];
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            var row = this._idRows[record._uid];
            if (!row) {
                record = idRows[record[this.idField]];
            }
            if (record) newRows.push(record);
        }
        records = newRows;


        records = records.clone();
        this._doSelects(records, true);

        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];

            if (!this.isSelected(record)) {
                /** 增加beforeselect事件 潘正锋 2014-06*/
                if (fireEvent !== false) {

                    if (!this._fireSelect(record, 'beforeselect')) continue;
                }
                this._selecteds.push(record);
                this._idSelecteds[record._uid] = record;
                /** 增加select事件 潘正锋 2013-09*/
                if (fireEvent !== false) {
                    this.fire("select", { record: record });
                }
            }
        }


        this._OnSelectionChanged();
    },
    /**
     * 取消行选中
     * @param {Array} records
     */
    deselects: function (records,fireEvent) {

        if (!records) records = [];

        records = records.clone();
        for (var i = records.length - 1; i >= 0; i--) {
            var record = this._getRow(records[i]);
            if (record) {
                records[i] = record;
            } else {
                records.removeAt(i);
            }
        }

        records = records.clone();
        for (var i = records.length - 1; i >= 0; i--) {
            var record = records[i];
            if (this.isSelected(record)) {
                /** 增加beforedeselect事件 潘正锋 2014-06*/
                if (fireEvent !== false) {
                    if (!this._fireSelect(record, 'beforedeselect')) continue;
                }
                this._doSelects([record], false);
                /** 下面的方法存在缺陷，当对象为clone出来时，永远返回-1 潘正锋 2014-02*/
                var index = 0;
                for (var a = 0; a < this._selecteds.length; a++) {
                    if (this._selecteds[a]._uid === record._uid)
                        index = a;
                }
                if (index >= 0) {
                    this._selecteds.splice(index, 1);
                }

                delete this._idSelecteds[record._uid];
                /** 增加deselect事件 潘正锋 2013-09*/
                if (fireEvent !== false) {
                    this.fire("deselect", { record: record });
                }
            }
        }
        if (records.indexOf(this._selected) != -1) this._selected = null;

        this._OnSelectionChanged();
    },
    _doSelects: function (rows, select) {
        var sss = new Date();
        for (var i = 0, l = rows.length; i < l; i++) {
            var record = rows[i];
            if (select) {
                this.addRowCls(record, this._rowSelectedCls);
            } else {
                this.removeRowCls(record, this._rowSelectedCls);
            }

        }



    },
    _OnSelectionChanged: function () {
        if (this._selectionTimer) {
            clearTimeout(this._selectionTimer);
        }
        var me = this;
        this._selectionTimer = setTimeout(function () {
            var e = {
                selecteds: me.getSelecteds(),
                selected: me.getSelected()
            };
            me.fire("SelectionChanged", e);
            me._OnCurrentChanged(e.selected);
        }, 1);
    },
    _OnCurrentChanged: function (row) {
        if (this._currentTimer) {
            clearTimeout(this._currentTimer);
        }
        var me = this;
        this._currentTimer = setTimeout(function () {
            var e = { record: row, row: row };
            me.fire("CurrentChanged", e);
            me._currentTimer = null;
        }, 1);
    },



    /**
    * 添加行样式
    * @param Object/Number record 行对象或行rowIndex
    * @param {String} cls 样式class
    */
    addRowCls: function (row, cls) {
        var rowEl = this._getRowEl(row);
        if (rowEl) mini.addClass(rowEl, cls);
    },
    /**
     * 删除行样式
     * @param Object/Number record 行对象或行rowIndex
     * @param {String} cls 样式class
     */
    removeRowCls: function (row, cls) {
        var rowEl = this._getRowEl(row);
        if (rowEl) mini.removeClass(rowEl, cls);
    },
    _focusRow: function (row, view) {

        row = this._getRow(row);
        if (!row || row == this._focusedRow) {

            return;
        }
        var dom = this._getRowEl(row);
        if (view && dom) {
            this.scrollIntoView(row);
        }
        if (this._focusedRow == row) return;
        this._blurRow();
        this._focusedRow = row;

        mini.addClass(dom, this._rowHoverCls);
    },
    _blurRow: function () {
        if (!this._focusedRow) return;
        var dom = this._getRowEl(this._focusedRow);
        if (dom) {
            mini.removeClass(dom, this._rowHoverCls);
        }
        this._focusedRow = null;
    },
    _getRecordByEvent: function (e) {
        var t = mini.findParent(e.target, this._rowCls);
        if (!t) return null;
        var ids = t.id.split("$");
        var uid = ids[ids.length - 1];
        return this.getRowByUID(uid);
    },





    __OnMousewheel: function (e, delta) {
        if (this.allowCellEdit) {
            this.commitEdit();

        }

        var overflowY = jQuery(this._bodyEl).css("overflow-y");
        if (overflowY == "hidden") {

            var wheelDelta = e.wheelDelta || -e.detail * 24;
            var top = this._bodyEl.scrollTop;

            top -= wheelDelta;
            this._bodyEl.scrollTop = top;

            if (top == this._bodyEl.scrollTop) {
                e.preventDefault();
            } else {

            }

            var e = {
                scrollTop: this._bodyEl.scrollTop,
                direction: "vertical"
            };


            this.fire("scroll", e);
        }
    },
    __OnClick: function (e) {



        var rowGroupEl = mini.findParent(e.target, "mini-grid-groupRow");
        if (rowGroupEl) {
            var ids = rowGroupEl.id.split("$");
            var id = ids[ids.length - 1];
            var group = this._getGroupByID(id);
            if (group) {

                var expanded = !(group.expanded === false ? false : true);
                if (expanded) this._ExpandGroup(group);
                else this._CollapseGroup(group);
            }
        } else {
            this._fireEvent(e, 'Click');


        }

    },
    _tryFocus: function (e) {
        if(!e.target.tagName) return false;
        var tagName = e.target.tagName.toLowerCase();
        if (tagName == "input" || tagName == "textarea" || tagName == "select")
            return;
        if (!mini.findParent(e.target, "mini-grid")) {
            return;
        }
        if (mini.isAncestor(this._filterEl, e.target)
        || mini.isAncestor(this._summaryEl, e.target)
        || mini.isAncestor(this._footerEl, e.target)
        || mini.findParent(e.target, "mini-grid-rowEdit")
        || mini.findParent(e.target, "mini-grid-detailRow")
        ) {

        } else {
            var me = this;

            me.focus();

        }
    },
    __OnDblClick: function (e) {
        this._fireEvent(e, 'Dblclick');
    },
    __OnMouseDown: function (e) {
        this._fireEvent(e, 'MouseDown');
        this._tryFocus(e);
    },
    __OnMouseUp: function (e) {
        if (mini.isAncestor(this.el, e.target)) {
            this._tryFocus(e);
            this._fireEvent(e, 'MouseUp');
        }
    },
    __OnMouseMove: function (e) {

        this._fireEvent(e, 'MouseMove');

    },
    __OnMouseOver: function (e) {
        this._fireEvent(e, 'MouseOver');
    },
    __OnMouseOut: function (e) {
        this._fireEvent(e, 'MouseOut');
    },
    __OnKeyDown: function (e) {
        this._fireEvent(e, 'KeyDown');
    },
    __OnKeyUp: function (e) {
        this._fireEvent(e, 'KeyUp');
    },
    __OnContextMenu: function (e) {
        this._fireEvent(e, 'ContextMenu');
    },
    _fireEvent: function (e, name) {

        if (!this.enabled) return;

        var cell = this._getCellByEvent(e);
        var record = cell.record, column = cell.column;
        if (record) {
            var eve = {
                record: record,
                row: record,
                htmlEvent: e
            };

            var fn = this['_OnRow' + name];
            if (fn) {
                fn.call(this, eve);
            } else {
                this.fire("row" + name, eve);
            }
        }
        if (column) {
            var eve = {
                column: column,
                field: column.field,
                htmlEvent: e
            };

            var fn = this['_OnColumn' + name];
            if (fn) {
                fn.call(this, eve);
            } else {
                this.fire("column" + name, eve);
            }
        }

        if (record && column) {
            var eve = {
                sender: this,
                record: record,
                row: record,
                column: column,
                field: column.field,
                htmlEvent: e
            };

            var fn = this['_OnCell' + name];
            if (fn) {
                fn.call(this, eve);
            } else {

                this.fire("cell" + name, eve);
            }

            if (column["onCell" + name]) {
                column["onCell" + name].call(column, eve);
            }

        }

        if (!record && column) {
            var eve = {
                column: column,
                htmlEvent: e
            };
            var fn = this['_OnHeaderCell' + name];
            if (fn) {
                fn.call(this, eve);
            } else {

                var evName = "onheadercell" + name.toLowerCase();
                if (column[evName]) {
                    eve.sender = this;
                    column[evName](eve);
                }

                this.fire("headercell" + name, eve);
            }
        }


        if (!record) this._blurRow();
    },

    _OnDrawCell: function (record, column, rowIndex, columnIndex) {

        var value = mini._getMap(column.field, record);
        var e = {
            sender: this,
            rowIndex: rowIndex,
            columnIndex: columnIndex,
            record: record,
            row: record,
            column: column,
            field: column.field,
            value: value,
            cellHtml: value,
            rowCls: null,
            cellCls: column.cellCls || '',
            rowStyle: null,
            cellStyle: column.cellStyle || '',
            allowCellWrap: this.allowCellWrap,
            autoEscape: column.autoEscape
        };



        e.visible = this._isCellVisible(rowIndex, columnIndex);
        if (e.visible == true && this._mergedCellMaps) {
            var cell = this._mergedCellMaps[rowIndex + ":" + columnIndex];
            if (cell) {
                e.rowSpan = cell.rowSpan;
                e.colSpan = cell.colSpan;
            }
        }

        if (column.dateFormat) {
            if (mini.isDate(e.value)) {

                e.cellHtml = mini.formatDate(value, column.dateFormat);
            } else if (mini.isNull(value) || value === '') {
                e.cellHtml = value;
            } else {//解决字符串日期的格式化 赵美丹 2013-04-02
                var date = new Date(value.split(".")[0].replace(/-/g, "/"));
                e.cellHtml = mini.formatDate(date, column.dateFormat);
            }
        }
        if (column.dataType == "currency") {
            if (mini.isNull(value) || value === '') {
                e.cellHtml = column.emptyText || '';
            }else{
                e.cellHtml = mini.util.StringUtil.formatMoney(e.cellHtml, column.digit,column.currencyUnit);
            }
        }
        if (column.dataType == "percent") {
            if (mini.isNull(value) || value === '') {
                e.cellHtml = column.emptyText || '';
            }else{
	            var decimalPlaces = parseInt(column.decimalPlaces);
	            if (isNaN(decimalPlaces)) decimalPlaces = 2;
	            e.cellHtml = mini.formatPercent(e.value, column.showPercent, decimalPlaces);
            }
        }
        if (column.displayField) {
            e.cellHtml = record[column.displayField];
        }
        if (e.autoEscape == true) {
            e.cellHtml = mini.htmlEncode(e.cellHtml);
        }

        var renderer = column.renderer;
        if (renderer) {
            fn = typeof renderer == "function" ? renderer : mini._getFunctoin(renderer);
            if (fn) {
                e.cellHtml = fn.call(column, e);
            }
        }



        this.fire("drawcell", e);

        if (e.cellHtml && !!e.cellHtml.unshift && e.cellHtml.length == 0) {
            e.cellHtml = "&nbsp;";
        }

        if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "") e.cellHtml = "&nbsp;";

        return e;
    },
    _OnDrawSummaryCell: function (records, column) {
        var e = {
            result: this.getResultObject(),
            sender: this,
            data: records,
            column: column,
            field: column.field,
            value: "",
            cellHtml: "",
            cellCls: column.cellCls || '',
            cellStyle: column.cellStyle || '',
            allowCellWrap: this.allowCellWrap
        };

        if (column.summaryType) {
            var fn = mini.summaryTypes[column.summaryType];
            if (fn) {
                e.value = fn(records, column.field);
            }
        }

        var value = e.value;
        e.cellHtml = e.value;

        if (e.value && parseInt(e.value) != e.value && e.value.toFixed) {
            decimalPlaces = parseInt(column.decimalPlaces);
            if (isNaN(decimalPlaces)) decimalPlaces = 2;

            e.cellHtml = parseFloat(e.value.toFixed(decimalPlaces));
        }

        if (column.dateFormat) {
            if (mini.isDate(e.value)) {

                e.cellHtml = mini.formatDate(value, column.dateFormat);
            }
            else e.cellHtml = value;
        }
        if (column.dataType == "currency") {
            e.cellHtml = mini.util.StringUtil.formatMoney(e.cellHtml, column.digit,column.currencyUnit);
        }

        var renderer = column.summaryRenderer;
        if (renderer) {
            fn = typeof renderer == "function" ? renderer : window[renderer];
            if (fn) {
                e.cellHtml = fn.call(column, e);
            }
        }else {
          e.title = e.cellHtml;
        }
        column.summaryValue = e.value;

        this.fire("drawsummarycell", e);

        if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "") e.cellHtml = "&nbsp;";

        return e;
    },
    _OnDrawGroupSummaryCell: function (records, column) {
        var e = {
            sender: this,
            data: records,
            column: column,
            field: column.field,
            value: "",
            cellHtml: "",
            cellCls: column.cellCls || '',
            cellStyle: column.cellStyle || '',
            allowCellWrap: this.allowCellWrap
        };

        if (column.groupSummaryType) {
            var fn = mini.groupSummaryType[column.summaryType];
            if (fn) {
                e.value = fn(records, column.field);
            }
        }
        e.cellHtml = e.value;

        var renderer = column.groupSummaryRenderer;
        if (renderer) {
            fn = typeof renderer == "function" ? renderer : window[renderer];
            if (fn) {
                e.cellHtml = fn.call(column, e);
            }
        }

        this.fire("drawgroupsummarycell", e);

        if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "") e.cellHtml = "&nbsp;";

        return e;
    },

    _OnCellMouseDown: function (e) {
        var record = e.record;

        this.fire("cellmousedown", e);
    },
    _OnRowMouseOut: function (e) {
        if (!this.enabled) return;
        if (mini.isAncestor(this.el, e.target)) return;


    },
    _OnRowMouseMove: function (e) {
        record = e.record;
        if (!this.enabled || record.enabled === false || this.enableHotTrack == false) return;

        this.fire("rowmousemove", e);

        var me = this;




        me._focusRow(record);



    },
    _OnHeaderCellClick: function (e) {
        e.sender = this;
        var column = e.column;

        if (!mini.hasClass(e.htmlEvent.target, "mini-grid-splitter")) {
            if (this.allowSortColumn && this.isEditing() == false) {
                if (!column.columns || column.columns.length == 0) {
                    if (column.field && column.allowSort !== false) {
                        var sortOrder = "asc";
                        if (this.sortField == column.field) {
                            sortOrder = this.sortOrder == "asc" ? "desc" : "asc";
                        }
                        this.sortBy(column.field, sortOrder);
                    }
                }
            }
            this.fire("headercellclick", e);
        }
    },


    __OnHtmlContextMenu: function (e) {
        var ev = {
            popupEl: this.el,
            htmlEvent: e,
            cancel: false
        };

        if (mini.isAncestor(this._headerEl, e.target)) {
            if (this.headerContextMenu) {
                this.headerContextMenu.fire("BeforeOpen", ev);
                if (ev.cancel == true) return;
                this.headerContextMenu.fire("opening", ev);
                if (ev.cancel == true) return;
                this.headerContextMenu.showAtPos(e.pageX, e.pageY);
                this.headerContextMenu.fire("Open", ev);
            }
        } else {

            var d = mini.findParent(e.target, "mini-grid-detailRow");
            if (d && mini.isAncestor(this.el, d)) return;

            if (this.contextMenu) {
                this.contextMenu.fire("BeforeOpen", ev);
                if (ev.cancel == true) return;
                this.contextMenu.fire("opening", ev);
                if (ev.cancel == true) return;
                this.contextMenu.showAtPos(e.pageX, e.pageY);
                this.contextMenu.fire("Open", ev);
            }
        }
        return false;

    },
    /**
     * 列头右键菜单
     * @type ContextMenu
     */
    headerContextMenu: null,
    /**
     * 设置列头右键菜单
     * @param {String/Array} value 右键菜单ID或Items
     */
    setHeaderContextMenu: function (value) {
        var ui = this._getContextMenu(value);
        if (!ui) return;
        if (this.headerContextMenu !== ui) {
            this.headerContextMenu = ui;
            this.headerContextMenu.owner = this;
            mini.on(this.el, "contextmenu", this.__OnHtmlContextMenu, this);
        }
    },
    /**
     * 获取列头右键菜单
     * @return ContextMenu
     */
    getHeaderContextMenu: function () {
        return this.headerContextMenu;
    },


    columnsMenu: null,
    /**
     * 创建列菜单
     * @return {Menu}
     */
    createColumnsMenu: function () {
        if (!this.columnsMenu) {
            this.columnsMenu = mini.create({
                type: "menu",
                items: [
                    { type: "menuitem", text: "Sort Asc" },
                    { type: "menuitem", text: "Sort Desc" },
                    '-',
                    {
                        type: "menuitem", text: "Columns", name: "columns",
                        items: [

                        ]
                    }
                ]
            });
        }
        var items = [];

        return this.columnsMenu;
    },
    _doShowColumnsMenu: function (column) {

        var menu = this.createColumnsMenu();
        var el = this._getColumnEl(column);
        var box = mini.getBox(el);
        menu.showAtPos(box.right - 17, box.bottom);
    },



    /**
     * 行双击事件监听绑定
     * @private
     * @param {Function} fn 监听函数
     * @param {Object} scope 作用域
     */
    onRowDblClick: function (fn, scope) {
        this.on("rowdblclick", fn, scope);
    },
    /**
     * 行单击事件监听绑定
     * @private
     * @param {Function} fn 监听函数
     * @param {Object} scope 作用域
     */
    onRowClick: function (fn, scope) {
        this.on("rowclick", fn, scope);
    },
    /**
     * 行鼠标点击事件监听绑定
     * @private
     * @param {Function} fn 监听函数
     * @param {Object} scope 作用域
     */
    onRowMouseDown: function (fn, scope) {
        this.on("rowmousedown", fn, scope);
    },
    /**
     * 行右键事件监听绑定
     * @private
     * @param {Function} fn 监听函数
     * @param {Object} scope 作用域
     */
    onRowContextMenu: function (fn, scope) {
        this.on("rowcontextmenu", fn, scope);
    },
    /**
     * 单元格单击事件监听绑定
     * @private
     * @param {Function} fn 监听函数
     * @param {Object} scope 作用域
     */
    onCellClick: function (fn, scope) {
        this.on("cellclick", fn, scope);
    },
    /**
     * 单元格鼠标点击事件监听绑定
     * @private
     * @param {Function} fn 监听函数
     * @param {Object} scope 作用域
     */
    onCellMouseDown: function (fn, scope) {
        this.on("cellmousedown", fn, scope);
    },
    /**
     * 单元格右键事件监听绑定
     * @private
     * @param {Function} fn 监听函数
     * @param {Object} scope 作用域
     */
    onCellContextMenu: function (fn, scope) {
        this.on("cellcontextmenu", fn, scope);
    },
    /**
     * 请求url前事件监听绑定
     * @private
     * @param {Function} fn 监听函数
     * @param {Object} scope 作用域
     */
    onBeforeLoad: function (fn, scope) {
        this.on("beforeload", fn, scope);
    },
    /**
     * 加载数据后事件监听绑定
     * @private
     * @param {Function} fn 监听函数
     * @param {Object} scope 作用域
     */
    onLoad: function (fn, scope) {
        this.on("load", fn, scope);
    },
    onLoadError: function (fn, scope) {
        this.on("loaderror", fn, scope);
    },
    onPreLoad: function (fn, scope) {
        this.on("preload", fn, scope);
    },

    onDrawCell: function (fn, scope) {
        this.on("drawcell", fn, scope);
    },
    onCellBeginEdit: function (fn, scope) {
        this.on("cellbeginedit", fn, scope);
    },



    getAttrs: function (el) {

        var attrs = mini.DataGrid.superclass.getAttrs.call(this, el);

        var cs = mini.getChildNodes(el);
        for (var i = 0, l = cs.length; i < l; i++) {
            var node = cs[i];
            var property = jQuery(node).attr("property");
            if (!property) continue;
            property = property.toLowerCase();
            if (property == "columns") {

                attrs.columns = mini._ParseColumns(node);
            } else if (property == "data") {
                attrs.data = node.innerHTML;
            }
        }
        mini._ParseString(el, attrs,
            [
                "url", "sizeList", "bodyCls", "bodyStyle", "footerCls", "footerStyle", "pagerCls", "pagerStyle",
                "onheadercellclick", "onheadercellmousedown", "onheadercellcontextmenu", "oncelleditenter",
                "onrowdblclick","onselect","ondeselect", "onbeforeselect", "onbeforedeselect",
                "onrowclick", "onrowmousedown", "onrowcontextmenu",
                "oncellclick", "oncellmousedown", "oncellcontextmenu","oncelldblclick",
                "onbeforeload", "onpreload", "onloaderror", "onload",
                "ondrawcell", "oncellbeginedit", "onselectionchanged",
                "onshowrowdetail", "onhiderowdetail", "idField", "valueField",
                "ajaxMethod", "ondrawgroup", "pager", "oncellcommitedit", "oncellendedit",
                "headerContextMenu", "loadingMsg", "emptyText", "cellEditAction",
                "sortMode", "oncellvalidation", "onsort", "pageIndexField", "pageSizeField", "sortFieldField", "sortOrderField", "totalField", "dataField",
                "ondrawsummarycell", "ondrawgroupsummarycell", "onresize", "oncolumnschanged","onpagechanged"
            ]
        );

        mini._ParseBool(el, attrs,
            ["showHeader", "showPager", "showFooter", "showTop", "allowSortColumn", "allowMoveColumn", "allowResizeColumn",
            "showHGridLines", "showVGridLines", "showFilterRow", "showSummaryRow", "showFooter", "showTop",
            "fitColumns", "showLoading", "multiSelect", "allowAlternating", "resultAsData", "allowRowSelect", "allowUnselect",
            "enableHotTrack", "showPageIndex", "showPageSize", "showTotalCount","checkSelectionOnly",
            "checkSelectOnLoad", "allowResize", "autoLoad",
            "autoHideRowDetail", "allowCellSelect", "allowCellEdit", "allowCellWrap", "allowHeaderWrap", "selectOnLoad",
            "virtualScroll", "collapseGroupOnLoad", "showGroupSummary",
            "showEmptyText", "allowCellValid", "showModified", "showColumnsMenu", "showPageInfo", "showReloadButton",
            "showNewRow", "editNextOnEnterKey", "createOnEnter", "dependMerge"
            ]
        );
        mini._ParseInt(el, attrs,
            ["columnWidth", "frozenStartColumn", "frozenEndColumn",
            "pageIndex", "pageSize", "ajaxTimeout"
            ]
        );

        if (typeof attrs.sizeList == "string") {
            attrs.sizeList = eval(attrs.sizeList);
        }
        if (!attrs.idField && attrs.valueField) {
            attrs.idField = attrs.valueField;
        }

        return attrs;
    }


});

mini.regClass(mini.DataGrid, "datagrid");


/**
 * @class 表格组件列插件，主要实现列操作相关功能。
 */
mini_Column_Prototype = {
    _getColumnEl: function (column) {
        column = this.getColumn(column);
        if (!column) return null;
        var id = this._createColumnId(column);
        return document.getElementById(id);
    },
    _getCellEl: function (row, column) {
        row = this._getRow ? this._getRow(row) : this.getNode(row);
        column = this.getColumn(column);
        if (!row || !column) return null;
        var id = this._createCellId(row, column);
        return document.getElementById(id);
    },
    getCellEl:function(row,column){
        this._getCellEl(row,column);
    },
    _getCellByEvent: function (e) {
        var record = this._getRecordByEvent ? this._getRecordByEvent(e) : this._getNodeByEvent(e);
        var column = this._getColumnByEvent(e);
        return {
            record: record,
            column: column
        };
    },
    _getColumnByEvent: function (e) {
        var t = mini.findParent(e.target, this._cellCls);
        if (!t) t = mini.findParent(e.target, this._headerCellCls);
        if (t) {
            var ids = t.id.split("$");
            var id = ids[ids.length - 1];
            return this._getColumnById(id);
        }
        return null;
    },
    _createColumnId: function (column) {
        return this.uid + "$column$" + column._id;
    },
    /**
     * 获取列box
     * @param {Object} column 列信息
     * @return {Object}
     */
    getColumnBox: function (column) {
        var id = this._createColumnId(column);
        var el = document.getElementById(id);
        if (el) {

            var box = mini.getBox(el);
            box.x -= 1;
            box.left = box.x;
            box.right = box.x + box.width;
            return box;
        }
    },
    /**
     * 设置列信息
     * @param {Array} value 列信息
     */
    setColumns: function (value) {


        if (!mini.isArray(value)) value = [];
        this.columns = value;

        this._idColumns = {};
        this._nameColumns = {};
        this._bottomColumns = [];

        this.maxColumnLevel = 0;
        var level = 0;

        function init(column, index, parentColumn) {
            if (column.type) {
                if (!mini.isNull(column.header) && typeof column.header !== "function") {
                    if (column.header.trim() == "") {
                        delete column.header;
                    }
                }
                var col = mini._getColumn(column.type);
                if (col) {
                    var _column = mini.copyTo({}, column);
                    mini.copyTo(column, col);
                    mini.copyTo(column, _column);//这是干嘛呢，自己拷贝自己的属性
                }
            }






            var width = parseInt(column.width);
            if (mini.isNumber(width) && String(width) == column.width) column.width = width + "px";
            if (mini.isNull(column.width)) column.width = this.columnWidth + "px";
            column.visible = column.visible !== false;
            column.allowResize = column.allowResize !== false;
            column.allowMove = column.allowMove !== false;
            column.allowSort = column.allowSort === true;
            column.allowDrag = !!column.allowDrag;
            column.readOnly = !!column.readOnly;
            column.autoEscape = !!column.autoEscape;

            if (!column._id) column._id = mini.DataGrid.ColumnID++;
            column._gridUID = this.uid;
            column._rowIdField = this._rowIdField;
            column._pid = parentColumn == this ? -1 : parentColumn._id;
            this._idColumns[column._id] = column;
            if (column.name) this._nameColumns[column.name] = column;

            if (!column.columns || column.columns.length == 0) {
                column.align = column.align || (column.dataType == 'currency' || column.dataType == 'percent' ? 'right' : '');
                this._bottomColumns.push(column);
            }

            column.level = level;
            level += 1;
            this.eachColumns(column, init, this);
            level -= 1;
            if (column.level > this.maxColumnLevel) this.maxColumnLevel = column.level;


            if (typeof column.editor == "string") {
                var cls = mini.getClass(column.editor);
                if (cls) {
                    column.editor = { type: column.editor };
                } else {
                    column.editor = eval('(' + column.editor + ')');
                }
            }



            if (typeof column.filter == "string") {
                column.filter = eval('(' + column.filter + ')');
            }
            if (column.filter && !column.filter.el) {
                column.filter = mini.create(column.filter);
            }

            if (typeof column.init == "function" && column.inited != true) {
                column.init(this);
            }
            column.inited = true;
        }
        this.eachColumns(this, init, this);

        if (this._doUpdateFilterRow) this._doUpdateFilterRow();

        this.doUpdate();

        this.fire("columnschanged");
    },
    /**
     * 获取所有列
     * @return {Array}
     */
    getColumns: function () {
        return this.columns;
    },
    /**
     * 获取最低层columns
     * @return {Array}
     */
    getBottomColumns: function () {
        return this._bottomColumns;
    },
    /**
     * 获取最底层columns中可见的columns
     * @return {Array}
     */
    getVisibleColumns: function () {
        var columns = this.getBottomColumns();
        var cs = [];
        for (var i = 0, l = columns.length; i < l; i++) {
            var c = columns[i];
            if (c.visible) cs.push(c);
        }
        return cs;
    },
    getBottomVisibleColumns: function () {
        var columns = [];
        for (var i = 0, l = this._bottomColumns.length; i < l; i++) {
            var c = this._bottomColumns[i];
            if (this.isVisibleColumn(c)) columns.push(c);
        }
        return columns;
    },
    /**
     * 遍历指定列的子列
     * @param {Object} column 列对象
     * @param {Function} fn 处理函数
     * @param {Object} scope 作用域
     */
    eachColumns: function (column, fn, scope) {
        var columns = column.columns;
        if (columns) {
            var list = columns.clone();
            for (var i = 0, l = list.length; i < l; i++) {
                var o = list[i];
                if (fn.call(scope, o, i, column) === false) break;
            }
        }
    },
    /**
     * 获取列信息
     * @param {Object/String/Number} index 列的name或index
     * @return {Object}
     */
    getColumn: function (index) {
        var t = typeof index;
        if (t == "number") return this.getBottomColumns()[index];
        else if (t == "object") return index;
        else {
            return this._nameColumns[index];
        }
    },
    getColumnByField: function (field) {
        if (!field) return;
        var columns = this.getBottomColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (column.field == field) return column;
        }
        return column;
    },
    _getColumnById: function (id) {
        return this._idColumns[id];
    },
    /**
     * 获取上级列信息
     * @param {Object/String/Number} index 列的name或index
     * @return {Object}
     */
    getParentColumn: function (column) {
        column = this.getColumn(column);
        var pid = column._pid;
        if (pid == -1) return this;
        return this._idColumns[pid];
    },
    /**
     * 获取列层级信息，倒序（父列->子列）
     * @param {Object/String/Number} index 列的name或index
     * @return {Array}
     */
    getAncestorColumns: function (node) {
        var as = [];
        while (1) {
            var parentNode = this.getParentColumn(node);
            if (!parentNode || parentNode == this) break;
            as[as.length] = parentNode;
            node = parentNode;
        }
        as.reverse();
        return as;
    },
    /**
     * 是否为上下级列
     * @param {Object} parentNode 上级列信息
     * @param {Object/String/Number} node 下级列的name或index
     * @return {Boolean}
     */
    isAncestorColumn: function (parentNode, node) {
        if (parentNode == node) return true;
        if (!parentNode || !node) return false;
        var as = this.getAncestorColumns(node);
        for (var i = 0, l = as.length; i < l; i++) {
            if (as[i] == parentNode) return true;
        }
        return false;
    },
    /**
     * 列是否可见
     * @param {Object/String/Number} column 列的name或index
     * @return {Boolean}
     */
    isVisibleColumn: function (column) {
        column = this.getColumn(column);
        var columns = this.getAncestorColumns(column);
        for (var i = 0, l = columns.length; i < l; i++) {
            if (columns[i].visible == false) return false;
        }
        return true;
    },
    /**
     * 更新列配置属性
     * @param {Object/String/Number} column 列的name或index
     * @param {Object} option 配置属性
     */
    updateColumn: function (column, option) {
        column = this.getColumn(column);
        if (!column) return;
        mini.copyTo(column, option);
        this.setColumns(this.columns);
    },
    removeColumn: function (column) {
        column = this.getColumn(column);
        var pcolumn = this.getParentColumn(column);
        if (column && pcolumn) {
            pcolumn.columns.remove(column);
            this.setColumns(this.columns);
        }
        return column;
    },
    moveColumn: function (column, targetColumn, action) {
        column = this.getColumn(column);
        targetColumn = this.getColumn(targetColumn);
        if (!column || !targetColumn || !action || column == targetColumn) return;

        if (this.isAncestorColumn(column, targetColumn)
            ) {
            return;
        }


        var pcolumn = this.getParentColumn(column);
        if (pcolumn) {
            pcolumn.columns.remove(column);
        }


        var parentColumn = targetColumn;
        var index = action;
        if (index == 'before') {
            parentColumn = this.getParentColumn(targetColumn);
            index = parentColumn.columns.indexOf(targetColumn);
        } else if (index == 'after') {
            parentColumn = this.getParentColumn(targetColumn);
            index = parentColumn.columns.indexOf(targetColumn) + 1;
        } else if (index == 'add' || index == "append") {
            if (!parentColumn.columns) parentColumn.columns = [];
            index = parentColumn.columns.length;
        } else if (!mini.isNumber(index)) {
            return;
        }

        parentColumn.columns.insert(index, column);

        this.setColumns(this.columns);
    },
    hideColumns: function (columns) {
        if (this.allowCellEdit) {
            this.commitEdit();
        }
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = this.getColumn(columns[i]);
            if (!column) continue;
            column.visible = false;
        }
        this.setColumns(this.columns);
    },
    showColumns: function (columns) {
        if (this.allowCellEdit) {
            this.commitEdit();
        }
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = this.getColumn(columns[i]);
            if (!column) continue;
            column.visible = true;
        }
        this.setColumns(this.columns);
    },
    hideColumn: function (column) {
        column = this.getColumn(column);
        if (!column) return;

        if (this.allowCellEdit) {
            this.commitEdit();
        }

        column.visible = false;
        this.setColumns(this.columns);

    },
    showColumn: function (column) {
        column = this.getColumn(column);
        if (!column) return;

        if (this.allowCellEdit) {
            this.commitEdit();
        }

        column.visible = true;
        this.setColumns(this.columns);

    },
    getColumnRows: function () {
        var maxLevel = this.getMaxColumnLevel();
        var dcs = [];
        for (var i = 0, l = maxLevel; i <= l; i++) {
            dcs.push([]);
        }

        function getColSpan(col) {
            var subColumns = mini.treeToArray(col.columns, "columns");
            var colSpan = 0;
            for (var i = 0, l = subColumns.length; i < l; i++) {
                var c = subColumns[i];
                if (c.visible != true || c._hide == true) continue;
                if (!c.columns || c.columns.length == 0) {
                    colSpan += 1;
                }
            }
            return colSpan;
        }

        var list = mini.treeToArray(this.columns, "columns");

        for (var i = 0, l = list.length; i < l; i++) {
            var column = list[i];
            var cols = dcs[column.level];

            if (column.columns && column.columns.length > 0) {
                column.colspan = getColSpan(column);
            }
            if ((!column.columns || column.columns.length == 0) && column.level < maxLevel) {
                column.rowspan = maxLevel - column.level + 1;
            }

            cols.push(column);
        }

        return dcs;
    },
    getMaxColumnLevel: function () {
        return this.maxColumnLevel;
    },
    getPrint:function(config){
        var printObj = new mini.DataGrid_Print(this,config);
        return printObj;
    }
}


mini.copyTo(mini.DataGrid.prototype, mini_Column_Prototype);




/**
 *
 * @class 表格组件排序插件，主要实现排序相关功能。
 * @constructor
 */
mini._GridSort = function (grid) {

    this.grid = grid;



    mini.on(grid._headerEl, "mousemove", this.__OnGridHeaderMouseMove, this);
    mini.on(grid._headerEl, "mouseout", this.__OnGridHeaderMouseOut, this);
};
mini._GridSort.prototype = {
    destroy: function (removeEl) {
        if (this._focusedColumnEl) {
            mini.clearEvent(this._focusedColumnEl);
            var parent = this._focusedColumnEl.parentNode;
            if (parent)
                parent.removeChild(this._focusedColumnEl);
            this._focusedColumnEl = null;
        }
    },
    __OnGridHeaderMouseOut: function (e) {
        if (this._focusedColumnEl) {
            mini.removeClass(this._focusedColumnEl, "mini-grid-headerCell-hover");
        }
    },
    __OnGridHeaderMouseMove: function (e) {
        var t = mini.findParent(e.target, "mini-grid-headerCell");
        if (t) {

            mini.addClass(t, "mini-grid-headerCell-hover");
            this._focusedColumnEl = t;
        }
    },
    __onGridHeaderCellClick: function (e) {











    }
};



/**
* @class 表格组件列分隔容器插件，主要实现调整列宽相关功能。
*/


mini._ColumnSplitter = function (grid) {

    this.grid = grid;
    mini.on(this.grid.el, "mousedown", this.__onGridMouseDown, this);


    grid.on("layout", this.__OnGridLayout, this);
};
mini._ColumnSplitter.prototype = {
    destroy: function (removeEl) {
        if (this.splittersEl) {
            mini.clearEvent(this.splittersEl);
            mini.removeNode(this.splittersEl);
            this.splittersEl = null;
        }
        if (this.drag) {
            this.drag.destroy();
            this.drag = null;
        }
    },
    __OnGridLayout: function (e) {

        if (this.splittersEl) mini.removeNode(this.splittersEl);
        if (this.splitterTimer) return;
        var grid = this.grid;
        if (grid.isDisplay() == false) return;

        var sf = this;
        this.splitterTimer = setTimeout(function () {


            var bottomColumns = grid.getBottomColumns();
            var columnLength = bottomColumns.length;

            var headerBox = mini.getBox(grid._headerEl, true);
            var scrollLeft = grid.getScrollLeft();

            var sb = [];

            for (var i = 0, l = bottomColumns.length; i < l; i++) {
                var column = bottomColumns[i];
                var box = grid.getColumnBox(column);
                if (!box) break;
                var top = box.top - headerBox.top;
                var left = box.right - headerBox.left - 2;
                var height = box.height;



                if (grid.isFrozen && grid.isFrozen()) {
                    if (i >= grid.frozenStartColumn) {

                    }
                } else {
                    left += scrollLeft;
                }


                var pcolumn = grid.getParentColumn(column);
                if (pcolumn && pcolumn.columns) {
                    if (pcolumn.columns[pcolumn.columns.length - 1] == column) {
                        if (height + 5 < headerBox.height) {
                            top = 0;
                            height = headerBox.height;
                        }
                    }
                }

                if (grid.allowResizeColumn && column.allowResize) {
                    sb[sb.length] = '<div id="' + column._id + '" class="mini-grid-splitter" style="left:'
                                + (left - 1) + 'px;top:' + top + 'px;height:' + height + 'px;"></div>';
                }
            }

            var s = sb.join('');

            sf.splittersEl = document.createElement("div");
            sf.splittersEl.className = 'mini-grid-splitters';
            sf.splittersEl.innerHTML = s;

            var el = grid._getHeaderScrollEl();
            el.appendChild(sf.splittersEl);



            sf.splitterTimer = null;
        }, 100);

    },
    __onGridMouseDown: function (e) {
        var grid = this.grid;
        var t = e.target;

        if (mini.hasClass(t, "mini-grid-splitter")) {
            var column = grid._idColumns[t.id];
            if (grid.allowResizeColumn && column && column.allowResize) {
                this.splitterColumn = column;
                this.getDrag().start(e);
            }
        }
    },
    getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function (drag) {
        var grid = this.grid;
        var columnBox = grid.getColumnBox(this.splitterColumn);
        this.columnBox = columnBox;
        this._dragProxy = mini.append(document.body, '<div class="mini-grid-proxy"></div>');


        var box = grid.getBox(true);
        box.x = columnBox.x;
        box.width = columnBox.width;
        box.right = columnBox.right;
        mini.setBox(this._dragProxy, box);
    },
    _OnDragMove: function (drag) {
        var grid = this.grid;
        var box = mini.copyTo({}, this.columnBox);
        var width = box.width + (drag.now[0] - drag.init[0]);
        if (width < grid.columnMinWidth) width = grid.columnMinWidth;
        if (width > grid.columnMaxWidth) width = grid.columnMaxWidth;

        mini.setWidth(this._dragProxy, width);
    },
    _OnDragStop: function (drag) {
        this.columnBox = null;

        var grid = this.grid;
        var box = mini.getBox(this._dragProxy);
        var sf = this;
        var allowSort = grid.allowSortColumn;
        grid.allowSortColumn = false;
        setTimeout(function () {
            jQuery(sf._dragProxy).remove();
            sf._dragProxy = null;

            grid.allowSortColumn = allowSort;
        }, 10);

        var column = this.splitterColumn;

        var columnWidth = parseInt(column.width);
        if (columnWidth + "%" != column.width) {
            var width = grid.getColumnWidth(column);
            var w = parseInt(columnWidth / width * box.width);
            grid.setColumnWidth(column, w);
        }
    }
};


/**
 * @class 表格组件列移动插件，主要实现移动列相关功能。
 */

mini._ColumnMove = function (grid) {
    this.grid = grid;
    mini.on(this.grid.el, "mousedown", this.__onGridMouseDown, this);
};
mini._ColumnMove.prototype = {
    destroy: function (removeEl) {
        if (this.drag) {
            this.drag.destroy();
            this.drag = null;
        }
    },
    __onGridMouseDown: function (e) {

        var grid = this.grid;

        if (grid.isEditing && grid.isEditing()) return;
        if (mini.hasClass(e.target, "mini-grid-splitter")) return;

        if (e.button == mini.MouseButton.Right) return;
        var t = mini.findParent(e.target, grid._headerCellCls);
        if (t) {
            this._remove();

            var column = grid._getColumnByEvent(e);
            if (grid.allowMoveColumn && column && column.allowMove) {
                this.dragColumn = column;
                this._columnEl = t;
                this.getDrag().start(e);
            }
        }
    },
    getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: false,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function (drag) {
        function createHeaderCell(column) {
            var header = column.header;
            if (typeof header == "function") header = header.call(grid, column);
            if (mini.isNull(header) || header === "") header = "&nbsp;";
            return header;
        }

        var grid = this.grid;
        this._dragProxy = mini.append(document.body, '<div class="mini-grid-columnproxy"></div>');
        this._dragProxy.innerHTML = '<div class="mini-grid-columnproxy-inner" style="height:26px;">' + createHeaderCell(this.dragColumn) + '</div>';
        mini.setXY(this._dragProxy, drag.now[0] + 15, drag.now[1] + 18);
        mini.addClass(this._dragProxy, "mini-grid-no");

        this.moveTop = mini.append(document.body, '<div class="mini-grid-movetop"></div>');
        this.moveBottom = mini.append(document.body, '<div class="mini-grid-movebottom"></div>');
    },
    _OnDragMove: function (drag) {
        var grid = this.grid;
        var x = drag.now[0];

        mini.setXY(this._dragProxy, x + 15, drag.now[1] + 18);

        this.targetColumn = this.insertAction = null;
        var t = mini.findParent(drag.event.target, grid._headerCellCls);
        if (t) {
            var column = grid._getColumnByEvent(drag.event);
            if (column && column != this.dragColumn) {
                var p1 = grid.getParentColumn(this.dragColumn);
                var p2 = grid.getParentColumn(column);
                if (p1 == p2) {

                    this.targetColumn = column;
                    this.insertAction = "before";
                    var columnBox = grid.getColumnBox(this.targetColumn);

                    if (x > columnBox.x + columnBox.width / 2) {

                        this.insertAction = "after";
                    }
                }
            }
        }

        if (this.targetColumn) {

            mini.addClass(this._dragProxy, "mini-grid-ok");
            mini.removeClass(this._dragProxy, "mini-grid-no");

            var box = grid.getColumnBox(this.targetColumn);

            this.moveTop.style.display = 'block';
            this.moveBottom.style.display = 'block';
            if (this.insertAction == "before") {

                mini.setXY(this.moveTop, box.x - 4, box.y - 9);
                mini.setXY(this.moveBottom, box.x - 4, box.bottom);
            } else {

                mini.setXY(this.moveTop, box.right - 4, box.y - 9);
                mini.setXY(this.moveBottom, box.right - 4, box.bottom);
            }
        } else {
            mini.removeClass(this._dragProxy, "mini-grid-ok");
            mini.addClass(this._dragProxy, "mini-grid-no");

            this.moveTop.style.display = 'none';
            this.moveBottom.style.display = 'none';
        }
    },
    _remove: function () {
        var grid = this.grid;
        mini.removeNode(this._dragProxy);
        mini.removeNode(this.moveTop);
        mini.removeNode(this.moveBottom);
        this._dragProxy = this.moveTop = this.moveBottom = this.dragColumn = this.targetColumn = null;
    },
    _OnDragStop: function (drag) {

        var grid = this.grid;
        grid.moveColumn(this.dragColumn, this.targetColumn, this.insertAction);
        this._remove();
    }
};




/**
 * @class 表格组件行/单元格选择插件，主要实现行/单元格选择相关功能。
 */

mini._GridSelect = function (grid) {

    this.grid = grid;
    this.grid.on("cellmousedown", this.__onGridCellMouseDown, this);
    this.grid.on("cellclick", this.__onGridCellClick, this);
    this.grid.on("celldblclick", this.__onGridCellClick, this);

    mini.on(this.grid.el, "keydown", this.__OnGridKeyDown, this);
};
mini._GridSelect.prototype = {
    destroy: function (removeEl) {
        delete this.currentRecord;
    },
    __OnGridKeyDown: function (e) {


        var grid = this.grid;
        if (mini.isAncestor(grid._filterEl, e.target)
            || mini.isAncestor(grid._summaryEl, e.target)
            || mini.isAncestor(grid._footerEl, e.target)
            || mini.findParent(e.target, 'mini-grid-detailRow')
            || mini.findParent(e.target, 'mini-grid-rowEdit')

            ) {
            return;
        }


        var currentCell = grid.getCurrentCell();
        /**解决当有选中行时，按下shift键会再次激发行选中 潘正锋 2013-09-18*/
        if (e.shiftKey || e.ctrlKey || e.altKey) {
            return;
        }

        if (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40) {
            e.preventDefault();
        }

        var columns = grid.getBottomVisibleColumns();

        var column = currentCell ? currentCell[1] : null,
            record = currentCell ? currentCell[0] : null;
        if (!currentCell) record = grid.getCurrent();
        var columnIndex = columns.indexOf(column);
        var rowIndex = grid.indexOf(record);
        var count = grid.getData().length;

        switch (e.keyCode) {
            case 9:
                if (grid.allowCellEdit && grid.editOnTabKey) {
                    e.preventDefault();

                    grid._beginEditNextCell(e.shiftKey == false);
                    return;
                }

                break;
            case 27:

                break;
            case 13:
                if (grid.allowCellEdit && grid.editNextOnEnterKey) {
                    if (grid.isEditingCell(currentCell) || !column.editor) {
                        grid._beginEditNextCell(e.shiftKey == false);
                        return;
                    }
                }
                if (grid.allowCellEdit && currentCell && !column.readOnly) {
                    grid.beginEditCell();
                }
                break;
            case 37:
                if (column) {
                    if (columnIndex > 0) {
                        columnIndex -= 1;
                    }
                } else {
                    columnIndex = 0;
                }
                break;
            case 38:
                if (record) {
                    if (rowIndex > 0) rowIndex -= 1;
                } else {
                    rowIndex = 0;
                }
                if (rowIndex != 0 && grid.isVirtualScroll()) {
                    if (grid._viewRegion.start > rowIndex) {
                        grid._bodyEl.scrollTop -= grid._rowHeight;
                        grid._tryUpdateScroll();
                    }
                }
                break;
            case 39:
                if (column) {
                    if (columnIndex < columns.length - 1) {
                        columnIndex += 1;
                    }
                } else {
                    columnIndex = 0;
                }
                break;
            case 40:
                if (record) {
                    if (rowIndex < count - 1) rowIndex += 1;
                } else {
                    rowIndex = 0;
                }
                if (grid.isVirtualScroll()) {
                    if (grid._viewRegion.end < rowIndex) {
                        grid._bodyEl.scrollTop += grid._rowHeight;
                        grid._tryUpdateScroll();
                    }
                }
                break;
            default:
                break;
        }

        column = columns[columnIndex];
        record = grid.getAt(rowIndex);

        if (column && record && grid.allowCellSelect) {
            var currentCell = [record, column];
            grid.setCurrentCell(currentCell);
            grid.scrollIntoView(record, column);
        }
        if (!grid.onlyCheckSelection) {
            if (record && grid.allowRowSelect) {
                grid.deselectAll();
                grid.setCurrent(record);
            }
        }
    },
    __onGridCellClick: function (e) {
        var grid = this.grid;
        if (grid.allowCellEdit == false) return;
        if (this.grid.cellEditAction != e.type) return;
        var record = e.record, column = e.column;
        if (!column.readOnly && !this.grid.isReadOnly()) {
            if (e.htmlEvent.shiftKey || e.htmlEvent.ctrlKey) {
            } else {
                this.grid.beginEditCell();

            }
        }
    },
    __onGridCellMouseDown: function (e) {

        var me = this;
        me.__doSelect(e);
    },

    __doSelect: function (e) {

        var record = e.record, column = e.column;
        var grid = this.grid;


        if (this.grid.allowCellSelect) {
            var cell = [record, column];
            this.grid.setCurrentCell(cell);
        }

        if (grid.onlyCheckSelection && !column._multiRowSelect) return;

        if (grid.allowRowSelect) {
            if (grid.multiSelect) {
                this.grid.el.onselectstart = function () { };
                if (e.htmlEvent.shiftKey) {
                    this.grid.el.onselectstart = function () { return false };
                    e.htmlEvent.preventDefault();

                    if (!this.currentRecord) {
                        this.grid.select(record);
                        this.currentRecord = this.grid.getSelected();
                    } else {
                        /**解决已选中的行被重新出发deselect和select事件 潘正锋 2013-09*/
                        if(this.currentRecord._index == record._index)  {
                            return ;
                        }
                        var start = this.currentRecord._index;
                        var end = record._index;
                        if(this.currentRecord._index > record._index)  {
                            start = record._index;
                            end = this.currentRecord._index;
                        }
                        for(var i=start;i<=end;i++){
                              if(!grid.isSelected(i))  {
                                  grid.select(i);
                              }

                        }
                    }

                } else {
                    this.grid.el.onselectstart = function () { };
                    if (e.htmlEvent.ctrlKey) {
                        this.grid.el.onselectstart = function () { return false };
                        try {
                            e.htmlEvent.preventDefault();
                        } catch (ex) { }
                    }

                    if (e.column._multiRowSelect === true || e.htmlEvent.ctrlKey || grid.allowUnselect) {
                        if (grid.isSelected(record)) {
                            grid.deselect(record);
                        } else {
                            grid.select(record);
                        }
                    } else {
                        if (grid.isSelected(record)) {

                        } else {
                            grid.deselectAll();
                            grid.select(record);
                        }
                    }
                    this.currentRecord = this.grid.getSelected();
                }
            } else {
                if (!grid.isSelected(record)) {
                    grid.deselectAll();
                    grid.select(record);
                } else {
                    if (e.htmlEvent.ctrlKey) {
                        grid.deselectAll();
                    }
                }
            }
        }

    }
};

/**
 * @class 表格组件单元格浮动信息插件，主要实现单元格浮动信息相关功能。
 */
mini._CellToolTip = function (grid) {
    this.grid = grid;
    mini.on(this.grid.el, "mousemove", this.__onGridMouseMove, this);
    mini.on(this.grid.el, "mouseout", this.__onGridMouseOut, this);
};
mini._CellToolTip.prototype = {
    destroy: function (removeEl) {
    },

    __onGridMouseMove: function (e) {

        var grid = this.grid;
        var cell = grid._getCellByEvent(e);

        var cellEl = grid._getCellEl(cell.record, cell.column);

        var error = grid.getCellError(cell.record, cell.column);
        if (cellEl) {
            if (error) {
                cellEl.title = error.errorText;
                return;
            }

            if (cellEl.firstChild) {
                if (mini.hasClass(cellEl.firstChild, "mini-grid-cell-inner")
                    || mini.hasClass(cellEl.firstChild, "mini-treegrid-treecolumn-inner")
                    ) {
                    cellEl = cellEl.firstChild;
                }
            }
            if (cellEl.scrollWidth > cellEl.clientWidth) {
                var s = cellEl.innerText || cellEl.textContent || "";
                cellEl.title = s.trim();
            } else {
                cellEl.title = "";
            }

        }
    },
    /**
     * 解决title长时间停留后消失，此时移出再移入不显示title的问题
     * @author 赵美丹
     * @date 2013-03-25
     */
    __onGridMouseOut: function (e) {
        var grid = this.grid;
        var cell = grid._getCellByEvent(e);

        var cellEl = grid._getCellEl(cell.record, cell.column);
        if (cellEl) {
            cellEl.title = "";
        }
    }
};


/**
 * @class 表格组件列菜单插件，主要实现列菜单相关功能。
 */
mini._ColumnsMenu = function (grid) {
    this.grid = grid;
    this.menu = this.createMenu();
    mini.on(grid.el, "contextmenu", this.__OnContextMenu, this);
}
mini._ColumnsMenu.prototype = {
    destroy: function (removeEl) {
        if (this.arrowEl) {
            mini.clearEvent(this.arrowEl);
            this.arrowEl.parentNode.removeChild(this.arrowEl);
            this.arrowEl = null;
        }
    },
    createMenu: function () {
        var menu = mini.create({ type: "menu", hideOnClick: false });
        menu.on("itemclick", this.__OnItemClick, this);
        return menu;
    },
    updateMenu: function () {
        var grid = this.grid, menu = this.menu;
        var columns = grid.getBottomColumns();
        var items = [];
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var item = {};
            item.checked = column.visible;
            item.checkOnClick = true;
            item.text = grid._createHeaderText(column);
            if (item.text == "&nbsp;") {
                if (column.type == "indexcolumn") item.text = "序号";
                if (column.type == "checkcolumn") item.text = "选择";
            }
            items.push(item);

            item._column = column;
        }
        menu.setItems(items);
    },
    __OnContextMenu: function (e) {
        var grid = this.grid;
        if (grid.showColumnsMenu == false) return;
        if (mini.isAncestor(grid._headerEl, e.target) == false) return;
        this.updateMenu();
        this.menu.showAtPos(e.pageX, e.pageY);
        return false;
    },
    __OnItemClick: function (e) {
        var grid = this.grid, menu = this.menu;
        var columns = grid.getBottomColumns();
        var items = menu.getItems();
        var item = e.item, column = item._column;

        var checkedCount = 0;
        for (var i = 0, l = items.length; i < l; i++) {
            var it = items[i];
            if (it.getChecked()) checkedCount++;
        }
        if (checkedCount < 1) {
            item.setChecked(true);
        }

        var checked = item.getChecked();
        if (checked) grid.showColumn(column);
        else grid.hideColumn(column);
    }
}



/**
 * @class 表格组件单元格校验插件，主要实现单元格校验相关功能。
 */
mini_CellValidator_Prototype = {
    getCellErrors: function () {
        var errors = this._cellErrors.clone();

        var data = this.data;
        for (var i = 0, l = errors.length; i < l; i++) {
            var error = errors[i];
            var row = error.record;
            var column = error.column;
            if (data.indexOf(row) == -1) {
                var id = row[this._rowIdField] + "$" + column._id;
                delete this._cellMapErrors[id];
                this._cellErrors.remove(error);
            }
        }

        return this._cellErrors;
    },
    getCellError: function (row, column) {
        row = this.getNode ? this.getNode(row) : this.getRow(row);
        column = this.getColumn(column);
        if (!row || !column) return;

        var id = row[this._rowIdField] + "$" + column._id;
        return this._cellMapErrors[id];
    },
    isValid: function () {

        return this.getCellErrors().length == 0;
    },
    validate: function () {

        var data = this.data;
        for (var i = 0, l = data.length; i < l; i++) {
            var row = data[i];
            this.validateRow(row);

        }
    },
    validateRow: function (row) {
        var columns = this.getBottomColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            this.validateCell(row, column);
        }
    },
    validateCell: function (row, column) {
        row = this.getNode ? this.getNode(row) : this.getRow(row);
        column = this.getColumn(column);
        if (!row || !column) return;
        var e = {
            record: row,
            row: row,
            node: row,
            column: column,
            field: column.field,
            value: row[column.field],
            isValid: true,
            errorText: ""
        };

        if (column.vtype) {
            mini._ValidateVType(column.vtype, e.value, e, column);
        }

        if (e.isValid == true && column.unique && column.field) {

            var maps = {};
            var data = this.data, field = column.field;
            for (var i = 0, l = data.length; i < l; i++) {
                var o = data[i];
                var v = o[field];
                if (mini.isNull(v) || v === "") {
                } else {
                    var old = maps[v];
                    if (old && o == row) {
                        e.isValid = false;
                        e.errorText = mini._getErrorText(column, "uniqueErrorText");


                        this.setCellIsValid(old, column, e.isValid, e.errorText);
                        break;
                    }
                    maps[v] = o;
                }
            }
        }

        this.fire("cellvalidation", e);
        this.setCellIsValid(row, column, e.isValid, e.errorText);
    },

    setIsValid: function (value) {
        if (value) {
            var errors = this._cellErrors.clone();
            for (var i = 0, l = errors.length; i < l; i++) {
                var error = errors[i];
                this.setCellIsValid(error.record, error.column, true);
            }
        }
    },
    _removeRowError: function (row) {
        var columns = this.getColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            var id = row[this._rowIdField] + "$" + column._id;
            var error = this._cellMapErrors[id];
            if (error) {
                delete this._cellMapErrors[id];
                this._cellErrors.remove(error);
            }
        }
    },
    setCellIsValid: function (row, column, isValid, errorText) {
        row = this.getNode ? this.getNode(row) : this.getRow(row);
        column = this.getColumn(column);
        if (!row || !column) return;
        var id = row[this._rowIdField] + "$" + column._id;
        var cellEl = this._getCellEl(row, column);

        var error = this._cellMapErrors[id];
        delete this._cellMapErrors[id];
        this._cellErrors.remove(error);

        if (isValid === true) {
            if (cellEl && error) {
                mini.removeClass(cellEl, 'mini-grid-cell-error');
            }
        } else {
            error = { record: row, column: column, isValid: isValid, errorText: errorText };
            this._cellMapErrors[id] = error;
            this._cellErrors.add(error);
            if (cellEl) {
                mini.addClass(cellEl, 'mini-grid-cell-error');
            }
        }
    }
}


mini.copyTo(mini.DataGrid.prototype, mini_CellValidator_Prototype);


mini.DataGrid_Print = function (grid,config) {
    this.grid = grid;
    this.config = mini.copyTo({
        printColumn: null,
        columnWidth: null
    },config)
}
mini.DataGrid_Print.prototype = {



    getHtml: function () {
        var html = '<table class="datagrid-print-table">' + this._createHead() + this._createBody() + '</table>';
        return html;
    },
    /*设置需要打印的列
     * value Array
     */
    setColumn: function (value) {
        this.config.printColumn = value;
    },
    setColumnWidth: function (value) {
        this.config.columnWidth = value;
    },
    _createHead: function () {
        var id = "#mini-grid-table-head" + this.grid.getId();
        this.$printHeadTable = $(id).clone();
        this._removeHeanUnUseable();
        var html = this.$printHeadTable.html();
        return html;
    },
    _createBody: function () {
        var id = "#mini-grid-table-body" + this.grid.getId();
        this.$printBodyTable = $(id).clone();
        this._removeBodyUnUseable();
        var html = this.$printBodyTable.html();
        return html;
    },
    _removeBodyUnUseable: function () {
        this.$printBodyTable.find("tr:first").remove();
        this.$printBodyTable.find("td").each(function () {
            $(this).removeAttr("id");
            $(this).removeAttr("class");
            $(this).removeAttr("style");
        })
        this.$printBodyTable.find("tr").each(function () {
            $(this).removeAttr("id");
            $(this).removeAttr("class");
            $(this).removeAttr("style");
        })
    },
    _removeHeanUnUseable: function () {
        this.$printHeadTable.find("tr:first").remove();
        this.$printHeadTable.find("td").each(function () {
            $(this).removeAttr("id");
            $(this).removeAttr("class");
            $(this).removeAttr("style");
        })
        this.$printHeadTable.find("tr").each(function () {
            $(this).removeAttr("id");
            $(this).removeAttr("class");
            $(this).removeAttr("style");
        })
    }
}










/**
 * 文件中定义了 RadioButtonList 组件。
 * @fileOverview RadioButtonList.js
 * @author 殷文旭
 */

/**
 * @class RadioButtonList 是mini UI中的单选按钮组组件
 * @constructor
 * @extends mini.CheckBoxList
 * @requires mini.CheckBoxList
 * @version 1.0
 */
mini.RadioButtonList = function () {
	mini.RadioButtonList.superclass.constructor.call(this);
}
mini.extend(mini.RadioButtonList, mini.CheckBoxList, {
	/**
	 * 是否支持多选开关
	 * @type Boolean
	 * @default false
	 */
	multiSelect: false,

	_itemCls: "mini-radiobuttonlist-item",
	_itemHoverCls: "mini-radiobuttonlist-item-hover",
	_itemSelectedCls: "mini-radiobuttonlist-item-selected",

	_tableCls: "mini-radiobuttonlist-table",
	_tdCls: "mini-radiobuttonlist-td",
	_checkType: "radio",
	/**
	 * 组件样式类
	 * @type String
	 * @default "mini-radiobuttonlist"
	 */
	uiCls: "mini-radiobuttonlist"
});
mini.regClass(mini.RadioButtonList, "radiobuttonlist");

mini.Spinner = function () {
    mini.Spinner.superclass.constructor.call(this);
    this.setValue(this.minValue,false);
}
mini.extend(mini.Spinner, mini.ButtonEdit, {
    value: 0,
    minValue: 0,
    maxValue: 100,
    increment: 1,
    decimalPlaces: 0,   
    changeOnMousewheel: true,
    allowLimitValue: true,

    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;

        mini.Spinner.superclass.set.call(this, kv);

        if (!mini.isNull(value)) {
            this.setValue(value,this.defaultValueTriggerChange);
        }

        return this;
    },

    uiCls: "mini-spinner",
    _getButtonHtml: function () {
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" '
                        + 'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span class="mini-buttonedit-button" ' + hover + '><span class="mini-buttonedit-up"><span></span></span><span class="mini-buttonedit-down"><span></span></span></span>';
    },
    
    _initEvents: function () {
        mini.Spinner.superclass._initEvents.call(this);

        mini._BindEvents(function () {


            

            this.on("buttonmousedown", this.__OnButtonMouseDown, this);
            mini.on(this.el, "mousewheel", this.__OnMousewheel, this);
        }, this);

    },

    _ValueLimit: function () {
        if (this.allowLimitValue == false) return;

        if (this.minValue > this.maxValue) {
            this.maxValue = this.minValue + 100;
        }
        if (this.value < this.minValue) {
            this.setValue(this.minValue,false);
        }
        if (this.value > this.maxValue) {
            this.setValue(this.maxValue,false);
        }
    },
    getFormValue: function () {
        var v = this.value;
        v = parseFloat(v);
        if (isNaN(v)) v = 0;
        var s = String(v).split(".");
        var s1 = s[0], s2 = s[1];
        if (!s2) s2 = "";
        if (this.decimalPlaces > 0) {
            for (var i = s2.length, l = this.decimalPlaces; i < l; i++) {
                s2 += "0";
            }
            s2 = "." + s2;
        }
        return s1 + s2;
    },

    setValue: function (value,valid) {
        value = parseFloat(value);
        if (isNaN(value)) value = this.defaultValue;
        value = parseFloat(value);
        if (isNaN(value)) value = this.minValue;
        value = parseFloat(value.toFixed(this.decimalPlaces));
        if (!mini.isEquals(this.value , value)) {
            this.value = value;
            this._ValueLimit();
            this._valueEl.value = this.value;
            this.text = this._textEl.value = this.getFormValue();
            if(valid === undefined)
                valid = true;
            if(valid)
                this._OnValueChanged();
        } else {
            this.text = this._textEl.value = this.getFormValue();
        }
    },

    setMaxValue: function (value) {
        value = parseFloat(value);
        if (isNaN(value)) return;
        value = parseFloat(value.toFixed(this.decimalPlaces));
        if (this.maxValue != value) {
            this.maxValue = value;
            this._ValueLimit();
        }
    },
    getMaxValue: function (value) {
        return this.maxValue;
    },
    setMinValue: function (value) {
        value = parseFloat(value);
        if (isNaN(value)) return;
        value = parseFloat(value.toFixed(this.decimalPlaces));
        if (this.minValue != value) {
            this.minValue = value;
            this._ValueLimit();
        }
    },
    getMinValue: function (value) {
        return this.minValue;
    },
    setIncrement: function (value) {
        value = parseFloat(value);
        if (isNaN(value)) return;
        if (this.increment != value) {
            this.increment = value;
        }
    },
    getIncrement: function (value) {
        return this.increment;
    },
    setDecimalPlaces: function (value) {
        value = parseInt(value);
        if (isNaN(value) || value < 0) return;
        this.decimalPlaces = value;
    },
    getDecimalPlaces: function (value) {
        return this.decimalPlaces;
    },
    setChangeOnMousewheel: function (value) {
        this.changeOnMousewheel = value;
    },
    getChangeOnMousewheel: function (value) {
        return this.changeOnMousewheel;
    },
    setAllowLimitValue: function (value) {
        this.allowLimitValue = value;
    },
    getAllowLimitValue: function (value) {
        return this.allowLimitValue;
    },

    _SpinTimer: null,
    _StartSpin: function (Increment, time, count) {
        this._StopSpin();

        this.setValue(this.value + Increment,false);
        
        

        var sf = this;
        var sourceCount = count;
        var now = new Date();
        this._SpinTimer = setInterval(function () {

            sf.setValue(sf.value + Increment,false);

            count--;
            if (count == 0 && time > 50) {
                sf._StartSpin(Increment, time - 100, sourceCount + 3);

            }

            
            var now2 = new Date();
            if (now2 - now > 500) sf._StopSpin();
            now = now2;
        }, time);
        mini.on(document, "mouseup", this._OnDocumentMouseUp, this);
        
    },
    _StopSpin: function () {
        clearInterval(this._SpinTimer);
        this._SpinTimer = null;
    },
    __OnButtonMouseDown: function (e) {
        this._DownValue = this.getValue();

        this.__OnInputTextChanged();
        if (e.spinType == "up") {
            this._StartSpin(this.increment, 230, 2);
        } else {
            this._StartSpin(-this.increment, 230, 2);
        }
    },
    __OnInputKeyDown: function (e) {
        mini.Spinner.superclass.__OnInputKeyDown.call(this, e);

        var KEY = mini.Keyboard;
        
        switch (e.keyCode) {
            case KEY.Top:
                this.setValue(this.value + this.increment);
                break;
            case KEY.Bottom:
                this.setValue(this.value - this.increment);
                break;
        }
    },
    __OnMousewheel: function (e) {
        if (this.isReadOnly()) return;
        if (this.changeOnMousewheel == false) return;

        var wheelDelta = e.wheelDelta || e.originalEvent.wheelDelta;
        if (mini.isNull(wheelDelta)) wheelDelta = -e.detail * 24;
        var increment = this.increment;
        if (wheelDelta < 0) increment = -increment;
        this.setValue(this.value + increment);

        return false;
    },

    _OnDocumentMouseUp: function (e) {
        this._StopSpin();
        mini.un(document, "mouseup", this._OnDocumentMouseUp, this);

        if (this._DownValue != this.getValue()) {
            this._OnValueChanged();
        }
    },
    __OnInputTextChanged: function (e) {
        var _value = this.getValue();

        var value = parseFloat(this._textEl.value);
        this.setValue(value);
    },
    
    getAttrs: function (el) {
        var attrs = mini.Spinner.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["minValue", "maxValue", "increment", "decimalPlaces", "changeOnMousewheel"
            ]
        );
        mini._ParseBool(el, attrs,
            ["allowLimitValue"
            ]
        );

        return attrs;
    }


});
mini.regClass(mini.Spinner, 'spinner');

mini.SplitButton = function () {
    mini.SplitButton.superclass.constructor.call(this);
}
mini.extend(mini.SplitButton, mini.MenuButton, {
    uiCls: "mini-splitbutton",
    allowCls: "mini-button-split"
});
mini.regClass(mini.SplitButton, "splitbutton");


/**
 * @fileOverview Splitter.js文件定义了。
 * @requires jQuery
 */

/**
 * @class Splitter 是mini UI中的分割器组件
 * @constructor
 * @extends mini.Control
 * @requires mini.Control
 * @version 1.0
 */
mini.Splitter = function () {
    this._initPanes();
    mini.Splitter.superclass.constructor.call(this);
}
mini.extend(mini.Splitter, mini.Control,  {
	/**
	 * 宽度 
	 * @type int
	 * @default {} 300
	 */
    width: 300,
	/**
	 * 宽度 
	 * @type int
	 * @default {} 180
	 */
    height: 180,
    /**
	 * 是否竖向 
	 * @type int
	 * @default {} 250
	 */
    vertical: false,
	/**
	 * 是否允许拖拽调整 
	 * @type int
	 * @default {} 250
	 */
    allowResize: true,
    /**
	 * 左边或上边的pane1
	 * @type Panel
	 * @default {} null
	 */
    pane1: null,
	/**
	 * 右边或下边的pane1 
	 * @type Panel
	 * @default {} null
	 */
    pane2: null,
    /**
	 * 不知道干嘛的 
	 * @type boolean
	 * @default {} true
	 */
    showHandleButton: true,
	/**
	 * 不知道干嘛的  
	 * @type string
	 * @default {} ""
	 */
    handlerStyle: "",
	/**
	 * 不知道干嘛的  
	 * @type string
	 * @default {} ""
	 */
    handlerCls: "",
    /**
	 * 不知道干嘛的  
	 * @type int
	 * @default {} 5
	 */
    handlerSize: 5,
    /**
	 * 此组件的class 
	 * @type string
	 * @default {} mini-splitter
	 */
    uiCls: "mini-splitter",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-splitter";
        this.el.innerHTML = '<div class="mini-splitter-border"><div id="1" class="mini-splitter-pane mini-splitter-pane1"></div><div id="2" class="mini-splitter-pane mini-splitter-pane2"></div><div class="mini-splitter-handler"></div></div>';

        this._borderEl = this.el.firstChild;
        this._pane1El = this._borderEl.firstChild;
        this._pane2El = this._borderEl.childNodes[1];
        this._handlerEl = this._borderEl.lastChild;

    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
        }, this);

    },
    _initPanes: function () {
        this.pane1 = {
            id: "",
            index: 1, minSize: 30, maxSize: 3000, size: '', showCollapseButton: false, cls: "", style: "", visible: true, expanded: true
        };
        this.pane2 = mini.copyTo({}, this.pane1);
        this.pane2.index = 2;
    },
    doUpdate: function () {
        this.doLayout();
    },
    doLayout: function () {
        if (!this.canLayout()) return;

        this._handlerEl.style.cursor = this.allowResize ? "" : "default";

        mini.removeClass(this.el, 'mini-splitter-vertical');
        if (this.vertical) {
            mini.addClass(this.el, 'mini-splitter-vertical');
        }

        mini.removeClass(this._pane1El, 'mini-splitter-pane1-vertical');
        mini.removeClass(this._pane2El, 'mini-splitter-pane2-vertical');
        if (this.vertical) {
            mini.addClass(this._pane1El, 'mini-splitter-pane1-vertical');
            mini.addClass(this._pane2El, 'mini-splitter-pane2-vertical');
        }

        mini.removeClass(this._handlerEl, 'mini-splitter-handler-vertical');
        if (this.vertical) {
            mini.addClass(this._handlerEl, 'mini-splitter-handler-vertical');
        }

        var h = this.getHeight(true);
        var w = this.getWidth(true);

        if (!jQuery.boxModel) {
            var b2 = mini.getBorders(this._borderEl);
            h = h + b2.top + b2.bottom;
            w = w + b2.left + b2.right;
        }
        this._borderEl.style.width = w + "px";
        this._borderEl.style.height = h + "px";

        var p1 = this._pane1El, p2 = this._pane2El;
        var jqP1 = jQuery(p1), jqP2 = jQuery(p2);

        p1.style.display = p2.style.display = this._handlerEl.style.display = "";

        var hSize = this.handlerSize;

        this.pane1.size = String(this.pane1.size);
        this.pane2.size = String(this.pane2.size);

        var p1SIZE = parseFloat(this.pane1.size), p2SIZE = parseFloat(this.pane2.size);

        var p1Null = isNaN(p1SIZE), p2Null = isNaN(p2SIZE);
        var p1Percent = !isNaN(p1SIZE) && this.pane1.size.indexOf("%") != -1;
        var p2Percent = !isNaN(p2SIZE) && this.pane2.size.indexOf("%") != -1;
        var p1Number = !p1Null && !p1Percent;
        var p2Number = !p2Null && !p2Percent;

        var size = this.vertical ? h - this.handlerSize : w - this.handlerSize;
        var p1Size = p2Size = 0;

        if (p1Null || p2Null) {
            if (p1Null && p2Null) {
                p1Size = parseInt(size / 2);
                p2Size = size - p1Size;
            } else if (p1Number) {
                p1Size = p1SIZE;
                p2Size = size - p1Size;
            } else if (p1Percent) {
                p1Size = parseInt(size * p1SIZE / 100);
                p2Size = size - p1Size;
            } else if (p2Number) {
                p2Size = p2SIZE;
                p1Size = size - p2Size;
            } else if (p2Percent) {
                p2Size = parseInt(size * p2SIZE / 100);
                p1Size = size - p2Size;
            }
        } else if (p1Percent && p2Number) {
            p2Size = p2SIZE;
            p1Size = size - p2Size;
        } else if (p1Number && p2Percent) {
            p1Size = p1SIZE;
            p2Size = size - p1Size;
        } else {
            var all = p1SIZE + p2SIZE;
            p1Size = parseInt(size * p1SIZE / all);
            p2Size = size - p1Size;
        }

        if (p1Size > this.pane1.maxSize) {
            p1Size = this.pane1.maxSize;
            p2Size = size - p1Size;
        }
        if (p2Size > this.pane2.maxSize) {
            p2Size = this.pane2.maxSize;
            p1Size = size - p2Size;
        }

        if (p1Size < this.pane1.minSize) {
            p1Size = this.pane1.minSize;
            p2Size = size - p1Size;
        }
        if (p2Size < this.pane2.minSize) {
            p2Size = this.pane2.minSize;
            p1Size = size - p2Size;
        }

        if (this.pane1.expanded == false) {
            p2Size = size;
            p1Size = 0;
            p1.style.display = "none";
        } else if (this.pane2.expanded == false) {
            p1Size = size;
            p2Size = 0;
            p2.style.display = "none";
        }

        if (this.pane1.visible == false) {
            p2Size = size + hSize;
            p1Size = hSize = 0;
            p1.style.display = "none";
            this._handlerEl.style.display = "none";
        } else if (this.pane2.visible == false) {
            p1Size = size + hSize;
            p2Size = hSize = 0;
            p2.style.display = "none";
            this._handlerEl.style.display = "none";
        }

        if (this.vertical) {
            mini.setWidth(p1, w);
            mini.setWidth(p2, w);

            mini.setHeight(p1, p1Size);
            mini.setHeight(p2, p2Size);

            p2.style.top = (p1Size + hSize) + "px";

            this._handlerEl.style.left = "0px";
            this._handlerEl.style.top = p1Size + "px";
            mini.setWidth(this._handlerEl, w);
            mini.setHeight(this._handlerEl, this.handlerSize);

            p1.style.left = "0px";
            p2.style.left = "0px";
        } else {
            mini.setWidth(p1, p1Size);
            mini.setWidth(p2, p2Size);

            mini.setHeight(p1, h);
            mini.setHeight(p2, h);
            p2.style.left = (p1Size + hSize) + "px";

            this._handlerEl.style.top = "0px";
            this._handlerEl.style.left = p1Size + "px";
            mini.setWidth(this._handlerEl, this.handlerSize);
            mini.setHeight(this._handlerEl, h);

            p1.style.top = "0px";
            p2.style.top = "0px";
        }

        var s = '<div class="mini-splitter-handler-buttons">';

        if (!this.pane1.expanded || !this.pane2.expanded) {
            if (!this.pane1.expanded) {
                if (this.pane1.showCollapseButton) {
                    s += '<a id="1" class="mini-splitter-pane2-button"></a>';
                }
            } else {
                if (this.pane2.showCollapseButton) {
                    s += '<a id="2" class="mini-splitter-pane1-button"></a>';
                }
            }
        } else {
            if (this.pane1.showCollapseButton) {
                s += '<a id="1" class="mini-splitter-pane1-button"></a>';
            }
            if (this.allowResize) {
                if ((!this.pane1.showCollapseButton && !this.pane2.showCollapseButton)
            ) {
                    s += '<span class="mini-splitter-resize-button"></span>';
                }
            }
            if (this.pane2.showCollapseButton) {
                s += '<a id="2" class="mini-splitter-pane2-button"></a>';
            }
        }
        s += '</div>';
        this._handlerEl.innerHTML = s;
        var buttons = this._handlerEl.firstChild;
        buttons.style.display = this.showHandleButton ? "" : "none";
        var box = mini.getBox(buttons);
        if (this.vertical) {
            buttons.style.marginLeft = -box.width / 2 + "px";
        } else {
            buttons.style.marginTop = -box.height / 2 + "px";
        }

        if (!this.pane1.visible || !this.pane2.visible || !this.pane1.expanded || !this.pane2.expanded) {
            mini.addClass(this._handlerEl, 'mini-splitter-nodrag');
        } else {
            mini.removeClass(this._handlerEl, 'mini-splitter-nodrag');
        }

        mini.layout(this._borderEl);
         this.fire("layout");
    },

    getPaneBox: function (index) {
        var el = this.getPaneEl(index);
        if (!el) return null;
        return mini.getBox(el);
    },
    getPane: function (index) {
        if (index == 1) return this.pane1;
        else if (index == 2) return this.pane2;
        return index;
    },
    setPanes: function (panes) {
        if (!mini.isArray(panes)) return;
        for (var i = 0; i < 2; i++) {
            var p = panes[i];
            this.updatePane(i + 1, p);
        }
    },
    setPaneControls: function (index, value) {
        var pane = this.getPane(index);
        if (!pane) return;
        var el = this.getPaneEl(index);
        __mini_setControls(value, el, this);
    },
    getPaneEl: function (index) {
        if (index == 1) return this._pane1El;
        return this._pane2El;
    },
    updatePane: function (index, options) {
        var pane = this.getPane(index);
        if (!pane) return;
        mini.copyTo(pane, options);
        var el = this.getPaneEl(index);
        var cs = pane.body;
        delete pane.body;
        if (cs) {
            if (!mini.isArray(cs)) cs = [cs];
            for (var i = 0, l = cs.length; i < l; i++) {
                mini.append(el, cs[i]);
            }
        }
        
        if (pane.bodyParent) {
            var p = pane.bodyParent;
            while (p.firstChild) {
                el.appendChild(p.firstChild);
            }
        }
        delete pane.bodyParent;

        el.id = pane.id;

        mini.setStyle(el, pane.style);
        mini.addClass(el, pane['class']);

        if (pane.controls) {
            var index = pane == this.pane1 ? 1 : 2;
            this.setPaneControls(index, pane.controls);
            delete pane.controls;
        }

        this.doUpdate();
    },
    setShowHandleButton: function (value) {
        this.showHandleButton = value;
        this.doUpdate();
    },
    getShowHandleButton: function (value) {
        return this.showHandleButton;
    },
    setVertical: function (value) {
        this.vertical = value;
        this.doUpdate();
    },
    getVertical: function () {
        return this.vertical;
    },
    expandPane: function (index) {
        var pane = this.getPane(index);
        if (!pane) return;
        pane.expanded = true;
        this.doUpdate();
        var e = { pane: pane, paneIndex: this.pane1 == pane ? 1 : 2 };
        this.fire("expand", e);
    },
    collapsePane: function (index) {

        var pane = this.getPane(index);
        if (!pane) return;
        pane.expanded = false;
        var pane2 = pane == this.pane1 ? this.pane2 : this.pane1;
        if (pane2.expanded == false) {
            pane2.expanded = true;
            pane2.visible = true;
        }
        this.doUpdate();

        var e = { pane: pane, paneIndex: this.pane1 == pane ? 1 : 2 };
        this.fire("collapse", e);
    },
    togglePane: function (index) {
        var pane = this.getPane(index);
        if (!pane) return;
        if (pane.expanded) {
            this.collapsePane(pane);
        } else {
            this.expandPane(pane);
        }
    },
    showPane: function (index) {
        var pane = this.getPane(index);
        if (!pane) return;
        pane.visible = true;
        this.doUpdate();
    },
    hidePane: function (index) {
        var pane = this.getPane(index);
        if (!pane) return;
        pane.visible = false;
        var pane2 = pane == this.pane1 ? this.pane2 : this.pane1;
        if (pane2.visible == false) {
            pane2.expanded = true;
            pane2.visible = true;
        }
        this.doUpdate();
    },
    setAllowResize: function (value) {
        if (this.allowResize != value) {
            this.allowResize = value;
            this.doLayout();
        }
    },
    getAllowResize: function () {
        return this.allowResize;
    },
    setHandlerSize: function (value) {
        if (this.handlerSize != value) {
            this.handlerSize = value;
            this.doLayout();
        }
    },
    getHandlerSize: function () {
        return this.handlerSize;
    },
    __OnClick: function (e) {
        var t = e.target;
        if (!mini.isAncestor(this._handlerEl, t)) return;
        var index = parseInt(t.id);
        var pane = this.getPane(index);

        var e = { pane: pane, paneIndex: index, cancel: false };
        if (pane.expanded) {
            this.fire("beforecollapse", e);
        } else {
            this.fire("beforeexpand", e);
        }
        if (e.cancel == true) return;

        if (t.className == "mini-splitter-pane1-button") {
            this.togglePane(index);
        } else if (t.className == "mini-splitter-pane2-button") {
            this.togglePane(index);
        }
    },
    _OnButtonClick: function (pane, htmlEvent) {
        this.fire("buttonclick", {
            pane: pane,
            index: this.pane1 == pane ? 1 : 2,
            htmlEvent: htmlEvent
        });
    },
    onButtonClick: function (fn, scope) {
        this.on("buttonclick", fn, scope);
    },
    
    __OnMouseDown: function (e) {
        var t = e.target;
        if (!this.allowResize) return;
        if (!this.pane1.visible || !this.pane2.visible || !this.pane1.expanded || !this.pane2.expanded) {
            return;
        }
        if (mini.isAncestor(this._handlerEl, t)) {

            if (t.className == "mini-splitter-pane1-button" || t.className == "mini-splitter-pane2-button") {

            } else {
                var drag = this._getDrag();
                drag.start(e);
            }
        }
    },
    _getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: true,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function (drag) {
        this._maskProxy = mini.append(document.body, '<div class="mini-resizer-mask"></div>');

        this._dragProxy = mini.append(document.body, '<div class="mini-proxy"></div>');
        this._dragProxy.style.cursor = this.vertical ? "n-resize" : "w-resize";

        this.handlerBox = mini.getBox(this._handlerEl);


        this.elBox = mini.getBox(this._borderEl, true);
        mini.setBox(this._dragProxy, this.handlerBox);
        
    },
    _OnDragMove: function (drag) {
        if (!this.handlerBox) return;
        if (!this.elBox) this.elBox = mini.getBox(this._borderEl, true);
        var w = this.elBox.width, h = this.elBox.height;
        var hSize = this.handlerSize;
        var size = this.vertical ? h - this.handlerSize : w - this.handlerSize;
        var p1Min = this.pane1.minSize, p1Max = this.pane1.maxSize;
        var p2Min = this.pane2.minSize, p2Max = this.pane2.maxSize;

        if (this.vertical == true) {
            var yOffset = drag.now[1] - drag.init[1];
            var y = this.handlerBox.y + yOffset;
            
            if (y - this.elBox.y > p1Max) y = this.elBox.y + p1Max;
            if (y + this.handlerBox.height < this.elBox.bottom - p2Max) {
                y = this.elBox.bottom - p2Max - this.handlerBox.height;
            }
            
            if (y - this.elBox.y < p1Min) y = this.elBox.y + p1Min;
            if (y + this.handlerBox.height > this.elBox.bottom - p2Min) {
                y = this.elBox.bottom - p2Min - this.handlerBox.height;
            }
            mini.setY(this._dragProxy, y);
        } else {
            var xOffset = drag.now[0] - drag.init[0];
            var x = this.handlerBox.x + xOffset;
            
            if (x - this.elBox.x > p1Max) x = this.elBox.x + p1Max;
            if (x + this.handlerBox.width < this.elBox.right - p2Max) {
                x = this.elBox.right - p2Max - this.handlerBox.width;
            }
            
            if (x - this.elBox.x < p1Min) x = this.elBox.x + p1Min;
            if (x + this.handlerBox.width > this.elBox.right - p2Min) {
                x = this.elBox.right - p2Min - this.handlerBox.width;
            }

            mini.setX(this._dragProxy, x);
        }
    },
    _OnDragStop: function (drag) {
        var w = this.elBox.width, h = this.elBox.height;
        var hSize = this.handlerSize;

        var p1SIZE = parseFloat(this.pane1.size), p2SIZE = parseFloat(this.pane2.size);

        var p1Null = isNaN(p1SIZE), p2Null = isNaN(p2SIZE);
        var p1Percent = !isNaN(p1SIZE) && this.pane1.size.indexOf("%") != -1;
        var p2Percent = !isNaN(p2SIZE) && this.pane2.size.indexOf("%") != -1;
        var p1Number = !p1Null && !p1Percent;
        var p2Number = !p2Null && !p2Percent;

        var size = this.vertical ? h - this.handlerSize : w - this.handlerSize;

        
        var box = mini.getBox(this._dragProxy);
        var p1Size = box.x - this.elBox.x, p2Size = size - p1Size;
        if (this.vertical) {
            p1Size = box.y - this.elBox.y;
            p2Size = size - p1Size;
        }

        if (p1Null || p2Null) {
            if (p1Null && p2Null) {
                p1SIZE = parseFloat(p1Size / size * 100).toFixed(1);
                this.pane1.size = p1SIZE + "%";
            } else if (p1Number) {
                p1SIZE = p1Size;
                this.pane1.size = p1SIZE;
            } else if (p1Percent) {
                p1SIZE = parseFloat(p1Size / size * 100).toFixed(1);
                this.pane1.size = p1SIZE + "%";
            } else if (p2Number) {
                p2SIZE = p2Size;
                this.pane2.size = p2SIZE;
            } else if (p2Percent) {
                p2SIZE = parseFloat(p2Size / size * 100).toFixed(1);
                this.pane2.size = p2SIZE + "%";
            }
        } else if (p1Percent && p2Number) {
            this.pane2.size = p2Size;
        } else if (p1Number && p2Percent) {
            this.pane1.size = p1Size;
        } else {
            this.pane1.size = parseFloat(p1Size / size * 100).toFixed(1);
            this.pane2.size = 100 - this.pane1.size;
        }

        jQuery(this._dragProxy).remove();
        jQuery(this._maskProxy).remove();

        this._maskProxy = null;
        this._dragProxy = null;
        this.elBox = this.handlerBox = null;

        this.doLayout();
         this.fire("resize");
    },
    
    getAttrs: function (el) {
        var attrs = mini.Splitter.superclass.getAttrs.call(this, el);

        mini._ParseBool(el, attrs,
            ["allowResize", "vertical", "showHandleButton", "onresize"
             ]
        );
        mini._ParseInt(el, attrs,
            ["handlerSize"
             ]
        );

        var panes = [];

        var nodes = mini.getChildNodes(el);
        for (var i = 0, l = 2; i < l; i++) {
            var node = nodes[i];
            var g = jQuery(node);

            var o = {};
            panes.push(o);
            if (!node) continue;
            o.style = node.style.cssText;
            mini._ParseString(node, o,
                ["cls", "size", "id", "class"
                 ]
            );
            mini._ParseBool(node, o,
                ["visible", "expanded", "showCollapseButton"
                 ]
            );
            mini._ParseInt(node, o,
                ["minSize", "maxSize", "handlerSize"
                 ]
            );

            o.bodyParent = node;
        }
        attrs.panes = panes;

        return attrs;
    }
});
mini.regClass(mini.Splitter, "splitter");
mini.Tabs = function () {
    this._initTabs();
    mini.Tabs.superclass.constructor.call(this);
}
mini.extend(mini.Tabs, mini.Control, {
    activeIndex: -1,
    tabAlign: "left",
    tabPosition: "top",
    showBody: true,
    showHeader: true,

    nameField: "name",
    titleField: "title",
    urlField: "url",

    url: "",
    maskOnLoad: true,

    plain: true,





    bodyStyle: "",

    _tabHoverCls: "mini-tab-hover",
    _tabActiveCls: "mini-tab-active",

    set: function (obj) {
        if (typeof obj == 'string') {
            return this;
        }

        var _allowLayout = this._allowLayout;
        this._allowLayout = false;

        var activeIndex = obj.activeIndex;
        delete obj.activeIndex;

        var url = obj.url;
        delete obj.url;

        mini.Tabs.superclass.set.call(this, obj);

        if (url) {
            this.setUrl(url);
        }
        if (mini.isNumber(activeIndex)) {
            this.setActiveIndex(activeIndex);
        }

        this._allowLayout = _allowLayout;
        this.doLayout();

        return this;
    },

    uiCls: "mini-tabs",
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-tabs";

        var s = '<table class="mini-tabs-table" cellspacing="0" cellpadding="0"><tr style="width:100%;">'
            + '<td></td>'
            + '<td style="text-align:left;vertical-align:top;width:100%;"><div class="mini-tabs-bodys"></div></td>'
            + '<td></td>'
            + '</tr></table>';
        this.el.innerHTML = s;
        this._tableEl = this.el.firstChild;

        var tds = this.el.getElementsByTagName("td");
        this._td1El = tds[0];
        this._td2El = tds[1];
        this._td3El = tds[2];

        this._bodyEl = this._td2El.firstChild;
        this._borderEl = this._bodyEl;
        this.doUpdate();
    },
    destroy: function (removeEl) {
        this._tableEl = this._td1El = this._td2El = this._td3El = null;
        this._bodyEl = this._borderEl = this.headerEl = null;
        this.tabs = [];
        mini.Tabs.superclass.destroy.call(this, removeEl);
    },










    _doClearElement: function () {
        mini.removeClass(this._td1El, "mini-tabs-header");
        mini.removeClass(this._td3El, "mini-tabs-header");
        this._td1El.innerHTML = '';
        this._td3El.innerHTML = '';

        mini.removeChilds(this._td2El, this._bodyEl);
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(this.el, "mouseout", this.__OnMouseOut, this);
        }, this);

    },

    _initTabs: function () {
        this.tabs = [];
    },
    _TabID: 1,

    createTab: function (options) {
        var tab = mini.copyTo({
            _id: this._TabID++,
            name: "",
            title: "",

            newLine: false,

            iconCls: "",
            iconStyle: "",
            headerCls: "",
            headerStyle: "",
            bodyCls: "",
            bodyStyle: "",

            visible: true,
            enabled: true,
            showCloseButton: false,
            active: false,

            url: "",
            loaded: false,
            refreshOnClick: false

        }, options);
        if (options) {
            options = mini.copyTo(options, tab);
            tab = options;
        }
        return tab;
    },

    _doLoad: function () {

        var tabs = mini.getData(this.url);

        if (this.dataField) {
            tabs = mini._getMap(this.dataField, tabs);
        }
        if (!tabs) tabs = [];


        this.setTabs(tabs);
        this.fire("load");
    },

    load: function (url) {
        if (typeof url == "string") {
            this.setUrl(url);
        } else {
            this.setTabs(url);
        }
    },
    setUrl: function (value) {
        this.url = value;

        this._doLoad();
    },
    getUrl: function () {
        return this.url;
    },

    setNameField: function (value) {
        this.nameField = value;
    },
    getNameField: function () {
        return this.nameField;
    },
    setTitleField: function (value) {
        this.titleField = value;
    },
    getTitleField: function () {
        return this.titleField;
    },
    setUrlField: function (value) {
        this.urlField = value;
    },
    getUrlField: function () {
        return this.urlField;
    },
    setButtons: function (value) {
        this._buttons = mini.byId(value);
        if (this._buttons) {
            var el = mini.byClass('mini-tabs-buttons', this.el);
            if (el) {
                el.appendChild(this._buttons);
                mini.parse(el);
                this.doLayout();
            }
        }
    },
    setTabControls: function (tab, value) {
        var tab = this.getTab(tab);
        if (!tab) return;
        var el = this.getTabBodyEl(tab);
        __mini_setControls(value, el, this);
    },
    setTabs: function (tabs) {
        if (!mini.isArray(tabs)) return;
        this.beginUpdate();

        this.removeAll();


        for (var i = 0, l = tabs.length; i < l; i++) {
            var tab = tabs[i];
            tab.title = mini._getMap(this.titleField, tab);
            tab.url = mini._getMap(this.urlField, tab);
            tab.name = mini._getMap(this.nameField, tab);
        }

        for (var i = 0, l = tabs.length; i < l; i++) {
            this.addTab(tabs[i]);
        }
        this.setActiveIndex(0);
        this.endUpdate();
    },
    getTabs: function () {
        return this.tabs;
    },
    removeAll: function (butTabs) {
        var activeTab = this.getActiveTab();
        if (mini.isNull(butTabs)) butTabs = [];
        if (!mini.isArray(butTabs)) {
            butTabs = [butTabs];
        }
        for (var i = butTabs.length - 1; i >= 0; i--) {
            var t = this.getTab(butTabs[i]);
            if (!t) butTabs.removeAt(i);
            else butTabs[i] = t;
        }

        var olds = this.tabs;
        for (var i = olds.length - 1; i >= 0; i--) {
            var tab = olds[i];
            if (butTabs.indexOf(tab) == -1) {
                this.removeTab(tab);
            }
        }
        var butTab = butTabs[0];
        if (activeTab != this.getActiveTab()) {
            if (butTab) this.activeTab(butTab);
        }
    },
    addTab: function (tab, index) {
        if (typeof tab == "string") {
            tab = { title: tab };
        }
        tab = this.createTab(tab);
        if (!tab.name) tab.name = "";

        if (typeof index != "number") index = this.tabs.length;
        this.tabs.insert(index, tab);


        var bodyId = this._createTabBodyId(tab);
        var s = '<div id="' + bodyId + '" class="mini-tabs-body ' + tab.bodyCls + '" style="' + tab.bodyStyle + ';display:none;"></div>';
        mini.append(this._bodyEl, s);

        var el = this.getTabBodyEl(tab);


        var cs = tab.body;
        delete tab.body;
        if (cs) {

            if (!mini.isArray(cs)) cs = [cs];
            for (var i = 0, l = cs.length; i < l; i++) {
                mini.append(el, cs[i]);
            }
        }


        if (tab.bodyParent) {
            var p = tab.bodyParent;

            while (p.firstChild) {
                if (p.firstChild.nodeType == 8) {
                    p.removeChild(p.firstChild);
                } else {
                    el.appendChild(p.firstChild);
                }
            }
        }
        delete tab.bodyParent;


        if (tab.controls) {
            this.setTabControls(tab, tab.controls);
            delete tab.controls;
        }

        this.doUpdate();
        return tab;
    },
    removeTab: function (tab) {
        tab = this.getTab(tab);
        if (!tab || this.tabs.indexOf(tab) == -1) return;

        var acTab = this.getActiveTab();

        var isActive = tab == acTab;

        var autoActive = this._OnTabDestroy(tab);

        this.tabs.remove(tab);


        this._doRemoveIFrame(tab);

        var el = this.getTabBodyEl(tab);
        if (el) this._bodyEl.removeChild(el);

        if (autoActive && isActive) {
            for (var i = this.activeIndex; i >= 0; i--) {
                var tab = this.getTab(i);
                if (tab && tab.enabled && tab.visible) {
                    this.activeIndex = i;
                    break;
                }
            }
            this.doUpdate();
            this.setActiveIndex(this.activeIndex);
            this.fire("activechanged");
        } else {
            this.activeIndex = this.tabs.indexOf(acTab);
            this.doUpdate();
        }
        return tab;
    },
    moveTab: function (tab, index) {
        tab = this.getTab(tab);
        if (!tab) return;

        var t = this.tabs[index];
        if (t == tab) return;

        this.tabs.remove(tab);
        var index = this.tabs.indexOf(t);
        if (index == -1) {
            this.tabs.add(tab);
        } else {
            this.tabs.insert(index, tab);
        }
        this.doUpdate();
    },
    updateTab: function (tab, options) {
        tab = this.getTab(tab);
        if (!tab) return;
        mini.copyTo(tab, options);
        this.doUpdate();
    },

    _getMaskWrapEl: function () {
        return this._bodyEl;
    },
    _doRemoveIFrame: function (tab, removeAll) {

        if (tab._iframeEl && tab._iframeEl.parentNode) {
            tab._iframeEl.onload = function () { };
            jQuery(tab._iframeEl).unbind("load");
            tab._iframeEl.src = "";
            try {
                iframe.contentWindow.document.write("");
                iframe.contentWindow.document.close();
            } catch (ex) { }
            if (tab._iframeEl._ondestroy) tab._iframeEl._ondestroy();
            try {
                tab._iframeEl.parentNode.removeChild(tab._iframeEl);
                tab._iframeEl.removeNode(true);
            } catch (ex) { }
        }
        tab._iframeEl = null;
        tab.loadedUrl = null;

        if (removeAll === true) {
            var bodyEl = this.getTabBodyEl(tab);
            if (bodyEl) {
                var cs = mini.getChildNodes(bodyEl, true);
                for (var i = 0, l = cs.length; i < l; i++) {
                    var d = cs[i];
                    if (d && d.parentNode) d.parentNode.removeChild(d);
                }
            }
        }
    },
    _deferLoadingTime: 180,
    _cancelLoadTabs: function (tab) {

        var tabs = this.tabs;
        for (var i = 0, l = tabs.length; i < l; i++) {
            var t = tabs[i];
            if (t != tab) {
                if (t._loading && t._iframeEl) {
                    t._loading = false;
                    this._doRemoveIFrame(t, true);
                }
            }
        }
        if (tab && tab == this.getActiveTab() && tab._loading) {
        } else {
            this._loading = false;
            this.unmask();
        }
    },
    _doLoadTab: function (tab) {
        if (!tab || tab != this.getActiveTab()) return;
        var bodyEl = this.getTabBodyEl(tab);
        if (!bodyEl) return;

        this._cancelLoadTabs();

        this._doRemoveIFrame(tab, true);

        this._loading = true;
        tab._loading = true;


        this.unmask();
        if (this.maskOnLoad) this.loading();
        var st = new Date();

        var sf = this;


        sf.isLoading = true;




        var iframe = mini.createIFrame(tab.url,
            function (_iframe, firstLoad) {

                try {
                    tab._iframeEl.contentWindow.Owner = window;
                    tab._iframeEl.contentWindow.CloseOwnerWindow = function (action) {

                        tab.removeAction = action;

                        var ret = true;
                        if (tab.ondestroy) {
                            if (typeof tab.ondestroy == "string") {
                                tab.ondestroy = window[tab.ondestroy];
                            }
                            if (tab.ondestroy) {
                                ret = tab.ondestroy.call(this, e);
                            }
                        }
                        if (ret === false) {
                            return false;
                        }

                        setTimeout(function () {
                            sf.removeTab(tab);
                        }, 10);
                    }
                } catch (e) { }

                if (tab._loading != true) return;
                var t = (st - new Date()) + sf._deferLoadingTime;

                tab._loading = false;
                tab.loadedUrl = tab.url;

                if (t < 0) t = 0;
                setTimeout(function () {
                    sf.unmask();
                    sf.doLayout();
                    sf.isLoading = false;
                }, t);


                if (firstLoad) {
                    var e = {
                        sender: sf,
                        tab: tab,
                        index: sf.tabs.indexOf(tab),
                        name: tab.name,
                        iframe: tab._iframeEl
                    };
                    if (tab.onload) {
                        if (typeof tab.onload == "string") {
                            tab.onload = window[tab.onload];
                        }
                        if (tab.onload) {
                            tab.onload.call(sf, e);
                        }
                    }
                }
                if (sf.getActiveTab() == tab) {
                    sf.fire("tabload", e);
                }
            }
        );
        setTimeout(function () {
            if (tab._iframeEl == iframe) {
                bodyEl.appendChild(iframe);
            }

        }, 1);
        tab._iframeEl = iframe;
    },
    _OnTabDestroy: function (tab) {
        var e = {
            sender: this,
            tab: tab,
            index: this.tabs.indexOf(tab),
            name: tab.name,
            iframe: tab._iframeEl,
            autoActive: true
        };
        this.fire("tabdestroy", e);
        return e.autoActive;
    },
    loadTab: function (url, tab, onload, ondestroy) {
        if (!url) return;
        tab = this.getTab(tab);
        if (!tab) tab = this.getActiveTab();
        if (!tab) return;

        var el = this.getTabBodyEl(tab);
        if (el) {
            mini.addClass(el, 'mini-tabs-hideOverflow');
        }

        tab.url = url;
        delete tab.loadedUrl;

        if (onload) tab.onload = onload;
        if (ondestroy) tab.ondestroy = ondestroy;

        var me = this;
        clearTimeout(this._loadTabTimer);
        this._loadTabTimer = null;
        this._loadTabTimer = setTimeout(function () {
            me._doLoadTab(tab);
        }, 1);
    },
    reloadTab: function (tab) {
        tab = this.getTab(tab);
        if (!tab) tab = this.getActiveTab();
        if (!tab) return;
        this.loadTab(tab.url, tab);
    },

    getTabRows: function () {
        var rows = [];
        var row = [];
        for (var i = 0, l = this.tabs.length; i < l; i++) {
            var tab = this.tabs[i];
            if (i != 0 && tab.newLine) {
                rows.push(row);
                row = [];
            }
            row.push(tab);
        }
        rows.push(row);
        return rows;
    },
    doUpdate: function () {

        if (this._allowUpdate === false) return;

        if (this._buttons && this._buttons.parentNode) {
            this._buttons.parentNode.removeChild(this._buttons);
        }

        mini.removeClass(this.el, "mini-tabs-position-left");
        mini.removeClass(this.el, "mini-tabs-position-top");
        mini.removeClass(this.el, "mini-tabs-position-right");
        mini.removeClass(this.el, "mini-tabs-position-bottom");

        if (this.tabPosition == "bottom") {
            mini.addClass(this.el, "mini-tabs-position-bottom");
            this._doUpdateBottom();
        } else if (this.tabPosition == "right") {
            mini.addClass(this.el, "mini-tabs-position-right");
            this._doUpdateRight();
        } else if (this.tabPosition == "left") {
            mini.addClass(this.el, "mini-tabs-position-left");
            this._doUpdateLeft();
        } else {

            mini.addClass(this.el, "mini-tabs-position-top");
            this._doUpdateTop();
        }


        if (this._buttons) {
            var el = mini.byClass('mini-tabs-buttons', this.el);
            if (el) {
                el.appendChild(this._buttons);
                mini.parse(el);
            }
        }

        this.doLayout();

        this.setActiveIndex(this.activeIndex, false);
    },
    _handleIFrameOverflow: function () {

        var bodyEl = this.getTabBodyEl(this.activeIndex);
        if (bodyEl) {
            mini.removeClass(bodyEl, 'mini-tabs-hideOverflow');
            var dom = mini.getChildNodes(bodyEl)[0];

            if (dom && dom.tagName && dom.tagName.toUpperCase() == "IFRAME") {
                mini.addClass(bodyEl, 'mini-tabs-hideOverflow');
            }

        }
    },
    doLayout: function () {

        if (!this.canLayout()) return;

        this._headerEl.style.display = this.showHeader ? "" : "none";

        this._handleIFrameOverflow();


        var autoHeight = this.isAutoHeight();



        h = this.getHeight(true);
        w = this.getWidth();
        var elHeight = h;
        var elWidth = w;

        if (this.showBody) {
            this._bodyEl.style.display = "";
        } else {
            this._bodyEl.style.display = "none";
        }

        if (this.plain) {
            mini.addClass(this.el, "mini-tabs-plain");
        } else {
            mini.removeClass(this.el, "mini-tabs-plain");
        }


        if (!autoHeight && this.showBody) {

            var headerHeight = jQuery(this._headerEl).outerHeight();
            var headerWidth = jQuery(this._headerEl).outerWidth();
            if (this.tabPosition == "top") {
                headerHeight = jQuery(this._headerEl.parentNode).outerHeight();

            }

            if (this.tabPosition == "left" || this.tabPosition == "right") {
                w = w - headerWidth;
            } else {
                h = h - headerHeight;
            }

            if (jQuery.boxModel) {
                var padding = mini.getPaddings(this._bodyEl);
                var border = mini.getBorders(this._bodyEl);

                h = h - padding.top - padding.bottom - border.top - border.bottom;
                w = w - padding.left - padding.right - border.left - border.right;
            }
            margin = mini.getMargins(this._bodyEl);

            h = h - margin.top - margin.bottom;
            w = w - margin.left - margin.right;



            if (h < 0) h = 0;
            if (w < 0) w = 0;

            this._bodyEl.style.width = w + "px";
            this._bodyEl.style.height = h + "px";


            if (this.tabPosition == "left" || this.tabPosition == "right") {




                var tr = this._headerEl.getElementsByTagName("tr")[0];
                var tds = tr.childNodes;
                var trs = tds[0].getElementsByTagName("tr");

                var first = last = all = 0;
                for (var i = 0, l = trs.length; i < l; i++) {
                    var tr = trs[i];
                    var trH = jQuery(tr).outerHeight();
                    all += trH;
                    if (i == 0) first = trH;
                    if (i == l - 1) last = trH;
                }

                switch (this.tabAlign) {
                    case "center":
                        var halfH = parseInt((elHeight - (all - first - last)) / 2);
                        for (var i = 0, l = tds.length; i < l; i++) {
                            tds[i].firstChild.style.height = elHeight + "px";
                            var tb = tds[i].firstChild;
                            var trs = tb.getElementsByTagName("tr");
                            var tr1 = trs[0], tr2 = trs[trs.length - 1];
                            tr1.style.height = halfH + "px";
                            tr2.style.height = halfH + "px";
                        }
                        break;
                    case "right":
                        for (var i = 0, l = tds.length; i < l; i++) {
                            var tb = tds[i].firstChild;
                            var trs = tb.getElementsByTagName("tr");
                            var tr = trs[0];

                            var size = elHeight - (all - first);
                            if (size >= 0) {
                                tr.style.height = size + "px";
                            }
                        }
                        break;
                    case "fit":
                        for (var i = 0, l = tds.length; i < l; i++) {
                            tds[i].firstChild.style.height = elHeight + "px"; ;
                        }
                        break;
                    default:
                        for (var i = 0, l = tds.length; i < l; i++) {
                            var tb = tds[i].firstChild;
                            var trs = tb.getElementsByTagName("tr");
                            var tr = trs[trs.length - 1];
                            var size = elHeight - (all - last);
                            if (size >= 0) {
                                tr.style.height = size + "px";
                            }
                        }
                        break;
                }
            }
        } else {
            this._bodyEl.style.width = "auto";
            this._bodyEl.style.height = "auto";
        }


        var tabBodyEl = this.getTabBodyEl(this.activeIndex);
        if (tabBodyEl) {
            if (!autoHeight && this.showBody) {
                var h = mini.getHeight(this._bodyEl, true);
                if (jQuery.boxModel) {
                    var padding = mini.getPaddings(tabBodyEl);
                    var border = mini.getBorders(tabBodyEl);
                    h = h - padding.top - padding.bottom - border.top - border.bottom;
                }
                tabBodyEl.style.height = h + "px";
            } else {
                tabBodyEl.style.height = "auto";
            }
        }

        switch (this.tabPosition) {
            case "bottom":
                var hds = this._headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    mini.removeClass(tb, "mini-tabs-header2");
                    if (l > 1 && i != 0) {

                        mini.addClass(tb, "mini-tabs-header2");
                    }
                }
                break;
            case "left":



                var tds = this._headerEl.firstChild.rows[0].cells;
                for (var i = 0, l = tds.length; i < l; i++) {
                    var td = tds[i];
                    mini.removeClass(td, "mini-tabs-header2");
                    if (l > 1 && i == 0) {
                        mini.addClass(td, "mini-tabs-header2");
                    }
                }
                break;
            case "right":



                var tds = this._headerEl.firstChild.rows[0].cells;
                for (var i = 0, l = tds.length; i < l; i++) {
                    var td = tds[i];
                    mini.removeClass(td, "mini-tabs-header2");
                    if (l > 1 && i != 0) {
                        mini.addClass(td, "mini-tabs-header2");
                    }
                }
                break;
            default:
                var hds = this._headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    mini.removeClass(tb, "mini-tabs-header2");
                    if (l > 1 && i == 0) {
                        mini.addClass(tb, "mini-tabs-header2");
                    }
                }
                break;
        }



        mini.removeClass(this.el, 'mini-tabs-scroll');
        var td = mini.byClass('mini-tabs-lastSpace', this.el);
        var buttons = mini.byClass('mini-tabs-buttons', this.el);
        var ct = this._headerEl.parentNode;
        ct.style["paddingRight"] = '0px';
        if (this._navEl) this._navEl.style.display = 'none';
        if (buttons) buttons.style.display = 'none';
        mini.setWidth(ct, elWidth);

        if (this.tabPosition == "top" && this.tabAlign == "left") {
            this._headerEl.style.width = 'auto';
            buttons.style.display = 'block';


            var width = elWidth;

            var tabsWidth = this._headerEl.firstChild.offsetWidth - td.offsetWidth;
            var buttonsWidth = buttons.firstChild ? buttons.offsetWidth : 0;

            if (tabsWidth + buttonsWidth > width) {

                this._navEl.style.display = 'block';
                this._navEl.style.right = buttonsWidth + 'px';
                var navWidth = this._navEl.offsetWidth;
                var w = width - buttonsWidth - navWidth;
                mini.setWidth(this._headerEl, w);



            }
        }

        this._scrollToTab(this.activeIndex);
        this._doScrollButton();





        mini.layout(this._bodyEl);

        var that = this;
        var tab = this.getActiveTab();
        if (tab && tab.repaint && tabBodyEl) {
            var w = tabBodyEl.style.width;
            tabBodyEl.style.width = '0px';
            setTimeout(function () {

                tabBodyEl.style.width = w;
            }, 1);
        }

        this.fire("layout");

    },

    setTabAlign: function (value) {
        this.tabAlign = value;
        this.doUpdate();
    },
    setTabPosition: function (value) {
        this.tabPosition = value;
        this.doUpdate();
    },


    getTab: function (index) {
        if (typeof index == "object") return index;
        if (typeof index == "number") {
            return this.tabs[index];
        } else {
            for (var i = 0, l = this.tabs.length; i < l; i++) {
                var tab = this.tabs[i];
                if (tab.name == index) return tab;
            }
        }
    },
    getHeaderEl: function () {
        return this._headerEl;
    },
    getBodyEl: function () {
        return this._bodyEl;
    },
    getTabEl: function (index) {
        var tab = this.getTab(index);
        if (!tab) return null;
        var id = this._createTabId(tab);
        var cs = this.el.getElementsByTagName("*");
        for (var i = 0, l = cs.length; i < l; i++) {
            var el = cs[i];
            if (el.id == id) return el;
        }
        return null;
    },
    getTabBodyEl: function (index) {
        var tab = this.getTab(index);
        if (!tab) return null;
        var id = this._createTabBodyId(tab);
        var cs = this._bodyEl.childNodes;
        for (var i = 0, l = cs.length; i < l; i++) {
            var el = cs[i];
            if (el.id == id) return el;
        }
        return null;
    },
    getTabIFrameEl: function (index) {
        var tab = this.getTab(index);
        if (!tab) return null;
        return tab._iframeEl;
    },
    _createTabId: function (tab) {
        return this.uid + "$" + tab._id;
    },
    _createTabBodyId: function (tab) {
        return this.uid + "$body$" + tab._id;
    },
    _doScrollButton: function () {
        if (this.tabPosition == "top") {
            mini.removeClass(this._leftButtonEl, "mini-disabled");
            mini.removeClass(this._rightButtonEl, "mini-disabled");
            if (this._headerEl.scrollLeft == 0) {
                mini.addClass(this._leftButtonEl, "mini-disabled");
            }
            var tabEl = this.getTabEl(this.tabs.length - 1);
            if (tabEl) {
                var tabBox = mini.getBox(tabEl);
                var scrollBox = mini.getBox(this._headerEl);
                if (tabBox.right <= scrollBox.right) {
                    mini.addClass(this._rightButtonEl, "mini-disabled");
                }
            }
        }
    },

    setActiveIndex: function (value, load) {

        var tab = this.getTab(value);

        var acTab = this.getTab(this.activeIndex);

        var fire = tab != acTab;

        var el = this.getTabBodyEl(this.activeIndex);
        if (el) el.style.display = "none";
        if (tab) {
            this.activeIndex = this.tabs.indexOf(tab);
        } else {
            this.activeIndex = -1;
        }
        var el = this.getTabBodyEl(this.activeIndex);
        if (el) el.style.display = "";

        var el = this.getTabEl(acTab);
        if (el) mini.removeClass(el, this._tabActiveCls);

        var el = this.getTabEl(tab);
        if (el) mini.addClass(el, this._tabActiveCls);

        if (el && fire) {
            if (this.tabPosition == "bottom") {
                var tb = mini.findParent(el, "mini-tabs-header");
                if (tb) {
                    jQuery(this._headerEl).prepend(tb);
                }
            } else if (this.tabPosition == "left") {
                var td = mini.findParent(el, "mini-tabs-header").parentNode;
                if (td) {
                    td.parentNode.appendChild(td);
                }
            } else if (this.tabPosition == "right") {
                var td = mini.findParent(el, "mini-tabs-header").parentNode;
                if (td) {
                    jQuery(td.parentNode).prepend(td);
                }
            } else {
                var tb = mini.findParent(el, "mini-tabs-header");
                if (tb) {
                    this._headerEl.appendChild(tb);
                }
            }
            var scrollLeft = this._headerEl.scrollLeft;
            this.doLayout();

            var rows = this.getTabRows();
            if (rows.length > 1) {

            } else {
                this._scrollToTab(this.activeIndex);


                this._doScrollButton();
            }

            for (var i = 0, l = this.tabs.length; i < l; i++) {
                var tabEl = this.getTabEl(this.tabs[i]);
                if (tabEl) {
                    mini.removeClass(tabEl, this._tabHoverCls);
                }
            }
        }
        var me = this;
        if (fire) {
            var e = {
                tab: tab,
                index: this.tabs.indexOf(tab),
                name: tab ? tab.name : ""
            };

            setTimeout(function () {

                me.fire("ActiveChanged", e);

            }, 1);
        }


        this._cancelLoadTabs(tab);
        if (load !== false) {
            if (tab && tab.url && !tab.loadedUrl) {
                var me = this;


                me.loadTab(tab.url, tab);

            }
        } else {

        }

        if (me.canLayout()) {
            try {
                mini.layoutIFrames(me.el);
            } catch (e) {
            }
        }
    },
    _scrollToTab: function (tab) {
        var scrollLeft = this._headerEl.scrollLeft;
        if (this.tabPosition == "top") {
            this._headerEl.scrollLeft = scrollLeft;
            var tabEl = this.getTabEl(tab);
            if (tabEl) {
                var sf = this;
                var tabBox = mini.getBox(tabEl);
                var scrollBox = mini.getBox(sf._headerEl);

                if (tabBox.x < scrollBox.x) {
                    sf._headerEl.scrollLeft -= (scrollBox.x - tabBox.x);
                } else if (tabBox.right > scrollBox.right) {
                    sf._headerEl.scrollLeft += (tabBox.right - scrollBox.right);
                }
            }
        }
    },
    getActiveIndex: function () {
        return this.activeIndex;
    },
    activeTab: function (tab) {
        this.setActiveIndex(tab);
    },
    getActiveTab: function () {
        return this.getTab(this.activeIndex);
    },
    getActiveIndex: function () {
        return this.activeIndex;
    },
    _tryActiveTab: function (tab) {
        tab = this.getTab(tab);
        if (!tab) return;
        var index = this.tabs.indexOf(tab);
        if (this.activeIndex == index) return;
        var e = {
            tab: tab,
            index: index,
            name: tab.name,
            cancel: false
        };
        this.fire("BeforeActiveChanged", e);
        if (e.cancel == false) {
            this.activeTab(tab);
        }
    },

    setShowHeader: function (value) {
        if (this.showHeader != value) {
            this.showHeader = value;
            this.doLayout();
        }
    },
    getShowHeader: function () {
        return this.showHeader;
    },
    setShowBody: function (value) {
        if (this.showBody != value) {
            this.showBody = value;
            this.doLayout();
        }
    },
    getShowBody: function () {
        return this.showBody;
    },
    setBodyStyle: function (value) {
        this.bodyStyle = value;
        mini.setStyle(this._bodyEl, value);
        this.doLayout();
    },
    getBodyStyle: function () {
        return this.bodyStyle;
    },
    setMaskOnLoad: function (value) {
        this.maskOnLoad = value;
    },
    getMaskOnLoad: function () {
        return this.maskOnLoad;
    },
    setPlain: function (value) {
        this.plain = value;
        this.doLayout();
    },
    getPlain: function () {
        return this.plain;
    },

    getTabByEvent: function (e) {
        return this._getTabByEvent(e);
    },
    _getTabByEvent: function (e) {
        var el = mini.findParent(e.target, 'mini-tab');
        if (!el) return null;
        var ids = el.id.split("$");
        if (ids[0] != this.uid) return null;
        var index = parseInt(jQuery(el).attr("index"));
        return this.getTab(index);
    },
    __OnClick: function (e) {

        var tab = this._getTabByEvent(e);
        if (!tab) return;
        if (tab.enabled) {
            var me = this;
            setTimeout(function () {
                if (mini.findParent(e.target, "mini-tab-close")) {
                    me._OnCloseButtonClick(tab, e);
                } else {
                    var loadedUrl = tab.loadedUrl;
                    me._tryActiveTab(tab);
                    if (tab.refreshOnClick && tab.url == loadedUrl) {
                        me.reloadTab(tab);
                    }
                }
            }, 10);
        }
    },
    hoverTab: null,
    __OnMouseOver: function (e) {
        var tab = this._getTabByEvent(e);
        if (tab && tab.enabled) {
            var tabEl = this.getTabEl(tab);
            mini.addClass(tabEl, this._tabHoverCls);
            this.hoverTab = tab;
        }
    },
    __OnMouseOut: function (e) {
        if (this.hoverTab) {
            var tabEl = this.getTabEl(this.hoverTab);
            mini.removeClass(tabEl, this._tabHoverCls);
        }
        this.hoverTab = null;
    },
    __OnMouseDown: function (e) {
        clearInterval(this._scrollTimer);
        if (this.tabPosition == "top") {
            var sf = this;
            var count = 0, num = 10;
            if (e.target == this._leftButtonEl) {
                this._scrollTimer = setInterval(function () {
                    sf._headerEl.scrollLeft -= num;
                    count++;
                    if (count > 5) num = 18;
                    if (count > 10) num = 25;
                    sf._doScrollButton();
                }, 25);
            } else if (e.target == this._rightButtonEl) {
                this._scrollTimer = setInterval(function () {
                    sf._headerEl.scrollLeft += num;
                    count++;
                    if (count > 5) num = 18;
                    if (count > 10) num = 25;
                    sf._doScrollButton();
                }, 25);
            }
            mini.on(document, "mouseup", this.__OnDocMouseUp, this);
        }
    },
    __OnDocMouseUp: function (e) {
        clearInterval(this._scrollTimer);
        this._scrollTimer = null;
        mini.un(document, "mouseup", this.__OnDocMouseUp, this);
    },


    _doUpdateTop: function () {


        var isTop = this.tabPosition == "top";

        var s = '';
        if (isTop) {
            s += '<div class="mini-tabs-scrollCt">';
            s += '<div class="mini-tabs-nav"><a class="mini-tabs-leftButton" href="javascript:void(0)" hideFocus onclick="return false"></a><a class="mini-tabs-rightButton" href="javascript:void(0)" hideFocus onclick="return false"></a></div>';
            s += '<div class="mini-tabs-buttons"></div>';
        }
        s += '<div class="mini-tabs-headers">';
        var rows = this.getTabRows();
        for (var j = 0, k = rows.length; j < k; j++) {
            var tabs = rows[j];
            var cls = "";
            s += '<table class="mini-tabs-header" cellspacing="0" cellpadding="0"><tr><td class="mini-tabs-space mini-tabs-firstSpace"><div></div></td>';
            for (var i = 0, l = tabs.length; i < l; i++) {
                var tab = tabs[i];
                var id = this._createTabId(tab);
                if (!tab.visible) continue;
                var index = this.tabs.indexOf(tab);
                var cls = tab.headerCls || "";
                if (tab.enabled == false) {
                    cls += ' mini-disabled';
                }
                s += '<td id="' + id + '" index="' + index + '"  class="mini-tab ' + cls + '" style="' + tab.headerStyle + '">';
                if (tab.iconCls || tab.iconStyle) {
                    s += '<span class="mini-tab-icon ' + tab.iconCls + '" style="' + tab.iconStyle + '"></span>';
                }
                s += '<span class="mini-tab-text">' + tab.title + '</span>';
                if (tab.showCloseButton) {
                    var ms = "";
                    if (tab.enabled) {
                        ms = 'onmouseover="mini.addClass(this, \'mini-tab-close-hover\')" onmouseout="mini.removeClass(this, \'mini-tab-close-hover\')"'
                    }
                    s += '<span class="mini-tab-close" ' + ms + '></span>';
                }
                s += '</td>';
                if (i != l - 1) {
                    s += '<td class="mini-tabs-space2"><div></div></td>';
                }

            }
            s += '<td class="mini-tabs-space mini-tabs-lastSpace" ><div></div></td></tr></table>';
        }
        if (isTop) s += '</div>';
        s += '</div>';

        this._doClearElement();

        mini.prepend(this._td2El, s);

        var td = this._td2El;
        this._headerEl = td.firstChild.lastChild;
        if (isTop) {
            this._navEl = this._headerEl.parentNode.firstChild;
            this._leftButtonEl = this._navEl.firstChild;
            this._rightButtonEl = this._navEl.childNodes[1];
        }

        switch (this.tabAlign) {
            case "center":
                var hds = this._headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    var tds = tb.getElementsByTagName("td");
                    tds[0].style.width = "50%";
                    tds[tds.length - 1].style.width = "50%";
                }
                break;
            case "right":
                var hds = this._headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    var tds = tb.getElementsByTagName("td");
                    tds[0].style.width = "100%";
                }
                break;
            case "fit":
                break;
            default:
                var hds = this._headerEl.childNodes;
                for (var i = 0, l = hds.length; i < l; i++) {
                    var tb = hds[i];
                    var tds = tb.getElementsByTagName("td");
                    tds[tds.length - 1].style.width = "100%";
                }
                break;
        }



    },
    _doUpdateBottom: function () {
        this._doUpdateTop();
        var td = this._td2El;

        mini.append(td, td.firstChild);
        this._headerEl = td.lastChild;
    },
    _doUpdateLeft: function () {
        var s = '<table cellspacing="0" cellpadding="0"><tr>';
        var rows = this.getTabRows();
        for (var j = 0, k = rows.length; j < k; j++) {
            var tabs = rows[j];

            var cls = "";
            if (k > 1 && j != k - 1) {
                cls = "mini-tabs-header2";
            }
            s += '<td class="' + cls + '"><table class="mini-tabs-header" cellspacing="0" cellpadding="0">';
            s += '<tr ><td class="mini-tabs-space mini-tabs-firstSpace" ><div></div></td></tr>';

            for (var i = 0, l = tabs.length; i < l; i++) {
                var tab = tabs[i];
                var id = this._createTabId(tab);
                if (!tab.visible) continue;

                var index = this.tabs.indexOf(tab);

                var cls = tab.headerCls || "";
                if (tab.enabled == false) {
                    cls += ' mini-disabled';
                }
                s += '<tr><td id="' + id + '" index="' + index + '"  class="mini-tab ' + cls + '" style="' + tab.headerStyle + '">';
                if (tab.iconCls || tab.iconStyle) {
                    s += '<span class="mini-tab-icon ' + tab.iconCls + '" style="' + tab.iconStyle + '"></span>';
                }
                s += '<span class="mini-tab-text">' + tab.title + '</span>';
                if (tab.showCloseButton) {
                    var ms = "";
                    if (tab.enabled) {
                        ms = 'onmouseover="mini.addClass(this, \'mini-tab-close-hover\')" onmouseout="mini.removeClass(this, \'mini-tab-close-hover\')"'
                    }
                    s += '<span class="mini-tab-close" ' + ms + '></span>';
                }
                s += '</td></tr>';

                if (i != l - 1) {
                    s += '<tr><td class="mini-tabs-space2"><div></div></td></tr>';
                }

            }

            s += '<tr ><td class="mini-tabs-space mini-tabs-lastSpace" ><div></div></td></tr>';
            s += '</table></td>';
        }

        s += '</tr ></table>';

        this._doClearElement();
        mini.addClass(this._td1El, "mini-tabs-header");
        mini.append(this._td1El, s);
        this._headerEl = this._td1El;

    },
    _doUpdateRight: function () {
        this._doUpdateLeft();

        mini.removeClass(this._td1El, "mini-tabs-header");
        mini.removeClass(this._td3El, "mini-tabs-header");
        mini.append(this._td3El, this._td1El.firstChild);
        this._headerEl = this._td3El;

    },

    _OnCloseButtonClick: function (tab, htmlEvent) {
        var e = {
            tab: tab,
            index: this.tabs.indexOf(tab),
            name: tab.name.toLowerCase(),
            htmlEvent: htmlEvent,
            cancel: false
        };

        this.fire("beforecloseclick", e);

        if (e.cancel == true) return;

        try {
            if (tab._iframeEl && tab._iframeEl.contentWindow) {
                var ret = true;
                if (tab._iframeEl.contentWindow.CloseWindow) {
                    ret = tab._iframeEl.contentWindow.CloseWindow("close");
                } else if (tab._iframeEl.contentWindow.CloseOwnerWindow) {
                    ret = tab._iframeEl.contentWindow.CloseOwnerWindow("close");
                }
                if (ret === false) {
                    e.cancel = true;
                }
            }
        } catch (ex) { }

        if (e.cancel == true) return;

        tab.removeAction = "close";
        this.removeTab(tab);
        this.fire("closeclick", e);
    },
    onBeforeCloseClick: function (fn, scope) {
        this.on("beforecloseclick", fn, scope);
    },
    onCloseClick: function (fn, scope) {
        this.on("closeclick", fn, scope);
    },
    onActiveChanged: function (fn, scope) {
        this.on("activechanged", fn, scope);
    },

    getAttrs: function (el) {
        var attrs = mini.Tabs.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["tabAlign", "tabPosition", "bodyStyle", "onactivechanged", "onbeforeactivechanged", "url",
                "ontabload", "ontabdestroy", "onbeforecloseclick", "oncloseclick",
                "titleField", "urlField", "nameField", "loadingMsg", "buttons"
            ]
        );
        mini._ParseBool(el, attrs,
            ["allowAnim", "showBody", "showHeader", "maskOnLoad", "plain"
            ]
        );
        mini._ParseInt(el, attrs,
            ["activeIndex"
            ]
        );

        var tabs = [];
        var nodes = mini.getChildNodes(el);
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];

            var o = {};
            tabs.push(o);

            o.style = node.style.cssText;
            mini._ParseString(node, o,
                ["name", "title", "url", "cls", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle",
                    "onload", "ondestroy", "data-options"
                ]
            );
            mini._ParseBool(node, o,
                ["newLine", "visible", "enabled", "showCloseButton", "refreshOnClick"
                ]
            );



            o.bodyParent = node;


            var options = o["data-options"];
            if (options) {

                options = eval("(" + options + ")");
                if (options) {

                    mini.copyTo(o, options);
                }
            }
        }
        attrs.tabs = tabs;

        return attrs;
    }
});
mini.regClass(mini.Tabs, "tabs");
/**
 * 定义了 form 多行录入框组件
 * @fileOverview TextArea.js
 * @author 殷文旭
 */

mini = mini || {};

/**
 * TextArea 是mini UI中的多行录入框组件，构造函数中调用了 TextBox 类的构造方法
 * @class mini.TextArea
 * @constructor
 * @extends mini.TextBox
 * @requires mini.TextBox
 */
mini.TextArea = function () {
    mini.TextArea.superclass.constructor.call(this);
}

mini.extend(mini.TextArea, mini.TextBox,{
	/**
	 * 最多可录入字符数
	 * @type Number
	 * @default 10000000
	 */    
    maxLength: 10000000,
    /**
     * 录入框宽度
     * @type Number
     * @default 180
     */
    width: 180,
    /**
     * 录入框高度
     * @type Number
     * @default 50
     */
    height: 50,
    /**
     * 录入框最小高度
     * @type Number
     * @default 50
     */
    minHeight: 50,
    /**
     * 组件类型
     * @type String
     * @default "textarea"
     */
    _InputType: "textarea",
    /**
     * 录入框组件样式类名
     * @type String
     * @default "mini-textarea"
     */
    uiCls: "mini-textarea",
    /**
     * 调整布局方法
     */
    doLayout: function () {
        if (!this.canLayout()) return;
        mini.TextArea.superclass.doLayout.call(this);
        var h = mini.getHeight(this.el);
        mini.setHeight(this._borderEl, h);
        h -= 2;
        if (h < 0) h = 0;
        this._textEl.style.height = h + "px";        
    }
});
mini.regClass(mini.TextArea, 'textarea');
/**
 * 文件中定义了TextBoxList组件。
 * @fileOverview TextBoxList.js
 * @author 殷文旭
 */

mini = mini || {};

/**
 * TextBoxList 是mini UI中的选择输入框组件，构造函数中调用了 ValidatorBase 构造函数。和doUpdate函数
 * @class mini.TextBox
 * @constructor
 * @extends mini.ValidatorBase
 * @requires mini.ValidatorBase
 * @requires mini.ListBox
 * @version 1.0
 */
mini.TextBoxList = function () {
	mini.TextBoxList.superclass.constructor.call(this);
	this.data = [];
	this.doUpdate();
}
mini.extend(mini.TextBoxList, mini.ValidatorBase,{
	/**
	 * 标记，代表这是一个form组件
	 * @type Boolean
	 * @default true
	 */
	formField: true,
	/**
	 * 值，注，此组件是 KEY-VALUE 形式组件，也就是说组件有两个值，一个用于展现，一个用于后台处理。
	 * 这里的值是是实际传递到后台的值。
	 * @type String
	 * @default ""
	 */
	value: "",
	/**
	 * 文本
	 * @type String
	 * @default ""
	 */
	text: "",
	/**
	 * 值对应json格式数据中的属性名
	 * @type String
	 * @default id
	 */
	valueField: "id",
	/**
	 * 显示文本对应 json格式数据中的属性名
	 * @type String
	 * @default text
	 */
	textField: "text",
	/**
	 * 数据的远程加载地址
	 * @type String
	 * @default ""
	 */
	url: "",
	/**
	 * 获取url地址指向的远程数据前显示loading...的等待时长。
	 * @type Number
	 * @default 250
	 */
	delay: 150,
	/**
	 * 是否可录入标志
	 * @type Boolean
	 * @default true
	 */
	allowInput: true,
	/**
	 * 已选项数
	 * @type Number
	 * @default 0
	 */
	editIndex: 0,

	_focusCls: "mini-textboxlist-focus",
	_itemHoverClass: "mini-textboxlist-item-hover",
	_itemSelectedClass: "mini-textboxlist-item-selected",
	_closeHoverClass: "mini-textboxlist-close-hover",

	/**
	 * 文本录入框元素的name 属性，在源代码中此属性没有被使用到。
	 * @type String
	 * @default ""
	 * @deprecated
	 * @private
	 */
	textName: "",
	/**
	 * 设置文本录入框元素的name 属性，在源代码中此属性没有被使用到。
	 * @param {String}
	 * @deprecated
	 * @private
	 */
	setTextName: function (value) {
		this.textName = value;

	},
	/**
	 * 获取文本录入框元素的name 属性，在源代码中此属性没有被使用到。
	 * @return {String}
	 * @deprecated
	 * @private
	 */
	getTextName: function () {
		return this.textName;
	},
	/**
	 * 组将样式类
	 * @type String
	 * @default "mini-textboxlist"
	 */
	uiCls: "mini-textboxlist",
	/**
	 * 这个组件的HTML结构堪称脑残。
	 */
	_create: function () {

		var html = '<table class="mini-textboxlist" cellpadding="0" cellspacing="0"><tr ><td class="mini-textboxlist-border"><ul></ul><a href="#"></a><input type="hidden"/></td></tr></table>';
		var d = document.createElement("div");
		d.innerHTML = html;
		this.el = d.firstChild;

		var td = this.el.getElementsByTagName("td")[0];
		this.ulEl = td.firstChild;
		this._valueEl = td.lastChild;
		this.focusEl = td.childNodes[1];
	},
	/**
	 * 析构函数
	 */
	destroy: function (removeEl) {
		if (this.isShowPopup) {
			this.hidePopup();
		}
		mini.un(document, "mousedown", this.__OnDocMouseDown, this);
		mini.TextBoxList.superclass.destroy.call(this, removeEl);
	},
	/**
	 * 设置组件初始化完成后的需要执行的回调函数。
	 * 通常组件的非结构和样式相关操作都绑定在这里，这样可以提前绘制完成组件.
	 */
	_initEvents: function () {
		mini.TextBoxList.superclass._initEvents.call(this);

		mini.on(this.el, "mousemove", this.__OnMouseMove, this);
		mini.on(this.el, "mouseout", this.__OnMouseOut, this);
		mini.on(this.el, "mousedown", this.__OnMouseDown, this);
		mini.on(this.el, "click", this.__OnClick, this);
		mini.on(this.el, "keydown", this.__OnKeyDown, this);

		mini.on(document, "mousedown", this.__OnDocMouseDown, this);
	},
	__OnDocMouseDown: function (e) {
		if (this.isReadOnly())
			return;
		if (this.isShowPopup) {
			if (!mini.isAncestor(this.popup.el, e.target)) {
				this.hidePopup();
			}
		}
		if (this._focused) {
			if (this.within(e) == false) {
				this.select(null, false);
				this.showInput(false);

				this.removeCls(this._focusCls);
				this._focused = false;
			}
		}
	},
	/**
	 * 无用参数，实际应该是_errorIconEl，代码中写错了
	 * @deprecated
	 * @private
	 */
	errorIconEl: null,
	/**
	 * 获取错误图标元素，如果当前没有则创建一个错误图标元素
	 * @return {Object}
	 */
	getErrorIconEl: function () {
		if (!this._errorIconEl) {
			var tr = this.el.rows[0];
			var td = tr.insertCell(1);
			td.style.cssText = 'width:18px;vertical-align:top;';
			td.innerHTML = '<div class="mini-errorIcon"></div>';
			this._errorIconEl = td.firstChild;
		}
		return this._errorIconEl;
	},
	/**
	 * 删除图标元素
	 */
	_RemoveErrorIcon: function () {
		if (this._errorIconEl) {
			jQuery(this._errorIconEl.parentNode).remove();
		}
		this._errorIconEl = null;
	},
	/**
	 * 调整组件布局，同能主要通过调用父类方法实现。
	 */
	doLayout: function () {
		if (this.canLayout() == false)
			return;
		mini.TextBoxList.superclass.doLayout.call(this);

		if (this.isReadOnly() || this.allowInput == false) {
			this._inputEl.readOnly = true;
		} else {
			this._inputEl.readOnly = false;
		}
	},
	/**
	 * 生成组件容器内的部分，包括录入框和已选中项
	 */
	doUpdate: function () {
		if (this._ValueChangeTimer)
			clearInterval(this._ValueChangeTimer);
		if (this._inputEl)
			mini.un(this._inputEl, "keydown", this.__OnInputKeyDown, this);

		var sb = [];
		var id = this.uid;
		for (var i = 0, l = this.data.length; i < l; i++) {
			var o = this.data[i];
			var li_id = id + "$text$" + i;
			var text = mini._getMap(this.textField, o);
			if (mini.isNull(text))
				text = "";
			sb[sb.length] = '<li id="' + li_id + '" class="mini-textboxlist-item">';
			sb[sb.length] = text;
			sb[sb.length] = '<span class="mini-textboxlist-close"></span></li>';
		}
		var inputid = id + "$input";
		sb[sb.length] = '<li id="' + inputid + '" class="mini-textboxlist-inputLi"><input class="mini-textboxlist-input" type="text" autocomplete="off"></li>';

		this.ulEl.innerHTML = sb.join("");

		this.editIndex = this.data.length;
		if (this.editIndex < 0)
			this.editIndex = 0;

		this.inputLi = this.ulEl.lastChild;
		this._inputEl = this.inputLi.firstChild;
		mini.on(this._inputEl, "keydown", this.__OnInputKeyDown, this);

		var sf = this;
		/** @ignore*/
		this._inputEl.onkeyup = function () {
			sf._syncInputSize();	//调整录入框长度
		}
		sf._ValueChangeTimer = null;
		sf._LastInputText = sf._inputEl.value; //更新前的录入框文本
		/** @ignore*/
		this._inputEl.onfocus = function () {
			sf._ValueChangeTimer = setInterval( function () {
				if (sf._LastInputText != sf._inputEl.value) {
					sf._startQuery(); //加载数据
					sf._LastInputText = sf._inputEl.value;
				}
			}, 10);
			sf.addCls(sf._focusCls);
			sf._focused = true;
			sf.fire("focus");
		}
		/** @ignore*/
		this._inputEl.onblur = function () {
			clearInterval(sf._ValueChangeTimer);
			sf.fire("blur");
		}
	},
	/**
	 * 获取指定的已选项数据，虽然是暴露在外的方法，但是不建议使用，因为参数是Event对象，
	 * 只能在事件方法中使用
	 * @param event {Event}
	 * @return {Object}
	 */
	getItemByEvent: function (event) {
		var domItem = mini.findParent(event.target, "mini-textboxlist-item");
		if (domItem) {
			var ids = domItem.id.split("$");
			var id = ids[ids.length - 1];
			return this.data[id];
		}
	},
	/**
	 * 根据指定顺序号获取已选项数据
	 * @param id {Number|Object} Object参数直接返回
	 * @return {Object}
	 */
	getItem: function (id) {
		if (typeof id == "number")
			return this.data[id];
		if (typeof id == "object")
			return id;
	},
	/**
	 * 根据指定的已选项数据获取已选项元素
	 * @param o {Object}
	 * @return {Object}
	 */
	getItemEl: function (o) {
		var index = this.data.indexOf(o);
		var li_id = this.uid + "$text$" + index;
		return document.getElementById(li_id);
	},
	/**
	 * 调整鼠标悬停时的样式处理，不建议外部使用。
	 * @param item {Object}
	 * @param e {Event}
	 */
	hoverItem: function (item, e) {
	    if (this.isReadOnly() || this.enabled == false) return;

		this.blurItem();
		var li = this.getItemEl(item);
		mini.addClass(li, this._itemHoverClass);

		if (e && mini.hasClass(e.target, "mini-textboxlist-close")) {
			mini.addClass(e.target, this._closeHoverClass);
		}
	},
	/**
	 * 已选项失去焦点处理
	 */
	blurItem: function () {
		var len = this.data.length;
		for (var i = 0, l = len; i < l; i++) {
			var o = this.data[i];

			var li = this.getItemEl(o);
			if (li) {
				mini.removeClass(li, this._itemHoverClass);

				mini.removeClass(li.lastChild, this._closeHoverClass);
			}
		}
	},
	/**
	 * 将录入框显示在指定顺序号的已选项后。不建议外部调用。
	 * @param index {Number}
	 * @return {Object} 录入框容器元素。
	 */
	showInput: function (index) {
		this.select(null);

		if (mini.isNumber(index)) {
			this.editIndex = index;
		} else {
			this.editIndex = this.data.length;
		}
		if (this.editIndex < 0)
			this.editIndex = 0;
		if (this.editIndex > this.data.length)
			this.editIndex = this.data.length;

		var inputLi = this.inputLi;
		inputLi.style.display = "block";

		if (mini.isNumber(index) && index < this.data.length) {
			var item = this.data[index];
			var itemEl = this.getItemEl(item);
			jQuery(itemEl).before(inputLi);
		} else {
			this.ulEl.appendChild(inputLi);
		}
		if (index !== false) {
			setTimeout( function () {
				try {
					inputLi.firstChild.focus();
					mini.selectRange(inputLi.firstChild, 100);
				} catch (e) {
				}
			}, 10);
		} else {
			this.lastInputText = "";
			this._inputEl.value = "";
		}
		return inputLi;
	},
	/**
	 * 选中指定顺序号的列表项
	 * @param item {Number|Object}
	 */
	select: function (item) {
		item = this.getItem(item);
		if (this._selected) {
			var itemEl = this.getItemEl(this._selected);
			mini.removeClass(itemEl, this._itemSelectedClass);
		}
		this._selected = item;
		if (this._selected) {
			var itemEl = this.getItemEl(this._selected);
			mini.addClass(itemEl, this._itemSelectedClass);
		}
		var sf = this;
		if (this._selected) {
			this.focusEl.focus();
			var me = this;
			setTimeout( function () {
				try {
					me.focusEl.focus();
				} catch (ex) {
				}
			}, 50);
		}
		if (this._selected) {
			sf.addCls(sf._focusCls);
			sf._focused = true;
		}
	},
	/**
	 * 将可选项插入到已选项中。此方法由_lsitbox调用。
	 */
	_doInsertSelectValue: function () {
		var item = this._listbox.getSelected();
		var index = this.editIndex;
		if (item) {
			item = mini.clone(item);
			this.insertItem(index, item);
		}
	},
	/**
	 * 将可选项插入到已选项集合的指定位置。
	 * @param index {Number} 顺序号
	 * @param item {Object} 插入数据
	 */
	insertItem: function (index, item) {
		this.data.insert(index, item);
		var text = this.getText();
		var value = this.getValue();
		this.setValue(value, false);
		this.setText(text, false);
		this._createData();
		this.doUpdate();
		this.showInput(index + 1); //显示到出第几个
		this._OnValueChanged(); //触发onValueChanged默认函数。
	},
	/**
	 *
	 * 从已选项列表中删除指定已选项
	 * @param item {Object}
	 * @example
	 * 可以配合 getItem 方法使用
	 * var textboxlist = mini.get('id');
	 * textboxlist.removeItem(textboxlist.getItem(2));
	 */
	removeItem: function (item) {
		if (!item)
			return;
		var itemEl = this.getItemEl(item);
		mini.removeNode(itemEl);
		this.data.remove(item);

		var text = this.getText();
		var value = this.getValue();

		this.setValue(value, false);
		this.setText(text, false);
		this._OnValueChanged();
	},
	/**
	 * 对 value 和 text 做Null 转 空字符串的处理
	 */
	_createData: function () {
		var texts = (this.text ? this.text : "").split(",");
		var values = (this.value ? this.value : "").split(",");

		if (values[0] == "")
			values = [];
		var len = values.length;
		this.data.length = len;

		for (var i = 0, l = len; i < l; i++) {
			var o = this.data[i];
			if (!o) {
				o = {};
				this.data[i] = o;
			}
			var text = !mini.isNull(texts[i]) ? texts[i] : "";
			var value = !mini.isNull(values[i]) ? values[i] : "";

			mini._setMap(this.textField, text, o);
			mini._setMap(this.valueField, value, o);

		}

		this.value = this.getValue();
		this.text = this.getText();
	},
	/**
	 * 获取录入框中的文本
	 * @return {String}
	 */
	getInputText: function () {
		return this._inputEl ? this._inputEl.value : "";
	},
	/**
	 * 获取已选项文本，多个已选项的情况文本之间用“,”间隔
	 * @return {String}
	 */
	getText: function () {
		var sb = [];
		for (var i = 0, l = this.data.length; i < l; i++) {
			var o = this.data[i];
			var name = mini._getMap(this.textField, o);
			if (mini.isNull(name))
				name = "";
			name = name.replace(",", "，");
			sb.push(name);
		}
		return sb.join(",");
	},
	/**
	 * 获取已选项的值，多个已选项的情况值之间用“,”间隔
	 * @return {String}
	 */
	getValue: function () {
		var sb = [];
		for (var i = 0, l = this.data.length; i < l; i++) {
			var o = this.data[i];
			var v = mini._getMap(this.valueField, o);
			sb.push(v);

		}
		return sb.join(",")
	},
	/**
	 * 设置保存选项值的隐藏域元素的 name 属性
	 * @param value {String}
	 */
	setName: function (value) {
		if (this.name != value) {
			this.name = value;
			this._valueEl.name = value;
		}
	},
	/**
	 * 设置已选中值，并重绘组件容器内部分
	 * @param value {String}
	 */
	setValue: function (value) {
		if (mini.isNull(value))
			value = "";
		if (this.value != value) {
			this.value = value;
			this._valueEl.value = value;
			this._createData();
			this.doUpdate();
		}
	},
	/**
	 * 设置已选中文本，并重绘组件容器内部分
	 */
	setText: function (value) {
		if (mini.isNull(value))
			value = "";
		if (this.text !== value) {
			this.text = value;
			this._createData();
			this.doUpdate();
		}
	},
	/**
	 * 设置对应json格式数据中的属性名
	 * @param value {String}
	 */
	setValueField: function (value) {
	    this.valueField = value;
	    this._createData();

	},
	/**
	 * 获取对应json格式数据中的属性名
	 * @return {String}
	 */
	getValueField: function () {
		return this.valueField;
	},
	/**
	 * 设置显示文本对应 json格式数据中的属性名
	 * @param value {String}
	 */
	setTextField: function (value) {
	    this.textField = value;
	    this._createData();

	},
	/**
	 * 获取显示文本对应 json格式数据中的属性名
	 * @return {String}
	 */
	getTextField: function () {
		return this.textField;
	},
	/**
	 * 设置是否可录入开关属性
	 * @param value {Boolean}
	 */
	setAllowInput: function (value) {
		this.allowInput = value;
		this.doLayout();
	},
	/**
	 * 获取是否可录入开关属性值
	 * @returns value {Boolean}
	 */
	getAllowInput: function () {
		return this.allowInput;
	},
	/**
	 * 设置 url 属性
	 * @param value {String}
	 */
	setUrl: function (value) {
		this.url = this.parseUrl(value);
	},
	/**
	 * 获取 url 属性
	 * @return {String}
	 */
	getUrl: function () {
		return this.url;
	},
	/**
	 * 设置弹出层高度
	 * @param value {Number}
	 */
	setPopupHeight: function (value) {
		this.popupHeight = value;
	},
	/**
	 * 获取弹出层高度
	 * @return {Number}
	 */
	getPopupHeight: function () {
		return this.popupHeight;
	},
	/**
	 * 设置弹出层最小高度
	 * @param value {Number}
	 */
	setPopupMinHeight: function (value) {
		this.popupMinHeight = value;
	},
	/**
	 * 获取弹出层最小高度
	 * @return {Number}
	 */
	getPopupMinHeight: function () {
		return this.popupMinHeight;
	},
	/**
	 * 设置弹出层最大高度
	 * @param value {Number}
	 */
	setPopupMaxHeight: function (value) {
		this.popupMaxHeight = value;
	},
	getPopupMaxHeight: function () {
		return this.popupMaxHeight;
	},
	doQuery: function () {
		this._startQuery(true);
	},
	_syncInputSize: function () {
		if (this.isDisplay() == false)
			return;
		var text = this.getInputText();
		var size = mini.measureText(this._inputEl, text);
		var width = size.width > 20 ? size.width + 4 : 20;
		var elWidth = mini.getWidth(this.el, true);
		if (width > elWidth - 15)
			width = elWidth - 15;
		this._inputEl.style.width = width + "px";
	},
	/**
	 * 开始加载数据，参数毫无价值
	 */
	_startQuery: function (oldText) {
		var sf = this;

		setTimeout( function () {
			sf._syncInputSize();
		}, 1);
		this.showPopup("loading");
		this._stopQuery();
		this._loading = true;
		this.delayTimer = setTimeout( function () {
			var text = sf._inputEl.value;
			sf._doQuery();
		}, this.delay);
	},
	/**
	 * 加载远程数据，并复制给_listbox
	 */
	_doQuery: function () {
	    if (this.isDisplay() == false) return;
	    var text = this.getInputText();

	    var sf = this;
	    var dataSource = this._listbox.getData();
	    var params = {

	        value: this.getValue(),
	        text: this.getText()
	    };
	    params[this.searchField] = text;

	    var url = this.url;
	    var fn = typeof url == "function" ? url : window[url];
	    if (typeof fn == "function") {
	        url = fn(this);
	    }
	    if (!url) return;

	    var ajaxMethod = "post";
	    if (url) {
	        if (url.indexOf(".txt") != -1 || url.indexOf(".json") != -1) {
	            ajaxMethod = "get";
	        }
	    }

	    var e = {
	        url: url,
	        async: true,
	        params: params,
	        data: params,
	        type: ajaxMethod,
	        cache: false,
	        cancel: false
	    };
	    this.fire("beforeload", e);
	    if (e.data != e.params && e.params != params) {
	        e.data = e.params;
	    }
	    if (e.cancel) return;

	    mini.copyTo(e, {
	        success: function (text) {
	            var data = mini.decode(text);

	            if (sf.dataField) {
	                data = mini._getMap(sf.dataField, data);
	            }
	            if (!data) data = [];

	            sf._listbox.setData(data);
	            sf.showPopup();
	            sf._listbox._focusItem(0, true);
	            sf.fire("load");
	            sf._loading = false;

	            if (sf._selectOnLoad) {
	                sf.__doSelectValue();
	                sf._selectOnLoad = null;
	            }
	        },
	        error: function (jqXHR, textStatus, errorThrown) {
	            sf.showPopup("error");
	        }
	    });

	    sf._ajaxer = mini.ajax(e);
	},

	/**
	 * 停止等待提示
	 */
	_stopQuery: function () {
		if (this.delayTimer) {
			clearTimeout(this.delayTimer);
			this.delayTimer = null;
		}
		if (this._ajaxer) {
			this._ajaxer.abort();
		}
		this._loading = false;
	},
	/**
	 * 判断指定元素是否是el的子孙节点，或者是不是_listbox的子孙节点
	 * @param e {Object}
	 * @return {Boolean}
	 */
	within: function (e) {
		if (mini.isAncestor(this.el, e.target))
			return true;
		if (this.showPopup && this.popup && this.popup.within(e))
			return true;
		return false;
	},
	/**
	 * 弹出层请求数据时的等待信息HTML结构
	 * @type String
	 * @default "<span class='mini-textboxlist-popup-loading'>Loading...</span>"
	 */
	popupLoadingText: "<span class='mini-textboxlist-popup-loading'>Loading...</span>",
	/**
	 * 弹出层请求数据时的出错信息HTML结构
	 * @type String
	 * @default "<span class='mini-textboxlist-popup-error'>Error</span>"
	 */
	popupErrorText: "<span class='mini-textboxlist-popup-error'>Error</span>",
	/**
	 * 弹出层没数据时的显示信息HTML结构。
	 * @type String
	 * @default "<span class='mini-textboxlist-popup-noresult'>No Result</span>"
	 */
	popupEmptyText: "<span class='mini-textboxlist-popup-noresult'>No Result</span>",

	/**
	 * 标识弹出层是否处于显示状态
	 * @type Boolean
	 * @default false
	 */
	isShowPopup: false,
	/**
	 * 弹出层高度
	 * @name popupHeight
	 * @type Number
	 */
	popupHeight: "",
	/**
	 * 弹出层最小高度
	 * @name popupMinHeight
	 * @type Number
	 * @default 30
	 */
	popupMinHeight: 30,
	/**
	 * 弹出层最大高度
	 * @name popupMaxHeight
	 * @type Number
	 * @default 150
	 */
	popupMaxHeight: 150,
	/**
	 * 创建弹出层。依赖于ListBox
	 */
	_createPopup: function () {
		if (!this.popup) {
			this.popup = new mini.ListBox();
			this.popup.addCls("mini-textboxlist-popup");
			this.popup.setStyle("position:absolute;left:0;top:0;");
			this.popup.showEmpty = true;
			this.popup.setValueField(this.valueField);
			this.popup.setTextField(this.textField);
			this.popup.render(document.body);
			this.popup.on("itemclick", function (e) {
				this.hidePopup();
				this._doInsertSelectValue();
			}, this);
		}
		this._listbox = this.popup;
		return this.popup;
	},
	/**
	 * 显示弹出层
	 * @param [action] {String} 参数可选，'loading' 或者 'error'
	 */
	showPopup: function (action) {
	    if (this.isDisplay() == false) return;

		this.isShowPopup = true;

		var popup = this._createPopup();

		popup.el.style.zIndex = mini.getMaxZIndex();
		var control = this._listbox;
		control.emptyText = this.popupEmptyText;

		if (action == "loading") {
			control.emptyText = this.popupLoadingText;
			this._listbox.setData([]);
		} else if (action == "error") {
			control.emptyText = this.popupLoadingText;
			this._listbox.setData([]);
		}
		this._listbox.doUpdate();

		var box = this.getBox();
		var x = box.x, y = box.y + box.height;

		this.popup.el.style.display = "block";
		mini.setXY(popup.el, -1000, -1000);
		this.popup.setWidth(box.width);

		this.popup.setHeight(this.popupHeight);

		if (this.popup.getHeight() < this.popupMinHeight) {
			this.popup.setHeight(this.popupMinHeight);
		}
		if (this.popup.getHeight() > this.popupMaxHeight) {
			this.popup.setHeight(this.popupMaxHeight);
		}
		mini.setXY(popup.el, x, y);
	},
	/**
	 * 隐藏弹出层
	 */
	hidePopup: function () {
		this.isShowPopup = false;
		if (this.popup)
			this.popup.el.style.display = "none";
	},
	__OnMouseMove: function (e) {
		if (this.enabled == false)
			return;
		var item = this.getItemByEvent(e);
		if (!item) {
			this.blurItem();
			return;
		}
		this.hoverItem(item, e);
	},
	__OnMouseOut: function (e) {
		this.blurItem();
	},
	__OnClick: function (e) {
	    if (this.isReadOnly() || this.enabled == false) return;

		if (this.enabled == false)
			return;

		var item = this.getItemByEvent(e);
		if (!item) {
			if (mini.findParent(e.target, "mini-textboxlist-input")) {

			} else {
				this.showInput();
			}
			return;
		}
		this.focusEl.focus();
		this.select(item);

		if (e && mini.hasClass(e.target, "mini-textboxlist-close")) {
			this.removeItem(item);
		}
	},
	__OnKeyDown: function (e) {

		if (this.isReadOnly() || this.allowInput == false)
			return false;

		var index = this.data.indexOf(this._selected);

		var sf = this;
		/** @ignore */
		function remove() {
			var item = sf.data[index];
			sf.removeItem(item);

			item = sf.data[index];
			if (!item)
				item = sf.data[index - 1];
			sf.select(item);
			if (!item) {
				sf.showInput();
			}
		}

		switch (e.keyCode) {
			case 8:

				e.preventDefault();
				remove();
				break;
			case 37:
			case 38:
				this.select(null);
				this.showInput(index);

				break;
			case 39:
			case 40:
				index += 1;
				this.select(null);
				this.showInput(index);

				break;
			case 46:
				remove();
				break;
		}
	},
	__doSelectValue: function () {
		var item = this._listbox.getFocusedItem();
		if (item) {
			this._listbox.setSelected(item);
		}

		this.lastInputText = this.text;
		this.hidePopup();

		this._doInsertSelectValue();
	},
	/**
	 * 默认按键按下事件响应函数
	 */
	__OnInputKeyDown: function (e) {

		this._selectOnLoad = null;

		if (this.isReadOnly() || this.allowInput == false)
			return false;

		e.stopPropagation();

		if (this.isReadOnly() || this.allowInput == false)
			return;

		var range = mini.getSelectRange(this._inputEl);
		var start = range[0], end = range[1], textLen = this._inputEl.value.length;
		var isFirst = start == end && start == 0;
		var isLast = start == end && end == textLen;

		if (this.isReadOnly() || this.allowInput == false) {
			e.preventDefault();
		}
		if (e.keyCode == 9) {
			this.hidePopup();
			return;
		}
		if (e.keyCode == 16 || e.keyCode == 17 || e.keyCode == 18)
			return;

		switch (e.keyCode) {
			case 13:
				if (this.isShowPopup) {
					e.preventDefault();
					if (this._loading) {
						this._selectOnLoad = true;
						return;
					}
					this.__doSelectValue();
				}
				break;
			case 27:
				e.preventDefault();
				this.hidePopup();
				break;
			case 8:
				if (isFirst) {
					e.preventDefault();
				}
			case 37:
				if (isFirst) {
					if (this.isShowPopup) {
						this.hidePopup();
					} else {
						if (this.editIndex > 0) {
							var index = this.editIndex - 1;
							if (index < 0)
								index = 0;
							if (index >= this.data.length)
								index = this.data.length - 1;
							this.showInput(false);
							this.select(index);
						}
					}
				}
				break;
			case 39:
				if (isLast) {
					if (this.isShowPopup) {
						this.hidePopup();
					} else {
						if (this.editIndex <= this.data.length - 1) {
							var index = this.editIndex;
							this.showInput(false);
							this.select(index);
						}
					}
				}
				break;
			case 38:
				e.preventDefault();
				if (this.isShowPopup) {
					var index = -1;
					var item = this._listbox.getFocusedItem();
					if (item)
						index = this._listbox.indexOf(item);
					index--;
					if (index < 0)
						index = 0;
					this._listbox._focusItem(index, true);
				}
				break;
			case 40:
				e.preventDefault();
				if (this.isShowPopup) {
					var index = -1;
					var item = this._listbox.getFocusedItem();
					if (item)
						index = this._listbox.indexOf(item);
					index++
					if (index < 0)
						index = 0;
					if (index >= this._listbox.getCount())
						index = this._listbox.getCount() - 1;
					this._listbox._focusItem(index, true);
				} else {
					this._startQuery(true);
				}
				break;
			default:
				break;
		}
	},
	/**
	 * 文本录入框获取焦点
	 */
	focus: function () {
		try {
			this._inputEl.focus();
		} catch (e) {
		}
	},
	/**
	 * 文本录入框失去焦点
	 */
	blur: function () {
		try {
			this._inputEl.blur();
		} catch (e) {
		}
	},
	searchField: "key",
	setSearchField: function (value) {
	    this.searchField = value;
	},
	getSearchField: function () {
	    return this.searchField;
	},

	/**
	 * 用于从HTML标签中提取配置参数的方法。在此方法中有对 value， text， valueField， textField，
	 * url， popupHeight， textName， allowInput， popupMinHeight， popupMaxHeight 等属性做提取。
	 * @param el {Object} DOM元素
	 * @returns {Object} JSON对象
	 */
	getAttrs: function (el) {
	    var attrs = mini.TextBox.superclass.getAttrs.call(this, el);
	    var jq = jQuery(el);

	    mini._ParseString(el, attrs,
            ["value", "text", "valueField", "textField", "url", "popupHeight",
            "textName", "onfocus", "onbeforeload", "onload", "searchField"
            ]
        );
	    mini._ParseBool(el, attrs,
            ["allowInput"
            ]
        );

	    mini._ParseInt(el, attrs,
            ["popupMinHeight", "popupMaxHeight"
            ]
        );
	    return attrs;
	}

});

mini.regClass(mini.TextBoxList, "textboxlist");

mini.TimeSpinner = function () {
    mini.TimeSpinner.superclass.constructor.call(this);
    this.setValue("00:00:00");
}
mini.extend(mini.TimeSpinner, mini.ButtonEdit, {

    value: null,
    format: 'H:mm:ss', 
    uiCls: "mini-timespinner",
    _getButtonHtml: function () {
        var hover = 'onmouseover="mini.addClass(this, \'' + this._buttonHoverCls + '\');" '
                        + 'onmouseout="mini.removeClass(this, \'' + this._buttonHoverCls + '\');"';
        return '<span class="mini-buttonedit-button" ' + hover + '><span class="mini-buttonedit-up"><span></span></span><span class="mini-buttonedit-down"><span></span></span></span>';
    },
    _initEvents: function () {
        mini.TimeSpinner.superclass._initEvents.call(this);

        mini._BindEvents(function () {
            this.on("buttonmousedown", this.__OnButtonMouseDown, this);
            mini.on(this.el, "mousewheel", this.__OnMousewheel, this);
            mini.on(this._textEl, "keydown", this.__OnKeyDown, this);
        }, this);

    },
    setFormat: function (value) {
        if (typeof value != "string") return;
        var formats = ['H:mm:ss', 'HH:mm:ss', 'H:mm', 'HH:mm', 'H', 'HH', 'mm:ss'];


        if (this.format != value) {
            this.format = value;
            this.text = this._textEl.value = this.getFormattedValue();
        }
    },

    getFormat: function () {
        return this.format;
    },
    setValue: function (value,valid) {
        value = mini.parseTime(value, this.format);
        if (!value) value = mini.parseTime("00:00:00", this.format);

        if (mini.isDate(value)) value = new Date(value.getTime());

        if (mini.formatDate(this.value, "H:mm:ss") != mini.formatDate(value, "H:mm:ss")) {
            this.value = value;
            this.text = this._textEl.value = this.getFormattedValue();
            this._valueEl.value = this.getFormValue();
            if(valid === undefined)
                valid = true;
            if(valid)
                this._OnValueChanged();
        }
    },
    getValue: function () {
        return this.value == null ? null : new Date(this.value.getTime());
    },
    getFormValue: function () {
        if (!this.value) return "";
        return mini.formatDate(this.value, "H:mm:ss");
    },
    getFormattedValue: function () {
        if (!this.value) return "";
        return mini.formatDate(this.value, this.format);
    },
    _ChangeValue: function (Increment, timeType) {
        var value = this.getValue();
        if (value) {
            switch (timeType) {
                case "hours":
                    var hours = value.getHours() + Increment;
                    if (hours > 23) hours = 23;
                    if (hours < 0) hours = 0;
                    value.setHours(hours);
                    break;
                case "minutes":
                    var minutes = value.getMinutes() + Increment;
                    if (minutes > 59) minutes = 59;
                    if (minutes < 0) minutes = 0;
                    value.setMinutes(minutes);
                    break;
                case "seconds":
                    var seconds = value.getSeconds() + Increment;
                    if (seconds > 59) seconds = 59;
                    if (seconds < 0) seconds = 0;
                    value.setSeconds(seconds);
                    break;
            }
        } else {
            value = "00:00:00";
        }

        this.setValue(value);
    },
    
    _SpinTimer: null,
    _StartSpin: function (Increment, time, count) {
        this._StopSpin();

        this._ChangeValue(Increment, this._timeType);
        
        var sf = this;
        var sourceCount = count;
        var now = new Date();
        this._SpinTimer = setInterval(function () {

            sf._ChangeValue(Increment, sf._timeType);

            count--;
            if (count == 0 && time > 50) {
                sf._StartSpin(Increment, time - 100, sourceCount + 3);

            }

            var now2 = new Date();
            if (now2 - now > 500) sf._StopSpin();
            now = now2;
        }, time);
        mini.on(document, "mouseup", this._OnDocumentMouseUp, this);
        
    },
    _StopSpin: function () {
        clearInterval(this._SpinTimer);
        this._SpinTimer = null;
        
    },
    __OnButtonMouseDown: function (e) {
        this._DownValue = this.getFormValue();
        this._timeType = "hours";
        if (e.spinType == "up") {
            this._StartSpin(1, 230, 2);
        } else {
            this._StartSpin(-1, 230, 2);
        }
    },
    
    _OnDocumentMouseUp: function (e) {
        this._StopSpin();
        mini.un(document, "mouseup", this._OnDocumentMouseUp, this);
    },
    __OnInputTextChanged: function (e) {
        var _value = this.getFormValue();

        this.setValue(this._textEl.value);
    },
    
    getAttrs: function (el) {
        var attrs = mini.TimeSpinner.superclass.getAttrs.call(this, el);

        mini._ParseString(el, attrs,
            ["format"
                ]
        );
        return attrs;
    }

});
mini.regClass(mini.TimeSpinner, 'timespinner');
/**
 * @fileOverview ToolBar.js 文件定义了所有组件的基类。
 */

/**
 * ToolBar 是mini UI中的导航组件，构造函数中调用了Control方法
 * @class mini.ToolBar
 * @constructor
 * @extends mini.Container 
 */
mini.ToolBar = function () {
    mini.ToolBar.superclass.constructor.call(this);
}
mini.extend(mini.ToolBar, mini.Container, {

	 /**
	 * 是否清除边线，默认不清除
	 * @default false
	 */
    _clearBorder: false,
	/**
	 * 样式，默认为空
	 */
    style: "",
	/**
     * 组将样式类
     * @default "mini-toolbar"
     */
    uiCls: "mini-toolbar",
	/**
     * 创建组件最外层HTML结构，并绑定给组件实例。
     * @default
     * @private
     */
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-toolbar";
    },
	/**
     * 设置组件初始化完成后的需要执行的回调函数，
     * 通常组件的非结构和样式相关操作都绑定在这里，这样可以提前绘制完成组件.
     * @private
     */
    _initEvents: function () {

    },
	/**
     * 重新调整组件布局
     */
    doLayout: function () {
        if (!this.canLayout()) return;
        var nodes = mini.getChildNodes(this.el, true);
        for (var i = 0, l = nodes.length; i < l; i++) {
            mini.layout(nodes[i]);
        }
    },
    /**
     * 重新调整指定对象的组件布局
     * @param value DOM元素
     */
    set_bodyParent: function (value) {
        if (!value) return;
        this.el = value;
        this.doLayout();
    },
    /**
     * 取得指定元素的属性JSON集合，获取id ，borderStyle 两个属性
     * @param el DOM元素
     * @returns JSON对象
     */
    getAttrs: function (el) {
        var attrs = {}; 
        mini._ParseString(el, attrs,
            ["id","borderStyle"]
        );

        this.el = el;
        this.el.uid = this.uid;
        this.addCls(this.uiCls);

        return attrs;
    }
});
mini.regClass(mini.ToolBar, "toolbar");
/**
 * @fileOverview Tree.js 文件定义了树组件的基类。
 */

/**
 * 树的实现, 描述了树结点数据的存储结构, 及树形结构的展现。
 * @class mini.Tree
 * @constructor
 * @extends mini.Control
 */

mini.Tree = function (config) {
    /**
	 * 根结点
	 */
    this.root = { _id: -1, _pid: "", _level: -1 };
    /**
	 * 数据
	 * this.nodesField 子级节点字段
	 */
    this.data = this.root[this.nodesField] = [];

    this._idNodes = {};
    this.idNodes = {};
    this._viewNodes = null;

    mini.Tree.superclass.constructor.call(this, config);
    /**
	 * 添加beforeexpand事件
	 * @param {Object} e
	 */
    this.on("beforeexpand", function (e) {
        var node = e.node;
        var isLeaf = this.isLeaf(node);
        var cs = node[this.nodesField];

        if (!isLeaf && (!cs || cs.length == 0)) {
            if (this.loadOnExpand && node.asyncLoad !== false) {
                e.cancel = true;
                this.loadNode(node);
            }
        }
    }, this);

    this.doUpdate();
}
mini.Tree.NodeUID = 1;
var lastNodeLevel = [];
mini.extend(mini.Tree, mini.Control, {
    _ajaxOption: {
        async: true,
        type: "get"
    },
    isTree: true,
    _displayStyle: "block",

    autoLoad:true,
    /**
     * 是否自动转义html字符
     * @type String
     */
    autoEscape: true,

    loadOnExpand: true,
    /**
	 * 收缩节点被删除。极大提升性能。
	 * @default true
	 */
    removeOnCollapse: true,
    /**
	 * 双击节点展开收缩
	 * @default true
	 */
    expandOnDblClick: true,

    expandOnNodeClick: false,
    /**
	 * 选中的节点值
	 */
    value: "",
    /**
	 * 选中的节点
	 * @private
	 */
    _selectedNode: null,
    /**
	 * 允许选择节点
	 * @default true
	 */
    allowSelect: true,
    /**
	 * 允许Check模式选中节点
	 * @default false
	 */
    showCheckBox: false,
    /**
	 * 当showCheckBox为true时，是否显示父节点CheckBox
	 * @default true
	 */
    showFolderCheckBox: true,
    /**
	 * 显示折叠展开图标
	 * @default true
	 */
    showExpandButtons: true,
    /**
	 * 移动节点上时高亮显示
	 * @default true
	 */
    enableHotTrack: true,
    /**
	 * 显示箭头
	 * @default false
	 */
    showArrow: false,
    /**
	 * 加载后是否展开。比如：true展开所有节点；0展开第一级节点。以此类推。
	 * @default false
	 */
    expandOnLoad: false,
    /**
	 * 分隔符
	 */
    delimiter: ",",
    /**
	 * 数据加载地址
	 */
    url: "",
    /**
	 * 根节点
	 */
    root: null,
    /**
	 * url数据是否列表
	 * @default true
	 */
    resultAsTree: true,
    /**
	 * 父节点字段
	 */
    parentField: "pid",
    /**
	 * 值字段
	 */
    idField: "id",
    /**
	 * 节点文本字段
	 */
    textField: "text",
    /**
	 * 图标字段
	 */
    iconField: "iconCls",
    /**
	 * 子级节点字段
	 */
    nodesField: "children",

    /**
	 * 显示节点图标
	 * @default false
	 */
    showTreeIcon: false,
    /**
	 * 显示树形线条
	 * @default true
	 */
    showTreeLines: true,
    /**
	 * 是否联动选择父子节点。比如选中父节点，自动全选子节点。
	 * @default false
	 */
    checkRecursive: false,
    /**
	 * 是否动画效果
	 * @default true
	 */
    allowAnim: true,

    _checkBoxCls: "mini-tree-checkbox",
    _selectedNodeCls: "mini-tree-selectedNode",
    _nodeHoverCls: "mini-tree-node-hover",
    /**
	 * 叶子结点的图标
	 */
    leafIcon: "mini-tree-leaf",
    /**
	 * 目录结点的图标
	 */
    folderIcon: "mini-tree-folder",

    _borderCls: "mini-tree-border",
    _headerCls: "mini-tree-header",
    _bodyCls: "mini-tree-body",

    _nodeCls: "mini-tree-node",
    _nodesCls: "mini-tree-nodes",

    _expandNodeCls: "mini-tree-expand",
    _collapseNodeCls: "mini-tree-collapse",
    _eciconCls: "mini-tree-node-ecicon",
    _inNodeCls: "mini-tree-nodeshow",
    /**
	 * 设置属性方法
	 * @see mini.Component
	 */
    set: function (kv) {
        if (typeof kv == 'string') {
            return this;
        }

        var value = kv.value;
        delete kv.value;
        var url = kv.url;
        delete kv.url;
        var data = kv.data;
        delete kv.data;





        mini.Tree.superclass.set.call(this, kv);

        if (!mini.isNull(data)) {
            this.setData(data);
        }
        if (!mini.isNull(url)) {
            this.setUrl(url);
        }
        if (!mini.isNull(value)) {
            this.setValue(value);
        }



        return this;
    },

    uiCls: "mini-tree",
    destroy: function (removeEl) {
        mini.clearEvent(document);
        delete this._idNodes;
        delete this.idNodes;
        delete this._viewNodes;
        delete this._selectedNode;
        delete this._focusedNode;

        if (this._headerEl) {
            mini.clearEvent(this._headerEl);
            this._borderEl.removeChild(this._headerEl);
            this._headerEl = null;
        }
        if (this._bodyEl) {
            mini.clearEvent(this._bodyEl);
            this._borderEl.removeChild(this._bodyEl);
            this._bodyEl = null;
        }
        if (this._borderEl) {
            mini.clearEvent(this._borderEl);
            this.el.removeChild(this._borderEl);
            this._borderEl = null;
        }
        if (this._DragDrop) {
            mini.clearEvent(this._DragDrop);
            this._DragDrop.destroy(removeEl);
            this._DragDrop = null;
        }
        delete this._cellErrors;
        delete this._cellMapErrors;
        delete this.data;
        delete this._list;
        delete this.root;
        delete this._indexs;
        mini.Tree.superclass.destroy.call(this, removeEl);
    },
    /**
	 * 创建组件DOM树, 添加插件
	 *
	 * @private
	 */
    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "mini-tree";

        if (this.showTreeLines == true) {
            mini.addClass(this.el, 'mini-tree-treeLine');
        }
        this.el.style.display = "block";

        this._borderEl = mini.append(this.el, '<div class="' + this._borderCls + '">'
            + '<div class="' + this._headerCls + '"></div><div class="' + this._bodyCls + '"></div></div>');
        this._headerEl = this._borderEl.childNodes[0];
        this._bodyEl = this._borderEl.childNodes[1];

        this._DragDrop = new mini._TreeDragDrop(this);
    },
    _initEvents: function () {
        mini._BindEvents(function () {
            mini.on(this.el, "click", this.__OnClick, this);
            mini.on(this.el, "dblclick", this.__OnDblClick, this);
            mini.on(this.el, "mousedown", this.__OnMouseDown, this);
            mini.on(this.el, 'mousemove', this.__OnMouseMove, this);
            mini.on(this.el, 'mouseout', this.__OnMouseOut, this);
            mini.on(this.el, 'mouseover', this.__OnMouseOver, this);
        }, this);


    },
    
    /**
	 * 加载数据
	 * @param {Object} data 加载数据的URL
	 */
    load: function (data,params) {
        if(typeof data == "undefined")
            this._doLoad({}, this.root);
        else if (typeof data == "string") {
            this.url = data;
            this._doLoad(params, this.root);
        }
        else this.setData(data);
    },
    setData: function (data) {
        if (typeof data == "string") {

            data = eval('(' + data + ')');

        }
        this.loadData(data);
        this.data = data;

        this._cellErrors = [];
        this._cellMapErrors = {};
    },
    getData: function () {
        return this.data;
    },
    toArray: function () {
        return this.getList();
    },
    /**
	 * 返回列表型结构的结点列表
	 */
    getList: function () {
        if (!this._list) {
            this._list = mini.treeToArray(this.root[this.nodesField], this.nodesField, this.idField, this.parentField, "-1");

            this._indexs = {};
            for (var i = 0, l = this._list.length; i < l; i++) {
                var node = this._list[i];
                this._indexs[node[this.idField]] = i;
            }
        }
        return this._list;
    },
    _clearTree: function () {
        this._list = null;
        this._indexs = null;
    },
    /**
	 * 加载列表数据。比如：tree.loadList(list, "id", "pid")
	 */
    loadList: function (list, idField, parentField) {
        idField = idField || this.idField;
        parentField = parentField || this.parentField;
        var tree = mini.arrayToTree(list, this.nodesField, idField, parentField);
        this.setData(tree);
    },
    /**
	 * 加载数据, 并展现
	 * @param {Object} data json数组对象, 树型结构
	 */
    loadData: function (data) {
        if (!mini.isArray(data)) data = [];
        


        this.root[this.nodesField] = data;

        this.data = data;
        this.idNodes = {};
        this._idNodes = {};

        this._updateParentAndLevel(this.root, null);

        
        this.cascadeChild(this.root, function (node) {
           
            if (mini.isNull(node.expanded)) {

                var level = this.getLevel(node);
                if (this.expandOnLoad === true
                    || (mini.isNumber(this.expandOnLoad) && level <= this.expandOnLoad)) {
                    node.expanded = true;
                } else {
                    node.expanded = false;
                }

            }

            if (node.isLeaf === false) {
                var cs = node[this.nodesField];
                if (cs && cs.length > 0) {
                    delete node.isLeaf;
                }
            }
        }, this);
        this._viewNodes = null;


        this._selectedNode = null;

        this.doUpdate();

    },
    clearData: function () {
        this.loadData([]);
    },
    setUrl: function (url) {
        this.url = this.parseUrl(url);
        /* 增加autoLoad配置 潘正锋 2014-03 */
        if(this.autoLoad)
           this.load(this.url);

    },
    getUrl: function () {
        return this.url;
    },
    /**
	 * 懒加载节点下一级数据。
	 * @param {Object} node
	 * @param {Object} expand
	 */
    loadNode: function (node, expand) {
        node = this.getNode(node);
        if (!node) return;
        if (this.isLeaf(node)) return;

        var params = {};

        params[this.idField] = this.getItemValue(node);

        var sf = this;

        sf.addNodeCls(node, "mini-tree-loading");

        var time = new Date();
        this._doLoad(params, node, function (data) {
            var t = new Date() - time;
            if (t < 60) t = 60 - t;
//            setTimeout(function () {

                sf.removeNodeCls(node, "mini-tree-loading");
                sf.removeNodes(node[sf.nodesField]);
                if (data && data.length > 0) {

                    sf.addNodes(data, node);
                    if (expand !== false) {
                        sf.expandNode(node, true);
                    } else {
                        sf.collapseNode(node, true);
                    }
                    sf.fire("loadnode", { node: node });
                } else {
                    delete node.isLeaf;
                    sf._doUpdateNodeTitle(node);
                }
//            }, t);
        }, function (error) {

            sf.removeNodeCls(node, "mini-tree-loading");

        }
        );
        this.ajaxAsync = false;
    },

    setAjaxOption: function (option) {
        mini.copyTo(this._ajaxOption, option);
    },
    getAjaxOption: function (option) {
        return this._ajaxOption;
    },

    /**
	 * 加载数据
	 * @private
	 * @param {Object} params
	 * @param {Object} node
	 * @param {Object} success
	 * @param {Object} fail
	 */
    _doLoad: function (params, node, success, fail) {
        try {
            var url = eval(this.url);
            if (url != undefined) {
                this.url = url;
            }
        } catch (e) { }

        var isRoot = node == this.root;
        var e = {
            url: this.url,
            async: this._ajaxOption.async,
            type: this._ajaxOption.type,
            params: params,
            data: params,
            cache: !!this.cache,
            cancel: false,
            node: node,
            isRoot: isRoot,
            isMini:true
        };
        this.fire("beforeload", e);
        if (e.data != e.params && e.params != params) {
            e.data = e.params;
        }
        if (e.cancel == true) return;

        if (node != this.root) {

        }

        var sf = this;
        var container = node;
        if (isRoot) {
            mini.addClass(this._bodyEl, "mini-tree-loading");
            this._bodyEl.innerHTML = "<div class='mini-treegrid-ec-icon'>&nbsp;</div>";
        } else {
            sf.addNodeCls(container, "mini-tree-loading");
        }
        mini.copyTo(e, {
            success: function (text, code, jqXHR) {
                if (isRoot) {
                    mini.removeClass(sf._bodyEl, "mini-tree-loading");
                    sf._bodyEl.innerHTML = "";
                } else {
                    sf.removeNodeCls(container, "mini-tree-loading");
                }

                var data = null;
                try {
                    data = mini.decode(text);
                } catch (ex) {
                    data = []
                    if (mini_debugger == true) {
                        alert("tree json is error.");
                    }
                }
                if (sf.dataField) {
                    data = mini._getMap(sf.dataField, data);
                }
                if (!data) data = [];

                var ex = { result: data, data: data, cancel: false, node: node }

                if (sf.resultAsTree == false) {
                    ex.data = mini.arrayToTree(ex.data, sf.nodesField, sf.idField, sf.parentField)
                }

                sf.fire("preload", ex);
                if (ex.cancel == true) return;

                if (isRoot) {
                    sf.setData(ex.data);
                }

                if (success) success(ex.data);


                sf._doCheckLoadNodes();

                sf.fire("load", ex);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                if (isRoot) {
                    mini.removeClass(sf._bodyEl, "mini-tree-loading");
                    sf._bodyEl.innerHTML = "";
                } else {
                    sf.removeNodeCls(container, "mini-tree-loading");
                }

                var e = {
                    xmlHttp: jqXHR,
                    errorCode: textStatus
                };

                if (fail) fail(e);

                if (mini_debugger == true) {
                    alert("network error");
                }

                sf.fire("loaderror", e);
            }
        });
        this._ajaxer = mini.ajax(e);
    },
    /**
	 * 获取结点值
	 */
    getItemValue: function (item) {
        if (!item) return "";
        var t = mini._getMap(this.idField, item);
        return mini.isNull(t) ? '' : String(t);
    },
    /**
	 * 获取结点文本
	 */
    getItemText: function (item) {
        if (!item) return "";
        var t = mini._getMap(this.textField, item);
        return mini.isNull(t) ? '' : String(t);
    },
    _OnDrawNode: function (node) {
        var showCheckBox = this.showCheckBox;
        if (showCheckBox && this.hasChildren(node)) {
            showCheckBox = this.showFolderCheckBox;
        }




        var nodeHtml = this.getItemText(node);
        var e = {
            isLeaf: this.isLeaf(node),
            node: node,
            nodeHtml: nodeHtml,
            nodeCls: '',
            nodeStyle: "",
            showCheckBox: showCheckBox,
            iconCls: this.getNodeIcon(node),
            showTreeIcon: this.showTreeIcon
        };
        if (this.autoEscape == true) {
            e.nodeHtml = mini.htmlEncode(e.nodeHtml);
        }

        this.fire("drawnode", e);
        if (e.nodeHtml === null || e.nodeHtml === undefined || e.nodeHtml === "") e.nodeHtml = "&nbsp;";
        return e;
    },
    /**
	 * 创建结点内部的DOM对象, 包括缩进, 图标, checkbox和文本
	 */
    _createNodeTitle: function (node, useEdit, sb) {
        var isReturn = !sb;
        if (!sb) sb = [];
        var text = node[this.textField];
        if (text === null || text === undefined) text = "";

        var isLeaf = this.isLeaf(node);
        var level = this.getLevel(node);

        var e = this._OnDrawNode(node);

        var cls = e.nodeCls;

        if (!isLeaf) {
            if (!this._viewNodes)
                cls = this.isExpandedNode(node) ? this._expandNodeCls : this._collapseNodeCls;
            else {
                /**增加第三种情况 filter后 虽然是文件夹  但是下面没子节点 潘正锋 2013-07*/
                if (this._getViewChildNodes(node).length > 0)
                    cls = this.isExpandedNode(node) ? this._expandNodeCls : this._collapseNodeCls;
            }
        }

        if (this._selectedNode == node) {
            cls += " " + this._selectedNodeCls;
        }


        if (!isLeaf) {
            cls += " mini-tree-parentNode";
        }




        /**下面代码貌似没有用到 潘正锋 */

        sb[sb.length] = '<div class="mini-tree-nodetitle ' + cls + '" style="' + e.nodeStyle + '">';



        var parentNode = this.getParentNode(node);
        var ii = 0;

        for (var i = ii; i <= level; i++) {
            if (i == level) continue;

            if (isLeaf) {
                if (this.showExpandButtons == false && i >= level - 1) {
                    continue;
                }
            }

            var indentStyle = "";
            if (this._isInViewLastNode(node, i)) {
                indentStyle = "background:none";
            }


            sb[sb.length] = '<span class="mini-tree-indent " style="' + indentStyle + '"></span>';
        }


        var ecCls = "";
        if (this._isViewFirstNode(node) && this._isViewLastNode(node)) {

            ecCls = "mini-tree-node-ecicon-last";
            if (parentNode == this.root) {
                ecCls = "mini-tree-node-ecicon-firstLast";
            }
        } else {
            if (this._isViewFirstNode(node) && parentNode && parentNode!=this.root) {
                ecCls="";
            }
            else if (this._isViewFirstNode(node)) {
                ecCls = "mini-tree-node-ecicon-first";
            } else if (this._isViewLastNode(node)) {
                ecCls = "mini-tree-node-ecicon-last";
            }
        }

        if (!isLeaf) {
            sb[sb.length] = '<a class="' + this._eciconCls + ' ' + ecCls + '" style="' + (this.showExpandButtons ? "" : "display:none") + '" href="javascript:void(0);" onclick="return false;" hidefocus></a>';
        } else {
            sb[sb.length] = '<span class="' + this._eciconCls + ' ' + ecCls + '" ></span>';
        }


        sb[sb.length] = '<span class="mini-tree-nodeshow">';
        if (e.showTreeIcon) {

                sb[sb.length] = '<span class="' + e.iconCls + ' mini-tree-icon"></span>';

        }

        if (e.showCheckBox) {
            var ckid = this._createCheckNodeId(node);
            var checked = this.isCheckedNode(node);

            sb[sb.length] = '<input type="checkbox" id="' + ckid + '" class="' + this._checkBoxCls + '" hidefocus ' + (checked ? "checked" : "") + ' ' + (node.enabled === false ? "disabled" : "") + '/>';
        }

        sb[sb.length] = '<span class="mini-tree-nodetext">';
        if (useEdit) {
            var editId = this.uid + "$edit$" + node._id;
            var text = node[this.textField];
            if (text === null || text === undefined) text = "";
            sb[sb.length] = '<input id="' + editId + '" type="text" class="mini-tree-editinput" value="' + text + '"/>';
        } else {
            if (this.autoEscape) {
                sb[sb.length] = mini.htmlEncode(e.nodeHtml);
            } else {
                sb[sb.length] = e.nodeHtml;
            }
        }



        sb[sb.length] = '</span>';
        sb[sb.length] = '</span>';

        sb[sb.length] = '</div>';


        if (isReturn) return sb.join('');
    },

    _createNode: function (node, sb) {
        var isReturn = !sb;
        if (!sb) sb = [];
        if (!node) return "";
        var nodeId = this._createNodeId(node);
        var display = this.isVisibleNode(node) ? "" : "display:none";

        sb[sb.length] = '<div id="';
        sb[sb.length] = nodeId;
        sb[sb.length] = '" class="';
        sb[sb.length] = this._nodeCls;
        if (node.enabled === false) {
            sb[sb.length] = " mini-disabled";
        }
        sb[sb.length] = '" style="';
        sb[sb.length] = display;
        sb[sb.length] = '">';



        this._createNodeTitle(node, false, sb);

        var nodes = this._getViewChildNodes(node);
        if (nodes && nodes.length>0) {
            if (this.removeOnCollapse && this.isExpandedNode(node)) {
                this._createNodes(nodes, node, sb);
            }
        }

        sb[sb.length] = '</div>';
        if (isReturn) return sb.join('');
    },

    _createNodes: function (nodes, pnode, sb) {
        var isReturn = !sb;
        if (!sb) sb = [];

        if (!nodes) return "";

        var nodesId = this._createNodesId(pnode);

        var display = this.isExpandedNode(pnode) ? "" : "display:none";

        sb[sb.length] = '<div id="';
        sb[sb.length] = nodesId;
        sb[sb.length] = '" class="';
        sb[sb.length] = this._nodesCls;
        sb[sb.length] = '" style="';
        sb[sb.length] = display;
        sb[sb.length] = '">';
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];

            this._createNode(node, sb);
        }
        sb[sb.length] = '</div>';

        if (isReturn) return sb.join('');
    },

    doUpdate: function () {
        if (!this._allowUpdate) return;
        var nodes = this._getViewChildNodes(this.root);
        var sb = [];
        this._createNodes(nodes, this.root, sb);
        var s = sb.join('');
        this._bodyEl.innerHTML = s;

        this._deferLayout();


    },
    _doLayoutHeader: function () {
    },

    _deferLayout: function () {
        var me = this;
        if (this._layoutTimer) return;
        this._layoutTimer = setTimeout(function () {
            me.doLayout();
            me._layoutTimer = null;
        }, 1);
    },

    doLayout: function () {
        if (this.showCheckBox) {
            mini.addClass(this.el, "mini-tree-showCheckBox");
        } else {
            mini.removeClass(this.el, "mini-tree-showCheckBox");
        }

        if (this.enableHotTrack) {
            mini.addClass(this.el, "mini-tree-hottrack");
        } else {
            mini.removeClass(this.el, "mini-tree-hottrack");
        }
        if (this.el) {
            var rootNodesEl = this.el.firstChild;
            if (rootNodesEl) {
                mini.addClass(rootNodesEl, "mini-tree-rootnodes");
            }
        }
    },

    filter: function (fn, scope) {

        scope = scope || this;
        var viewNodes = this._viewNodes = {}, nodesField = this.nodesField;
        function filter(node) {
            var nodes = node[nodesField];
            if (!nodes) return false;
            var id = node._id;
            var views = [];

            for (var i = 0, l = nodes.length; i < l; i++) {
                var r = nodes[i];
                var cadd = filter(r);
                var add = fn.call(scope, r, i, this);

                if (add === true || cadd) {
                    views.push(r);
                    viewNodes[r._id] = null;//这里放什么值无所谓的
                }
            }
            if (views.length > 0) viewNodes[id] = views;
            return views.length > 0;
         }

        filter(this.root);


        this.doUpdate();
        return this._viewNodes;

    },

    clearFilter: function () {
        if (this._viewNodes) {
            this._viewNodes = null;
            this.doUpdate();
        }
    },

    setShowCheckBox: function (value) {
        if (this.showCheckBox != value) {
            this.showCheckBox = value;
            this.doUpdate();
        }
    },
    getShowCheckBox: function () {
        return this.showCheckBox;
    },
    setShowFolderCheckBox: function (value) {
        if (this.showFolderCheckBox != value) {
            this.showFolderCheckBox = value;
            this.doUpdate();
        }
    },
    getShowFolderCheckBox: function () {
        return this.showFolderCheckBox;
    },
    setAllowSelect: function (value) {
        if (this.allowSelect != value) {
            this.allowSelect = value;
            this.doUpdate();
        }
    },
    getAllowSelect: function () {
        return this.allowSelect;
    },
    setShowTreeIcon: function (value) {
        if (this.showTreeIcon != value) {
            this.showTreeIcon = value;
            this.doUpdate();
        }
    },
    getShowTreeIcon: function () {
        return this.showTreeIcon;
    },
    setShowExpandButtons: function (value) {
        if (this.showExpandButtons != value) {
            this.showExpandButtons = value;
            this.doUpdate();
        }
    },
    getShowExpandButtons: function () {
        return this.showExpandButtons;
    },
    setEnableHotTrack: function (value) {
        if (this.enableHotTrack != value) {
            this.enableHotTrack = value;
            this.doLayout();
        }
    },
    getEnableHotTrack: function () {
        return this.enableHotTrack;
    },
    setExpandOnLoad: function (value) {
        this.expandOnLoad = value;
    },
    getExpandOnLoad: function () {
        return this.expandOnLoad;
    },

    setCheckRecursive: function (value) {
        if (this.checkRecursive != value) {
            this.checkRecursive = value;
        }
    },
    getCheckRecursive: function () {
        return this.checkRecursive;
    },
    getNodeIcon: function (node) {
        var icon = mini._getMap(this.iconField, node);
        if (!icon) {
            if (this.isLeaf(node)) icon = this.leafIcon;
            else icon = this.folderIcon;
        }
        return icon;
    },

    isAncestor: function (parentNode, node) {
        if (parentNode == node) return true;
        if (!parentNode || !node) return false;
        var as = this.getAncestors(node);
        for (var i = 0, l = as.length; i < l; i++) {
            if (as[i] == parentNode) return true;
        }
        return false;
    },

    getAncestors: function (node) {
        var as = [];
        while (1) {
            var parentNode = this.getParentNode(node);
            if (!parentNode || parentNode == this.root) break;
            as[as.length] = parentNode;
            node = parentNode;
        }
        as.reverse();
        return as;
    },
    getRootNode: function () {
        return this.root;
    },
    getParentNode: function (node) {
        if (!node) return null;
        if (node._pid == this.root._id) return this.root;
        return this._idNodes[node._pid];

    },
    isRoot: function(node){
         if(!node) return false;
        return  node == this.root;
    },
    _isViewFirstNode: function (node) {
        if (this._viewNodes) {
            var pnode = this.getParentNode(node);
            var nodes = this._getViewChildNodes(pnode);
            return nodes[0] === node;
        } else {
            return this.isFirstNode(node);
        }
    },
    _isViewLastNode: function (node) {
        if (this._viewNodes) {
            var pnode = this.getParentNode(node);
            var nodes = this._getViewChildNodes(pnode);
            return nodes[nodes.length - 1] === node;
        } else {
            return this.isLastNode(node);
        }
    },
    _isInViewLastNode: function (node, level) {
        if (this._viewNodes) {
            var pnode = null;
            var ans = this.getAncestors(node);
            for (var i = 0, l = ans.length; i < l; i++) {
                var a = ans[i];
                if (this.getLevel(a) == level) {
                    pnode = a;
                }
            }
            if (!pnode || pnode == this.root) return false;
            return this._isViewLastNode(pnode);
        } else {
            return this.isInLastNode(node, level);
        }
    },

    _getViewChildNodes: function (node) {
        var childNodes = this.getChildNodes(node);
        if (!childNodes) return [];
        if (this._viewNodes) {
            var views = [];
            for (var i = 0; i < childNodes.length; i++) {
                if (this._viewNodes.hasOwnProperty(childNodes[i]._id))
                    views.push(childNodes[i]);
            }
            return views;
        } else
            return childNodes;

    },
    getChildNodes: function (node) {
        node = this.getNode(node);
        if (!node) return null;
        return node[this.nodesField];
    },
    getAllChildNodes: function (node) {
        node = this.getNode(node);
        if (!node) return [];
        var nodes = [];
        this.cascadeChild(node, function (cnode) {
            nodes.push(cnode);
        }, this);
        return nodes;
    },
    indexOf: function (node) {
        node = this.getNode(node);
        if (!node) return -1;

        this.getList();
        var index = this._indexs[node[this.idField]];
        if (mini.isNull(index)) return -1;
        return index;
    },
    getAt: function (index) {
        var list = this.getList();
        return list[index];
    },
    indexOfChildren: function (node) {
        var parentNode = this.getParentNode(node);
        if (!parentNode) return -1;
        var childNodes = parentNode[this.nodesField];
        return childNodes.indexOf(node);                                                                                           l
    },
    hasChildren: function (node) {
        var subNodes = this.getChildNodes(node);
        return !!(subNodes && subNodes.length > 0);
    },
    isLeaf: function (node) {
        if (!node || node.isLeaf === false) return false;
        var nodes = this.getChildNodes(node);
        if (nodes && nodes.length > 0) return false;
        return true;
    },
    getLevel: function (node) {
        return node._level;
    },
    isExpandedNode: function (node) {
        node = this.getNode(node);
        if (!node) return false;
        return node.expanded == true || mini.isNull(node.expanded);
    },
    isCheckedNode: function (node) {
        node = this.getNode(node);
        if (!node) return false;
        return node.checked == true;
    },
    isVisibleNode: function (node) {
        if (node.visible == false) return false;
        var pnode = this.getParentNode(node);
        if (!pnode || pnode == this.root) return true;
        if (pnode.expanded === false) return false;
        return this.isVisibleNode(pnode);
    },

    isEnabledNode: function (node) {
        return node.enabled !== false || this.enabled;
    },
    isFirstNode: function (node) {
        var pnode = this.getParentNode(node);
        var nodes = this.getChildNodes(pnode);
        return nodes[0] === node;
    },
    isLastNode: function (node) {
        var pnode = this.getParentNode(node);
        var nodes = this.getChildNodes(pnode);
        return nodes[nodes.length - 1] === node;
    },
    isInLastNode: function (node, level) {
        var pnode = null;
        var ans = this.getAncestors(node);
        for (var i = 0, l = ans.length; i < l; i++) {
            var a = ans[i];
            if (this.getLevel(a) == level) {
                pnode = a;
            }
        }
        if (!pnode || pnode == this.root) return false;
        return this.isLastNode(pnode);
    },


    bubbleParent: function (node, fn, scope) {
        scope = scope || this;
        if (node) fn.call(this, node);
        var parentNode = this.getParentNode(node);
        if (parentNode && parentNode != this.root) {
            this.bubbleParent(parentNode, fn, scope);
        }
    },

    cascadeChild: function (node, fn, scope) {
        if (!fn) return;
        if (!node) node = this.root;
        var nodes = node[this.nodesField];
        if (nodes) {
            nodes = nodes.clone();
            for (var i = 0, l = nodes.length; i < l; i++) {
                var c = nodes[i];
                if (fn.call(scope || this, c, i, node) === false) return;
                this.cascadeChild(c, fn, scope);
            }
        }
    },

    eachChild: function (node, fn, scope) {
        if (!fn || !node) return;
        var nodes = node[this.nodesField];
        if (nodes) {
            var list = nodes.clone();
            for (var i = 0, l = list.length; i < l; i++) {
                var o = list[i];
                if (fn.call(scope || this, o, i, node) === false) break;
            }
        }
    },
    _updateParentAndLevel: function (node, parentNode) {
        if (!node._id) {
            node._id = mini.Tree.NodeUID++;
        }
        this._idNodes[node._id] = node;
        this.idNodes[node[this.idField]] = node;
        node._pid = parentNode ? parentNode._id : "";
        node._level = parentNode ? parentNode._level + 1 : -1;
        this.cascadeChild(node, function (n, i, p) {
            if (!n._id) {
                n._id = mini.Tree.NodeUID++;
            }
            this._idNodes[n._id] = n;
            this.idNodes[n[this.idField]] = n;
            n._pid = p._id;
            n._level = p._level + 1;
        }, this);

        this._clearTree();
    },

    _updateNodeElLevel: function (node) {
        var sf = this;
        function updateECIcon(node) {

            sf._doUpdateNodeTitle(node);
        }
        if (node != this.root) {
            updateECIcon(node);
        }
        this.cascadeChild(node, function (node) {
            updateECIcon(node);

        }, this);
    },

    removeNodes: function (nodes) {
        if (!mini.isArray(nodes)) return;
        nodes = nodes.clone();
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            this.removeNode(node);
        }
    },
    _doUpdateNodeTitle: function (node) {
        var s = this._createNodeTitle(node);
        var nodeEl = this._getNodeEl(node);
        if (nodeEl) {
            jQuery(nodeEl.firstChild).replaceWith(s);
        }
    },

    setNodeText: function (node, text) {
        node = this.getNode(node);
        if (!node) return;

        node[this.textField] = text;
        this._doUpdateNodeTitle(node);
    },

    setNodeIconCls: function (node, iconCls) {
        node = this.getNode(node);
        if (!node) return;

        node[this.iconField] = iconCls;
        this._doUpdateNodeTitle(node);
    },

    updateNode: function (node, obj) {
        node = this.getNode(node);
        if (!node || !obj) return;
        var cs = node[this.nodesField];
        mini.copyTo(node, obj);
        node[this.nodesField] = cs;
        this._doUpdateNodeTitle(node);
     },

    removeNode: function (node) {
        node = this.getNode(node);
        if (!node) return;

        if (this._selectedNode == node) {
            this._selectedNode = null;
        }

        var nodes = [node];
        this.cascadeChild(node, function (n) {
            nodes.push(n);
        }, this);

        var parentNode = this.getParentNode(node);
        parentNode[this.nodesField].remove(node);
        this._updateParentAndLevel(node, parentNode);


        var nodeEl = this._getNodeEl(node);
        if (nodeEl) {
            nodeEl.parentNode.removeChild(nodeEl);
            if (this.isLeaf(parentNode)) {
                var nodesEl = this._getNodesEl(parentNode);
                nodesEl.parentNode.removeChild(nodesEl);
            }
        }
        this._updateNodeElLevel(parentNode);


        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            delete node._id;
            delete node._pid;
            delete this._idNodes[node._id];
            delete this.idNodes[node[this.idField]];
        }
    },
    _getDropedParentNode: function (node, action, targetNode) {
        if (!targetNode) action = "add";
        switch (action) {
            case "before":
                if (!targetNode) return null;
                var parentNode = this.getParentNode(targetNode);
                return parentNode;
                break;
            case "after":
                if (!targetNode) return null;
                parentNode = this.getParentNode(targetNode);
                return parentNode;
                break;
            case "add":
                return targetNode
                break;
            default:
                return null;
                break;
        }
    },

    addNodes: function (nodes, parentNode, action) {
        if (!mini.isArray(nodes)) return;
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            this.addNode(node, action, parentNode);
        }
    },


    addNode: function (node, index, parentNode) {
        node = this.getNode(node);
        if (!node) return;
        if (!parentNode) index = "add";
        var targetNode = parentNode;
        switch (index) {
            case "before":
                if (!targetNode) return;
                parentNode = this.getParentNode(targetNode);
                var childNodes = parentNode[this.nodesField];
                index = childNodes.indexOf(targetNode);
                break;
            case "after":
                if (!targetNode) return;
                parentNode = this.getParentNode(targetNode);
                var childNodes = parentNode[this.nodesField];
                index = childNodes.indexOf(targetNode) + 1;
                break;
            case "add":

                break;
            default:

                break;
        }
        parentNode = this.getNode(parentNode);
        if (!parentNode) parentNode = this.root;
        var nodes = parentNode[this.nodesField];
        if (!nodes) nodes = parentNode[this.nodesField] = [];


        index = parseInt(index);
        if (isNaN(index)) index = nodes.length;

        var targetNode = nodes[index];
        if (!targetNode) index = nodes.length;

        nodes.insert(index, node);
        this._updateParentAndLevel(node, parentNode);


        var nodesEl = this._getNodesEl(parentNode);
        if (nodesEl) {
            var s = this._createNode(node);
            var index = nodes.indexOf(node) + 1;
            var targetNode = nodes[index];
            if (targetNode) {
                var targetEl = this._getNodeEl(targetNode);
                jQuery(targetEl).before(s);
            } else {
                mini.append(nodesEl, s);
            }
        } else {
            var s = this._createNode(parentNode);
            var nodeEl = this._getNodeEl(parentNode);
            jQuery(nodeEl).replaceWith(s);
        }

        parentNode = this.getParentNode(node);
        this._updateNodeElLevel(parentNode);
    },

    moveNodes: function (nodes, targetNode, action) {

        if (!nodes || nodes.length == 0 || !targetNode || !action) return;
        this.beginUpdate();
        var sf = this;
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            this.moveNode(node, targetNode, action);
            if (i != 0) {
                targetNode = node;
                action = "after";
            }

        }
        this.endUpdate();

    },
    moveNode: function (node, targetNode, action) {
        node = this.getNode(node);
        targetNode = this.getNode(targetNode);
        if (!node || !targetNode || !action) return false;

        if (this.isAncestor(node, targetNode)) return false;

        var index = -1;
        var parentNode = null;
        switch (action) {
            case "before":
                parentNode = this.getParentNode(targetNode);
                index = this.indexOfChildren(targetNode);
                break;
            case "after":
                parentNode = this.getParentNode(targetNode);
                index = this.indexOfChildren(targetNode) + 1;
                break;
            default:
                parentNode = targetNode;
                var childNodes = this.getChildNodes(parentNode);
                if (!childNodes) {
                    childNodes = parentNode[this.nodesField] = [];
                }
                index = childNodes.length;
                break;
        }


        var _node = {};

        var childNodes = this.getChildNodes(parentNode);
        childNodes.insert(index, _node);

        var _parentNode = this.getParentNode(node);
        var _childNodes = this.getChildNodes(_parentNode);
        _childNodes.remove(node);

        index = childNodes.indexOf(_node);
        childNodes[index] = node;

        this._updateParentAndLevel(node, parentNode);

        this.doUpdate();
        return true;
    },

    isEditingNode: function (node) {
        return this._editingNode == node;
    },
    beginEdit: function (node) {
        node = this.getNode(node);
        if (!node) return;

        var nodeEl = this._getNodeEl(node);
        var s = this._createNodeTitle(node, true);
        var nodeEl = this._getNodeEl(node);
        if (nodeEl) {
            jQuery(nodeEl.firstChild).replaceWith(s);
        }
        this._editingNode = node;

        var editId = this.uid + "$edit$" + node._id;

        this._editInput = document.getElementById(editId);

        this._editInput.focus();
        mini.selectRange(this._editInput, 1000, 1000);
        mini.on(this._editInput, "keydown", this.__OnEditInputKeyDown, this);
        mini.on(this._editInput, "blur", this.__OnEditInputBlur, this);
    },
    cancelEdit: function () {
        if (this._editingNode) {
            this._doUpdateNodeTitle(this._editingNode);

            mini.un(this._editInput, "keydown", this.__OnEditInputKeyDown, this);
            mini.un(this._editInput, "blur", this.__OnEditInputBlur, this);
        }
        this._editingNode = null;
        this._editInput = null;

    },
    __OnEditInputKeyDown: function (e) {
        if (e.keyCode == 13) {
            var text = this._editInput.value;
            this.setNodeText(this._editingNode, text);
            this.cancelEdit();
            this.fire("endedit", { node: this._editingNode, text: text });
        } else if (e.keyCode == 27) {
            this.cancelEdit();
        }
    },
    __OnEditInputBlur: function (e) {
        var text = this._editInput.value;
        this.setNodeText(this._editingNode, text);
        this.cancelEdit();
        this.fire("endedit", { node: this._editingNode, text: text });
    },


    _getNodeByEvent: function (e) {

        if (mini.hasClass(e.target, this._nodesCls)) return null;
        var t = mini.findParent(e.target, this._nodeCls);
        if (t) {
            var ids = t.id.split("$");
            var id = ids[ids.length - 1];
            var node = this._idNodes[id];
            return node;
        }
        return null;
    },
    _createNodeId: function (node) {
        return this.uid + "$" + node._id;
    },
    _createNodesId: function (node) {
        return this.uid + "$nodes$" + node._id;
    },
    _createCheckNodeId: function (node) {
        return this.uid + "$check$" + node._id;
    },
    addNodeCls: function (node, cls) {
        var nodeEl = this._getNodeEl(node);
        if (nodeEl) mini.addClass(nodeEl, cls);
    },
    removeNodeCls: function (node, cls) {
        var nodeEl = this._getNodeEl(node);
        if (nodeEl) mini.removeClass(nodeEl, cls);
    },
    getNodeBox: function (node) {
        var el = this._getNodeEl(node);


        if (el) return mini.getBox(el.firstChild);
    },
    _getNodeEl: function (node) {
        if (!node) return null;
        var id = this._createNodeId(node);
        return document.getElementById(id);
    },
    _getNodeHoverEl: function (node) {
        if (!node) return null;
        var el = this._getNodeTitleEl(node);
        if (el) {
            el = mini.byClass(this._inNodeCls, el);
            return el;
        }
        return null;
    },
    _getNodeTitleEl: function (node) {
        var el = this._getNodeEl(node);
        if (el) return el.firstChild;
    },
    _getNodesEl: function (node) {
        if (!node) return null;
        if (this.isVisibleNode(node) == false) return null;
        var id = this._createNodesId(node);
        return mini.byId(id, this.el);
    },
    _getCheckBoxEl: function (node) {
        if (!node) return null;
        if (this.isVisibleNode(node) == false) return null;
        var id = this._createCheckNodeId(node);
        return mini.byId(id, this.el);
    },
    /**
	 * 查找节点数据。如：
	 * var nodes = tree.findNodes(function(node){
	 *     if(node.name.indexOf("abc") != -1) return true;
	 *   });
	 */
    findNodes: function (fn, scope) {
        var nodes = [];
        scope = scope || this;
        this.cascadeChild(this.root, function (node) {
            if (fn && fn.call(scope, node) === true) {
                nodes.push(node);
            }
        }, this);
        return nodes;
    },
    getNode: function (node) {
        if (typeof node == "object") return node;
        return this.idNodes[node] || null;
    },

    hideNode: function (node) {
        node = this.getNode(node);
        if (!node) return;
        node.visible = false;
        var el = this._getNodeEl(node);
        el.style.display = "none";
    },

    showNode: function (node) {
        node = this.getNode(node);
        if (!node) return;
        node.visible = false;
        var el = this._getNodeEl(node);
        el.style.display = "";
    },

    enableNode: function (node) {
        node = this.getNode(node);
        if (!node) return;
        node.enabled = true;
        var el = this._getNodeEl(node);
        mini.removeClass(el, "mini-disabled");
        var ck = this._getCheckBoxEl(node);
        if (ck) ck.disabled = false;
    },

    disableNode: function (node) {
        node = this.getNode(node);
        if (!node) return;
        node.enabled = false;
        var el = this._getNodeEl(node);
        mini.addClass(el, "mini-disabled");
        var ck = this._getCheckBoxEl(node);
        if (ck) ck.disabled = true;
    },
    _allowExpandLayout: true,

    expandNode: function (node, allowAnim) {
        node = this.getNode(node);
        if (!node) return;
        var isExpand = this.isExpandedNode(node);
        if (isExpand) return;

        if (this.isLeaf(node)) return;

        node.expanded = true;

        var nodeEl = this._getNodeEl(node);
        if (this.removeOnCollapse && nodeEl) {
            var s = this._createNode(node);
            jQuery(nodeEl).before(s);
            jQuery(nodeEl).remove();
        }


        var el = this._getNodesEl(node);
        if (el) el.style.display = "";
        var el = this._getNodeEl(node);
        if (el) {
            var titleEl = el.firstChild;
            mini.removeClass(titleEl, this._collapseNodeCls);
            mini.addClass(titleEl, this._expandNodeCls);
        }
        this.fire("expand", { node: node });

        allowAnim = allowAnim && !(mini.isIE6);

        var nodes = this._getViewChildNodes(node);
        if (allowAnim && nodes && nodes.length > 0) {

            this._inAniming = true;
            var el = this._getNodesEl(node);
            if (!el) return;
            var h = mini.getHeight(el);
            el.style.height = "1px";
            if (this._doPositoin) {
                el.style.position = "relative";
            }
            var config = { height: h + "px" };

            var sf = this;
            var jq = jQuery(el);
            jq.animate(
                config,
                180,
                function () {

                    sf._inAniming = false;
                    sf._doLayoutHeader();
                    clearInterval(sf._animateTimer);


                    el.style.height = "auto";

                    if (sf._doPositoin) {
                        el.style.position = "static";
                    }

                    mini.repaint(nodeEl);
                }
            );
            clearInterval(this._animateTimer);
            this._animateTimer = setInterval(function () {
                sf._doLayoutHeader();
            }, 60);
        }
        this._doLayoutHeader();


        function doIndeterminate() {
            var nodes = this.getAllChildNodes(node);
            nodes.push(node);
            for (var i = 0, l = nodes.length; i < l; i++) {
                var node = nodes[i];
                if (node && node._indeterminate) {
                    var checkboxEl = this._getCheckBoxEl(node);
                    if (checkboxEl && node._indeterminate) {
                        checkboxEl.indeterminate = node._indeterminate;
                    }
                }
            }
        }
        var me = this;

        doIndeterminate.call(me);


    },

    collapseNode: function (node, allowAnim) {

        node = this.getNode(node);
        if (!node) return;

        var isExpand = this.isExpandedNode(node);
        if (!isExpand) return;

        if (this.isLeaf(node)) return;

        node.expanded = false;
        var nodeEl = this._getNodeEl(node);

        var el = this._getNodesEl(node);
        if (el) el.style.display = "none";
        var el = this._getNodeEl(node);
        if (el) {
            var titleEl = el.firstChild;
            mini.removeClass(titleEl, this._expandNodeCls)
            mini.addClass(titleEl, this._collapseNodeCls);
        }
        this.fire("collapse", { node: node });

        allowAnim = allowAnim && !(mini.isIE6);
        var nodes = this._getViewChildNodes(node);
        if (allowAnim && nodes && nodes.length > 0) {
            this._inAniming = true;
            var el = this._getNodesEl(node);
            if (!el) return;
            el.style.display = "";
            el.style.height = "auto";
            if (this._doPositoin) {
                el.style.position = "relative";
            }

            var h = mini.getHeight(el);
            var config = { height: "1px" };

            var sf = this;
            var jq = jQuery(el);
            jq.animate(
                config,
                180,
                function () {
                    el.style.display = "none";
                    el.style.height = "auto";
                    if (sf._doPositoin) {
                        el.style.position = "static";
                    }
                    sf._inAniming = false;
                    sf._doLayoutHeader();
                    clearInterval(sf._animateTimer);


                    var nodesEl = sf._getNodesEl(node);
                    if (sf.removeOnCollapse && nodesEl) {
                        jQuery(nodesEl).remove();
                    }

                    mini.repaint(nodeEl);
                }
            );
            clearInterval(this._animateTimer);
            this._animateTimer = setInterval(function () {
                sf._doLayoutHeader();
            }, 60);
        } else {

            var nodesEl = this._getNodesEl(node);
            if (this.removeOnCollapse && nodesEl) {
                jQuery(nodesEl).remove();
            }
        }

        this._doLayoutHeader();

        if (this._allowExpandLayout) {
            mini.repaint(this.el);
        }
    },

    toggleNode: function (node, allowAnim) {
        if (this.isExpandedNode(node)) {
            this.collapseNode(node, allowAnim);
        } else {
            this.expandNode(node, allowAnim);
        }
    },

    expandLevel: function (level) {
        this.cascadeChild(this.root, function (node) {
            if (this.getLevel(node) == level) {
                if (node[this.nodesField] != null) {
                    this.expandNode(node);
                }
            }
        }, this);
    },

    collapseLevel: function (level) {
        this.cascadeChild(this.root, function (node) {
            if (this.getLevel(node) == level) {
                if (node[this.nodesField] != null) {
                    this.collapseNode(node);
                }
            }
        }, this);
    },

    expandAll: function () {
        this.cascadeChild(this.root, function (node) {
            if (node[this.nodesField] != null) {
                this.expandNode(node);
            }
        }, this);
    },

    collapseAll: function () {
        this.cascadeChild(this.root, function (node) {
            if (node[this.nodesField] != null) {
                this.collapseNode(node);
            }
        }, this);
    },

    expandPath: function (node) {
        node = this.getNode(node);
        if (!node) return;
        var ans = this.getAncestors(node);
        for (var i = 0, l = ans.length; i < l; i++) {
            this.expandNode(ans[i]);
        }
    },

    collapsePath: function (node) {
        node = this.getNode(node);
        if (!node) return;
        var ans = this.getAncestors(node);
        for (var i = 0, l = ans.length; i < l; i++) {
            this.collapseNode(ans[i]);
        }
    },

    selectNode: function (node) {
        node = this.getNode(node);
        var el = this._getNodeEl(this._selectedNode);
        if (el) {
            mini.removeClass(el.firstChild, this._selectedNodeCls);
        }
        this._selectedNode = node;
        var el = this._getNodeEl(this._selectedNode);
        if (el) {
            mini.addClass(el.firstChild, this._selectedNodeCls);
        }
        var ev = { node: node, isLeaf: this.isLeaf(node) };
        this.fire("nodeselect", ev);
    },

    getSelectedNode: function () {
        return this._selectedNode;
    },

    getSelectedNodes: function () {
        var nodes = [];
        if (this._selectedNode) nodes.push(this._selectedNode);
        return nodes;
    },

    doUpdateCheckedState: function () {

    },
    /**
	 * 是否自动选择父节点。比如选中子节点，将父节点也自动选中。
	 */
    autoCheckParent: false,
    setAutoCheckParent: function (value) {
        this.autoCheckParent = value;
    },
    getAutoCheckParent: function (value) {
        return this.autoCheckParent;
    },
    /**
	 * 是否存在选择的子结点
	 */
    hasCheckedChildNode: function (pnode) {
        var checked = false;
        var nodes = this.getAllChildNodes(pnode);
        for (var i = 0, l = nodes.length; i < l; i++) {
            var n = nodes[i];
            if (this.isCheckedNode(n)) {
                checked = true;
                break;
            }
        }
        return checked;
    },




    _doCheckLoadNodes: function () {

        var nodes = this.getList();
        var checkNodes = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            if (node.checked) {
                checkNodes.push(node);
            }
        }

        for (var i = 0, l = checkNodes.length; i < l; i++) {
            var node = checkNodes[i];
            this._doCheckNode(node, true, this.checkRecursive);
        }
    },



    _doCheckNode: function (node, checked, checkRecursive) {
        var checkNode = node;
        var ckNodes = [];

        node.checked = checked;
        node._indeterminate = false;
        ckNodes.push(node);

        if (checkRecursive) {

            this.cascadeChild(node, function (cnode) {
                cnode.checked = checked;
                cnode._indeterminate = false;
                ckNodes.push(cnode);
            }, this);


            var ans = this.getAncestors(node);
            ans.reverse();
            for (var i = 0, l = ans.length; i < l; i++) {
                var pnode = ans[i];
                var childNodes = this.getChildNodes(pnode);
                var checkAll = true, hasCheck = false;
                for (var ii = 0, ll = childNodes.length; ii < ll; ii++) {
                    var cnode = childNodes[ii];
                    if (this.isCheckedNode(cnode)) {
                        hasCheck = true;
                    } else {
                        checkAll = false;
                    }
                }
                if (checkAll) {
                    pnode.checked = true;
                    pnode._indeterminate = false;
                }
                else {
                    pnode.checked = false;
                    pnode._indeterminate = hasCheck;
                }
                ckNodes.push(pnode);
            }
        }

        for (var i = 0, l = ckNodes.length; i < l; i++) {
            var node = ckNodes[i];
            var checkEl = this._getCheckBoxEl(node);
            if (checkEl) {
                if (node.checked) {
                    checkEl.indeterminate = false;
                    checkEl.checked = true;
                } else {
                    checkEl.indeterminate = node._indeterminate;
                    checkEl.checked = false;
                }
            }
        }


        if (this.autoCheckParent) {
            var ans = this.getAncestors(checkNode);

            for (var i = 0, l = ans.length; i < l; i++) {
                var pnode = ans[i];
                var hasCheck = this.hasCheckedChildNode(pnode);
                if (hasCheck) {
                    pnode.checked = true;
                    pnode._indeterminate = false;

                    var checkEl = this._getCheckBoxEl(pnode);
                    if (checkEl) {
                        checkEl.indeterminate = false;
                        checkEl.checked = true;
                    }
                }
            }
        }
    },

    checkNode: function (node) {
        node = this.getNode(node);
        if (!node) return;
        this._doCheckNode(node, true, this.checkRecursive);
    },

    uncheckNode: function (node) {
        node = this.getNode(node);
        if (!node) return;
        this._doCheckNode(node, false, this.checkRecursive);
    },

    checkNodes: function (nodes) {
        if (!mini.isArray(nodes)) nodes = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            this.checkNode(node);
        }
    },

    uncheckNodes: function (nodes) {
        if (!mini.isArray(nodes)) nodes = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var node = nodes[i];
            this.uncheckNode(node);
        }
    },

    checkAllNodes: function () {
        this.cascadeChild(this.root, function (node) {

            this._doCheckNode(node, true, false);
        }, this);
    },

    uncheckAllNodes: function (nodes) {
        this.cascadeChild(this.root, function (node) {

            this._doCheckNode(node, false, false);
        }, this);
    },

    getCheckedNodes: function (haveParent) {
        var nodes = [];
        var maps = {};
        this.cascadeChild(this.root, function (node) {
            if (node.checked == true) {
                nodes.push(node);
                if (haveParent) {
                    var ans = this.getAncestors(node);
                    for (var i = 0, l = ans.length; i < l; i++) {
                        var anode = ans[i];
                        if (!maps[anode._id]) {
                            maps[anode._id] = anode;
                            nodes.push(anode);
                        }
                    }
                }
            }
        }, this);
        return nodes;
    },
    setValue: function (value) {
        if (mini.isNull(value)) value = "";
        value = String(value);


        var nodes = this.getCheckedNodes();
        this.uncheckNodes(nodes);

        this.value = value;

        if (this.showCheckBox) {
            var ids = String(value).split(this.delimiter);
            for (var i = 0, l = ids.length; i < l; i++) {
                this.checkNode(ids[i]);
            }
        } else {//解决单选时未选中树节点的问题 赵美丹 2013-04-01
            this.value = value;
            this.selectNode(value);
        }

    },
    getNodesByValue: function (value) {
        if (mini.isNull(value)) value = "";
        value = String(value);
        var nodes = [];
        var ids = String(value).split(this.delimiter);
        for (var i = 0, l = ids.length; i < l; i++) {
            var node = this.getNode(ids[i]);
            if (node) nodes.push(node);
        }
        return nodes;
    },
    getValueAndText: function (records) {
        if (mini.isNull(records)) records = [];
        if (!mini.isArray(records)) {
            records = this.getNodesByValue(records);
        }
        var values = [];
        var texts = [];
        for (var i = 0, l = records.length; i < l; i++) {
            var record = records[i];
            if (record) {
                values.push(this.getItemValue(record));
                texts.push(this.getItemText(record));
            }
        }
        return [values.join(this.delimiter), texts.join(this.delimiter)];
    },

    getValue: function (haveParent) {
        var nodes = this.getCheckedNodes(haveParent);
        var sb = [];
        for (var i = 0, l = nodes.length; i < l; i++) {
            var id = this.getItemValue(nodes[i]);
            if (id) sb.push(id);
        }
        return sb.join(this.delimiter);
    },
    setResultAsTree: function (value) {
        this.resultAsTree = value;
    },
    getResultAsTree: function () {
        return this.resultAsTree;
    },
    setParentField: function (value) {
        this.parentField = value;
    },
    getParentField: function () {
        return this.parentField;
    },
    setIdField: function (value) {
        this.idField = value;
    },
    getIdField: function () {
        return this.idField;
    },
    setTextField: function (value) {
        this.textField = value;
    },
    getTextField: function () {
        return this.textField;
    },
    setShowTreeLines: function (value) {
        this.showTreeLines = value;
        if (value == true) {
            mini.addClass(this.el, 'mini-tree-treeLine');
        } else {
            mini.removeClass(this.el, 'mini-tree-treeLine');
        }
    },
    getShowTreeLines: function () {
        return this.showTreeLines;
    },
    setShowArrow: function (value) {
        this.showArrow = value;
        if (value == true) {
            mini.addClass(this.el, 'mini-tree-showArrows');
        } else {
            mini.removeClass(this.el, 'mini-tree-showArrows');
        }
    },
    getShowArrow: function () {
        return this.showArrow;
    },
    
    setIconField: function (value) {
        this.iconField = value;
    },
    getIconField: function () {
        return this.iconField;
    },
    setNodesField: function (value) {
        this.nodesField = value;
    },
    getNodesField: function () {
        return this.nodesField;
    },
    setTreeColumn: function (value) {
        this.treeColumn = value;
    },
    getTreeColumn: function () {
        return this.treeColumn;
    },
    setLeafIcon: function (value) {
        this.leafIcon = value;
    },
    getLeafIcon: function () {
        return this.leafIcon;
    },
    setFolderIcon: function (value) {
        this.folderIcon = value;
    },
    getFolderIcon: function () {
        return this.folderIcon;
    },
    setExpandOnDblClick: function (value) {
        this.expandOnDblClick = value;
    },
    getExpandOnDblClick: function () {
        return this.expandOnDblClick;
    },
    setExpandOnNodeClick: function (value) {
        this.expandOnNodeClick = value;
        if (value) {
            mini.addClass(this.el, "mini-tree-nodeclick");
        } else {
            mini.removeClass(this.el, "mini-tree-nodeclick");
        }
    },
    getExpandOnNodeClick: function () {
        return this.expandOnNodeClick;
    },

    setRemoveOnCollapse: function (value) {
        this.removeOnCollapse = value;
    },
    getRemoveOnCollapse: function () {
        return this.removeOnCollapse;
    },
    setLoadOnExpand: function (value) {
        this.loadOnExpand = value;
    },
    getLoadOnExpand: function () {
        return this.loadOnExpand;
    },
    setAutoEscape: function (value) {
        this.autoEscape = value;
    },
    getAutoEscape: function () {
        return this.autoEscape;
    },
    /* 增加自定义图标的功能 潘正锋 2014-02 */
    imgPath: '',
    setImgPath: function (value) {
        this.imgPath = value;
    },
    getImgPath: function () {
        return this.imgPath;
    },
    imgField: 'img',
    setImgField: function (value) {
        this.imgField = value;
    },
    getImgField: function () {
        return this.imgField;
    },

    __OnDblClick: function (e) {
        if (!this.enabled) return;
        if (mini.findParent(e.target, this._checkBoxCls)) return;

        var node = this._getNodeByEvent(e);
        if (node && node.enabled !== false) {
            if (mini.findParent(e.target, this._inNodeCls)) {
                var expanded = this.isExpandedNode(node);

                var ev = {
                    node: node,
                    expanded: expanded,
                    cancel: false
                };
                /**把此方法提前，不然下面的return会导致事件不触发 潘正锋 2014-05*/
                this.fire("nodedblclick", { htmlEvent: e, node: node, isLeaf: this.isLeaf(node) });
                if (this.expandOnDblClick && !this._inAniming) {
                    /**filter后没有子节点的文件夹 不需要再收缩和合拢了 潘正锋 2013-07*/
                    if(this._viewNodes){
                        var childViewNodes = this._getViewChildNodes(node);
                        if(childViewNodes.length==0) return;
                    }else
                    /**没有子节点就不需要再收缩和合拢了 潘正锋 2014-05*/
                       if(!this.getChildNodes(node)) return;
                    if (expanded) {
                        this.fire("beforecollapse", ev);
                        if (ev.cancel == true) return;
                        this.collapseNode(node, this.allowAnim);
                    } else {
                        this.fire("beforeexpand", ev);
                        if (ev.cancel == true) return;
                        this.expandNode(node, this.allowAnim);

                    }
                }


            }
        }
    },
    __OnClick: function (e) {

        if (!this.enabled) return;
        var node = this._getNodeByEvent(e);
        if (node && node.enabled !== false) {

            var allow = mini.findParent(e.target, this._inNodeCls) && this.expandOnNodeClick;
            if (mini.findParent(e.target, this._checkBoxCls)) allow = false;
            if ((mini.findParent(e.target, this._eciconCls) || allow)
                    && this.isLeaf(node) == false
                ) {

                if (this._inAniming) return;
                var expanded = this.isExpandedNode(node);
                var ev = {
                    node: node,
                    expanded: expanded,
                    cancel: false
                };

                if (!this._inAniming) {
                    /**filter后没有子节点的文件夹 不需要再收缩和合拢了 潘正锋 2013-07*/
                    if(this._viewNodes){
                        var childViewNodes = this._getViewChildNodes(node);
                        if(childViewNodes.length==0) return;
                    }
                    if (expanded) {
                        this.fire("beforecollapse", ev);
                        if (ev.cancel == true) return;
                        this.collapseNode(node, this.allowAnim);
                    } else {
                        this.fire("beforeexpand", ev);
                        if (ev.cancel == true) return;
                        this.expandNode(node, this.allowAnim);

                    }
                }
            } else if (mini.findParent(e.target, this._checkBoxCls)) {
                var checked = this.isCheckedNode(node);
                var ev = {
                    isLeaf: this.isLeaf(node),
                    node: node,
                    checked: checked,
                    checkRecursive: this.checkRecursive,
                    htmlEvent: e,
                    cancel: false
                };

                this.fire("beforenodecheck", ev);
                if (ev.cancel == true) {
                    e.preventDefault();
                    return;
                }
                if (checked) {
                    this.uncheckNode(node);
                } else {
                    this.checkNode(node);
                }
                ev.checked = this.isCheckedNode(node);
                this.fire("nodecheck", ev);

            } else {
                this._OnNodeClick(node, e);
            }


        }

    },
    __OnMouseDown: function (e) {
        if (!this.enabled) return;
        if (this._editInput && !mini.findParent(e.target, "mini-tree-editinput"))
            this._editInput.blur();

        var node = this._getNodeByEvent(e);
        if (node) {
            if (mini.findParent(e.target, this._eciconCls)) {

            } else if (mini.findParent(e.target, this._checkBoxCls)) {

            } else {

                this._OnNodeMouseDown(node, e);

            }


        }
    },
    _OnNodeMouseDown: function (node, htmlEvent) {

        var show = mini.findParent(htmlEvent.target, this._inNodeCls);
        if (!show) return null;
        if (!this.isEnabledNode(node)) return;

        var ev = { node: node, cancel: false, isLeaf: this.isLeaf(node), htmlEvent: htmlEvent };

        if (this.allowSelect && node.allowSelect !== false) {
            if (this._selectedNode != node) {
                this.fire("beforenodeselect", ev);
                if (ev.cancel != true) {
                    this.selectNode(node);
                }
            }
        }

        this.fire("nodeMouseDown", ev);
    },
    _OnNodeClick: function (node, htmlEvent) {
        var show = mini.findParent(htmlEvent.target, this._inNodeCls);
        if (!show) return null;
        if (htmlEvent.target.tagName.toLowerCase() == "a") {

            htmlEvent.target.hideFocus = true;
        }
        if (!this.isEnabledNode(node)) return;

        var ev = { node: node, cancel: false, isLeaf: this.isLeaf(node), htmlEvent: htmlEvent };

        if (this._getColumnByEvent) {
            var column = this._getColumnByEvent(htmlEvent);
            if (column) {
                ev.column = column;
                ev.field = column.field;
            }
        }

        this.fire("nodeClick", ev);
    },
    /* 新增下面2个方法，支持over事件 潘正锋 2014-02-18 */
    __OnMouseOver: function (e) {
        if (this._dragging) return;
        /* 当鼠标从节点移出来后，清空this.currentMouseOverNode 潘正峰 2014-02-18 */
        if(mini.hasClass(e.target,"mini-tree-parentNode") || mini.hasClass(e.target,"mini-tree-rootnodes"))
            this.currentMouseOverNode = null;
        var node = this._getNodeByEvent(e);
        if (node) {
            this._OnNodeMouseOver(node, e);
        }
    },
    _OnNodeMouseOver:function(node,e){
        if (!this.isEnabledNode(node)) return;
        if (!mini.findParent(e.target, this._inNodeCls)) return;
        var e = {
            node: node,
            htmlEvent: e
        };
        if(this.currentMouseOverNode!=node)
            this.fire("nodemouseover", e);
        this.currentMouseOverNode = node;
    },
    __OnMouseMove: function (e) {
        var node = this._getNodeByEvent(e);
        if (node) {
            this._OnNodeMouseMove(node, e);
        }
    },
    __OnMouseOut: function (e) {
        var node = this._getNodeByEvent(e);
        if (node) {
            this._OnNodeMouseOut(node, e);
        }
    },
    _OnNodeMouseOut: function (node, e) {
        if (!this.isEnabledNode(node)) return;
        if (!mini.findParent(e.target, this._inNodeCls)) return;

        this.blurNode();

        var e = {
            node: node,
            htmlEvent: e
        };
        this.fire("nodemouseout", e);
    },
    _OnNodeMouseMove: function (node, e) {
        if (!this.isEnabledNode(node)) return;
        if (!mini.findParent(e.target, this._inNodeCls)) return;
        if (this.enableHotTrack == true) {
            this.focusNode(node);
        }
        var e = {
            node: node,
            htmlEvent: e
        };
        this.fire("nodemousemove", e);
    },
    focusNode: function (node, view) {
        node = this.getNode(node);
        if (!node) return;
        function doFocus() {
            var dom = this._getNodeHoverEl(node);
            if (view && dom) {
                this.scrollIntoView(node);
            }
            if (this._focusedNode == node) return;
            this.blurNode();
            this._focusedNode = node;

            mini.addClass(dom, this._nodeHoverCls);
        }
        var me = this;
            doFocus.call(me);
    },
    blurNode: function () {
        if (!this._focusedNode) return;

        var dom = this._getNodeHoverEl(this._focusedNode);
        if (dom) {
            mini.removeClass(dom, this._nodeHoverCls);
        }
        this._focusedNode = null;
    },

    scrollIntoView: function (node) {
        node = this.getNode(node);
        if (!node) return;
        this.expandNode(node);

        var itemEl = this._getNodeEl(node);
        mini.scrollIntoView(itemEl, this.el, false);
    },

    __OnHtmlContextMenu: function (e) {
        if (mini.isAncestor(this._headerEl, e.target)) {
            return true;
        }
        return mini.Tree.superclass.__OnHtmlContextMenu.call(this, e);
    },

    onNodeClick: function (fn, scope) {
        this.on("nodeClick", fn, scope);
    },
    onBeforeNodeSelect: function (fn, scope) {
        this.on("beforenodeselect", fn, scope);
    },
    onNodeSelect: function (fn, scope) {
        this.on("nodeselect", fn, scope);
    },
    onBeforeNodeCheck: function (fn, scope) {
        this.on("beforenodecheck", fn, scope);
    },
    onCheckNode: function (fn, scope) {
        this.on("nodecheck", fn, scope);
    },
    onNodeMouseDown: function (fn, scope) {
        this.on("nodemousedown", fn, scope);
    },
    onBeforeExpand: function (fn, scope) {
        this.on("beforeexpand", fn, scope);
    },
    onExpand: function (fn, scope) {
        this.on("expand", fn, scope);
    },
    onBeforeCollapse: function (fn, scope) {
        this.on("beforecollapse", fn, scope);
    },
    onCollapse: function (fn, scope) {
        this.on("collapse", fn, scope);
    },
    onBeforeLoad: function (fn, scope) {
        this.on("beforeload", fn, scope);
    },
    onLoad: function (fn, scope) {
        this.on("load", fn, scope);
    },
    onLoadError: function (fn, scope) {
        this.on("loaderror", fn, scope);
    },
    onDataLoad: function (fn, scope) {
        this.on("dataload", fn, scope);
    },

    _getDragData: function () {
        return this.getSelectedNodes().clone();
    },
    _getDragText: function (dragNodes) {
        if (this.autoEscape == true) {
            return mini.htmlEncode(this.getItemText(dragNodes[0]));
        }
        return this.getItemText(dragNodes[0]);

    },

    allowDrag: false,
    allowDrop: false,
    dragGroupName: "",
    dropGroupName: "",
    allowLeafDropIn: false,
    setAllowLeafDropIn: function (value) {
        this.allowLeafDropIn = value;
    },
    getAllowLeafDropIn: function () {
        return this.allowLeafDropIn;
    },
    setAllowDrag: function (value) {
        this.allowDrag = value;
    },
    getAllowDrag: function () {
        return this.allowDrag;
    },
    setAllowDrop: function (value) {
        this.allowDrop = value;
    },
    getAllowDrop: function () {
        return this.allowDrop;
    },
    setDragGroupName: function (value) {
        this.dragGroupName = value;
    },
    getDragGroupName: function () {
        return this.dragGroupName;
    },
    setDropGroupName: function (value) {
        this.dropGroupName = value;
    },
    getDropGroupName: function () {
        return this.dropGroupName;
    },
    isAllowDrag: function (node) {
        if (!this.allowDrag) return false;
        if (node.allowDrag === false) return false;
        return true;
    },
    _OnDragStart: function (node) {
        var e = {
            node: node,
            nodes: this._getDragData(),
            dragText: this._getDragText(this._getDragData()),
            cancel: false
        };
        this.fire("DragStart", e);
        return e;
    },
    _OnDragDrop: function (dragNodes, dropNode, dragAction) {
        dragNodes = dragNodes.clone();
        var e = {
            dragNodes: dragNodes,
            targetNode: dropNode,
            action: dragAction,
            cancel: false
        };
        var dropParentNode = this._getDropedParentNode(dragNodes, dragAction, dropNode);
        e.dragNode = e.dragNodes[0];
        e.dropNode = e.targetNode;
        e.dragAction = e.action;
        e.dropParentNode = dropParentNode;

        this.fire("beforedrop", e);
        this.fire("DragDrop", e);
        return e;
    },
    _OnGiveFeedback: function (effect, dragNodes, dropNode) {
        var e = {};
        e.effect = effect;
        e.nodes = dragNodes;
        e.targetNode = dropNode;

        e.node = e.nodes[0];


        e.dragNodes = dragNodes;
        e.dragNode = e.dragNodes[0];
        e.dropNode = e.targetNode;
        e.dragAction = e.action;

        this.fire("givefeedback", e);
        return e;
    },
    _allowDrag:function(e){
        return true;
    },
    getAttrs: function (el) {
        var attrs = mini.Tree.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs,
            ["data","value", "url", "idField", "textField", "iconField", "nodesField", "parentField", "valueField",
            "leafIcon", "folderIcon",
            "ondrawnode", "onbeforenodeselect", "onnodeselect", "onnodemousedown", "onnodeclick", "onnodedblclick",
            "onbeforeload", "onpreload", "onload", "onloaderror", "ondataload","onnodemouseover","onnodemouseout",
                "onbeforenodecheck", "onnodecheck",
                "onbeforeexpand", "onexpand",
                "onbeforecollapse", "oncollapse",
                "dragGroupName", "dropGroupName", "onendedit",  "imgPath", "imgField",
                "expandOnLoad", "ajaxOption", "ondragstart", "onbeforedrop", "ondrop", "ongivefeedback"
            ]
        );

        mini._ParseBool(el, attrs,
            ["allowSelect", "showCheckBox", "showExpandButtons", "showTreeIcon", "showTreeLines", "checkRecursive",
                "enableHotTrack", "showFolderCheckBox", "resultAsTree",
                "allowLeafDropIn", "allowDrag", "allowDrop", "showArrow", "expandOnDblClick", "removeOnCollapse",
                "autoCheckParent", "loadOnExpand", "expandOnNodeClick", "autoEscape","autoLoad"
            ]
        );
        if (attrs.ajaxOption) {
            attrs.ajaxOption = mini.decode(attrs.ajaxOption);
        }

        if (attrs.expandOnLoad) {

            var level = parseInt(attrs.expandOnLoad);
            if (mini.isNumber(level)) {
                attrs.expandOnLoad = level;
            } else {
                attrs.expandOnLoad = attrs.expandOnLoad == "true" ? true : false;
            }
        }

        var idField = attrs.idField || this.idField;
        var textField = attrs.textField || this.textField;
        var iconField = attrs.iconField || this.iconField;
        var nodesField = attrs.nodesField || this.nodesField;

        function parseNodes(nodes) {
            var data = [];

            for (var i = 0, l = nodes.length; i < l; i++) {
                var node = nodes[i];
                var cnodes = mini.getChildNodes(node);
                var nodeTitle = cnodes[0];
                var nodeChild = cnodes[1];

                if (!nodeTitle || !nodeChild) nodeTitle = node;
                var jqTitle = jQuery(nodeTitle);
                var o = {};
                var id = o[idField] = nodeTitle.getAttribute("value");

                o[iconField] = jqTitle.attr("iconCls");
                o[textField] = nodeTitle.innerHTML;
                data.add(o);



                var expanded = jqTitle.attr("expanded");
                if (expanded) {
                    o.expanded = expanded == "false" ? false : true;
                }

                var allowSelect = jqTitle.attr("allowSelect");
                if (allowSelect) {
                    o.allowSelect = allowSelect == "false" ? false : true;
                }



                if (!nodeChild) continue;
                var cs = mini.getChildNodes(nodeChild);
                var cdata = parseNodes(cs);
                if (cdata.length > 0) {
                    o[nodesField] = cdata;
                }
            }
            return data;
        }

        var data = parseNodes(mini.getChildNodes(el));
        if (data.length > 0) {
            attrs.data = data;
        }

        if (!attrs.idField && attrs.valueField) {
            attrs.idField = attrs.valueField;
        }

        return attrs;
    }

});
mini.regClass(mini.Tree, "tree");

mini._TreeDragDrop = function (tree) {
    this.owner = tree;
    this.owner.on('NodeMouseDown', this.__OnTreeNodeMouseDown, this);
}
mini._TreeDragDrop.prototype = {
    destroy: function (removeEl) {
        mini.clearEvent(document);

        if (this.drag) {
            mini.clearEvent(this.drag);
            this.drag.destroy(removeEl);
            this.drag = null;
        }
        this.owner = null;
        mini.clearEvent(this);
    },
    __OnTreeNodeMouseDown: function (e) {

        var node = e.node;
        if (e.htmlEvent.button == mini.MouseButton.Right) return;
        var tree = this.owner;
        /**解决拖动时同时单击鼠标右键后，浮动框不消失的问题 潘正锋 2013-07-05*/
        if (tree._dragging) return;
        if (tree.isReadOnly() || tree.isAllowDrag(e.node) == false) return;

        if (tree.isEditingNode(node)) return;

        /**为了修改treegrid拖拽而新增加的方法 判断是否可以拖拽 潘正锋*/
        if (!tree._allowDrag(e.htmlEvent)) return;

        this.dragData = tree._getDragData();

        if (this.dragData.indexOf(node) == -1) {
            this.dragData.push(node);
        }
        var drag = this._getDrag();
        drag.start(e.htmlEvent, node);
    },
    _OnDragStart: function (drag, node) { //增加node参数给_OnDragStart方法 潘正锋2013-06-20
        var tree = this.owner;
        /**解决拖动时同时单击鼠标右键后，浮动框不消失的问题 潘正锋 2013-07-05*/
        tree._dragging = true;
        var ex = tree._OnDragStart(node);
        if (ex.cancel) return;
        this.dragText = ex.dragText;

        this.feedbackEl = mini.append(document.body, '<div class="mini-feedback"></div>');
        this.feedbackEl.innerHTML = this.dragText;
        this.lastFeedbackClass = "";

        this.enableHotTrack = tree.enableHotTrack;
        tree.setEnableHotTrack(false);
    },
    _getDropTree: function (event) {
        var dom = mini.findParent(event.target, "mini-tree", 500);
        if (dom) {
            return mini.get(dom);
        }
    },
    _OnDragMove: function (drag) {

        var tree = this.owner;
        var dropTree = this._getDropTree(drag.event);

        var x = drag.now[0], y = drag.now[1];
        mini.setXY(this.feedbackEl, x + 15, y + 18);

        this.dragAction = "no";

        if (dropTree) {
            /**拖拽目标是否可drop 处理和_allowDrag相同 2013-07-18 潘正锋*/
            if (!tree._allowDrag(drag.event))
                this.dragAction = "no";
            else {
                var targetNode = dropTree._getNodeByEvent(drag.event);
                this.dropNode = targetNode;

                if (targetNode && dropTree.allowDrop == true) {


                    if (!dropTree.isLeaf(targetNode)) {

                        var nodes = targetNode[dropTree.nodesField];
                        if (nodes && nodes.length > 0) {

                        } else {
                            if (tree.loadOnExpand && targetNode.asyncLoad !== false) {
                                dropTree.loadNode(targetNode);
                            } else {

                            }
                        }
                    }

                    this.dragAction = this.getFeedback(targetNode, y, 3, dropTree);


                } else {
                    this.dragAction = "no";
                }
                if (tree && dropTree && tree != dropTree && !targetNode && dropTree.getChildNodes(dropTree.root).length == 0) {
                    targetNode = dropTree.getRootNode();
                    this.dragAction = "add";
                    this.dropNode = targetNode;
                }
            }
        }
        this.lastFeedbackClass = "mini-feedback-" + this.dragAction;
        this.feedbackEl.className = "mini-feedback " + this.lastFeedbackClass;

        if (this.dragAction == "no") targetNode = null;
        this.setRowFeedback(targetNode, this.dragAction, dropTree);

    },
    _OnDragStop: function (drag) {

        var tree = this.owner;
        var dropTree = this._getDropTree(drag.event);
        /**解决拖动时同时单击鼠标右键后，浮动框不消失的问题 潘正锋 2013-07-05*/
        tree._dragging = false;
        mini.removeNode(this.feedbackEl);

        this.feedbackEl = null;
        this.setRowFeedback(null);

        var dragNodes = [];
        for (var i = 0, l = this.dragData.length; i < l; i++) {
            var dragNode = this.dragData[i];

            var hasParent = false;
            for (var j = 0, k = this.dragData.length; j < k; j++) {
                var dr = this.dragData[j];
                if (dr != dragNode) {
                    hasParent = tree.isAncestor(dr, dragNode);
                    if (hasParent) break;
                }
            }

            if (!hasParent) {
                dragNodes.push(dragNode);
            }
        }
        this.dragData = dragNodes;

        if (this.dropNode && dropTree && this.dragAction != "no") {
            var e = tree._OnDragDrop(this.dragData, this.dropNode, this.dragAction);
            if (e.cancel) return;
            var dragNodes = e.dragNodes, targetNode = e.targetNode, action = e.action;

            if (tree == dropTree) {
                tree.moveNodes(dragNodes, targetNode, action);
            } else {

                tree.removeNodes(dragNodes);
                dropTree.addNodes(dragNodes, targetNode, action);
            }
            if (!this.dragData[0]) return;
            var e = {
                dragNode: this.dragData[0],
                dropNode: this.dropNode,
                dragAction: this.dragAction,
                dropParentNode: tree.getParentNode(dragNode) /**增加dropParent参数 表示拖拽后，被拖拽节点的新父节点  潘正锋 2013-06-20 */
            };
            
            tree.fire("drop", e);

        }

        tree.setEnableHotTrack(this.enableHotTrack);

        this.dropNode = null;
        this.dragData = null;
    },
    setRowFeedback: function (node, feedback, tree) {




        if (this.lastAddDomNode) {
            mini.removeClass(this.lastAddDomNode, "mini-tree-feedback-add");
        }
        if (node == null || this.dragAction == "add") {
            mini.removeNode(this.feedbackLine);
            this.feedbackLine = null;
        }

        this.lastRowFeedback = node;

        if (node != null) {
            if (feedback == "before" || feedback == "after") {

                if (!this.feedbackLine) {
                    this.feedbackLine = mini.append(document.body, "<div class='mini-feedback-line'></div>");
                }
                this.feedbackLine.style.display = "block";
                var rowBox = tree.getNodeBox(node);
                var x = rowBox.x, y = rowBox.y - 1;
                if (feedback == "after") {
                    y += rowBox.height;
                }
                mini.setXY(this.feedbackLine, x, y);

                var box = tree.getBox(true);
                mini.setWidth(this.feedbackLine, box.width);
            } else {
                var el = tree._getNodeTitleEl(node);
                mini.addClass(el, "mini-tree-feedback-add");
                this.lastAddDomNode = el;


            }
        }
    },
    getFeedback: function (dropNode, y, way, tree) {




        var rowBox = tree.getNodeBox(dropNode);


        var h = rowBox.height;
        var t = y - rowBox.y;

        var effect = null;


        if (this.dragData.indexOf(dropNode) != -1) return "no";
        var IsLeaf = false;
        if (way == 3) {
            IsLeaf = tree.isLeaf(dropNode);


            for (var i = 0, l = this.dragData.length; i < l; i++) {
                var dragRecord = this.dragData[i];

                var isAncestor = tree.isAncestor(dragRecord, dropNode);
                if (isAncestor) {
                    effect = "no";
                    break;
                }
            }
        }
        if (effect == null) {

            if (IsLeaf && tree.allowLeafDropIn == false) {
                if (t > h / 2) effect = "after";
                else effect = "before";
            } else {
                if (t > (h / 3) * 2) effect = "after";
                else if (h / 3 <= t && t <= (h / 3 * 2)) effect = "add";
                else effect = "before";
            }

        }
        var e = tree._OnGiveFeedback(effect, this.dragData, dropNode);
        return e.effect;
    },
    _getDrag: function () {
        if (!this.drag) {
            this.drag = new mini.Drag({
                capture: false,
                onStart: mini.createDelegate(this._OnDragStart, this),
                onMove: mini.createDelegate(this._OnDragMove, this),
                onStop: mini.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    }
};


mini.TreeGrid = function () {
	this.columns = [];
	this._bottomColumns = [];
	this._idColumns = {};
	this._nameColumns = {};

	this._cellErrors = [];
	this._cellMapErrors = {};

	mini.TreeGrid.superclass.constructor.call(this);

	this._resizeEl.style.display = this.allowResize ? "" : "none";
}
mini.extend(mini.TreeGrid, mini.Tree, {
	_rowIdField: "_id",

	width: 300,
	height: 180,
	minWidth: 300,
	minHeight: 150,
	maxWidth: 5000,
	maxHeight: 3000,

	allowResize: false,

	treeColumn: "",

	columns: [],
	columnWidth: 80,

	allowResizeColumn: true,
	allowMoveColumn: true,

	_doPositoin: true,
    showPager: false,
    pageIndex:0,
    pageSize:10,
    totalCount:0,
    totalPage: 0,

	_headerCellCls: "mini-treegrid-headerCell",
	_cellCls: "mini-treegrid-cell",

	_borderCls: "mini-treegrid-border",
	_headerCls: "mini-treegrid-header",
	_bodyCls: "mini-treegrid-body",

	_nodeCls: "mini-treegrid-node",
	_nodesCls: "mini-treegrid-nodes",
	_selectedNodeCls: "mini-treegrid-selectedNode",
	_nodeHoverCls: "mini-treegrid-hoverNode",

	_expandNodeCls: "mini-treegrid-expand",
	_collapseNodeCls: "mini-treegrid-collapse",
	_eciconCls: "mini-treegrid-ec-icon",
	_inNodeCls: "mini-treegrid-nodeTitle",
	_getNodeHoverEl: function (node) {
		if (!node)
			return null;
		var el = this._getNodeTitleEl(node);
		var el = this._getNodeTitleEl(node);
		return el;
	},
	uiCls: "mini-treegrid",
	_create: function () {
	    mini.TreeGrid.superclass._create.call(this);
        this._footerEl = mini.append(this._borderEl, '<div class="mini-grid-footer"></div>');
	    this._resizeEl = mini.append(this._borderEl, '<div class="mini-resizer-trigger" style=""></div>');

	    mini.on(this._bodyEl, "scroll", this.__OnScroll, this);

	    this._Resizer = new mini._Resizer(this);
	    this._ColumnMove = new mini._ColumnMove(this);
	    this._Splitter = new mini._ColumnSplitter(this);
	    this._CellTip = new mini._CellToolTip(this);
        this._createPager();
	},
    _createPager: function () {
        this.pager = new mini.Pager();
        this.pager.render(this._footerEl);
        this.bindPager(this.pager);


    },
    bindPager: function (pager) {
        pager.on("beforepagechanged", this.__OnPageChanged, this);
        this.on("load", function (e) {
            pager.update(this.pageIndex, this.pageSize, e.total);
            this.totalPage = pager.totalPage;
        }, this);
    },
    __OnPageChanged: function (e) {
        if (this.data.length == 0 && !e.isreload){
            this.setPageSize(e.pageSize);
            return;
        }
        this.gotoPage(e.pageIndex, e.pageSize);
    },
    gotoPage: function (index, size) {
        var params =  {};
        if (mini.isNumber(index)) params.pageIndex = index;
        if (mini.isNumber(size)) params.pageSize = size;
        this.pageIndex = index;
        this.pageSize = size;
        this.load(this.url,params);
    },
    load: function (url,params) {
        params = params || {};
        if (mini.isNull(params.pageIndex)) params.pageIndex = 0;
        if (mini.isNull(params.pageSize)) params.pageSize = this.pageSize;

        this.url = url;
        this._doLoad(params, this.root);

    },
    _doLoad: function (params, node, success, fail) {
        try {
            var url = eval(this.url);
            if (url != undefined) {
                this.url = url;
            }
        } catch (e) { }

        var isRoot = node == this.root;
        var e = {
            url: this.url,
            async: this._ajaxOption.async,
            type: this._ajaxOption.type,
            params: params,
            data: params,
            cache: false,
            cancel: false,
            node: node,
            isRoot: isRoot
        };
        this.fire("beforeload", e);
        if (e.data != e.params && e.params != params) {
            e.data = e.params;
        }
        if (e.cancel == true) return;

        if (node != this.root) {

        }

        var sf = this;

        var container = node;
        if (isRoot) {
            mini.addClass(this._bodyEl, "mini-tree-loading");
            this._bodyEl.innerHTML = "<div class='mini-treegrid-ec-icon'>&nbsp;</div>";
        } else {
            sf.addNodeCls(container, "mini-tree-loading");
        }
        mini.copyTo(e, {
            success: function (text, code, jqXHR) {
                if (isRoot) {
                    mini.removeClass(sf._bodyEl, "mini-tree-loading");
                    sf._bodyEl.innerHTML = "";
                } else {
                    sf.removeNodeCls(container, "mini-tree-loading");
                }

                var data = null;
                try {
                    data = mini.decode(text);
                } catch (ex) {
                    data = []
                    if (mini_debugger == true) {
                        alert("tree json is error.");
                    }
                }
                if (sf.dataField) {
                    data = mini._getMap(sf.dataField, data);
                }
                if (!data) data = [];
                var ex
                if(data instanceof Array)
                    ex = { result: data, data: data, cancel: false, node: node }
                else
                    ex = { result: data, data: data.data,total:data.total,cancel: false, node: node }
                if (sf.resultAsTree == false) {
                    ex.data = mini.arrayToTree(ex.data, sf.nodesField, sf.idField, sf.parentField)
                }

                sf.fire("preload", ex);
                if (ex.cancel == true) return;

                if (isRoot) {
                    sf.setData(ex.data);
                }

                if (success) success(ex.data);


                sf._doCheckLoadNodes();

                sf.fire("load", ex);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                if (isRoot) {
                    mini.removeClass(sf._bodyEl, "mini-tree-loading");
                    sf._bodyEl.innerHTML = "";
                } else {
                    sf.removeNodeCls(container, "mini-tree-loading");
                }

                var e = {
                    xmlHttp: jqXHR,
                    errorCode: textStatus
                };

                if (fail) fail(e);

                if (mini_debugger == true) {
                    alert("network error");
                }

                sf.fire("loaderror", e);
            }
        });
        this._ajaxer = mini.ajax(e);
    },

	_createColumnId: function (column) {
		return this.uid + "$column$" + column.id;
	},
	_getHeaderScrollEl: function () {
		return this._headerEl.firstChild;
	},
	_CreateTopTr: function (name) {
		var s = "";
		var columns = this.getBottomColumns();
		if (isIE) {
			if (isIE6 || isIE7 || (isIE8 && !jQuery.boxModel) || (isIE9 && !jQuery.boxModel)) {
				s += '<tr style="display:none;">';
			} else {
				s += '<tr >';
			}
		} else {
			s += '<tr>';
		}
		for (var i = 0, l = columns.length; i < l; i++) {
			var column = columns[i];
			var width = column.width;
			var id = this._createColumnId(column) + "$" + name;

			s += '<td id="' + id + '" style="padding:0;border:0;margin:0;height:0;';
			if (column.width)
				s += 'width:' + column.width;
			if (column.visible == false) {
			    s += ";display:none;";
			}

			s += '" ></td>';
		}
		s += "</tr>";
		return s;
	},
	_doUpdateHeader: function () {

		var rows = this.getColumnRows();

		var bottomColumns = this.getBottomColumns();
		var columnLength = bottomColumns.length;

		var sb = [];
		sb[sb.length] = '<div class="mini-treegrid-headerInner"><table style="display:table" class="mini-treegrid-table" cellspacing="0" cellpadding="0">';
		sb[sb.length] = this._CreateTopTr("header");

		for (var j = 0, k = rows.length; j < k; j++) {
			var columns = rows[j];

			sb[sb.length] = '<tr >';
			for (var i = 0, l = columns.length; i < l; i++) {
				var column = columns[i];
				var header = column.header;
				if (typeof header == "function")
					header = header.call(this, column);
				if (mini.isNull(header) || header === "")
					header = "&nbsp;";

				var columnId = this._createColumnId(column);

				sb[sb.length] = '<td id="';
				sb[sb.length] = columnId;
				sb[sb.length] = '" class="mini-treegrid-headerCell  ' + (column.headerCls || "") + ' ';
                if(i == l-1){
                    sb[sb.length] = ' mini-treegrid-last-column ';
                }
                
				sb[sb.length] = '" style="';
				var bottomIndex = bottomColumns.indexOf(column);
				if (column.visible == false) {
					sb[sb.length] = ";display:none;";
				}

				if (column.columns && column.columns.length > 0 && column.colspan == 0) {
					sb[sb.length] = ";display:none;";
				}

				if (column.headerStyle) {
					sb[sb.length] = column.headerStyle + ';';
				}
				if (column.headerAlign) {
					sb[sb.length] = 'text-align:' + column.headerAlign + ';';
				}

				sb[sb.length] = '" ';

				if (column.rowspan) {
					sb[sb.length] = 'rowspan="' + column.rowspan + '" ';
				}
				if (column.colspan) {
					sb[sb.length] = 'colspan="' + column.colspan + '" ';
				}

				sb[sb.length] = '>';

				sb[sb.length] = header;

				sb[sb.length] = '</td>';
			}
			sb[sb.length] = '</tr>';
		}
		sb[sb.length] = '</table><div class="mini-treegrid-topRightCell"></div></div>';

		var s = sb.join("");

		this._headerEl.innerHTML = s;

		this._headerInnerEl = this._headerEl.firstChild;
		this._topRightCellEl = this._headerInnerEl.lastChild;
	},

	_createNodeTitle: function (node, useEdit, sb) {
		var isReturn = !sb;
		if (!sb)
			sb = [];

		var text = node[this.textField];
		if (text === null || text === undefined)
			text = "";
		var isLeaf = this.isLeaf(node);
		var level = this.getLevel(node);

		var cls = "";
		if (!isLeaf) {
            if (!this._viewNodes)
                cls = this.isExpandedNode(node) ? this._expandNodeCls : this._collapseNodeCls;
            else {
                /**增加第三种情况 filter后 虽然是文件夹  但是下面没子节点 潘正锋 2013-07*/
                if (this._getViewChildNodes(node).length > 0)
                    cls = this.isExpandedNode(node) ? this._expandNodeCls : this._collapseNodeCls;
            }
		}
		if (this._selectedNode == node) {
			cls += " " + this._selectedNodeCls;
		}

		var columns = this.getBottomColumns();

		sb[sb.length] = '<table class="mini-treegrid-nodeTitle ';
		sb[sb.length] = cls;
		sb[sb.length] = '" cellspacing="0" cellpadding="0">';
		sb[sb.length] = this._CreateTopTr();
		sb[sb.length] = '<tr>';
		for (var j = 0, k = columns.length; j < k; j++) {
			var column = columns[j];
			var cellId = this._createCellId(node, column);

			var e = this._OnDrawCell(node, column);

			var w = column.width;
			if (typeof w == "number")
				w = w + "px";

			sb[sb.length] = '<td id="';
			sb[sb.length] = cellId;
			sb[sb.length] = '" class="mini-treegrid-cell ';
			if (e.cellCls)
				sb[sb.length] = e.cellCls;
            if(j == k-1){
                sb[sb.length] = ' mini-treegrid-last-column ';
            }
            
			sb[sb.length] = '" style="';
			if (e.cellStyle) {
				sb[sb.length] = e.cellStyle;
				sb[sb.length] = ";";
			}

			if (column.align) {
				sb[sb.length] = 'text-align:';
				sb[sb.length] = column.align;
				sb[sb.length] = ';';
			}
			if (column.visible == false) {
			    sb[sb.length] = 'display:none;';
			}

			sb[sb.length] = '">';
			sb[sb.length] = e.cellHtml;
			sb[sb.length] = '</td>';

			if (e.rowCls)
				rowCls = e.rowCls;
			if (e.rowStyle)
				rowStyle = e.rowStyle;

		}
		sb[sb.length] = '</table>';

		if (isReturn)
			return sb.join('');
	},
	doUpdate: function () {
		if (!this._allowUpdate)
			return;

		this._doUpdateHeader();

		var sss = new Date();

		var nodes = this._getViewChildNodes(this.root);
		var sb = [];
		this._createNodes(nodes, this.root, sb);
		var s = sb.join('');

		this._bodyEl.innerHTML = s;
		this._deferLayout();

	},
	getScrollLeft: function () {
		return this._bodyEl.scrollLeft;
	},
    setShowPager:function(value){
        this.showPager = value;
    },
    getFooterHeight: function () {

        return this.showPager ? mini.getHeight(this._footerEl) : 0;
    },
	doLayout: function () {
		if (!this.canLayout())
			return;

		var autoHeight = this.isAutoHeight();
		var autoWidth = this.isAutoWidth();

		var width = this.getWidth(true);
		var height = this.getHeight(true);
		var headerHeight = this.getHeaderHeight();


		this._bodyEl.style.width = width + "px";
		if (autoHeight) {
		    this._bodyEl.style.height = "auto";
		} else {
            var bodyHeight = height - headerHeight - this.getFooterHeight();
            this._bodyEl.style.height = bodyHeight + "px";
		}


		this._doLayoutHeader();

		this._doLayoutTopRightCell();
		this.fire("layout");

	},
	_doLayoutTopRightCell: function () {
		var headerTable = this._headerInnerEl.firstChild;
		var width = headerTable.offsetWidth + 1;
		var height = headerTable.offsetHeight - 1;
		if (height < 0)
			height = 0;

		this._topRightCellEl.style.height = height + "px";
	},
	_doLayoutHeader: function () {

		var bodyScrollHeight = this._bodyEl.scrollHeight;
		var bodyClientHeight = this._bodyEl.clientHeight;

		var elWidth = this.getWidth(true);
		var table1 = this._headerEl.firstChild.firstChild, table2 = this._bodyEl.firstChild;

		if (bodyClientHeight >= bodyScrollHeight) {
			if (table2)
				table2.style.width = "100%";
			if (table1)
				table1.style.width = "100%";
		} else {
			if (table2) {
				var w = parseInt(table2.parentNode.offsetWidth - 17) + 'px'
				table2.style.width = w;
			}

			if (table1)
				table1.style.width = w;
		}

		try {
		    var w = this._headerEl.firstChild.firstChild.firstChild.offsetWidth;

			this._bodyEl.firstChild.style.width = w + "px";
		} catch (e) {
		}

		this.__OnScroll();
	},
	getHeaderHeight: function () {
		return mini.getHeight(this._headerEl);
	},
	_getDragText: function (dragNodes) {
	    var objName;
	    for (var i = 0; i < this.columns.length; i++) {
	        if (this.columns[i].name && this.columns[i].name == this.treeColumn) {
	            objName = this.columns[i].field;
	            break;
	        }
	    }
	    if (objName) {
	        var value = mini._getMap(objName, dragNodes[0]);
	        if (this.autoEscape == true) {
	            return mini.htmlEncode(value);
	        }
	        return value;
	    }
	    return "";
	},
	_OnDrawCell: function (record, column) {

		var showCheckBox = this.showCheckBox;
		if (showCheckBox && this.hasChildren(record)) {
			showCheckBox = this.showFolderCheckBox;
		}
		var value = mini._getMap(column.field, record);

		var e = {
			isLeaf: this.isLeaf(record),
			rowIndex: this.indexOf(record),
			showCheckBox: showCheckBox,
			iconCls: this.getNodeIcon(record),
			showTreeIcon: this.showTreeIcon,

			sender: this,
			record: record,
			row: record,
			node: record,
			column: column,
			field: column ? column.field : null,
			value: value,
			cellHtml: value,
			rowCls: null,
			cellCls: column ? (column.cellCls || '') : "",
			rowStyle: null,
			cellStyle: column ? (column.cellStyle || '') : ""
		};

		if (column.dateFormat) {
			if (mini.isDate(e.value))
				e.cellHtml = mini.formatDate(value, column.dateFormat);
			else
				e.cellHtml = value;
		}

		var renderer = column.renderer;
		if (renderer) {
			fn = typeof renderer == "function" ? renderer : window[renderer];
			if (fn) {
				e.cellHtml = fn.call(column, e);
			}
		}

		this.fire("drawcell", e);

		if (e.cellHtml === null || e.cellHtml === undefined || e.cellHtml === "")
			e.cellHtml = "&nbsp;";

		if (!this.treeColumn || this.treeColumn !== column.name)
			return e;

		this._doTreeColumn(e);
		return e;
	},
	_doTreeColumn: function (e) {

		var node = e.node;
		if (mini.isNull(e.showTreeIcon))
			e.showTreeIcon = this.showTreeIcon;

		var cellHtml = e.cellHtml;
        if(this.autoEscape){
            cellHtml = mini.htmlEncode(cellHtml);
        }

		var isLeaf = this.isLeaf(node);
        var level = this.getLevel(node);
		var left = level * 18;

		var cls = '';

		if (e.cellCls) {
			e.cellCls += ' mini-treegrid-treecolumn ';
		} else {
			e.cellCls = ' mini-treegrid-treecolumn ';
		}

		var s = '<div class="mini-treegrid-treecolumn-inner ' + cls + '">';
        var parentNode = this.getParentNode(node);
        var ii = 0;

        for (var i = ii; i <= level; i++) {
            if (i == level)
                continue;

            if (isLeaf) {
                if (this.showExpandButtons == false && i >= level - 1) {
                    continue;
                }
            }

            var indentStyle = "";
            if (this._isInViewLastNode(node, i)) {
                indentStyle = "background:none;";
            }

            s += '<span class="mini-treegrid-indent " style="' + indentStyle + 'left:' + (i*18) + 'px;"></span>';
        }
        
        var ecCls = "";
        /**为了有更好的逻辑性 调整了判断结构 潘正锋 2013-07-04*/
        if (this._isViewFirstNode(node) && this._isViewLastNode(node)) {

            ecCls = this._eciconCls + "-last";
            if (parentNode == this.root) {
                ecCls = this._eciconCls + "-firstLast";
            }
        } else{
            /**解决节点为第一个并且有父节点时，没有上连接线的问题 潘正锋 2013-07-04*/
            if (this._isViewFirstNode(node) && parentNode && parentNode!=this.root) {
                ecCls="";
            }
            else if (this._isViewFirstNode(node)) {
                ecCls = this._eciconCls + "-first";
            } else if (this._isViewLastNode(node)) {
                ecCls = this._eciconCls + "-last";
            }

        }
        
		if (!isLeaf) {
			s += '<a href="#" onclick="return false;"  hidefocus class="' + this._eciconCls + ' ' + ecCls + '" style="left:' + (left) + 'px;"></a>';
		}else{
            s += '<span class="' + this._eciconCls + ' ' + ecCls + '" style="left:' + left + 'px;" ></span>';
        }
		left += 18;

		if (e.showTreeIcon) {
			var icon = this.getNodeIcon(node);
			s += '<div class="' + icon + ' mini-treegrid-nodeicon" style="left:' + left + 'px;"></div>';
			left += 18;
		}

		cellHtml = '<span class="mini-tree-nodetext">' + cellHtml + '</span>';

		if (e.showCheckBox) {

			var ckid = this._createCheckNodeId(node);
			var checked = this.isCheckedNode(node);
			cellHtml = '<input type="checkbox" id="' + ckid + '" class="' + this._checkBoxCls + '" hidefocus ' + (checked ? "checked" : "") + '/>' + cellHtml;
		}

		s += '<div class="mini-treegrid-nodeshow" style="margin-left:' + (left + 2) + 'px;">' + cellHtml + '</div>';
		s += '</div>';
		cellHtml = s;
		e.cellHtml = cellHtml;
	},
	setTreeColumn: function (value) {
		if (this.treeColumn != value) {
		    this.treeColumn = value;
			this.doUpdate();
		}
	},
	getTreeColumn: function (node) {
		return this.treeColumn;
	},
	setAllowResizeColumn: function (value) {
		this.allowResizeColumn = value;
	},
	getAllowResizeColumn: function (node) {
		return this.allowResizeColumn;
	},
	setAllowMoveColumn: function (value) {
		this.allowMoveColumn = value;
	},
	getAllowMoveColumn: function (node) {
		return this.allowMoveColumn;
	},
	setAllowResize: function (value) {
		this.allowResize = value;

		this._resizeEl.style.display = this.allowResize ? "" : "none";
	},
	getAllowResize: function () {
		return this.allowResize;
	},
	_createCellId: function (node, column) {
		return this.uid + "$" + node._id + "$" + column._id;
	},
	setColumnWidth: function (column, width) {
		column = this.getColumn(column);
		if (!column)
			return;
		if (mini.isNumber(width))
			width += "px";
		column.width = width;

		this.doUpdate();
	},
	getColumnWidth: function (column) {
		var box = this.getColumnBox(column);
		return box ? box.width : 0;
	},
	__OnScroll: function (e) {
		var scrollLeft = this._bodyEl.scrollLeft;
		this._headerEl.firstChild.scrollLeft = scrollLeft;
	},
    /**为了修改treegrid拖拽而新增加的方法 判断是否可以拖拽 潘正锋*/
    _allowDrag:function(e){
        var t = mini.findParent(e.target, "mini-treegrid-treecolumn");
        if(t) return true;
        return false;
    },
	getAttrs: function (el) {

		var attrs = mini.TreeGrid.superclass.getAttrs.call(this, el);

		mini._ParseString(el, attrs,
		[
		"treeColumn", "ondrawcell"
		]
		);

		mini._ParseBool(el, attrs,
		[
		"allowResizeColumn", "allowMoveColumn", "allowResize","showPager"
		]
		);

		var cs = mini.getChildNodes(el);
		for (var i = 0, l = cs.length; i < l; i++) {
			var node = cs[i];
			var property = jQuery(node).attr("property");
			if (!property)
				continue;
			property = property.toLowerCase();
			if (property == "columns") {
				attrs.columns = mini._ParseColumns(node);
			}
		}

		delete attrs.data;

		return attrs;
	}
});

mini.copyTo(mini.TreeGrid.prototype, mini_Column_Prototype);
mini.copyTo(mini.TreeGrid.prototype, mini_CellValidator_Prototype);

mini.regClass(mini.TreeGrid, "treegrid");


/**
 * 文件中定义了 TreeSelect 组件。
 * @fileOverview TreeSelect.js
 * @author 殷文旭
 */

/**
 * @class TreeSelect 是mini UI中的下拉属组件
 * @constructor
 * @extends mini.PopupEdit
 * @requires mini.PopupEdit
 * @requires mini.Tree
 * @requires mini.ToolBar
 * @requires mini.Button
 * @requires mini.TextBox
 * @version 1.0
 */
mini.TreeSelect = function () {
	this.data = [];
	mini.TreeSelect.superclass.constructor.call(this);
}
mini.extend(mini.TreeSelect, mini.PopupEdit,{
    _ajaxOption: {
        async: true,
        type: "get"
    },
    valueFromSelect: false,
	/**
	 * 下拉框内显示的文本
	 * @type String
	 * @default ''
	 */
	text: '',

	/**
	 * 选中的值
	 * @type String
	 * @default ''
	 */
	value: '',
	/**
	 * 是否自动选择父节点。比如选中子节点，将父节点也自动选中。
	 * @type Boolean
	 * @default false
	 */
	autoCheckParent: false,
	/**
	 * 加载后是否展开。比如：true展开所有节点；0展开第一级节点。以此类推。false表示不展开
	 * @type Boolean
	 * @default false
	 */
	expandOnLoad: false,
	/**
	 * 值对应json格式数据中的属性名
	 * @type String
	 * @default id
	 */
	valueField: "id",
	/**
	 * 显示文本对应 json格式数据中的属性名
	 * @type String
	 * @default text
	 */
	textField: "text",
	/**
	 * 组织父子关系中指向子的属性在 json格式数据中的属性名
	 * @type String
	 * @default children
	 */
	nodesField: "children",
	/**
	 * 选中值之间的分隔符
	 * @type String
	 * @default ','
	 */
	delimiter: ',',

	showClose:true,

	/**
	 * 是否支持多选开关
	 * @type Boolean
	 * @default true
	 */
	multiSelect: false,

	/**
	 * 列表组件的数据集
	 * @type Array
	 * @default []
	 */
	data: [],
	/**
	 * 数据的远程加载地址
	 * @type String
	 * @default ""
	 */
	url: "",

	/**
	 * 是否可录入标志
	 * @type Boolean
	 * @default false
	 */
	allowInput: false,

	/**
	 * 是否显示树节点前的图标
	 * @type Boolean
	 * @default false
	 */
	showTreeIcon: false,

	/**
	 * 是否显示树节点之间的引线
	 * @type Boolean
	 * @default true
	 */
	showTreeLines: true,

	/**
	 * url加载的数据是否列表是
	 * @type Boolean
	 * @default false
	 */
	resultAsTree: false,

	/**
	 * 组织父子关系中指向父的属性在 json格式数据中的属性名
	 * @type String
	 * @default 'pid'
	 */
	parentField: "pid",
	/**
	 * 是否联动选择父子节点。比如选中父节点，自动全选子节点。
	 * @type Boolean
	 * @default false
	 */
	checkRecursive: false,

	/**
	 * 当showCheckBox为true时，是否显示父节点CheckBox
	 * @type Boolean
	 * @default false
	 */
	showFolderCheckBox: true,

	/**
	 * 默认弹出层的高度
	 * @type Number
	 * @default 200
	 */
	popupHeight: 200,
	/**
	 * 默认弹出层的宽度
	 * @type Number
	 * @default 200
	 */
	popupWidth: 200,
	/**
	 * 默认弹出层的最大高度
	 * @type Number
	 * @default 250
	 */
	popupMaxHeight: 250,

	/**
	 * 默认弹出层的最大宽度
	 * @type Number
	 * @default 100
	 */
	popupMinWidth: 100,

	/**
	 * 批量设置属性方法，可以用于设置事件，设置属性。不建议开发人员使用。
	 * @param kv {Object} 参数对象
	 * @return {Object} 组件实例本身
	 */
	set: function (kv) {
		if (typeof kv == 'string') {
			return this;
		}

		var value = kv.value,
			text = kv.text,
			url = kv.url,
			data = kv.data,
			code = kv.code;
		delete kv.value;
		delete kv.text;
		delete kv.url;
		delete kv.data;
		delete kv.code;
		
        if(!kv.onvaluechanged)
            this.defaultValueTriggerChange = false;
		mini.TreeSelect.superclass.set.call(this, kv);

		if (!mini.isNull(data)) {
			this.setData(data);
		}else if (!mini.isNull(url)) {
			this.setUrl(url);
		}else if (!mini.isNull(code)) {
			url = mini.globalOpts.codeUrl + code;
			this.setUrl(url);
		}
		if (!mini.isNull(value)) {
			this.setValue(value,this.defaultValueTriggerChange);
		}
		if (!mini.isNull(text)) {
			this.setText(text);
		}
		
		this.tree.cache = this.cache;
		return this;
	},
	/**
	 * 组将样式类
	 * @type String
	 * @default "mini-treeselect"
	 */
	uiCls: "mini-treeselect",
    destroy: function (removeEl) {
        if(this.tree){
            mini.clearEvent(this.tree);
            this.tree.destroy(removeEl);
            this.tree = null;
        }
        this._destroyQueryToolBar();
        delete this.data;
        mini.TreeSelect.superclass.destroy.call(this, removeEl);
    },
	/**
	 * 创建弹出层,方法由父类构造函数调用。
	 */
    uiCls: "mini-treeselect",
    _createPopup: function () {
        mini.TreeSelect.superclass._createPopup.call(this);
        this._createQueryToolBar();

        this.tree = new mini.Tree();
        this.tree.set({
            delimiter: this.delimiter
        });
        this.tree.setShowTreeIcon(true);
        this.tree.setStyle("border:0;width:100%;height:100%;");
        if (this.showQueryToolBar) {
           this.popup.setStyle("overflow:hidden;");
        }
        this.tree.setResultAsTree(this.resultAsTree);
        this.tree.render(this.popup._contentEl);
        this.tree.setCheckRecursive(this.checkRecursive);
        this.tree.setShowFolderCheckBox(this.showFolderCheckBox);

        this.tree.on("nodeclick", this.__OnNodeClick, this);
        this.tree.on("nodecheck", this.__OnCheckedChanged, this);
        this.tree.on("expand", this.__OnTreeExpand, this);
        this.tree.on("collapse", this.__OnTreeCollapse, this);
        this.tree.on("beforenodecheck", this.__OnTreeBeforeNodeCheck, this);
        this.tree.on("beforenodeselect", this.__OnTreeBeforeNodeSelect, this);
        this.tree.allowAnim = false;

        var me = this;
        this.tree.on("beforeload", function (e) {
            me.fire("beforeload", e);
        }, this);
        this.tree.on("load",this.__OnTreeLoad,this);
        this.tree.on("loaderror", function (e) {
            me.fire("loaderror", e);
        }, this);
        this.tree.on("drawnode", function(e){
            me.fire("drawnode", e);
        },this);
    },
    __OnTreeLoad: function (e) {
        if (this.isAsync() && this._value)
            this.setValue(this._value, this.defaultValueTriggerChange);
        delete this._value;
        this.fire("load", e);
    },
	__OnTreeBeforeNodeCheck: function (e) {
		e.tree = e.sender;
		this.fire("beforenodecheck", e);
	},
	__OnTreeBeforeNodeSelect: function (e) {
		e.tree = e.sender;
		this.fire("beforenodeselect", e);
	},
	__OnTreeExpand: function (e) {

	},
	__OnTreeCollapse: function (e) {

	},
    __OnPopupKeyDown: function (e) {
        if (e.keyCode == 27 || e.keyCode == 13) {
            this.hidePopup();
            this.focus();
        }
    },
	/**
	 * 获取被选中的树节点，适合单选情况
	 * @return {Object}
	 */
	getSelectedNode: function () {
	    return this.tree.getSelectedNode();
	},
	getCheckedNodes: function (hasParent) {
	    return this.tree.getCheckedNodes(hasParent)
	},

	/**
	 * 获取选中的所有节点，适合多选情况
	 * @return {Array}
	 */
	getSelectedNodes: function () {
		return this.tree.getSelectedNodes()
	},
	getParentNode: function (node) {
	    return this.tree.getParentNode(node);
	},
	getChildNodes: function (node) {
	    return this.tree.getChildNodes(node);
	},

	/**
	 * 显示弹出层
	 */
	showPopup: function () {
        /**删除下面几行父类中也有的代码 潘正锋 2013-07-05*/
        /**增加返回值判断 解决父类return后子类任然 潘正锋 2013-07-08*/
		if(mini.TreeSelect.superclass.showPopup.call(this)===false)
            return ;
        if(this.showQueryToolBar) {
            this.tree.setHeight(this.popup.getHeight() - 35);
        }
		this.tree.setValue(this.value);
	},
	__OnPopupHide: function (e) {
	    this.__doFocusCls();
        /* in destroy() method the last line will throw error pzf 2014-06 */
        if(this.tree)
		   this.tree.clearFilter();
		this.fire("hidepopup");
	},
	/**
	 * 获取指定下标的树节点数据
	 * @param item {Number|Object}
	 */
	getItem: function (item) {
		return typeof item == "object" ? item : this.data[item];
	},
	/**
	 * 获取指定树节点数据的下标
	 * @param item {Object}
	 */
	indexOf: function (item) {
		return this.data.indexOf(item);
	},
	/**
	 * 获取指定下标的树节点数据，与getItem类似。
	 * @param item {Number}
	 */
	getAt: function (index) {
		return this.data[index];
	},
	loadList: function (list, idField, parentField) {
	    this.tree.loadList(list, idField, parentField);
	    this.data = this.tree.getData();
	},
	getList: function () {
	    return this.tree.getList();
	},

	/**
	 * 为下拉树更新数据
	 * @param data {Array|String} 数据，或者是Url地址
	 */
	load: function (data) {
        if (this.isAsync() && this._value == undefined)
            this._value = this.value;
		this.tree.load(data);
	},
	/**
	 * 为下树更新数据
	 * @param data {Array} 数据
	 */
	setData: function (data) {
        if (typeof data == "string") {
            data = this._eval(data);
        }
        if (!mini.isArray(data)) data = [];
        data = mini.clone(data);
		this.tree.setData(data);
		this.data = this.tree.getData();
	},
    _eval: function (_) {
        return eval('(' + _ + ')');
    },
	/**
	 * 获取下拉树的数据
	 * @return {Array}
	 */
	getData: function () {
		return this.data;
	},
	/**
	 * 设置加载数据的url地址
	 * @param url {String}
	 */
	setUrl: function (url) {
		this.getPopup();
		this.tree.cache = this.cache;
		this.tree.setUrl(this.parseUrl(url));
		this.url = this.tree.url;
        if (this.isAsync() && this._value == undefined)
            this._value = this.value;

	},
	/**
	 * 获取加载数据的url地址
	 * @return {String}
	 */
	getUrl: function () {
		return this.url;
	},
	/**
	 * 设置 textField 属性的值
	 * @param value {String}
	 */
	setTextField: function (value) {
		if (this.tree)
			this.tree.setTextField(value);
		this.textField = value;
	},
	/**
	 * 获取  textField 属性的值
	 * @return {String}
	 */
	getTextField: function () {
		return this.textField;
	},
	/**
	 * 设置 nodesField 属性的值
	 * @param value {String}
	 */
	setNodesField: function (value) {
		if (this.tree)
			this.tree.setNodesField(value);
		this.nodesField = value;
	},
	/**
	 * 获取  nodesField 属性的值
	 * @return {String}
	 */
	getNodesField: function () {
		return this.nodesField;
	},
	/**
	 * 设置 value 属性值
	 * @param value {String}
	 */
    isAsync:function(){
        return this._ajaxOption.async == true;
    },
	setValue: function (value,valid) {
        if(this.isAsync())
           this._value = value;
        var v = this.getValue();
        var vts = this.tree.getValueAndText(value);
        if (vts[1] == "" && !this.valueFromSelect) {
            vts[0] = value;
            vts[1] = value;
        }
		this.value = vts[0];

		this._valueEl.value = vts[0];

		this.text = this._textEl.value = vts[1];

		this._doEmpty();
		this.tree.setValue(this.value);
        if (!mini.isEquals(this.value, v)) {
            /* when call the setValue("") method,the valid event will be trigger,cause the error icon show pzf 2014-04 */
            if(valid === undefined)
                valid = true;
            if(valid)
            this._OnValueChanged();
        }
	},
	/**
	 * 设置 multiSelect 属性的值
	 * @param value {Boolean}
	 */
	setMultiSelect: function (value) {
		if (this.multiSelect != value) {
			this.multiSelect = value;
			this.tree.setShowCheckBox(value);
			this.tree.setAllowSelect(!value);
			this.tree.setEnableHotTrack(!value);
		}
	},
	/**
	 * 获取 multiSelect 属性的值
	 * @return {Boolean}
	 */
	getMultiSelect: function () {
		return this.multiSelect;
	},
    __OnInputTextChanged: function () {

        var v = this._textEl.value;
        var value = this.getValue();
        /* the setValue method is already invoke in __OnNodeClick,这里只需要设置非选择的数据(allowinput = true)pzf 2014-07*/
        var node = this.tree.getSelectedNode();
        if(!node)
           this.setValue(v);

    },
    __OnNodeClick: function (e) {
        if (this.multiSelect)
            return;
        var node = this.tree.getSelectedNode();
        var v = this.tree.getItemValue(node);

        var value = this.getValue();
        this.setValue(v);
        /*if (value != this.getValue()) {
         this._OnValueChanged();
         }*/

        this.hidePopup();
        this.focus();

        this.fire("nodeclick", { node: e.node });

    },
	__OnCheckedChanged: function (e) {

		if (!this.multiSelect)
			return;
		var v = this.tree.getValue();

		var value = this.getValue();
		this.setValue(v);
		/*if (value != this.getValue()) {
			this._OnValueChanged();
		}*/
        this.fire("nodecheck", e);


	},
	__OnInputKeyDown: function (e) {

		this.fire("keydown", {
			htmlEvent: e
		});
		if (e.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
			return false;
		}

		if (e.keyCode == 9) {
			this.hidePopup();
			return;
		}
		if (this.isReadOnly()) return;

		switch (e.keyCode) {
			case 27:
				if (this.isShowPopup()) {
					e.stopPropagation();
				}

				this.hidePopup();
				break;
			case 13:
			    var me = this;
                this.hidePopup();
			    setTimeout(function () {
			        me.fire("enter", e);
			    }, 10);
				break;
			case 37:
				break;
			case 38:
				e.preventDefault();
				break;
			case 39:
				break;
			case 40:
				e.preventDefault();
				this.showPopup();
				break;
			default:
                if(this.isReadOnly() || this.allowInput == false){
                    break;
                }
                /*解决内容变了，但是value还是前一次的选中项的value pzf 2014-07*/
                if( this.allowInput){
                    this.tree._selectedNode = null;
                    this.value = ""; //必须在执行它，不然_doQuery--selectNode又会使_selectedNode有值的
                }
				var me = this;
				setTimeout( function () {
					me._doQuery();
				}, 10);
				break;
		}
	},
	/**
	 * 过滤功能实现
	 */
	_doQuery: function () {
		var field = this.textField;
		var value = this._textEl.value.toLowerCase();
		this.tree.filter( function (node) {
			var text = String(node[field] ? node[field] : "").toLowerCase();
			if (text.indexOf(value) != -1) {
				return true;
			} else
				return false;
		});
		this.tree.expandAll();
		this.showPopup();//注意，这里面有setValue方法
	},
	/**
	 *  设置 checkRecursive 属性的值
	 * @param value {Boolean}
	 */
	setCheckRecursive: function (value) {
		this.checkRecursive = value;
		if (this.tree)
			this.tree.setCheckRecursive(value);
	},
	/**
	 * 获取 checkRecursive 属性的值
	 * @return {Boolean}
	 */
	getCheckRecursive: function () {
		return this.checkRecursive;
	},
	/**
	 * 设置 resultAsTree 属性的值
	 * @param value {Boolean}
	 */
	setResultAsTree: function (value) {
		this.resultAsTree = value;
		if (this.tree)
			this.tree.setResultAsTree(value);
	},
	/**
	 * 获取 resultAsTree 属性的值
	 * @return {Boolean}
	 */
	getResultAsTree: function () {
		return this.resultAsTree;
	},
	/**
	 * 设置 parentField 属性的值
	 * @param value {String}
	 */
	setParentField: function (value) {
		this.parentField = value;
		if (this.tree)
			this.tree.setParentField(value);
	},
	/**
	 * 获取 parentField 属性的值
	 * @return {String}
	 */
	getParentField: function () {
		return this.parentField;
	},
	/**
	 * 设置 valueField 属性的值
	 * @param valueField {String}
	 */
	setValueField: function (valueField) {
		if (this.tree)
			this.tree.setIdField(valueField);
		this.valueField = valueField;
	},
	/**
	 * 获取 valueField 属性的值
	 * @return {String}
	 */
	getValueField: function () {
		return this.valueField;
	},
	/**
	 * 设置 showTreeIcon 属性的值
	 * @param value {Boolean}
	 */
	setShowTreeIcon: function (value) {
		this.showTreeIcon = value;
		if (this.tree)
			this.tree.setShowTreeIcon(value);
	},
	/**
	 * 获取 showTreeIcon 属性的值
	 * @return {Boolean}
	 */
	getShowTreeIcon: function () {
		return this.showTreeIcon;
	},
	/**
	 * 设置 showTreeLines 属性的值
	 * @param value {Boolean}
	 */
	setShowTreeLines: function (value) {
		this.showTreeLines = value;
		if (this.tree)
			this.tree.setShowTreeLines(value);
	},
	/**
	 * 获取 showTreeLines 属性的值
	 * @return {Boolean}
	 */
	getShowTreeLines: function () {
		return this.showTreeLines;
	},
	/**
	 * 设置 showFolderCheckBox 属性的值
	 * @param value {Boolean}
	 */
	setShowFolderCheckBox: function (value) {

		this.showFolderCheckBox = value;
		if (this.tree)
			this.tree.setShowFolderCheckBox(value);
	},
	/**
	 * 获取 showFolderCheckBox 属性的值
	 * @return {Boolean}
	 */
	getShowFolderCheckBox: function () {
		return this.showFolderCheckBox;
	},
	/**
	 * 设置 autoCheckParent 属性的值
	 * @param value {Boolean}
	 */
	setAutoCheckParent: function (value) {

		this.autoCheckParent = value;
		if (this.tree)
			this.tree.setAutoCheckParent(value);
	},
	/**
	 * 获取 autoCheckParent 属性的值
	 * @return {Boolean}
	 */
	getAutoCheckParent: function () {
		return this.autoCheckParent;
	},
	/**
	 * 设置 expandOnLoad 属性的值
	 * @param value {Boolean|Number}
	 */
	setExpandOnLoad: function (value) {

		this.expandOnLoad = value;
		if (this.tree)
			this.tree.setExpandOnLoad(value);
	},
	/**
	 * 获取 expandOnLoad 属性的值
	 * @return {Number|Boolean}
	 */
	getExpandOnLoad: function () {
		return this.expandOnLoad;
	},
	setValueFromSelect: function (value) {
	    this.valueFromSelect = value;
	},
	getValueFromSelect: function () {
	    return this.valueFromSelect;
	},
	setDataField: function (value) {
	    if (this.tree) this.tree.setDataField(value);
	    this.dataField = value;
	},
    setQueryField: function (value) {
        this.tree.queryfield = value;
    },

	/**
	 * 用于从HTML标签中提取配置参数的方法。在此方法中有对 url， data， textField， valueField，
	 * nodesField， parentField， onbeforenodecheck， onbeforenodeselect， expandOnLoad，
	 *  resultAsTree， multiSelect， checkRecursive，showTreeIcon，showTreeLines，
	 * showFolderCheckBox，autoCheckParent，showQueryToolBar等属性做提取。
	 * @param el {Object} DOM元素
	 * @returns {Object} JSON对象
	 */
	getAttrs: function (el) {
		var attrs = mini.TreeSelect.superclass.getAttrs.call(this, el);


		mini._ParseString(el, attrs,
		["url", "data", "textField", "valueField", "nodesField", "parentField", "onnodecheck","onbeforenodecheck", "onbeforenodeselect",
		"expandOnLoad", "onnodeclick", "onbeforeload", "onload", "onloaderror","ondrawnode","queryField"
		]
		);
		mini._ParseBool(el, attrs,
		["multiSelect", "resultAsTree", "checkRecursive", "showTreeIcon", "showTreeLines", "showFolderCheckBox",
		"autoCheckParent", "showQueryToolBar", "valueFromSelect"
		]
		);

		if (attrs.expandOnLoad) {
			var level = parseInt(attrs.expandOnLoad);
			if (mini.isNumber(level)) {
				attrs.expandOnLoad = level;
			} else {
				attrs.expandOnLoad = attrs.expandOnLoad == "true" ? true : false;
			}
		}

		return attrs;
	}
});
mini.regClass(mini.TreeSelect, 'TreeSelect');

mini.Window = function () {

    mini.Window.superclass.constructor.call(this);

    this.addCls("mini-window");

    this.setVisible(false);
    this.setAllowDrag(this.allowDrag);
    this.setAllowResize(this.allowResize);
}

mini.extend(mini.Window, mini.Panel, {
    x: 0,
    y: 0,
    state: "restore",

    _dragCls: "mini-window-drag",
    _resizeCls: "mini-window-resize",
    allowDrag: true,

    showCloseButton: true,
    showMaxButton: false,
    showMinButton: false,
    showCollapseButton: false,
    /*在显示时，增加动画效果的配置 可配参数为：none|fast|slow 潘正锋 2014-02-09*/
    effect : "none",

    showModal: true,

    minWidth: 150,
    minHeight: 80,
    maxWidth: 2000,
    maxHeight: 2000,

    uiCls: "mini-window",

    _create: function () {
        mini.Window.superclass._create.call(this);


    },
    _initButtons: function () {
        this.buttons = [];

        var close = this.createButton({ name: "close", cls: "mini-tools-close", visible: this.showCloseButton });
        this.buttons.push(close);

        var max = this.createButton({ name: "max", cls: "mini-tools-max", visible: this.showMaxButton });
        this.buttons.push(max);

        var min = this.createButton({ name: "min", cls: "mini-tools-min", visible: this.showMinButton });
        this.buttons.push(min);

        var collapse = this.createButton({ name: "collapse", cls: "mini-tools-collapse", visible: this.showCollapseButton });
        this.buttons.push(collapse);
    },
    _initEvents: function () {
        mini.Window.superclass._initEvents.call(this);

        mini._BindEvents(function () {

            mini.on(this.el, "mouseover", this.__OnMouseOver, this);
            mini.on(window, "resize", this.__OnWindowResize, this);

            mini.on(this.el, "mousedown", this.__OnWindowMouseDown, this);
        }, this);


    },
    doLayout: function () {
        if (!this.canLayout()) return;




        if (this.state == "max") {
            var vbox = this.getParentBox();
            this.el.style.left = "0px";
            this.el.style.top = "0px";
            mini.setSize(this.el, vbox.width, vbox.height);
        }

        mini.Window.superclass.doLayout.call(this);


        if (this.allowDrag) {
            mini.addClass(this.el, this._dragCls);
        }
        if (this.state == "max") {
            this._resizeGridEl.style.display = "none";
            mini.removeClass(this.el, this._dragCls);
        }


        this._doModal();
    },
    _doModal: function () {

        var show = this.showModal && this.isDisplay() && this.visible;
        if (!this._modalEl && this.showModal == false) return;


        if (!this._modalEl) {
            /**增加mini-fixed 解决遮罩层在页面大小改变后 没有改变的问题  潘正锋 2013-07-08*/
            this._modalEl = mini.append(document.body, '<div class="mini-modal mini-fixed" style="display:none"></div>');

        }



        function resizeModal() {
            mini.repaint(document.body);
            var dd = document.documentElement;
            var scrollWidth = parseInt(Math.max(document.body.scrollWidth, dd ? dd.scrollWidth : 0));
            var scrollHeight = parseInt(Math.max(document.body.scrollHeight, dd ? dd.scrollHeight : 0));

            var vbox = mini.getViewportBox();
            var height = vbox.height;
            if (height < scrollHeight) height = scrollHeight;

            var width = vbox.width;
            if (width < scrollWidth) width = scrollWidth;

            this._modalEl.style.display = show ? "block" : "none";

            this._modalEl.style.height = height + "px";
            this._modalEl.style.width = width + "px";
            this._modalEl.style.zIndex = mini.getStyle(this.el, 'zIndex') - 1;
        }
        if (show) {
            var me = this;
              /**修改遮罩层在页面大小变化后产生空白 潘正锋 2013-07-08*/
                if (me._modalEl) {
                    me._modalEl.style.display = "block";
                    me._modalEl.style.zIndex = mini.getStyle(me.el, 'zIndex') - 1;
                }
        } else {
            this._modalEl.style.display = "none";
        }
    },
    getParentBox: function () {
        var vbox = mini.getViewportBox();
        var containerEl = this._containerEl || document.body;
        if (containerEl != document.body) {
            vbox = mini.getBox(containerEl);
        }
        return vbox;
    },

    setShowModal: function (value) {

        this.showModal = value;
    },
    getShowModal: function () {
        return this.showModal;
    },
    setMinWidth: function (value) {
        if (isNaN(value)) return;
        this.minWidth = value;
    },
    getMinWidth: function () {
        return this.minWidth;
    },
    setMinHeight: function (value) {
        if (isNaN(value)) return;
        this.minHeight = value;
    },
    getMinHeight: function () {
        return this.minHeight;
    },
    setMaxWidth: function (value) {
        if (isNaN(value)) return;
        this.maxWidth = value;
    },
    getMaxWidth: function () {
        return this.maxWidth;
    },
    setMaxHeight: function (value) {
        if (isNaN(value)) return;
        this.maxHeight = value;
    },
    getMaxHeight: function () {
        return this.maxHeight;
    },
    setAllowDrag: function (value) {
        this.allowDrag = value;
        mini.removeClass(this.el, this._dragCls);
        if (value) {
            mini.addClass(this.el, this._dragCls);
        }
    },
    getAllowDrag: function () {
        return this.allowDrag;
    },









    setShowMaxButton: function (value) {
        this.showMaxButton = value;
        var button = this.getButton("max");
        button.visible = value;
        this._doTools();
    },
    getShowMaxButton: function () {
        return this.showMaxButton;
    },
    setShowMinButton: function (value) {
        this.showMinButton = value;
        var button = this.getButton("min");
        button.visible = value;
        this._doTools();
    },
    getShowMinButton: function () {
        return this.showMinButton;
    },

    max: function () {
        this.state = "max";
        this.show();

        var button = this.getButton("max");
        if (button) {
            button.cls = "mini-tools-restore";
            this._doTools();
        }
    },
    restore: function () {
        this.state = "restore";
        this.show(this.x, this.y);

        var button = this.getButton("max");
        if (button) {
            button.cls = "mini-tools-max";
            this._doTools();
        }
    },
    containerEl: null,
    showAtPos: function (x, y, options) {
        this.show(x, y, options);
    },
    show: function (x, y, options) {
        this._allowLayout = false;

        var containerEl = this._containerEl || document.body;
        if (!this.isRender() || this.el.parentNode != containerEl) {
            this.render(containerEl);
        }

        this.el.style.zIndex = mini.getMaxZIndex();

        this._doShow(x, y);

        this._allowLayout = true;
        /*在显示时，增加动画效果,为了不影响其他组件，只在window组件内部改造 潘正锋 2014-02-09*/
        if (this.effect == "none" || (this.effect != "fast" && this.effect != "slow"))
           this.setVisible(true);
        else {
            this.visible = true;
            var sf = this;
            sf.doLayout();
            this.el.style.display = "none";
            $(this.el).fadeTo(this.effect,1,function(){
                if(isIE)
                   this.style.removeAttribute('filter');
            });

        }

      

        try {
            this.el.focus();
        } catch (e) { }
    },
    hide: function () {
        /* 添加beforehide事件 pzf 2014-08 */
        this.fire("beforehide");
        this.state = "restore";
        delete this._width;
        delete this._height;
        var sf = this;
        /*在关闭时，增加动画效果 潘正锋 2014-02-09*/
        if (this.effect == "none" || (this.effect != "fast" && this.effect != "slow"))
          this.setVisible(false);
        else{
            $(this.el).fadeTo(this.effect,0,function(){
                if(isIE)
                   this.style.removeAttribute('filter');
                sf.setVisible(false);

            });
        }
        this._doModal();
    },
    getWidth: function () {
        this._headerEl.style.width = "50px";
        var width = mini.getWidth(this.el);
        this._headerEl.style.width = "auto";
        return width;
    },
    getBox: function () {
        this._headerEl.style.width = "50px";
        this.el.style.display = "";
        var width = mini.getWidth(this.el);
        this._headerEl.style.width = "auto";
        var box = mini.getBox(this.el);
        box.width = width;
        box.right = box.x + width;
        return box;
    },
    _measureSize: function () {

        var box = this.getBox();


        if (box.width > this.maxWidth) {
            mini.setWidth(this.el, this.maxWidth);
            box = this.getBox()
        }
        if (box.height > this.maxHeight) {
            mini.setHeight(this.el, this.maxHeight);
            box = this.getBox()
        }
        if (box.width < this.minWidth) {
            mini.setWidth(this.el, this.minWidth);
            box = this.getBox()
        }
        if (box.height < this.minHeight) {
            mini.setHeight(this.el, this.minHeight);
            box = this.getBox()
        }
    },
    setWidth: function (value) {
        this.state = 'restore';
        /* setWidth fail  pzf 2014-08 */
        delete this._width;
        mini.Window.superclass.setWidth.call(this, value);

    },
    setHeight: function (value) {
        this.state = 'restore';
        /* setHeight fail  pzf 2014-08 */
        delete this._height;
        mini.Window.superclass.setHeight.call(this, value);
    },
    _doShow: function (x, y) {
        var vbox = this.getParentBox();

        if (this.state == "max") {
            if (!this._width) {
                var box = this.getBox();
                this._width = box.width;
                this._height = box.height;

                this.x = box.x;
                this.y = box.y;
            }
        } else {
            if (mini.isNull(x)) x = "center";
            if (mini.isNull(y)) y = "middle";

            this.el.style.position = "absolute";
            this.el.style.left = "-2000px";
            this.el.style.top = "-2000px";
            this.el.style.display = "";
            
            if (this._width) {
                this.setWidth(this._width);
                this.setHeight(this._height);
            } else {
                this.setWidth(this.width);
                this.setHeight(this.height);
            }
            this._measureSize();

            var box = this.getBox();

            if (x == "left") x = 0;
            if (x == 'center') x = vbox.width / 2 - box.width / 2;
            if (x == "right") x = vbox.width - box.width;

            if (y == "top") y = 0;
            if (y == "middle") y = vbox.y + vbox.height / 2 - box.height / 2;
            if (y == "bottom") y = vbox.height - box.height;

            if (x + box.width > vbox.right) x = vbox.right - box.width;
            if (y + box.height > vbox.bottom) y = vbox.bottom - box.height;
            if (x < 0) x = 0;
            if (y < 0) y = 0;

            this.el.style.display = "";

            mini.setX(this.el, x);
            mini.setY(this.el, y);

            this.el.style.left = x + "px";
            this.el.style.top = y + "px";
            this.x = box.x;
            this.y = box.y;

        }
        this.doLayout();
    },







    _OnButtonClick: function (button, htmlEvent) {
        var e = mini.Window.superclass._OnButtonClick.call(this, button, htmlEvent);
        if (e.cancel == true) return e;

        if (e.name == "max") {
            if (this.state == "max") {
                this.restore();
            } else {
                this.max();
            }
        }
        return e;
    },
    __OnWindowResize: function (e) {
        if (this.state == "max") {
            this.doLayout();


        }
        /**修改遮罩层在页面大小变化后产生空白 潘正锋 2013-07-08*/
    },
    __OnWindowMouseDown: function (e) {
        var sf = this;

        if (this.state != "max" && this.allowDrag && mini.isAncestor(this._headerEl, e.target) && !mini.findParent(e.target, "mini-tools")) {
            var sf = this;
            if (this.el) {
	            this.el.style.zIndex = mini.getMaxZIndex();
	        }

            var box = this.getBox();
            var drag = new mini.Drag({
                capture: true,
                onStart: function () {
                    sf._maskProxy = mini.append(document.body, '<div class="mini-resizer-mask"></div>');
                    sf._dragProxy = mini.append(document.body, '<div class="mini-drag-proxy"></div>');

                    sf.el.style.display = "none";


                },
                onMove: function (drag) {


                    var x = drag.now[0] - drag.init[0], y = drag.now[1] - drag.init[1];

                    x = box.x + x;
                    y = box.y + y;

                    var vbox = sf.getParentBox();

                    var right = x + box.width;
                    var bottom = y + box.height;
                    if (right > vbox.width) x = vbox.width - box.width;
                    /**解决可以无限往下拖动的问题  潘正锋 2013-07*/
                    if (bottom > vbox.height) y = vbox.height - box.height;

                    if (x < 0) x = 0;
                    if (y < 0) y = 0;





                    sf.x = x;
                    sf.y = y;


                    var dbox = { x: x, y: y, width: box.width, height: box.height };

                    mini.setBox(sf._dragProxy, dbox);
                    this.moved = true;
                },
                onStop: function () {

                    sf.el.style.display = "block";

                    if (this.moved) {
                        var box = mini.getBox(sf._dragProxy);


                        mini.setXY(sf.el, box.x, box.y);
                    }

                    jQuery(sf._maskProxy).remove();
                    sf._maskProxy = null;

                    jQuery(sf._dragProxy).remove();
                    sf._dragProxy = null;


                }
            });
            drag.start(e);
        }
    },
    destroy: function (removeEl) {

        mini.un(window, "resize", this.__OnWindowResize, this);
        delete this.buttons;
        if (this._modalEl) {
            jQuery(this._modalEl).remove();
            this._modalEl = null;
        }
        if (this.shadowEl) {
            jQuery(this.shadowEl).remove();
            this.shadowEl = null;
        }
        mini.Window.superclass.destroy.call(this, removeEl);
    },
    getAttrs: function (el) {
        var attrs = mini.Window.superclass.getAttrs.call(this, el);
        /*增加effect的配置 潘正锋 2014-02-09*/
        /*增加onbeforehide 潘正锋 2014-08-09*/
        mini._ParseString(el, attrs,
            ["modalStyle","effect","onbeforehide"
            ]
        );
        mini._ParseBool(el, attrs,
            ["showModal", "showShadow", "allowDrag", "allowResize",
            "showMaxButton", "showMinButton"
            ]
        );
        mini._ParseInt(el, attrs,
            ["minWidth", "minHeight", "maxWidth", "maxHeight"
            ]
        );

        return attrs;
    },

    showAtEl: function (atEl, options) {
        atEl = mini.byId(atEl);
        if (!atEl) return;
        if (!this.isRender() || this.el.parentNode != document.body) {
            this.render(document.body);
        }

        var c = {
            xAlign: this.xAlign,
            yAlign: this.yAlign,
            xOffset: 0,
            yOffset: 0,
            popupCls: this.popupCls
        };
        mini.copyTo(c, options);



        this._popupEl = atEl;

        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";

        this.doLayout();
        this._measureSize();

        var vbox = mini.getViewportBox();
        var box = this.getBox()
        var pbox = mini.getBox(atEl);
        var xy = c.xy;
        var h = c.xAlign, v = c.yAlign;

        var x = vbox.width / 2 - box.width / 2, y = 0;
        if (xy) {
            x = xy[0];
            y = xy[1];
        }

        switch (c.xAlign) {
            case "outleft":
                x = pbox.x - box.width;
                break;
            case "left":
                x = pbox.x;
                break;
            case "center":
                x = pbox.x + pbox.width / 2 - box.width / 2;
                break;
            case "right":
                x = pbox.right - box.width;
                break;
            case "outright":
                x = pbox.right;
                break;
            default:

                break;
        }

        switch (c.yAlign) {
            case "above":
                y = pbox.y - box.height;
                break;
            case "top":
                y = pbox.y;
                break;
            case "middle":
                y = pbox.y + pbox.height / 2 - box.height / 2;
                break;
            case "bottom":
                y = pbox.bottom - box.height;
                break;
            case "below":
                y = pbox.bottom;
                break;
            default:

                break;
        }
        x = parseInt(x);
        y = parseInt(y);


        if (c.outYAlign || c.outXAlign) {
            if (c.outYAlign == "above") {
                if (y + box.height > vbox.bottom) {
                    var top = pbox.y - vbox.y;
                    var bottom = vbox.bottom - pbox.bottom;
                    if (top > bottom) {
                        y = pbox.y - box.height;
                    }
                }

            }
            if (c.outXAlign == "outleft") {
                if (x + box.width > vbox.right) {
                    var left = pbox.x - vbox.x;
                    var right = vbox.right - pbox.right;
                    if (left > right) {
                        x = pbox.x - box.width;
                    }
                }
            }
            if (c.outXAlign == "right") {
                if (x + box.width > vbox.right) {
                    x = pbox.right - box.width;




                }
            }
            this._Show(x, y);
        } else {
            this.showAtPos(x + c.xOffset, y + c.yOffset);
        }
    }
});

mini.regClass(mini.Window, "window");




/**
 * @class mini.OutlookTree 是mini UI中的树形菜单组件，构造函数中调用了mini.OutlookBar
 * @constructor
 * @extends mini.OutlookBar
 */
mini.OutlookTree = function () {
	mini.OutlookTree.superclass.constructor.call(this);

	this.data = [];
}
mini.extend(mini.OutlookTree, mini.OutlookBar,{
	/**
	 * 数据地址
	 */
	url: "",
	/**
	 * 文本字段名
	 */
	textField: "text",
	/**
	 * 图标字段名
	 */
	iconField: "iconCls",
	/**
	 *  url字段名
	 */
	urlField: "url",
	/**
	 * url数据是否列表
	 */
	resultAsTree: false,
	/**
	 * 子节点字段名
	 */
	nodesField: "children",
	/**
	 * 节点字段名
	 */
	idField: "id",
	/**
	 * 父节点字段名
	 */
	parentField: "pid",
	/**
	 * 默认样式
	 */
	style: "width:100%;height:100%;",

	/**
	 * 设置配置屬性
	 */
	set: function (kv) {
		if (typeof kv == 'string') {
			return this;
		}

		var url = kv.url;
		delete kv.url;
		var activeIndex = kv.activeIndex;
		delete kv.activeIndex;

		mini.OutlookTree.superclass.set.call(this, kv);

		if (url) {
			this.setUrl(url);
		}
		if (mini.isNumber(activeIndex)) {
			this.setActiveIndex(activeIndex);
		}
		return this;
	},
	/**
	 * 控件标签class名称
	 */
	uiCls: "mini-outlooktree",
	destroy: function (removeEl) {
		if (this._trees) {
			var cs = this._trees.clone();
			for (var i = 0, l = cs.length; i < l; i++) {
				var p = cs[i];
				p.destroy();
			}
			this._trees.length = 0;
		}

		mini.OutlookTree.superclass.destroy.call(this, removeEl);
	},
	_doParseFields: function (list) {
	    for (var i = 0, l = list.length; i < l; i++) {
	        var o = list[i];
	        o.text = o[this.textField];
	        o.url = o[this.urlField];
	        o.iconCls = o[this.iconField];
	    }
	},

	_doLoad: function () {
		var items = [];
		try {
			items = mini.getData(this.url);
		} catch (ex) {

			if (mini_debugger == true) {
				alert("outlooktree json is error.");
			}
		}
		if (this.dataField) {
		    items = mini._getMap(this.dataField, items);
		}

		if (!items)
			items = [];

		if (this.resultAsTree == false) {
			items = mini.arrayToTree(items, this.nodesField, this.idField, this.parentField)
		}

		var list = mini.treeToArray(items, this.nodesField, this.idField, this.parentField)
		this._doParseFields(list);


		this.createNavBarTree(items);
		this.fire("load");
	},
	loadList: function (list, idField, parentField) {
		idField = idField || this.idField;
		parentField = parentField || this.parentField;
		this._doParseFields(list);

		var tree = mini.arrayToTree(list, this.nodesField, idField, parentField);
		this.load(tree);
	},
    /**
	 * 加载树形数据
	 */
	load: function (value) {
        /* 不传参数可以实现reload功能 潘正锋 */
        if(typeof value == "undefined"){
            this.setUrl(this.url);
        }
	    else if (typeof value == "string") {
	        this.setUrl(value);
	    } else {
	        var items;
	        if (this.resultAsTree == false) {
	            items = mini.arrayToTree(value, this.nodesField, this.idField, this.parentField)
	        }
	        var list = mini.treeToArray(items, this.nodesField, this.idField, this.parentField)
	        this._doParseFields(list);
	        this.createNavBarTree(items);
	    }
	},
	setData: function (value) {
	    this.load(value);
	},

	/**
	 * 设置数据地址
	 */
	setUrl: function (value) {
		this.url = this.parseUrl(value);
		this._doLoad();
	},
	/**
	 * 获取数据地址
	 */
	getUrl: function () {
		return this.url;
	},
	/**
	 * 设置文本字段名
	 */
	setTextField: function (value) {
		this.textField = value;
	},
	/**
	 * 获取文本字段名
	 */
	getTextField: function () {
		return this.textField;
	},
	/**
	 * 设置图标字段名
	 */
	setIconField: function (value) {
		this.iconField = value;
	},
	/**
	 * 获取图标字段名
	 */
	getIconField: function () {
		return this.iconField;
	},
	/**
	 * 设置url字段名
	 */
	setUrlField: function (value) {
		this.urlField = value;
	},
	/**
	 * 获取url字段名
	 */
	getUrlField: function () {
		return this.urlField;
	},
	/**
	 * 设置是否树形数据
	 */
	setResultAsTree: function (value) {
		this.resultAsTree = value;
	},
	/**
	 * 获取是否树形数据
	 */
	getResultAsTree: function () {
		return this.resultAsTree;
	},
	/**
	 * 设置节点字段名
	 */
	setNodesField: function (value) {
		this.nodesField = value;
	},
	/**
	 * 获取子节点字段名
	 */
	getNodesField: function () {
		return this.nodesField;
	},
	/**
	 * 设置节点字段名
	 */
	setIdField: function (value) {
		this.idField = value;
	},
	/**
	 * 获取节点字段名
	 */
	getIdField: function () {
		return this.idField;
	},
	/**
	 * 设置父节点字段名
	 */
	setParentField: function (value) {
		this.parentField = value;
	},
	/**
	 * 获取父节点字段名
	 */
	getParentField: function () {
		return this.parentField;
	},
	_selected: null,
	/**
	 * 获取选中状态
	 */
	getSelected: function () {
		return this._selected;
	},
	/**
	 * 选中节点
	 * @param node 节点对象
	 */
	selectNode: function (node) {
		node = this.getNode(node);
		if (!node)
			return;
		var tree = this._getOwnerTree(node);
		tree.selectNode(node);
	},
	/**
	 * 展开节点
	 * @param node 节点对象
	 */
	expandPath: function (node) {
		node = this.getNode(node);
		if (!node)
			return;
		var tree = this._getOwnerTree(node);
		tree.expandPath(node);
		this.expandGroup(tree._ownerGroup);
	},
	findNodes: function (fn, scope) {
	    var nodes = [];
	    scope = scope || this;
	    for (var i = 0, l = this._trees.length; i < l; i++) {
	        var tree = this._trees[i];
	        var nds = tree.findNodes(fn, scope);
	        nodes.addRange(nds);
	    }
	    return nodes;
	},

	/**
	 * 获取节点对象
	 */
	getNode: function (node) {
		for (var i = 0, l = this._trees.length; i < l; i++) {
			var tree = this._trees[i];
			var n = tree.getNode(node);
			if (n)
				return n;
		}
		return null;
	},
	getList: function () {
	    var list = [];
	    for (var i = 0, l = this._trees.length; i < l; i++) {
	        var tree = this._trees[i];
	        var nodes = tree.getList();
	        list.addRange(nodes);
	    }
	    return list;
	},

	_getOwnerTree: function (node) {
		if (!node)
			return;
		for (var i = 0, l = this._trees.length; i < l; i++) {
			var tree = this._trees[i];
			if (tree._idNodes[node._id])
				return tree;
		}
	},
	/**
	 * 加载时展开节点
	 * @default false
	 */
	expandOnLoad: false,
	/**
	 * 设置是否加载时展开节点
	 */
	setExpandOnLoad: function (value) {
		this.expandOnLoad = value;
	},
	/**
	 * 获取是否加载时展开
	 */
	getExpandOnLoad: function () {
		return this.expandOnLoad;
	},
	getAttrs: function (el) {
		var attrs = mini.OutlookTree.superclass.getAttrs.call(this, el);

		attrs.text = el.innerHTML;
		/**
		 * onnodeclick 事件当树节点被点击时触发<br/>
		 * 支持标签配置。
		 * @name onnodeclick
		 * @event
		 * @memberOf mini.OutlookTree.prototype
		 */
		/**
		 * onnodeselect 事件当树节点被选中时触发<br/>
		 * 支持标签配置。
		 * @name onnodeselect
		 * @event
		 * @memberOf mini.OutlookTree.prototype
		 */
		/**
		 * onnodemousedown 事件当树节点mousedown时触发<br/>
		 * 支持标签配置。
		 * @name onnodemousedown
		 * @event
		 * @memberOf mini.OutlookTree.prototype
		 */
		mini._ParseString(el, attrs,
		["url", "textField", "urlField", "idField", "parentField", "nodesField", "iconField",
		"onnodeclick", "onnodeselect", "onnodemousedown",
		"expandOnLoad"
		]
		);
		mini._ParseBool(el, attrs,
		["resultAsTree"]
		);

		if (attrs.expandOnLoad) {
			var level = parseInt(attrs.expandOnLoad);
			if (mini.isNumber(level)) {
				attrs.expandOnLoad = level;
			} else {
				attrs.expandOnLoad = attrs.expandOnLoad == "true" ? true : false;
			}
		}

		return attrs;
	},
	autoCollapse: true,
	activeIndex: 0,
	createNavBarTree: function (tree) {
		if (!mini.isArray(tree))
			tree = [];
		this.data = tree;

		var groups = [];
		for (var i = 0, l = this.data.length; i < l; i++) {
			var o = this.data[i];
			var group = {};
			group.title = o.text;
			group.iconCls = o.iconCls;
			groups.push(group);

			group._children = o[this.nodesField];
		}

		this.setGroups(groups);
        /**解决expandOnLoad=false失效的问题  潘正锋 2013-11-20 */
        if(this.getExpandOnLoad())
            this.setActiveIndex(this.activeIndex);  // activeIndex不配置的话就等于0

		this._trees = [];
		for (var i = 0, l = this.groups.length; i < l; i++) {
			var group = this.groups[i];
			var groupBodyEl = this.getGroupBodyEl(group);

			var tree = new mini.Tree();
			tree.set({
				expandOnLoad: this.expandOnLoad,
				showTreeIcon: true,
				style: "width:100%;height:100%;border:0;background:none",
				data: group._children
			});
			tree.render(groupBodyEl);
			tree.on("nodeclick", this.__OnNodeClick, this);
			tree.on("nodeselect", this.__OnNodeSelect, this);
			tree.on("nodemousedown", this.__OnNodeMouseDown, this);

			this._trees.push(tree);
			delete group._children

			tree._ownerGroup = group;

		}
		this.doLayout();
	},
	__OnNodeMouseDown: function (e) {
		var eve = {
			node: e.node,
			isLeaf: e.sender.isLeaf(e.node),
			htmlEvent: e.htmlEvent
		};
		this.fire("nodemousedown", eve);
	},
	__OnNodeClick: function (e) {
		var eve = {
			node: e.node,
			isLeaf: e.sender.isLeaf(e.node),
			htmlEvent: e.htmlEvent
		};
		this.fire("nodeclick", eve);
	},
	__OnNodeSelect: function (e) {
		if (!e.node)
			return;
		for (var i = 0, l = this._trees.length; i < l; i++) {
			var tree = this._trees[i];
			if (tree != e.sender) {
				tree.selectNode(null);
			}
		}

		var eve = {
			node: e.node,
			isLeaf: e.sender.isLeaf(e.node),
			htmlEvent: e.htmlEvent
		};
		this._selected = e.node;
		this.fire("nodeselect", eve);
	}
});
mini.regClass(mini.OutlookTree, "outlooktree");
mini.NavBarTree = function () {
    mini.NavBarTree.superclass.constructor.call(this);
}
mini.extend(mini.NavBarTree, mini.OutlookTree, {
    uiCls: "mini-navbartree"
});
mini.regClass(mini.NavBarTree, "navbartree");
﻿
mini.Separator = function () {
    mini.Separator.superclass.constructor.call(this);
}
mini.extend(mini.Separator, mini.Control, {
    _clearBorder: false,
    uiCls: "mini-separator",
    _create: function () {
        this.el = document.createElement("span");
        this.el.className = "mini-separator";
    }
});
mini.regClass(mini.Separator, 'separator');

mini.ToolTip = function () {
    mini.ToolTip.superclass.constructor.call(this);


}
mini.extend(mini.ToolTip, mini.Control, {

    selector: '[title]',
    placement: 'bottom',
    trigger: 'hover focus',

    uiCls: "mini-tooltip",

    _create: function () {
        this.el = jQuery('<div class="mini-tooltip"><div class="mini-tooltip-arrow"></div><div class="mini-tooltip-inner"></div></div>')[0];
        this.$element = jQuery(this.el);
        this.$element.appendTo(document.body);
    },
    _initEvents: function () {

    },
    _bindTooltip: function () {
        this.el.style.padding = "";
        var jq = jQuery(document),
            selector = this.selector,
            type = 'tooltip';

        var triggers = this.trigger.split(' ');

        for (var i = triggers.length; i--; ) {
            var trigger = triggers[i]

            if (trigger == 'click') {
                jq.delegate(selector,'click.' + type,  $.proxy(this._toggle, this))
            } else if (trigger != 'manual') {
                var eventIn = trigger == 'hover' ? 'mouseenter' : 'focus'
                var eventOut = trigger == 'hover' ? 'mouseleave' : 'blur'
                 /**将on改成delegate，这样就不用将jquery升级到1.7了*/
                jq.delegate(selector,eventIn + '.' + type,  $.proxy(this._enter, this))
                jq.delegate(selector,eventOut + '.' + type,  $.proxy(this._leave, this))
            }
        }
    },

    setSelector: function (value) {
        this.selector = value;
        this._bindTooltip();
    },
    getSelector: function () {
        return this.selector;
    },
    setPlacement: function (value) {
        this.placement = value;
    },
    getPlacement: function () {
        return this.placement;
    },

    _enter: function (e) {
        this.open(e.target);
    },
    _leave: function (e) {

        this.close();
    },
    _toggle: function (e) {
        if (this._getTip().css("display") == 'none') {
            this.enter(e);
        } else {
            this.leave(e);
        }
    },

    open: function (target) {
        var target = $(target)[0] || this.target,
            jq = $(target),
            content = this.getContent(target);

        var e = { element: target, content: content, cancel: !content };
        this.fire("beforeopen", e);
        if (e.cancel) return;

        this.$element.show();

        this._target = target;
        this.setContent(e.content);

        this.fire("open", { element: target });

    },
    close: function () {
        this._target = null;
        this.$element.hide();
    },
    showLoading: function () {
        this.setContent('<div class="mini-tooltip-loading"></div>');
    },
    setContent: function (value) {
        this.$element.children(".mini-tooltip-inner").html(value || '&nbsp;');
        this.applyPlacement();
    },
    getContent: function (element) {
        var content = element.title;
        if (content) {
            $(element).attr("data-tooltip", content).attr("title", "");
        }
        if (!content) {
            content = $(element).attr("data-tooltip");
        }
        return content;
    },
    applyPlacement: function () {
        if (!this._target) return;
        if (this.$element.css("display") == "none") return;
        var target = this._target,
            jq = jQuery(target),
            placement = jq.attr("data-placement") || this.placement,
            tip = this.$element;

        tip.show().css({ left: "-2000px", top: "-2000px" });

        function applyCls(placement) {

            tip.removeClass("mini-tooltip-left mini-tooltip-top mini-tooltip-right mini-tooltip-bottom mini-tooltip-bottomleft mini-tooltip-topleft mini-tooltip-bottomright mini-tooltip-topright")
                .addClass('mini-tooltip-' + placement);
        }
        function applyPos(pos) {
            tip.offset(pos);
        }


        var box = mini.getBox(target);
        var vbox = mini.getViewportBox();
        var topspace = box.top - vbox.top, bottomspace = vbox.bottom - box.bottom;

        applyCls(placement);

        var tipbox = mini.getBox(tip[0]);
        var pos = mini.getCalculatedOffset(placement, box, tipbox.width, tipbox.height);



        if (placement == "left") {
        } else if (placement == "right") {
        } else if (placement == "top") {
        } else if (placement == "bottom") {

        } else if (placement == "bottomleft" && topspace > bottomspace) {

            if (pos.top + tipbox.height > vbox.bottom) {
                placement = "topleft";
            }
        } else if (placement == "topleft") {

        }

        applyCls(placement);
        pos = mini.getCalculatedOffset(placement, box, tipbox.width, tipbox.height);


        applyPos(pos);
    },


    getAttrs: function (el) {
        var attrs = mini.ToolTip.superclass.getAttrs.call(this, el);
        mini._ParseString(el, attrs,
            ['selector', 'placement', "onbeforeopen", "onopen", "onclose"
            ]
        );

        return attrs;
    }
});
mini.regClass(mini.ToolTip, "tooltip");



;mini._allComponents = {};
(function(){
	
	var v, k, superclass, k2;
	for( k in mini){
		v = mini[k];
		if(typeof v == "function" && v.prototype.isControl){
			mini._allComponents[k] = [v];
		}
	}
	for(k in mini._allComponents){
		v = mini._allComponents[k];
		if(v[0].superclass){
			superclass = v[0].superclass.constructor;
			for(k2 in mini._allComponents){
				if(mini._allComponents[k2][0] == superclass ){
					mini._allComponents[k2].push(k);
				}
 			}
		}
	}
})();
mini.plugin = function(component, obj){
	if(component && obj){
		var k;
		for( k in obj){
			mini._plugin(component, k, obj[k]);
		}
	}
};

mini._plugin = function(component, key, value){
	var tree, k, subclass;
	if( typeof component == "string")
		tree = mini._allComponents[component];
	else{
		for(k in mini._allComponents){
			if(mini._allComponents[k][0] === component){
				tree = mini._allComponents[k];
			}
		}
	}
	
	component = tree[0];
	for(var i = 1, len = tree.length;i < len; i++){
		subclass = mini[tree[i]];
		if(subclass && subclass.prototype && component.prototype[key] === subclass.prototype[key]){
			mini._plugin(tree[i], key, value);
		}
	}
	
	component.prototype[key] = value;
};
mini.plugin(mini.TreeSelect,  {
	
	/**
	 * 是否在弹出层显示搜索框
	 * @type Boolean
	 * @default
	 */
	showQueryToolBar : false,

	_createQueryToolBar : function() {
		if(this.showQueryToolBar && !this.queryToolbar) {
			this.queryToolbar = new mini.ToolBar();
			this.queryToolbar.render(this.popup._contentEl,"prepend");	//添加子元素

			this.queryInput = new mini.TextBox();
			this.queryInput.setEmptyText("请录入查询条件");
            this.queryInput.setWidth(50);
			this.queryInput.render(this.queryToolbar.el);
			this.queryInput.on("enter",this._queryEvent, this);

			this.queryButton = new mini.Button();
			this.queryButton.setText("查询");
			this.queryButton.setPlain(true);
            this.queryButton.setStyle("margin-left:2px;");
			this.queryButton.render(this.queryToolbar.el);
			this.queryButton.onClick(this._queryEvent,this);
            this.on("showpopup", function(){
                var w = this.queryToolbar.getWidth();
	            this.queryInput.setWidth(w-58);
            });
		}
	},
    _destroyQueryToolBar : function(removeEl) {
        if (this.queryInput) {
            mini.clearEvent(this.queryInput);
            this.queryInput.destroy(removeEl);
            this.queryInput = null;
        }
        
        if (this.queryButton) {
            mini.clearEvent(this.queryButton);
            this.queryButton.destroy(removeEl);
            this.queryButton = null;
        }
        
        if (this.queryToolbar) {
            mini.clearEvent(this.queryToolbar);
            this.queryToolbar.destroy(removeEl);
            this.queryToolbar = null;
        }
    },
	_queryEvent : function(e) {
		var value = this.queryInput.getValue();
        var scope = this;
        if (value && value.trim()) {
            var firstLeafNode = null;
            this.tree.filter(function (node) {
                    var queryfield = mini._getMap(this.queryfield, node);
                    if(queryfield == null || queryfield == undefined)
                        queryfield = "";
                    queryfield = String(queryfield).toLowerCase();
                    if (node[this.textField].toLowerCase().indexOf(value.toLowerCase()) != -1 || node[this.idField].toLowerCase().indexOf(value.toLowerCase()) != -1 || queryfield.indexOf(value.toLowerCase()) != -1) {
                        if (!firstLeafNode || node[this.parentField] == firstLeafNode[this.idField]) {
                            firstLeafNode = node;
                        }
                        return true;
                    }
                }
            );
            if (firstLeafNode) {
                this.tree.expandPath(firstLeafNode);
            }
        } else {
			this.tree.clearFilter();
		}
	},
	
	/**
	 * 设置 showQueryToolBar 属性值
	 * @param value {Boolean}
	 */
	setShowQueryToolBar: function(value) {
        this.showQueryToolBar = value;
        if(!this.queryToolbar) return;
        if(value){
            this.queryToolbar.el.style.display = "";
        }else{
            this.queryToolbar.el.style.display = "none";
        }
	},
	
	/**
	 * 获取 showQueryToolBar 属性值
	 * @return {Boolean}
	 */
	getShowQueryToolBar: function() {
		return this.showQueryToolBar;
	},
	doUpdate: function() {
		mini.TreeSelect.superclass.doUpdate.call(this);
		this._createQueryToolBar();
	}
});



mini.locale = "en-US";


/* Date
----------------------------------------------------------------------------- */

mini.dateInfo = {
    monthsLong: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
    monthsShort: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
    daysLong: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
    daysShort: ["日", "一", "二", "三", "四", "五", "六"],
    quarterLong: ['一季度', '二季度', '三季度', '四季度'],
    quarterShort: ['Q1', 'Q2', 'Q2', 'Q4'],
    halfYearLong: ['上半年', '下半年'],
    patterns: {
        "d": "yyyy-M-d",
        "D": "yyyy年M月d日",
        "f": "yyyy年M月d日 H:mm",
        "F": "yyyy年M月d日 H:mm:ss",
        "g": "yyyy-M-d H:mm",
        "G": "yyyy-M-d H:mm:ss",
        "m": "MMMd日",
        "o": "yyyy-MM-ddTHH:mm:ss.fff",
        "s": "yyyy-MM-ddTHH:mm:ss",
        "t": "H:mm",
        "T": "H:mm:ss",
        "U": "yyyy年M月d日 HH:mm:ss",
        "y": "yyyy年MM月"
    },
    tt: {
        "AM": "上午",
        "PM": "下午"
    },
    ten: {
        "Early": "上旬",
        "Mid": "中旬",
        "Late": "下旬"
    },
    today: '今天',
    clockType: 24
};


/* Calendar
----------------------------------------------------------------------------- */
if (mini.Calendar) {
    mini.copyTo(mini.Calendar.prototype, {
        firstDayOfWeek: 0,
        todayText: "今天",
        clearText: "清除",
        okText: "确定",
        cancelText: "取消",
        daysShort: ["日", "一", "二", "三", "四", "五", "六"],
        format: "yyyy年MM月",

        timeFormat: 'H:mm'
    });
}


/* TextBox
----------------------------------------------------------------------------- */
for (var id in mini) {
    var clazz = mini[id];
    if (clazz && clazz.prototype && clazz.prototype.isControl) {
        clazz.prototype.requiredErrorText = "不能为空";
    }
}

if (mini.TextBox) {
    var vtypeErrorTexts = {
        emailErrorText: "请输入邮件格式",
        urlErrorText: "请输入URL格式",
        floatErrorText: "请输入数字",
        intErrorText: "请输入整数",
        dateErrorText: "请输入日期格式 {0}",
        maxLengthErrorText: "不能超过 {0} 个字符",
        minLengthErrorText: "不能少于 {0} 个字符",
        maxErrorText: "数字不能大于 {0} ",
        minErrorText: "数字不能小于 {0} ",
        rangeLengthErrorText: "字符长度必须在 {0} 到 {1} 之间",
        rangeCharErrorText: "字符数必须在 {0} 到 {1} 之间",
        rangeErrorText: "数字必须在 {0} 到 {1} 之间" ,
        rangeDecimalsErrorText:"请保留小数点后 {0} 位小数."
    };
    mini.copyTo(mini.TextBox.prototype, vtypeErrorTexts);
    mini.copyTo(mini.Password.prototype, vtypeErrorTexts);
    mini.copyTo(mini.TextArea.prototype, vtypeErrorTexts);
}

/* Pager
----------------------------------------------------------------------------- */
if (mini.Pager) {
    mini.copyTo(mini.Pager.prototype, {
        firstText: "首页",
        prevText: "上一页",
        nextText: "下一页",
        lastText: "尾页",
        pageInfoText: "每页 {0} 条, 共 {1} 条"
    });
}

/* Gantt
----------------------------------------------------------------------------- */
if (window.mini.Gantt) {
    mini.GanttView.ShortWeeks = [
        '日', '一', '二', '三', '四', '五', '六'
    ];
    mini.GanttView.LongWeeks = [
        '星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'
    ];

    mini.Gantt.PredecessorLinkType = [
        { ID: 0, Name: '完成-完成(FF)', Short: 'FF' },
        { ID: 1, Name: '完成-开始(FS)', Short: 'FS' },
        { ID: 2, Name: '开始-完成(SF)', Short: 'SF' },
        { ID: 3, Name: '开始-开始(SS)', Short: 'SS' }
    ];

    mini.Gantt.ConstraintType = [
        { ID: 0, Name: '越早越好' },
        { ID: 1, Name: '越晚越好' },
        { ID: 2, Name: '必须开始于' },
        { ID: 3, Name: '必须完成于' },
        { ID: 4, Name: '不得早于...开始' },
        { ID: 5, Name: '不得晚于...开始' },
        { ID: 6, Name: '不得早于...完成' },
        { ID: 7, Name: '不得晚于...完成' }
    ];

    mini.copyTo(mini.Gantt, {
        ID_Text: "标识号",
        Name_Text: "任务名称",
        PercentComplete_Text: "进度",
        Duration_Text: "工期",
        Start_Text: "开始日期",
        Finish_Text: "完成日期",
        Critical_Text: "关键任务",

        PredecessorLink_Text: "前置任务",
        Work_Text: "工时",
        Priority_Text: "重要级别",
        Weight_Text: "权重",
        OutlineNumber_Text: "大纲字段",
        OutlineLevel_Text: "任务层级",
        ActualStart_Text: "实际开始日期",
        ActualFinish_Text: "实际完成日期",
        WBS_Text: "WBS",
        ConstraintType_Text: "限制类型",
        ConstraintDate_Text: "限制日期",
        Department_Text: "部门",
        Principal_Text: "负责人",
        Assignments_Text: "资源名称",

        Summary_Text: "摘要任务",
        Task_Text: "任务",
        Baseline_Text: "比较基准",
        LinkType_Text: "链接类型",
        LinkLag_Text: "延隔时间",
        From_Text: "从",
        To_Text: "到",

        Goto_Text: "转到任务",
        UpGrade_Text: "升级",
        DownGrade_Text: "降级",
        Add_Text: "新增",
        Edit_Text: "编辑",
        Remove_Text: "删除",
        Move_Text: "移动",
        ZoomIn_Text: "放大",
        ZoomOut_Text: "缩小",
        Deselect_Text: "取消选择",
        Split_Text: "拆分任务"
    });
}
/**
 * Created by pzf on 2014/11/10.
 */
if (typeof define === 'function' && define.amd) {
    define('miniui', ['jquery'], function() {
        return mini;
    });
}