/**
 * jQuery MiniUI 3.7.1
 *
 * Date : 2016-12-01
 * 
 * Commercial License : http://www.miniui.com/license
 *
 * Copyright(c) 2012 All Rights Reserved. PluSoft Co., Ltd (上海普加软件有限公司) [ services@plusoft.com.cn ]. 
 *
 */
mini_Fit__create = function() {
    this.el = document.createElement("div");
    this.el.className = "mini-fit";
    this._bodyEl = this.el;
};
mini_Fit__initEvents = function() {};
mini_Fit_isFixedSize = function() {
    return false;
};
mini_Fit_doLayout = function () {
    if (!this.canLayout()){
        return;
    }
    var parentNode = this.el.parentNode,
            childNodes = mini.getChildNodes(parentNode);
    if (parentNode == document.body){
        this.el.style.height = "0px";
    }
    var height = mini.getHeight(parentNode, true);
    for (var i = 0, l = childNodes.length; i < l; i++) {
        var node = childNodes[i],
                tagName = node.tagName ? node.tagName.toLowerCase() : "";
        if (node == this.el || (tagName == "style" || tagName == "script" || node.type == "hidden")){
            continue;
        }
        var pos = mini.getStyle(node, "position");
        if (pos == "absolute" || pos == "fixed"){
            continue;
        }
        var h = mini.getHeight(node),
                margin = mini.getMargins(node);
        height = height - h - margin.top - margin.bottom;
    }
    var border = mini.getBorders(this.el),
            padding = mini.getPaddings(this.el),
            margin = mini.getMargins(this.el);
    height = height - margin.top - margin.bottom;
    if (jQuery.boxModel){
        height = height - padding.top - padding.bottom - border.top - border.bottom;
    }
    if (height < 0){
        height = 0;
    }
    this.el.style.height = height + "px";
    try {
        childNodes = mini.getChildNodes(this.el);
        for (i = 0, l = childNodes.length; i < l; i++) {
            node = childNodes[i];
            mini.layout(node);
        }
    } catch (e) {
    }
};
mini_Fit_set_bodyParent = function(value) {
    if (!value) return;
    var el = this._bodyEl,
        p = value;
    while (p.firstChild) {
        try {
            el.appendChild(p.firstChild);
        } catch (e) {}
    }
    this.doLayout();
};
mini_Fit_getAttrs = function($) {
    var _ = mini.Fit.superclass.getAttrs.call(this, $);
    _._bodyParent = $;
    return _;
};
mini_Box__create = function() {
    this.el = document.createElement("div");
    this.el.className = "mini-box";
    this.el.innerHTML = "<div class=\"mini-box-border\"></div>";
    this._bodyEl = this._borderEl = this.el.firstChild;
    this._contentEl = this._bodyEl
};
mini_Box__initEvents = function() {};
mini_Box_doLayout = function() {
    if (!this.canLayout()) return;
    var C = this.isAutoHeight(),
        E = this.isAutoWidth(),
        B = mini.getPaddings(this._bodyEl),
        D = mini.getMargins(this._bodyEl);
    if (!C) {
        var A = this.getHeight(true);
        if (jQuery.boxModel) A = A - B.top - B.bottom;
        A = A - D.top - D.bottom;
        if (A < 0) A = 0;
        this._bodyEl.style.height = A + "px"
    } else this._bodyEl.style.height = "";
    var $ = this.getWidth(true),
        _ = $;
    $ = $ - D.left - D.right;
    if (jQuery.boxModel) $ = $ - B.left - B.right;
    if ($ < 0) $ = 0;
    this._bodyEl.style.width = $ + "px";
    mini.layout(this._borderEl);
    this.fire("layout")
};
mini_Box_setBody = function(_) {
    if (!_) return;
    if (!mini.isArray(_)) _ = [_];
    for (var $ = 0, A = _.length; $ < A; $++) mini.append(this._bodyEl, _[$]);
    mini.parse(this._bodyEl);
    this.doLayout();
};
mini_Box_set_bodyParent = function($) {
    if (!$) return;
    var _ = this._bodyEl,
        A = $;
    while (A.firstChild) _.appendChild(A.firstChild);
    this.doLayout();
};
mini_Box_setBodyStyle = function($) {
    mini.setStyle(this._bodyEl, $);
    this.doLayout();
};
mini_Box_getAttrs = function($) {
    var _ = mini.Box.superclass.getAttrs.call(this, $);
    _._bodyParent = $;
    mini._ParseString($, _, ["bodyStyle"]);
    return _;
};
mini_Tree_setTextField = function($) {
    this._dataSource.setTextField($);
    this._columnModel.updateColumn("node", {
        field: $
    });
    this.textField = $;
};
mini_Tree_l110O0ByEvent = function(A, _) {

    if (this.hoverMode == "node") _ = false;
    var $ = mini.Tree.superclass.l110O0ByEvent.call(this, A);
    if (_ === false) return $;
    if ($ && oOlO(A.target, "mini-tree-nodeshow")) return $;
    return null;
};
mini_Tree__getRowHeight = function($) {
    var _ = this.defaultRowHeight;
    if ($._height) {
        _ = parseInt($._height);
        if (isNaN(parseInt($._height))) _ = rowHeight
    }
    return _
};
mini_Tree__OnCellMouseDown = function($) {

    if (this._editInput) this._editInput.blur();
    this.fire("cellmousedown", $)
};
mini_Tree_beginEdit = function(C) {
    C = this.getNode(C);
    if (!C) return;
    var B = this.getColumn(0),
        A = mini._getMap(B.field, C),
        D = {
            record: C,
            node: C,
            column: B,
            field: B.field,
            value: A,
            cancel: false
        };
    this.fire("cellbeginedit", D);
    if (D.cancel == true) return;
    this._editingNode = C;
    this.OoO1(C);
    var _ = this;

    function $() {
        var $ = _._id + "$edit$" + C._id;
        _._editInput = document.getElementById($);
        _._editInput.focus();
        mini.selectRange(_._editInput, 0, 1000);
        mini.on(_._editInput, "keydown", _.oOlo11, _);
        mini.on(_._editInput, "blur", _.oollOO, _)
    }
    setTimeout(function() {
        $()
    }, 100);
    $()
};
mini_Tree_cancelEdit = function($) {
    var _ = this._editingNode;
    this._editingNode = null;
    if (_) {
        if ($ !== false) this.OoO1(_);
        mini.un(this._editInput, "keydown", this.oOlo11, this);
        mini.un(this._editInput, "blur", this.oollOO, this)
    }
    this._editInput = null
};
mini_Tree_oOlo11 = function(A) {
    if (A.keyCode == 13) {
        var _ = this._editingNode,
            $ = this._editInput.value;
        this._editingNode = null;
        this.setNodeText(_, $);
        this.cancelEdit(false);
        this.fire("endedit", {
            node: _,
            text: $
        });
    } else if (A.keyCode == 27) this.cancelEdit();
};
mini_Tree_oollOO = function(A) {
    var _ = this._editingNode;
    if (_) {
        var $ = this._editInput.value;
        this.cancelEdit();
        this.setNodeText(_, $);
        this.fire("endedit", {
            node: _,
            text: $
        })
    }
};
mini_Tree_addRowCls = function($, A) {
    var _ = this.OOl0($, 1),
        B = this.OOl0($, 2);
    if (_) mini.addClass(_, A);
    if (B) mini.addClass(B, A);
    if (_) mini.addClass(_.cells[1], A);
    if (B) mini.addClass(B.cells[1], A)
};
mini_Tree_removeRowCls = function($, A) {
    var _ = this.OOl0($, 1),
        B = this.OOl0($, 2);
    if (_) mini.removeClass(_, A);
    if (B) mini.removeClass(B, A);
    if (_) mini.removeClass(_.cells[1], A);
    if (B) mini.removeClass(B.cells[1], A)
};
mini_Tree_scrollIntoView = function(_) {
    _ = this.getNode(_);
    if (!_) return;
    if (!this.isVisibleNode(_)) this.expandPath(_);
    var $ = this;
    setTimeout(function() {
        var A = $._getNodeEl(_, 2);
        mini.scrollIntoView(A, $._rowsViewEl, false)
    }, 10)
};
mini_Tabs_set = function($) {
    if (typeof $ == "string") return this;
    var B = this._allowLayout;
    this._allowLayout = false;
    var _ = $.activeIndex;
    delete $.activeIndex;
    var A = $.url;
    delete $.url;
    mini.Tabs.superclass.set.call(this, $);
    if (A) this.setUrl(A);
    if (mini.isNumber(_)) this.setActiveIndex(_);
    this._allowLayout = B;
    this.doLayout();
    return this
};
mini_Tabs__create = function() {
    this.el = document.createElement("div");
    this.el.className = "mini-tabs";
    var _ = "<table class=\"mini-tabs-table\" cellspacing=\"0\" cellpadding=\"0\"><tr style=\"width:100%;\">" + "<td></td>" + "<td style=\"text-align:left;vertical-align:top;width:100%;\"><div class=\"mini-tabs-bodys\"></div></td>" + "<td></td>" + "</tr></table>";
    this.el.innerHTML = _;
    this.o01oo = this.el.firstChild;
    var $ = this.el.getElementsByTagName("td");
    this.Oo01o = $[0];
    this.Ool1oO = $[1];
    this.ll011O = $[2];
    this._bodyEl = this.Ool1oO.firstChild;
    this._borderEl = this._bodyEl;
    this.doUpdate()
};
mini_Tabs_destroy = function(A) {
    if (this.tabs)
        for (var $ = 0, B = this.tabs.length; $ < B; $++) {
            var _ = this.tabs[$];
            _.ll1ol = null
        }
    this.o01oo = this.Oo01o = this.Ool1oO = this.ll011O = null;
    this._bodyEl = this._borderEl = this.headerEl = null;
    this.tabs = null;
    mini.Tabs.superclass.destroy.call(this, A)
};
mini_Tabs_l0OOl = function() {
    mini.removeClass(this.Oo01o, "mini-tabs-header");
    mini.removeClass(this.ll011O, "mini-tabs-header");
    this.Oo01o.innerHTML = "";
    this.ll011O.innerHTML = "";
    mini.removeChilds(this.Ool1oO, this._bodyEl)
};
mini_Tabs__initEvents = function() {
    mini._BindEvents(function() {
        mini.on(this.el, "mousedown", this.__OnMouseDown, this);
        mini.on(this.el, "click", this.__OnClick, this);
        mini.on(this.el, "mouseover", this.__OnMouseOver, this);
        mini.on(this.el, "mouseout", this.__OnMouseOut, this);
        mini.on(this.el, "dblclick", this.__OnDblClick, this)
    }, this)
};
mini_Tabs_ooO0o = function() {

    this.tabs = []
};
mini_Tabs_createTab = function(_) {
    var $ = mini.copyTo({
        _id: this.OO01ol++,
        name: "",
        title: "",
        newLine: false,
        tooltip: "",
        iconCls: "",
        iconStyle: "",
        headerCls: "",
        headerStyle: "",
        bodyCls: "",
        bodyStyle: "",
        visible: true,
        enabled: true,
        showCloseButton: false,
        active: false,
        url: "",
        loaded: false,
        refreshOnClick: false
    }, _);
    if (_) {
        _ = mini.copyTo(_, $);
        $ = _
    }
    return $
};
mini_Tabs__doLoad = function() {
    var $ = mini._getResult(this.url, null, null, null, null, this.dataField);
    if (this.dataField && !mini.isArray($)) $ = mini._getMap(this.dataField, $);
    if (!$) $ = [];
    this.setTabs($);
    this.fire("load")
};
mini_Tabs_load = function($) {
    if (typeof $ == "string") this.setUrl($);
    else this.setTabs($)
};
mini_Tabs_setUrl = function($) {
    this.url = $;
    this._doLoad()
};
mini_Tabs_getUrl = function() {
    return this.url
};
mini_Tabs_setNameField = function($) {
    this.nameField = $
};
mini_Tabs_getNameField = function() {
    return this.nameField
};
mini_Tabs_setTitleField = function($) {
    this.titleField = $
};
mini_Tabs_getTitleField = function() {
    return this.titleField
};

mini_Tabs_setUrlField = function($) {
    this.urlField = $
};
mini_Tabs_getUrlField = function() {
    return this.urlField
};
mini_Tabs_setButtonsAlign = function($) {
    this.buttonsAlign = $
};
mini_Tabs_getButtonsAlign = function() {
    return this.buttonsAlign
};
mini_Tabs_setButtons = function($) {
    this._buttons = mini.byId($);
    if (this._buttons) {
        var _ = mini.byClass("mini-tabs-buttons", this.el);
        if (_) {
            _.appendChild(this._buttons);
            mini.parse(_);
            this.doLayout()
        }
    }
};
mini_Tabs_setTabControls = function(A, $) {
    var A = this.getTab(A);
    if (!A) return;
    var _ = this.getTabBodyEl(A);
    __mini_setControls($, _, this)
};
mini_Tabs_setTabs = function(_) {
    if (!mini.isArray(_)) return;
    this.beginUpdate();
    this.removeAll();
    for (var $ = 0, B = _.length; $ < B; $++) {
        var A = _[$];
        A.title = mini._getMap(this.titleField, A);
        A.url = mini._getMap(this.urlField, A);
        A.name = mini._getMap(this.nameField, A)
    }
    for ($ = 0, B = _.length; $ < B; $++) this.addTab(_[$]);
    this.setActiveIndex(0);
    this.endUpdate()
};
mini_Tabs_getTabs = function() {
    return this.tabs
};
mini_Tabs_removeAll = function(A) {
    var E = this.getActiveTab();
    if (mini.isNull(A)) A = [];
    if (!mini.isArray(A)) A = [A];
    for (var $ = A.length - 1; $ >= 0; $--) {
        var B = this.getTab(A[$]);
        if (!B) A.removeAt($);
        else A[$] = B
    }
    var _ = this.tabs;
    for ($ = _.length - 1; $ >= 0; $--) {
        var D = _[$];
        if (A.indexOf(D) == -1) this.removeTab(D)
    }
    var C = A[0];
    if (E != this.getActiveTab())
        if (C) this.activeTab(C)
};
mini_Tabs_addTab = function(C, $) {

    if (typeof C == "string") C = {
        title: C
    };
    C = this.createTab(C);
    if (!C.name) C.name = "";
    var F = this.getActiveTab();
    if (typeof $ != "number") $ = this.tabs.length;
    this.tabs.insert($, C);
    if (F) this.activeIndex = this.tabs.indexOf(F);
    var G = this.OO1o0O(C),
        H = "<div id=\"" + G + "\" class=\"mini-tabs-body " + C.bodyCls + "\" style=\"" + C.bodyStyle + ";display:none;\"></div>";
    mini.append(this._bodyEl, H);
    var A = this.getTabBodyEl(C),
        B = C.body;
    delete C.body;
    if (B) {
        if (!mini.isArray(B)) B = [B];
        for (var _ = 0, E = B.length; _ < E; _++) mini.append(A, B[_])
    }
    if (C.bodyParent) {
        var D = C.bodyParent;
        while (D.firstChild)
            if (D.firstChild.nodeType == 8) D.removeChild(D.firstChild);
            else A.appendChild(D.firstChild)
    }
    delete C.bodyParent;
    if (C.controls) {
        this.setTabControls(C, C.controls);
        delete C.controls
    }
    this.doUpdate();
    return C
};
mini_Tabs_removeTab = function(C) {
    C = this.getTab(C);
    if (!C || this.tabs.indexOf(C) == -1) return;
    var D = this.getActiveTab(),
        B = C == D,
        A = this.Olll(C);
    this.tabs.remove(C);
    this.O01o0l(C);
    var _ = this.getTabBodyEl(C);
    if (_) this._bodyEl.removeChild(_);
    if (A && B) {
        for (var $ = this.activeIndex; $ >= 0; $--) {
            var C = this.getTab($);
            if (C && C.enabled && C.visible) {
                this.activeIndex = $;
                break
            }
        }
        this.doUpdate();
        this.setActiveIndex(this.activeIndex);
        this.fire("activechanged")
    } else {
        this.activeIndex = this.tabs.indexOf(D);
        this.doUpdate()
    }
    return C
};
mini_Tabs_moveTab = function(A, $) {
    A = this.getTab(A);
    if (!A) return;
    var _ = this.tabs[$];
    if (_ == A) return;
    this.tabs.remove(A);
    var $ = this.tabs.indexOf(_);
    if ($ == -1) this.tabs.add(A);
    else this.tabs.insert($, A);
    this.doUpdate()
};
mini_Tabs_updateTab = function(B, D) {
    B = this.getTab(B);
    if (!B) return;
    mini.copyTo(B, D);
    if (!B.visible && this.tabs.indexOf(B) == this.activeIndex) {
        var A = -1;
        for (var _ = this.activeIndex + 1, C = this.tabs.length; _ < C; _++) {
            var $ = this.tabs[_];
            if ($.visible) {
                A = _;
                break
            }
        }
        this.setActiveIndex(A)
    }
    this.doUpdate()
};
mini_Tabs_oOlolO = function() {
    return this._bodyEl
};
mini_Tabs_O01o0l = function(D, A) {
    if (D.ll1ol && D.ll1ol.parentNode) {
        var C = D.ll1ol;
        C.onload = function() {};
        jQuery(C).unbind("load");
        C.src = "";
        if (mini.isIE) {
            try {
                C.contentWindow.document.write("");
                C.contentWindow.document.close()
            } catch (G) {}
        }
        if (D.ll1ol._ondestroy) D.ll1ol._ondestroy();
        try {
            C.parentNode.removeChild(C);
            C.removeNode(true)
        } catch (G) {}
    }
    D.ll1ol = null;
    D.loadedUrl = null;
    if (A === true) {
        var E = this.getTabBodyEl(D);
        if (E) {
            var B = mini.getChildNodes(E, true);
            for (var _ = 0, F = B.length; _ < F; _++) {
                var $ = B[_];
                if ($ && $.parentNode) $.parentNode.removeChild($)
            }
        }
    }
};
mini_Tabs__cancelLoadTabs = function(B) {
    var _ = this.tabs;
    for (var $ = 0, C = _.length; $ < C; $++) {
        var A = _[$];
        if (A != B)
            if (A._loading && A.ll1ol) {
                A._loading = false;
                this.O01o0l(A, true)
            }
    }
    if (B && B == this.getActiveTab() && B._loading);
    else {
        this._loading = false;
        this.unmask()
    }
};
mini_Tabs_OO1lO = function(A) {

    if (!A || A != this.getActiveTab()) return;
    var B = this.getTabBodyEl(A);
    if (!B) return;
    this._cancelLoadTabs();
    this.O01o0l(A, true);
    this._loading = true;
    A._loading = true;
    this.unmask();
    if (this.maskOnLoad) this.loading();
    var C = new Date(),
        $ = this;
    $.isLoading = true;
    var _ = mini.createIFrame(A.url, function(_, D) {
        try {
            A.ll1ol.contentWindow.Owner = window;
            A.ll1ol.contentWindow.CloseOwnerWindow = function(_) {
                A.removeAction = _;
                var B = true;
                if (A.ondestroy) {
                    if (typeof A.ondestroy == "string") A.ondestroy = window[A.ondestroy];
                    if (A.ondestroy) {
                        var C = $._getTabEvent(A);
                        C.action = _;
                        B = A.ondestroy.call($, C)
                    }
                }
                if (B === false) return false;
                setTimeout(function() {
                    $.removeTab(A)
                }, 10)
            }
        } catch (E) {}
        if (A._loading != true) return;
        var B = (C - new Date()) + $.l111Oo;
        A._loading = false;
        A.loadedUrl = A.url;
        if (B < 0) B = 0;
        setTimeout(function() {
            $.unmask();
            $.doLayout();
            $.isLoading = false
        }, B);
        if (D) {
            var E = {
                sender: $,
                tab: A,
                index: $.tabs.indexOf(A),
                name: A.name,
                iframe: A.ll1ol
            };
            if (A.onload) {
                if (typeof A.onload == "string") A.onload = window[A.onload];
                if (A.onload) A.onload.call($, E)
            }
        }
        if ($.getActiveTab() == A) $.fire("tabload", E)
    }, this.clearTimeStamp, A.method, A.params);
    setTimeout(function() {
        if (A.ll1ol == _) B.appendChild(_)
    }, 1);
    A.ll1ol = _
};
mini_Tabs__getTabEvent = function($) {
    var _ = {
        sender: this,
        tab: $,
        index: this.tabs.indexOf($),
        name: $.name,
        iframe: $.ll1ol,
        autoActive: true
    };
    return _
};
mini_Tabs_Olll = function($) {
    var _ = this._getTabEvent($);
    this.fire("tabdestroy", _);
    return _.autoActive
};
mini_Tabs_loadTab = function(B, A, _, D) {
    if (!B) return;
    A = this.getTab(A);
    if (!A) A = this.getActiveTab();
    if (!A) return;
    var $ = this.getTabBodyEl(A);
    if ($) mini.addClass($, "mini-tabs-hideOverflow");
    A.url = B;
    delete A.loadedUrl;
    if (_) A.onload = _;
    if (D) A.ondestroy = D;
    var C = this;
    clearTimeout(this._loadTabTimer);
    this._loadTabTimer = null;
    this._loadTabTimer = setTimeout(function() {
        C.OO1lO(A)
    }, 1)
};
mini_Tabs_reloadTab = function($) {
    $ = this.getTab($);
    if (!$) $ = this.getActiveTab();
    if (!$) return;
    this.loadTab($.url, $)
};
mini_Tabs_getTabRows = function() {
    var A = [],
        _ = [];
    for (var $ = 0, C = this.tabs.length; $ < C; $++) {
        var B = this.tabs[$];
        if ($ != 0 && B.newLine) {
            A.push(_);
            _ = []
        }
        _.push(B)
    }
    A.push(_);
    return A
};
mini_Tabs_doUpdate = function() {
    if (this.lO10O === false) return;
    if (this._buttons && this._buttons.parentNode) this._buttons.parentNode.removeChild(this._buttons);
    mini.removeClass(this.el, "mini-tabs-position-left");
    mini.removeClass(this.el, "mini-tabs-position-top");
    mini.removeClass(this.el, "mini-tabs-position-right");
    mini.removeClass(this.el, "mini-tabs-position-bottom");
    if (this.tabPosition == "bottom") {
        mini.addClass(this.el, "mini-tabs-position-bottom");
        this.oO00()
    } else if (this.tabPosition == "right") {
        mini.addClass(this.el, "mini-tabs-position-right");
        this.oO11OO()
    } else if (this.tabPosition == "left") {
        mini.addClass(this.el, "mini-tabs-position-left");
        this.O0ll00()
    } else {
        mini.addClass(this.el, "mini-tabs-position-top");
        this.OOO11l()
    }
    var $ = this.o1oO0,
        _ = "mini-tabs-header-";
    mini.removeClass($, _ + "left");
    mini.removeClass($, _ + "top");
    mini.removeClass($, _ + "right");
    mini.removeClass($, _ + "bottom");
    mini.addClass($, _ + this.tabPosition);
    $ = this._bodyEl, _ = "mini-tabs-body-";
    mini.removeClass($, _ + "left");
    mini.removeClass($, _ + "top");
    mini.removeClass($, _ + "right");
    mini.removeClass($, _ + "bottom");
    mini.addClass($, _ + this.tabPosition);
    if (this._buttons) {
        $ = mini.byClass("mini-tabs-buttons", this.el);
        if ($) {
            $.appendChild(this._buttons);
            mini.parse($)
        }
    }
    this.doLayout();
    this.setActiveIndex(this.activeIndex, false)
};
mini_Tabs__handleIFrameOverflow = function() {
    var _ = this.getTabBodyEl(this.activeIndex);
    if (_) {
        mini.removeClass(_, "mini-tabs-hideOverflow");
        var $ = mini.getChildNodes(_)[0];
        if ($ && $.tagName && $.tagName.toUpperCase() == "IFRAME") mini.addClass(_, "mini-tabs-hideOverflow")
    }
};
mini_Tabs_doLayout = function() {

    var f = this,
        H = f.o1oO0,
        G = f._bodyEl,
        h = f.tabPosition;
    if (!this.canLayout()) return;
    H.style.display = this.showHeader ? "" : "none";
    this._handleIFrameOverflow();
    var l = this.isAutoHeight();
    B = this.getHeight(true);
    b = this.getWidth();
    var E = B,
        S = b;
    if (this.showBody) G.style.display = "";
    else G.style.display = "none";
    var $ = this.el.firstChild;
    if (this.plain) mini.addClass($, "mini-tabs-plain");
    else mini.removeClass($, "mini-tabs-plain");
    if (!l && this.showBody) {
        var T = jQuery(H).outerHeight(),
            Y = jQuery(H).outerWidth();
        if (h == "top" || h == "bottom") {
            T = jQuery(H.parentNode).outerHeight();
            T -= 1
        }
        if (h == "left" || h == "right") b = b - Y;
        else B = B - T;
        if (jQuery.boxModel) {
            var C = mini.getPaddings(G),
                U = mini.getBorders(G);
            B = B - C.top - C.bottom - U.top - U.bottom;
            b = b - C.left - C.right - U.left - U.right
        }
        margin = mini.getMargins(G);
        B = B - margin.top - margin.bottom;
        b = b - margin.left - margin.right;
        if (B < 0) B = 0;
        if (b < 0) b = 0;
        G.style.width = b + "px";
        G.style.height = B + "px";
        if (h == "left" || h == "right") {
            var J = H.getElementsByTagName("tr")[0],
                D = J.childNodes,
                Z = D[0].getElementsByTagName("tr"),
                e = last = all = 0;
            for (var O = 0, g = Z.length; O < g; O++) {
                var J = Z[O],
                    R = jQuery(J).outerHeight();
                all += R;
                if (O == 0) e = R;
                if (O == g - 1) last = R
            }
            switch (this.tabAlign) {
                case "center":
                    var j = parseInt((E - (all - e - last)) / 2);
                    for (O = 0, g = D.length; O < g; O++) {
                        D[O].firstChild.style.height = E + "px";
                        var c = D[O].firstChild,
                            Z = c.getElementsByTagName("tr"),
                            P = Z[0],
                            V = Z[Z.length - 1];
                        P.style.height = j + "px";
                        V.style.height = j + "px"
                    }
                    break;
                case "right":
                    for (O = 0, g = D.length; O < g; O++) {
                        var c = D[O].firstChild,
                            Z = c.getElementsByTagName("tr"),
                            J = Z[0],
                            W = E - (all - e);
                        if (W >= 0) J.style.height = W + "px"
                    }
                    break;
                case "fit":
                    for (O = 0, g = D.length; O < g; O++) D[O].firstChild.style.height = E + "px";
                    break;
                default:
                    for (O = 0, g = D.length; O < g; O++) {
                        c = D[O].firstChild, Z = c.getElementsByTagName("tr"), J = Z[Z.length - 1], W = E - (all - last);
                        if (W >= 0) J.style.height = W + "px"
                    }
                    break
            }
        }
    } else {
        G.style.width = "auto";
        G.style.height = "auto"
    }
    var a = this.getTabBodyEl(this.activeIndex);
    if (a)
        if (!l && this.showBody) {
            var B = mini.getHeight(G, true);
            if (jQuery.boxModel) {
                C = lol0(a), U = mini.getBorders(a);
                B = B - C.top - C.bottom - U.top - U.bottom
            }
            a.style.height = B + "px"
        } else a.style.height = "auto";
    switch (h) {
        case "bottom":
            var Q = H.childNodes;
            for (O = 0, g = Q.length; O < g; O++) {
                c = Q[O];
                mini.removeClass(c, "mini-tabs-header2");
                if (g > 1 && O != 0) mini.addClass(c, "mini-tabs-header2")
            }
            break;
        case "left":
            D = H.firstChild.rows[0].cells;
            for (O = 0, g = D.length; O < g; O++) {
                var L = D[O];
                mini.removeClass(L, "mini-tabs-header2");
                if (g > 1 && O == 0) mini.addClass(L, "mini-tabs-header2")
            }
            break;
        case "right":
            D = H.firstChild.rows[0].cells;
            for (O = 0, g = D.length; O < g; O++) {
                L = D[O];
                mini.removeClass(L, "mini-tabs-header2");
                if (g > 1 && O != 0) mini.addClass(L, "mini-tabs-header2")
            }
            break;
        default:
            Q = H.childNodes;
            for (O = 0, g = Q.length; O < g; O++) {
                c = Q[O];
                mini.removeClass(c, "mini-tabs-header2");
                if (g > 1 && O == 0) mini.addClass(c, "mini-tabs-header2")
            }
            break
    }
    mini.removeClass(this.el, "mini-tabs-scroll");
    var L = mini.byClass("mini-tabs-lastSpace", this.el),
        K = mini.byClass("mini-tabs-buttons", this.el),
        X = H.parentNode;
    X.style["paddingRight"] = "0px";
    if (this._navEl) this._navEl.style.display = "none";
    if (this._leftNavEl) this._navEl.style.display = "none";
    if (K) K.style.display = "none";
    var A = this.buttonsAlign == "right";
    if (!A) {
        K.style.right = "auto";
        K.style.left = "0"
    }
    mini.setWidth(X, S);
    if ((h == "top" || h == "bottom") && (this.tabAlign == "left" || this.tabAlign == "right")) {
        H.style.width = "auto";
        K.style.display = "block";
        var _ = S,
            F = H.firstChild.offsetWidth - L.offsetWidth,
            i = K.firstChild ? K.offsetWidth : 0;
        if (F + i > _) {
            this._navEl.style.display = "block";
            var N = this._navEl.offsetWidth,
                d = 0;
            if (this.showNavMenu) {
                this._headerMenuEl.style.display = "inline-block";
                d = this._headerMenuEl.offsetWidth;
                this._headerMenuEl.style.right = i + "px";
                this.l01O1Menu()
            }
            var I = 0;
            if (this.arrowPosition == "side") {
                this._leftNavEl.style.display = "block";
                I = this._leftNavEl.offsetWidth;
                H.style.left = I + "px"
            }
            this._navEl.style.right = (A ? i : 0) + d + "px";
            var b = _ - i - N - I - d;
            mini.setWidth(H, b)
        }
        H.style.marginLeft = (A ? 0 : i) + "px"
    }
    this._scrollToTab(this.activeIndex);
    this.OO1o();
    mini.layout(G);
    var M = this,
        k = this.getActiveTab();
    if (k && k.repaint && a) {
        b = a.style.width;
        a.style.width = "0px";
        setTimeout(function() {
            a.style.width = b
        }, 1)
    }
    this.fire("layout")
};
mini_Tabs__getTabBy_Id = function(B) {
    for (var $ = 0, A = this.tabs.length; $ < A; $++) {
        var _ = this.tabs[$];
        if (_._id == B) return _
    }
};
mini_Tabs_l01O1Menu = function() {
    this._headerMenu = new mini.Menu();
    this._headerMenu.setIdField("_id");
    this._headerMenu.setTextField("title");
    this._headerMenu.setPopupEl(this._headerMenuEl);
    this._headerMenu.setShowAction("leftclick");
    this._headerMenu.setHideAction("outerclick");
    this._headerMenu.setXAlign("left");
    this._headerMenu.setYAlign("below");
    this._headerMenu.on("itemclick", this._doMenuSelectTab, this);
    this._headerMenu.hide();
    this._headerMenu.owner = this._headerMenuEl
};
mini_Tabs__setHeaderMenuItems = function() {

    var A = this.getTabs(),
        B = [];
    for (var _ = 0, C = A.length; _ < C; _++) {
        var $ = A[_];
        B.push({
            id: $._id,
            text: $[this.titleField]
        })
    }
    this._headerMenu.setItems(B)
};
mini_Tabs__doMenuSelectTab = function(A) {
    var $ = A.item,
        _ = this._getTabBy_Id($.id);
    this.activeTab(_)
};
mini_Tabs_setTabAlign = function($) {
    this.tabAlign = $;
    this.doUpdate()
};
mini_Tabs_setTabPosition = function($) {
    this.tabPosition = $;
    this.doUpdate()
};
mini_Tabs_setAllowClickWrap = function($) {
    this.allowClickWrap = $
};
mini_Tabs_getAllowClickWrap = function() {
    return this.allowClickWrap
};
mini_Tabs_getTab = function($) {
    if (typeof $ == "object") return $;
    if (typeof $ == "number") return this.tabs[$];
    else
        for (var _ = 0, B = this.tabs.length; _ < B; _++) {
            var A = this.tabs[_];
            if (A.name == $) return A
        }
};
mini_Tabs_getHeaderEl = function() {
    return this.o1oO0
};
mini_Tabs_getBodyEl = function() {
    return this._bodyEl
};
mini_Tabs_getTabEl = function($) {
    var C = this.getTab($);
    if (!C) return null;
    var E = this.ol101(C),
        B = this.el.getElementsByTagName("*");
    for (var _ = 0, D = B.length; _ < D; _++) {
        var A = B[_];
        if (A.id == E) return A
    }
    return null
};
mini_Tabs_getTabBodyEl = function($) {
    var C = this.getTab($);
    if (!C) return null;
    var E = this.OO1o0O(C),
        B = this._bodyEl.childNodes;
    for (var _ = 0, D = B.length; _ < D; _++) {
        var A = B[_];
        if (A.id == E) return A
    }
    return null
};
mini_Tabs_getTabIFrameEl = function($) {
    var _ = this.getTab($);
    if (!_) return null;
    return _.ll1ol
};
mini_Tabs_ol101 = function($) {
    return this.uid + "$" + $._id
};
mini_Tabs_OO1o0O = function($) {
    return this.uid + "$body$" + $._id
};
mini_Tabs_OO1o = function() {
    if (this.tabPosition == "top" || this.tabPosition == "bottom") {
        mini.removeClass(this.OoOOO, "mini-disabled");
        mini.removeClass(this.oOo1ll, "mini-disabled");
        if (this.o1oO0.scrollLeft == 0) mini.addClass(this.OoOOO, "mini-disabled");
        var _ = this.getTabEl(this.tabs.length - 1);
        if (_) {
            var $ = mini.getBox(_),
                A = mini.getBox(this.o1oO0);
            if ($.right <= A.right) mini.addClass(this.oOo1ll, "mini-disabled")
        }
    }
};
mini_Tabs_setActiveIndex = function($, I) {
    var K = this.getTab($),
        D = this.getTab(this.activeIndex),
        N = K != D,
        J = this.getTabBodyEl(this.activeIndex);
    if (J) J.style.display = "none";
    if (K) this.activeIndex = this.tabs.indexOf(K);
    else this.activeIndex = -1;
    J = this.getTabBodyEl(this.activeIndex);
    if (J) J.style.display = "";
    J = this.getTabEl(D);
    if (J) mini.removeClass(J, this.l11l);
    J = this.getTabEl(K);
    if (J) mini.addClass(J, this.l11l);
    if (J && N) {
        if (this.tabPosition == "bottom") {
            var A = oOlO(J, "mini-tabs-header");
            if (A) jQuery(this.o1oO0).prepend(A)
        } else if (this.tabPosition == "left") {
            var G = oOlO(J, "mini-tabs-header").parentNode;
            if (G) G.parentNode.appendChild(G)
        } else if (this.tabPosition == "right") {
            G = oOlO(J, "mini-tabs-header").parentNode;
            if (G) jQuery(G.parentNode).prepend(G)
        } else {
            A = oOlO(J, "mini-tabs-header");
            if (A && this.allowClickWrap) this.o1oO0.appendChild(A)
        }
        var B = this.o1oO0.scrollLeft,
            D = this.getTab(this.activeIndex),
            O = D ? !D._layouted : false,
            L = this.isAutoHeight();
        if (L || O) {
            if (D) D._layouted = true;
            this.doLayout()
        }
        var _ = this.getTabRows();
        if (_.length > 1);
        else {
            this._scrollToTab(this.activeIndex);
            this.OO1o()
        }
        for (var H = 0, F = this.tabs.length; H < F; H++) {
            var M = this.getTabEl(this.tabs[H]);
            if (M) mini.removeClass(M, this.llolO1)
        }
    }
    var E = this;
    if (N) {
        var P = {
            tab: K,
            index: this.tabs.indexOf(K),
            name: K ? K.name : ""
        };
        setTimeout(function() {
            E.fire("ActiveChanged", P)
        }, 1)
    }
    this._cancelLoadTabs(K);
    if (I !== false) {
        if (K && K.url && !K.loadedUrl) {
            E = this;
            E.loadTab(K.url, K)
        }
    }
    if (K)
        if (mini.isChrome) {
            var C = this.getTabIFrameEl(K);
            if (C) {
                C.style.position = "relative";
                C.style.left = "1px";
                C.offsetWidth;
                C.style.left = "0px"
            }
        }
    if (E.canLayout()) {
        try {
            mini.layoutIFrames(E.el)
        } catch (P) {}
    }
};
mini_Tabs__scrollToTab = function(B) {
    var _ = this.o1oO0.scrollLeft;
    if (this.tabPosition == "top" || this.tabPosition == "bottom") {
        this.o1oO0.scrollLeft = _;
        var C = this.getTabEl(B);
        if (C) {
            var $ = this,
                A = mini.getBox(C),
                D = mini.getBox($.o1oO0);
            if (A.x < D.x) $.o1oO0.scrollLeft -= (D.x - A.x);
            else if (A.right > D.right) $.o1oO0.scrollLeft += (A.right - D.right)
        }
    }
};
mini_Tabs_getActiveIndex = function() {
    return this.activeIndex
};
mini_Tabs_activeTab = function($) {
    this.setActiveIndex($)
};
mini_Tabs_getActiveTab = function() {
    return this.getTab(this.activeIndex)
};
mini_Tabs_getActiveIndex = function() {
    return this.activeIndex
};
mini_Tabs_o101o = function(_) {
    _ = this.getTab(_);
    if (!_) return;
    var $ = this.tabs.indexOf(_);
    if (this.activeIndex == $) return;
    var A = {
        tab: _,
        index: $,
        name: _.name,
        cancel: false
    };
    this.fire("BeforeActiveChanged", A);
    if (A.cancel == false) this.activeTab(_)
};
mini_Tabs_setShowHeader = function($) {
    if (this.showHeader != $) {
        this.showHeader = $;
        this.doLayout()
    }
};
mini_Tabs_getShowHeader = function() {
    return this.showHeader
};

mini_Tabs_setShowBody = function($) {
    if (this.showBody != $) {
        this.showBody = $;
        this.doLayout()
    }
};
mini_Tabs_getShowBody = function() {
    return this.showBody
};
mini_Tabs_setBodyStyle = function($) {
    this.bodyStyle = $;
    mini.setStyle(this._bodyEl, $);
    this.doLayout()
};
mini_Tabs_getBodyStyle = function() {

    return this.bodyStyle
};
mini_Tabs_setMaskOnLoad = function($) {

    this.maskOnLoad = $
};
mini_Tabs_getMaskOnLoad = function() {
    return this.maskOnLoad
};
mini_Tabs_setPlain = function($) {
    this.plain = $;
    this.doLayout()
};
mini_Tabs_getPlain = function() {
    return this.plain
};
mini_Tabs_setArrowPosition = function($) {

    this.arrowPosition = $
};
mini_Tabs_getArrowPosition = function() {
    return this.arrowPosition
};
mini_Tabs_setShowNavMenu = function($) {

    this.showNavMenu = $
};
mini_Tabs_getShowNavMenu = function() {
    return this.showNavMenu
};

mini_TreeSelect_l0Ooll = function(e) {};
mini_DatePicker_getMinDate = function() {
    return this.minDate;
};
mini_Tabs_setClearTimeStamp = function($) {
    this.clearTimeStamp = $
};
mini_Tabs_getClearTimeStamp = function() {

    return this.clearTimeStamp
};
mini_Tabs_getTabByEvent = function($) {
    return this.oO101O($)
};
mini_Tabs_oO101O = function(B) {
    var A = oOlO(B.target, "mini-tab");
    if (!A) return null;
    var _ = A.id.split("$");
    if (_[0] != this.uid) return null;
    var $ = parseInt(jQuery(A).attr("index"));
    return this.getTab($)
};
mini_Tabs_o1oo11 = function(_) {

    var $ = this.oO101O(_);
    if (!$) return;
    var _ = {
        tab: $
    };
    this.fire("tabdblclick", _)
};
mini_Tabs_Ol1o1 = function(B) {
    var _ = this.oO101O(B);
    if (!_) return;
    var $ = !!oOlO(B.target, "mini-tab-close");
    if (!$ && _ == this.getActiveTab() && !_.refreshOnClick) return;
    if (_.enabled) {
        var A = this;
        setTimeout(function() {
            if ($) A.Ool1o(_, B);
            else {
                var C = _.loadedUrl;
                A.o101o(_);
                if (_.refreshOnClick && _.url == C) A.reloadTab(_)
            }
        }, 10)
    }
};
mini_Tabs_O1l1lo = function(A) {
    var $ = this.oO101O(A);
    if ($ && $.enabled) {
        var _ = this.getTabEl($);
        mini.addClass(_, this.llolO1);
        this.hoverTab = $
    }
};
mini_Tabs_O11O11 = function(_) {
    if (this.hoverTab) {
        var $ = this.getTabEl(this.hoverTab);
        mini.removeClass($, this.llolO1)
    }
    this.hoverTab = null
};
mini_Tabs_olol = function(B) {
    clearInterval(this.l10o0l);
    if (this.tabPosition == "top" || this.tabPosition == "bottom") {
        var _ = this,
            A = 0,
            $ = 10;
        if (B.target == this.OoOOO) this.l10o0l = setInterval(function() {
            _.o1oO0.scrollLeft -= $;
            A++;
            if (A > 5) $ = 18;
            if (A > 10) $ = 25;
            _.OO1o()
        }, 25);
        else if (B.target == this.oOo1ll) this.l10o0l = setInterval(function() {
            _.o1oO0.scrollLeft += $;
            A++;
            if (A > 5) $ = 18;
            if (A > 10) $ = 25;
            _.OO1o()
        }, 25);
        else if (B.target == this._headerMenuEl) this._setHeaderMenuItems();
        mini.on(document, "mouseup", this.lo010o, this)
    }
};
mini_Tabs_lo010o = function($) {
    clearInterval(this.l10o0l);
    this.l10o0l = null;
    mini.un(document, "mouseup", this.lo010o, this)
};
mini_Tabs_OOO11l = function() {
    var L = this.tabPosition == "top",
        O = "";
    O += "<div class=\"mini-tabs-scrollCt\">";
    if (this.arrowPosition == "side") {
        O += "<div class=\"mini-tabs-leftnav\"><a class=\"mini-tabs-leftButton\" href=\"javascript:void(0)\" hideFocus onclick=\"return false\"></a></div>";
        O += "<div class=\"mini-tabs-nav\"><a class=\"mini-tabs-rightButton\" href=\"javascript:void(0)\" hideFocus onclick=\"return false\"></a></div>"
    } else O += "<div class=\"mini-tabs-nav\"><a class=\"mini-tabs-leftButton\" href=\"javascript:void(0)\" hideFocus onclick=\"return false\"></a><a class=\"mini-tabs-rightButton\" href=\"javascript:void(0)\" hideFocus onclick=\"return false\"></a></div>";
    if (this.showNavMenu) O += "<a class=\"mini-tabs-tabmenu\" href=\"javascript:void(0)\" hideFocus onclick=\"return false\"></a>";
    O += "<div class=\"mini-tabs-buttons\" a=1 style=\"" + (this.buttonsAlign == "right" ? "" : "right:auto;left:0;") + "\"></div>";
    O += "<div class=\"mini-tabs-headers\">";
    var B = this.getTabRows();
    for (var M = 0, A = B.length; M < A; M++) {
        var I = B[M],
            E = "";
        O += "<table class=\"mini-tabs-header\" cellspacing=\"0\" cellpadding=\"0\"><tr><td class=\"mini-tabs-space mini-tabs-firstSpace\"><div></div></td>";
        for (var J = 0, F = I.length; J < F; J++) {
            var N = I[J],
                G = this.ol101(N);
            if (!N.visible) continue;
            var $ = this.tabs.indexOf(N),
                E = N.headerCls || "";
            if (N.enabled == false) E += " mini-disabled";
            O += "<td title=\"" + N.tooltip + "\" id=\"" + G + "\" index=\"" + $ + "\"  class=\"mini-tab " + E + "\" style=\"" + N.headerStyle + "\">";
            if (N.iconCls || N.iconStyle) O += "<span class=\"mini-tab-icon mini-iconfont " + N.iconCls + "\" style=\"" + N.iconStyle + "\"></span>";
            O += "<span class=\"mini-tab-text\">" + N.title + "</span>";
            if (N.showCloseButton) {
                var _ = "";
                if (N.enabled) _ = "onmouseover=\"mini.addClass(this,'mini-tab-close-hover')\" onmouseout=\"mini.removeClass(this,'mini-tab-close-hover')\"";
                O += "<span class=\"mini-tab-close\" " + _ + " ></span>"
            }
            O += "</td>";
            if (J != F - 1) O += "<td class=\"mini-tabs-space2\"><div></div></td>"
        }
        O += "<td class=\"mini-tabs-space mini-tabs-lastSpace\" ><div></div></td></tr></table>"
    }
    O += "</div>";
    O += "</div>";
    this.l0OOl();
    mini.prepend(this.Ool1oO, O);
    var H = this.Ool1oO;
    this.o1oO0 = H.firstChild.lastChild;
    if (this.arrowPosition == "side") {
        this._leftNavEl = H.firstChild.firstChild;
        this._navEl = this.o1oO0.parentNode.children[1];
        this.OoOOO = this._leftNavEl.firstChild;
        this.oOo1ll = this._navEl.firstChild;
        if (this.showNavMenu) this._headerMenuEl = this.o1oO0.parentNode.children[2]
    } else {
        this._navEl = this.o1oO0.parentNode.firstChild;
        this.OoOOO = this._navEl.firstChild;
        this.oOo1ll = this._navEl.childNodes[1];
        if (this.showNavMenu) this._headerMenuEl = this.o1oO0.parentNode.children[1]
    }
    switch (this.tabAlign) {
        case "center":
            var K = this.o1oO0.childNodes;
            for (J = 0, F = K.length; J < F; J++) {
                var C = K[J],
                    D = C.getElementsByTagName("td");
                D[0].style.width = "50%";
                D[D.length - 1].style.width = "50%"
            }
            break;
        case "right":
            K = this.o1oO0.childNodes;
            for (J = 0, F = K.length; J < F; J++) {
                C = K[J], D = C.getElementsByTagName("td");
                D[0].style.width = "100%"
            }
            break;
        case "fit":
            break;
        default:
            K = this.o1oO0.childNodes;
            for (J = 0, F = K.length; J < F; J++) {
                C = K[J], D = C.getElementsByTagName("td");
                D[D.length - 1].style.width = "100%"
            }
            break
    }
};
mini_Tabs_oO00 = function() {
    this.OOO11l();
    var $ = this.Ool1oO;
    mini.append($, $.firstChild);
    this.o1oO0 = $.lastChild.lastChild
};
mini_Tabs_O0ll00 = function() {
    var J = "<table cellspacing=\"0\" cellpadding=\"0\"><tr>",
        B = this.getTabRows();
    for (var H = 0, A = B.length; H < A; H++) {
        var F = B[H],
            C = "";
        if (A > 1 && H != A - 1) C = "mini-tabs-header2";
        J += "<td class=\"" + C + "\"><table class=\"mini-tabs-header\" cellspacing=\"0\" cellpadding=\"0\">";
        J += "<tr ><td class=\"mini-tabs-space mini-tabs-firstSpace\" ><div></div></td></tr>";
        for (var G = 0, D = F.length; G < D; G++) {
            var I = F[G],
                E = this.ol101(I);
            if (!I.visible) continue;
            var $ = this.tabs.indexOf(I),
                C = I.headerCls || "";
            if (I.enabled == false) C += " mini-disabled";
            J += "<tr><td id=\"" + E + "\" index=\"" + $ + "\"  class=\"mini-tab " + C + "\" style=\"" + I.headerStyle + "\">";
            if (I.iconCls || I.iconStyle) J += "<span class=\"mini-tab-icon mini-iconfont " + I.iconCls + "\" style=\"" + I.iconStyle + "\"></span>";
            J += "<span class=\"mini-tab-text\">" + I.title + "</span>";
            if (I.showCloseButton) {
                var _ = "";
                if (I.enabled) _ = "onmouseover=\"mini.addClass(this,'mini-tab-close-hover')\" onmouseout=\"mini.removeClass(this,'mini-tab-close-hover')\"";
                J += "<span class=\"mini-tab-close\" " + _ + "></span>"
            }
            J += "</td></tr>";
            if (G != D - 1) J += "<tr><td class=\"mini-tabs-space2\"><div></div></td></tr>"
        }
        J += "<tr ><td class=\"mini-tabs-space mini-tabs-lastSpace\" ><div></div></td></tr>";
        J += "</table></td>"
    }
    J += "</tr ></table>";
    this.l0OOl();
    mini.addClass(this.Oo01o, "mini-tabs-header");
    mini.append(this.Oo01o, J);
    this.o1oO0 = this.Oo01o
};
mini_Tabs_oO11OO = function() {


    this.O0ll00();
    mini.removeClass(this.Oo01o, "mini-tabs-header");
    mini.removeClass(this.ll011O, "mini-tabs-header");
    mini.append(this.ll011O, this.Oo01o.firstChild);
    this.o1oO0 = this.ll011O
};
mini_Tabs_Ool1o = function(_, $) {
    var C = {
        tab: _,
        index: this.tabs.indexOf(_),
        name: _.name.toLowerCase(),
        htmlEvent: $,
        cancel: false
    };
    this.fire("beforecloseclick", C);
    if (C.cancel == true) return;
    try {
        if (_.ll1ol && _.ll1ol.contentWindow) {
            var A = true;
            if (_.ll1ol.contentWindow.CloseWindow) A = _.ll1ol.contentWindow.CloseWindow("close");
            else if (_.ll1ol.contentWindow.CloseOwnerWindow) A = _.ll1ol.contentWindow.CloseOwnerWindow("close");
            if (A === false) C.cancel = true
        }
    } catch (B) {}
    if (C.cancel == true) return;
    _.removeAction = "close";
    this.removeTab(_);
    this.fire("closeclick", C)
};
mini_Tabs_onBeforeCloseClick = function(_, $) {

    this.on("beforecloseclick", _, $)
};
mini_Tabs_onCloseClick = function(_, $) {
    this.on("closeclick", _, $)
};
mini_Tabs_onActiveChanged = function(_, $) {
    this.on("activechanged", _, $)
};
mini_Tabs_getAttrs = function(el) {
    var attrs = mini.Tabs.superclass.getAttrs.call(this, el);
    mini._ParseString(el, attrs, ["tabAlign", "tabPosition", "bodyStyle", "onactivechanged", "onbeforeactivechanged", "url", "ontabload", "ontabdestroy", "onbeforecloseclick", "oncloseclick", "ontabdblclick", "titleField", "urlField", "nameField", "loadingMsg", "buttons", "arrowPosition", "buttonsAlign"]);
    mini._ParseBool(el, attrs, ["allowAnim", "showBody", "showHeader", "maskOnLoad", "plain", "allowClickWrap", "showNavMenu", "clearTimeStamp"]);
    mini._ParseInt(el, attrs, ["activeIndex"]);
    var tabs = [],
        nodes = mini.getChildNodes(el);
    for (var i = 0, l = nodes.length; i < l; i++) {
        var node = nodes[i],
            o = {};
        tabs.push(o);
        o.style = node.style.cssText;
        mini._ParseString(node, o, ["name", "title", "url", "cls", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle", "onload", "ondestroy", "data-options", "tooltip"]);
        mini._ParseBool(node, o, ["newLine", "visible", "enabled", "showCloseButton", "refreshOnClick"]);
        o.bodyParent = node;
        var options = o["data-options"];
        if (options) {
            options = eval("(" + options + ")");
            if (options) mini.copyTo(o, options)
        }
    }
    attrs.tabs = tabs;
    return attrs
};
mini_Menu_getbyName = function(C) {
    for (var _ = 0, B = this.items.length; _ < B; _++) {
        var $ = this.items[_];
        if ($.name == C) return $;
        if ($.menu) {
            var A = $.menu.getbyName(C);
            if (A) return A
        }
    }
    return null
};
mini_Menu_set = function($) {
    if (typeof $ == "string") return this;
    var _ = $.url;
    delete $.url;
    if ($.imgPath) this.setImgPath($.imgPath);
    delete $.imgPath;
    this.ownerItem = $.ownerItem;
    delete $.ownerItem;
    mini.Menu.superclass.set.call(this, $);
    if (_) this.setUrl(_);
    return this
};
mini_Menu__create = function() {
    this.el = document.createElement("div");
    this.el.className = "mini-menu";
    this.el.innerHTML = "<div class=\"mini-menu-border\"><a class=\"mini-menu-topArrow\" href=\"#\" onclick=\"return false\"></a><div class=\"mini-menu-inner\"></div><a class=\"mini-menu-bottomArrow\" href=\"#\" onclick=\"return false\"></a></div>";
    this._borderEl = this.el.firstChild;
    this._topArrowEl = this._borderEl.childNodes[0];
    this._bottomArrowEl = this._borderEl.childNodes[2];
    this._innerEl = this._borderEl.childNodes[1];
    this._innerEl.innerHTML = "<div class=\"mini-menu-float\"></div><div class=\"mini-menu-toolbar\"></div><div style=\"clear:both;max-height:1px;\"></div>";
    this._contentEl = this._innerEl.firstChild;
    this.OO01O = this._innerEl.childNodes[1];
    if (this.isVertical() == false) mini.addClass(this.el, "mini-menu-horizontal")
};
mini_Menu_destroy = function(_) {
    if (this.items)
        for (var $ = 0, A = this.items.length; $ < A; $++) this.items[$].destroy();
    if (this._topArrowEl) this._topArrowEl.onmousedown = this._bottomArrowEl.onmousedown = null;
    this._popupEl = this.popupEl = this._borderEl = this._innerEl = this._contentEl = this.OO01O = null;
    this._topArrowEl = this._bottomArrowEl = null;
    this.owner = null;
    this.window = null;
    mini.un(document, "mousedown", this.lO00Oo, this);
    mini.un(window, "resize", this.l10Ol, this);
    mini.Menu.superclass.destroy.call(this, _)
};
mini_Menu__initEvents = function() {
    mini._BindEvents(function() {
        mini.on(document, "mousedown", this.lO00Oo, this);
        OooO(this.el, "mouseover", this.__OnMouseOver, this);
        mini.on(window, "resize", this.l10Ol, this);
        if (this._disableContextMenu) OooO(this.el, "contextmenu", function($) {
            $.preventDefault()
        }, this);
        OooO(this._topArrowEl, "mousedown", this.__OnTopMouseDown, this);
        OooO(this._bottomArrowEl, "mousedown", this.__OnBottomMouseDown, this)
    }, this)
};
mini_Menu_within = function(B) {
    if (Oolo(this.el, B.target)) return true;
    for (var _ = 0, A = this.items.length; _ < A; _++) {
        var $ = this.items[_];
        if ($.within(B)) return true
    }
    return false
};
mini_Menu_setVertical = function($) {
    this.vertical = $;
    if (!$) mini.addClass(this.el, "mini-menu-horizontal");
    else mini.removeClass(this.el, "mini-menu-horizontal")
};
mini_Menu_getVertical = function() {
    return this.vertical
};
mini_Menu_isVertical = function() {
    return this.vertical
};
mini_Menu_show = function() {
    this.setVisible(true)
};
mini_Menu_hide = function() {
    this.hideItems();
    OOooo1_prototype_hide.call(this)
};
mini_Menu_hideItems = function() {
    for (var $ = 0, A = this.items.length; $ < A; $++) {
        var _ = this.items[$];
        _.hideMenu()
    }
};
mini_Menu_showItemMenu = function($) {
    for (var _ = 0, B = this.items.length; _ < B; _++) {
        var A = this.items[_];
        if (A == $) A.showMenu();
        else A.hideMenu()
    }
};
mini_Menu_hasShowItemMenu = function() {

    for (var $ = 0, A = this.items.length; $ < A; $++) {
        var _ = this.items[$];
        if (_ && _.menu && _.menu.isPopup) return true
    }
    return false
};
mini_Menu_setData = function($) {
    if (!mini.isArray($)) $ = [];
    this.setItems($)
};
mini_Menu_getData = function() {
    return this.getItems()
};
mini_Menu_setItems = function(_) {
    if (!mini.isArray(_)) _ = [];
    this.removeAll();
    var A = new Date();
    for (var $ = 0, B = _.length; $ < B; $++) this.addItem(_[$])
};
mini_Menu_getItems = function() {
    return this.items
};
mini_Menu_addItem = function($) {
    if ($ == "-" || $ == "|" || $.type == "separator") {
        mini.append(this._contentEl, "<span id=\"" + $.id + "\" name=\"" + ($.name || "") + "\" class=\"mini-separator\"></span>");
        return
    }
    if (!mini.isControl($) && !mini.getClass($.type)) $.type = this._itemType;
    $.ownerMenu = this;
    $ = mini.getAndCreate($);
    this.items.push($);
    this._contentEl.appendChild($.el);
    $.ownerMenu = this;
    this.fire("itemschanged")
};
mini_Menu_removeItem = function($) {


    $ = mini.get($);
    if (!$) return;
    this.items.remove($);
    this._contentEl.removeChild($.el);
    this.fire("itemschanged")
};
mini_Menu_removeItemAt = function(_) {
    var $ = this.items[_];
    this.removeItem($)
};
mini_Menu_removeAll = function() {
    var _ = this.items.clone();
    for (var $ = _.length - 1; $ >= 0; $--) this.removeItem(_[$]);
    this._contentEl.innerHTML = ""
};
mini_Menu_getGroupItems = function(C) {
    if (!C) return [];
    var A = [];
    for (var _ = 0, B = this.items.length; _ < B; _++) {
        var $ = this.items[_];
        if ($.groupName == C) A.push($)
    }
    return A
};
mini_Menu_getItem = function($) {
    if (typeof $ == "number") return this.items[$];
    if (typeof $ == "string") {
        for (var _ = 0, B = this.items.length; _ < B; _++) {
            var A = this.items[_];
            if (A.id == $) return A
        }
        return null
    }
    if ($ && this.items.indexOf($) != -1) return $;
    return null
};
mini_Menu_setAllowSelectItem = function($) {
    this.allowSelectItem = $
};
mini_Menu_getAllowSelectItem = function() {
    return this.allowSelectItem
};
mini_Menu_setSelectedItem = function($) {
    $ = this.getItem($);
    this._OnItemSelect($)
};
mini_Menu_getSelectedItem = function($) {

    return this.l11Ol1
};
mini_Menu_setShowNavArrow = function($) {
    this.showNavArrow = $
};
mini_Menu_getShowNavArrow = function() {


    return this.showNavArrow
};
mini_Menu_setTextField = function($) {
    this.textField = $
};
mini_Menu_getTextField = function() {
    return this.textField
};
mini_Menu_setResultAsTree = function($) {
    this.resultAsTree = $
};
mini_Menu_getResultAsTree = function() {

    return this.resultAsTree
};
mini_Menu_setIdField = function($) {
    this.idField = $
};
mini_Menu_getIdField = function() {
    return this.idField
};
mini_Menu_setParentField = function($) {
    this.parentField = $
};
mini_Menu_getParentField = function() {
    return this.parentField
};
mini_Menu_setIconClsField = function($) {
    this.iconClsField = $
};
mini_Menu_getIconClsField = function() {
    return this.iconClsField
};
mini_Menu_setOverflow = function($) {
    this.overflow = $;
    if ($) mini.addClass(this.el, "mini-menu-overflow");
    else mini.removeClass(this.el, "mini-menu-overflow")
};
mini_Menu_getOverflow = function() {
    return this.overflow
};
mini_Menu_doLayout = function() {

    if (!this.canLayout()) return;
    var C = this._innerEl,
        $ = this._topArrowEl,
        D = this._bottomArrowEl;
    if (!this.isAutoHeight()) {
        var A = mini.getHeight(this.el, true);
        mini.setHeight(this._borderEl, A);
        $.style.display = D.style.display = "none";
        this._contentEl.style.height = "auto";
        if (this.showNavArrow && this._borderEl.scrollHeight > this._borderEl.clientHeight) {
            $.style.display = D.style.display = "block";
            A = mini.getHeight(this._borderEl, true);
            var F = mini.getHeight($),
                E = mini.getHeight(D),
                B = A - F - E;
            if (B < 0) B = 0;
            mini.setHeight(this._contentEl, B);
            var _ = mini.getWidth(this._borderEl, true);
            mini.setWidth($, _);
            mini.setWidth(D, _)
        } else this._contentEl.style.height = "auto"
    } else {
        this._borderEl.style.height = "auto";
        this._contentEl.style.height = "auto"
    }
    if (this.overflow) {
        $.style.display = D.style.display = "none";
        C.style.marginLeft = C.style.marginRight = "0px";
        if (this._getScrollWidth() > this._innerEl.offsetWidth) {
            $.style.display = D.style.display = "block";
            C.style.marginLeft = C.style.marginRight = "15px"
        } else C.scrollLeft = 0
    }
};
mini_Menu_O0oOoo = function() {
    if (this.height == "auto") {
        this.el.style.height = "auto";
        this._borderEl.style.height = "auto";
        this._contentEl.style.height = "auto";
        this._topArrowEl.style.display = this._bottomArrowEl.style.display = "none";
        var B = mini.getViewportBox(),
            A = mini.getBox(this.el);
        this.maxHeight = B.height - 25;
        if (this.ownerItem) {
            var A = mini.getBox(this.ownerItem.el),
                C = A.top,
                _ = B.height - A.bottom,
                $ = C > _ ? C : _;
            $ -= 10;
            this.maxHeight = $
        }
    }
    this.el.style.display = "";
    A = mini.getBox(this.el);
    if (A.width > this.maxWidth) {
        mini.setWidth(this.el, this.maxWidth);
        A = mini.getBox(this.el)
    }
    if (A.height > this.maxHeight) {
        mini.setHeight(this.el, this.maxHeight);
        A = mini.getBox(this.el)
    }
    if (A.width < this.minWidth) {
        mini.setWidth(this.el, this.minWidth);
        A = mini.getBox(this.el)
    }
    if (A.height < this.minHeight) {
        mini.setHeight(this.el, this.minHeight);
        A = mini.getBox(this.el)
    }
};
mini_Menu__doLoad = function() {

    var B = mini._getResult(this.url, null, null, null, null, this.dataField);
    if (this.dataField && !mini.isArray(B)) B = mini._getMap(this.dataField, B);
    if (!B) B = [];
    if (this.resultAsTree == false) B = mini.arrayToTree(B, this.itemsField, this.idField, this.parentField);
    var _ = mini.treeToArray(B, this.itemsField, this.idField, this.parentField);
    for (var A = 0, D = _.length; A < D; A++) {
        var $ = _[A];
        $.text = mini._getMap(this.textField, $);
        $.iconCls = mini._getMap(this.iconClsField, $);
        if (mini.isNull($.text)) $.text = ""
    }
    var C = new Date();
    this.setItems(B);
    this.fire("load")
};
mini_Menu_loadList = function(_, E, B) {
    if (!_) return;
    E = E || this.idField;
    B = B || this.parentField;
    for (var A = 0, D = _.length; A < D; A++) {
        var $ = _[A];
        $.text = mini._getMap(this.textField, $);
        $.iconCls = mini._getMap(this.iconClsField, $);
        if (mini.isNull($.text)) $.text = ""
    }
    var C = mini.arrayToTree(_, this.itemsField, E, B);
    this.load(C)
};
mini_Menu_load = function($) {
    if (typeof $ == "string") this.setUrl($);
    else this.setItems($)
};
mini_Menu_setUrl = function($) {
    this.url = $;
    this._doLoad()
};
mini_Menu_getUrl = function() {

    return this.url
};

mini_TreeSelect_indexOf = function(item) {
    return this.data.indexOf(item);
};
mini_Menu_setHideOnClick = function($) {
    this.hideOnClick = $
};
mini_Menu_getHideOnClick = function() {
    return this.hideOnClick
};
mini_Menu_setImgPath = function($) {
    this.imgPath = $
};
mini_Menu_getImgPath = function() {
    return this.imgPath
};
mini_Menu__OnItemClick = function($, _) {
    var A = {
        item: $,
        isLeaf: !$.menu,
        htmlEvent: _
    };
    if (this.hideOnClick)
        if (this.isPopup) this.hide();
        else if (A.isLeaf) this.hideItems();
    if (this.allowSelectItem && this.l11Ol1 != $) this.setSelectedItem($);
    this.fire("itemclick", A);
    if (this.ownerItem);
};
mini_Menu__OnItemSelect = function($) {
    if (this.l11Ol1) this.l11Ol1.removeCls(this._llOO1O);
    this.l11Ol1 = $;
    if (this.l11Ol1) this.l11Ol1.addCls(this._llOO1O);
    var _ = {
        item: this.l11Ol1,
        isLeaf: this.l11Ol1 ? !this.l11Ol1.menu : false
    };
    this.fire("itemselect", _)
};
mini_Menu_onItemClick = function(_, $) {
    this.on("itemclick", _, $)
};
mini_Menu_onItemSelect = function(_, $) {

    this.on("itemselect", _, $)
};
mini_Menu___OnTopMouseDown = function($) {
    this._startScrollMove(-20)
};
mini_Menu___OnBottomMouseDown = function($) {
    this._startScrollMove(20)
};
mini_Menu__getScrollWidth = function() {
    var A = this,
        _ = 0,
        C = jQuery(".mini-menuitem", A.el).first()[0],
        $ = jQuery(".mini-menuitem", A.el).last()[0];
    if (C && $) {
        var D = mini.getBox(C),
            B = mini.getBox($);
        _ = B.right - D.left
    }
    return _
};
mini_Menu__getMaxScrollLeft = function() {
    return parseInt(this._getScrollWidth() - this._innerEl.offsetWidth + 6)
};
mini_Menu__startScrollMove = function($) {
    clearInterval(this.l10o0l);
    var B = function() {
        clearInterval(A.l10o0l);
        mini.un(document, "mouseup", B)
    };
    mini.on(document, "mouseup", B);
    var _ = this._getMaxScrollLeft(),
        A = this;
    this.l10o0l = setInterval(function() {
        if (A.isVertical() == false) {
            var B = A._innerEl.scrollLeft;
            B += $;
            if (B > _) B = _;
            A._innerEl.scrollLeft = B
        } else A._contentEl.scrollTop += $
    }, 50)
};
mini_Menu_setToolbar = function($) {
    __mini_setControls($, this.OO01O, this);
    this.OO01O.style.display = "block"
};
mini_Menu_parseItems = function(G) {
    var C = [];
    for (var _ = 0, F = G.length; _ < F; _++) {
        var B = G[_];
        if (B.className == "separator") {
            var $ = {
                type: "separator",
                id: B.id,
                name: B.name
            };
            C.add($);
            continue
        }
        var E = mini.getChildNodes(B),
            A = E[0],
            D = E[1],
            $ = new mini.MenuItem();
        if (!D) {
            mini.applyTo.call($, B);
            C.add($);
            continue
        }
        mini.applyTo.call($, A);
        $.render(document.body);
        var H = new mini.Menu();
        mini.applyTo.call(H, D);
        $.setMenu(H);
        H.render(document.body);
        C.add($)
    }
    return C.clone()
};
mini_Menu_getAttrs = function(A) {

    var H = mini.Menu.superclass.getAttrs.call(this, A),
        G = jQuery(A);
    mini._ParseString(A, H, ["popupEl", "popupCls", "showAction", "hideAction", "xAlign", "yAlign", "modalStyle", "onbeforeopen", "open", "onbeforeclose", "onclose", "url", "onitemclick", "onitemselect", "textField", "idField", "parentField", "toolbar", "imgPath", "iconClsField"]);
    mini._ParseBool(A, H, ["resultAsTree", "hideOnClick", "showNavArrow", "showShadow", "overflow"]);
    var D = mini.getChildNodes(A);
    for (var $ = D.length - 1; $ >= 0; $--) {
        var C = D[$],
            B = jQuery(C).attr("property");
        if (!B) continue;
        B = B.toLowerCase();
        if (B == "toolbar") {
            H.toolbar = C;
            C.parentNode.removeChild(C)
        }
    }
    var D = mini.getChildNodes(A),
        _ = this.parseItems(D);
    if (_.length > 0) H.items = _;
    var E = G.attr("vertical");
    if (E) H.vertical = E == "true" ? true : false;
    var F = G.attr("allowSelectItem");
    if (F) H.allowSelectItem = F == "true" ? true : false;
    return H
};
mini_Popup__create = function() {
    var $ = this.el = document.createElement("div");
    this.el.className = "mini-popup";
    this._contentEl = this.el
};
mini_Popup__initEvents = function() {
    mini._BindEvents(function() {
        OooO(this.el, "mouseover", this.__OnMouseOver, this)
    }, this)
};
mini_Popup_doLayout = function() {
    if (!this.canLayout()) return;
    mini.Popup.superclass.doLayout.call(this);
    this.Olol0();
    var A = this.el.childNodes;
    if (A)
        for (var $ = 0, B = A.length; $ < B; $++) {
            var _ = A[$];
            mini.layout(_)
        }
};
mini_Popup_destroy = function($) {

    if (this.el) this.el.onmouseover = null;
    if (!mini._destroying) {
        mini.un(document, "mousedown", this.lO00Oo, this);
        mini.un(window, "resize", this.l10Ol, this)
    }
    if ($ !== false) {
        if (this.Ooo1) jQuery(this.Ooo1).remove();
        if (this.shadowEl) jQuery(this.shadowEl).remove();
        if (this._shimEl) jQuery(this._shimEl).remove()
    }
    this.Ooo1 = null;
    this.shadowEl = null;
    this._shimEl = null;
    mini.Popup.superclass.destroy.call(this, $)
};
mini_Popup_setWidth = function($) {
    if (parseInt($) == $) $ += "px";
    this.width = $;
    if ($.indexOf("px") != -1) mini.setWidth(this.el, $);
    else this.el.style.width = $;
    this._sizeChanged()
};
mini_Popup_setHeight = function($) {
    if (parseInt($) == $) $ += "px";
    this.height = $;
    if ($.indexOf("px") != -1) mini.setHeight(this.el, $);
    else this.el.style.height = $;
    this._sizeChanged()
};
mini_Popup_setBody = function(_) {
    if (!_) return;
    if (!mini.isArray(_)) _ = [_];
    for (var $ = 0, A = _.length; $ < A; $++) mini.append(this._contentEl, _[$])
};
mini_Popup_getAttrs = function($) {
    var A = mini.Popup.superclass.getAttrs.call(this, $);
    mini._ParseString($, A, ["popupEl", "popupCls", "showAction", "hideAction", "xAlign", "yAlign", "modalStyle", "onbeforeopen", "open", "onbeforeclose", "onclose"]);
    mini._ParseBool($, A, ["showModal", "showShadow", "allowDrag", "allowResize"]);
    mini._ParseInt($, A, ["showDelay", "hideDelay", "xOffset", "yOffset", "minWidth", "minHeight", "maxWidth", "maxHeight"]);
    var _ = mini.getChildNodes($, true);
    A.body = _;
    return A
};
mini_Pager_set = function(_) {

    if (typeof _ == "string") return this;
    var $ = _.pageIndex;
    delete _.pageIndex;
    mini.Pager.superclass.set.call(this, _);
    if (!mini.isNull($)) this.setPageIndex($);
    return this
};
mini_Pager__create = function() {
    this.el = document.createElement("div");
    this.el.className = "mini-pager";
    var _ = "<div class=\"mini-pager-left\"><table cellspacing=\"0\" cellpadding=\"0\" border=\"0\"><tr><td></td><td></td></tr></table></div><div class=\"mini-pager-right\"></div>";
    this.el.innerHTML = _;
    this._leftEl = this.el.childNodes[0];
    this._rightEl = this.el.childNodes[1];
    var $ = this._leftEl.getElementsByTagName("td");
    this._barEl = $[0];
    this._barEl2 = $[1];
    this.sizeEl = mini.append(this._barEl, "<span class=\"mini-pager-size\"></span>");
    this.sizeTextEl = mini.before(this.sizeEl, "<span class=\"mini-pager-sizetext\"></span>");
    this.sizeCombo = new mini.ComboBox();
    this.sizeCombo.setName("pagesize");
    this.sizeCombo.setWidth(this.pageSizeWidth);
    this.sizeCombo.render(this.sizeEl);
    mini.append(this.sizeEl, "<span class=\"separator\"></span>");
    this.firstButton = new mini.Button();
    this.firstButton.addCls("mini-pager-firstbutton");
    this.firstButton.render(this._barEl);
    this.prevButton = new mini.Button();
    this.prevButton.addCls("mini-pager-prevbutton");
    this.prevButton.render(this._barEl);
    this.indexEl = document.createElement("span");
    this.indexEl.className = "mini-pager-index";
    this.indexEl.innerHTML = "<input id=\"\" type=\"text\" class=\"mini-pager-num\"/><span class=\"mini-pager-pages\">/ 0</span>";
    this._barEl.appendChild(this.indexEl);
    this.numInput = this.indexEl.firstChild;
    this.pagesLabel = this.indexEl.lastChild;
    this.nextButton = new mini.Button();
    this.nextButton.addCls("mini-pager-nextbutton");
    this.nextButton.render(this._barEl);
    this.lastButton = new mini.Button();
    this.lastButton.addCls("mini-pager-lastbutton");
    this.lastButton.render(this._barEl);
    mini.append(this._barEl, "<span class=\"separator\"></span>");
    this.reloadButton = new mini.Button();
    this.reloadButton.render(this._barEl);
    this.firstButton.setPlain(true);
    this.prevButton.setPlain(true);
    this.nextButton.setPlain(true);
    this.lastButton.setPlain(true);
    this.reloadButton.setPlain(true);
    this.buttonsEl = mini.append(this._barEl2, "<div class=\"mini-page-buttons\"></div>");
    this.update()
};
mini_Pager_destroy = function($) {
    if (this.pageSelect) {
        mini.clearEvent(this.pageSelect);
        this.pageSelect = null
    }
    if (this.numInput) {
        mini.clearEvent(this.numInput);
        this.numInput = null
    }
    this.sizeEl = this.sizeTextEl = this._barEl = this._barEl2 = this._leftEl = this._rightEl = this.indexEl = this.buttonsEl = null;
    mini.Pager.superclass.destroy.call(this, $)
};
mini_Pager_setButtons = function($) {
    __mini_setControls($, this.buttonsEl, this)
};
mini_DatePicker_getMaxDateErrorText = function() {
    return this.maxDateErrorText;
};

mini_Pager_getButtonsEl = function() {
    return this.buttonsEl
};
mini_Pager__initEvents = function() {

    mini.Pager.superclass._initEvents.call(this);
    this.firstButton.on("click", function($) {
        this.o1loo0(0)
    }, this);
    this.prevButton.on("click", function($) {
        this.o1loo0(this.pageIndex - 1)
    }, this);
    this.nextButton.on("click", function($) {
        this.o1loo0(this.pageIndex + 1)
    }, this);
    this.lastButton.on("click", function($) {
        this.o1loo0(this.totalPage)
    }, this);
    this.reloadButton.on("click", function($) {
        this.o1loo0()
    }, this);

    function $() {
        if (_) return;
        _ = true;
        var $ = parseInt(this.numInput.value);
        if (isNaN($)) this.update();
        else this.o1loo0($ - 1);
        setTimeout(function() {
            _ = false
        }, 100)
    }
    var _ = false;
    mini.on(this.numInput, "change", function(_) {
        $.call(this)
    }, this);
    mini.on(this.numInput, "keydown", function(_) {
        if (_.keyCode == 13) {
            $.call(this);
            _.stopPropagation()
        }
    }, this);
    this.sizeCombo.on("valuechanged", this.l0l0, this)
};

mini_TreeSelect_beforenodecheck = function(e) {
    e.tree = e.sender;
    this.fire("beforenodecheck", e);
};
mini_Pager_doLayout = function() {

    if (!this.canLayout()) return;
    mini.layout(this._leftEl);
    mini.layout(this._rightEl)
};
mini_Pager_setPageIndex = function($) {
    if (isNaN($)) return;
    this.pageIndex = $;
    this.update()
};
mini_Pager_getPageIndex = function() {

    return this.pageIndex
};
mini_Pager_setPageSize = function($) {
    if (isNaN($)) return;
    this.pageSize = $;
    this.update()
};
mini_Pager_getPageSize = function() {

    return this.pageSize
};
mini_Pager_setTotalCount = function($) {
    $ = parseInt($);
    if (isNaN($)) return;
    this.totalCount = $;
    this.update()
};
mini_Pager_getTotalCount = function() {
    return this.totalCount
};
mini_Pager_setSizeList = function($) {

    if (!mini.isArray($)) return;
    this.sizeList = $;
    this.update()
};
mini_Pager_getSizeList = function() {
    return this.sizeList
};
mini_Pager_setPageSizeWidth = function($) {
    $ = parseInt($);
    if (isNaN($)) return;
    if (this.pageSizeWidth != $) {
        this.pageSizeWidth = $;
        this.sizeCombo.setWidth($)
    }
};
mini_Pager_getPageSizeWidth = function() {
    return this.pageSizeWidth
};
mini_Pager_setShowPageSize = function($) {
    this.showPageSize = $;
    this.update()
};
mini_Pager_getShowPageSize = function() {

    return this.showPageSize
};
mini_Pager_setShowPageIndex = function($) {
    this.showPageIndex = $;
    this.update()
};
mini_Pager_getShowPageIndex = function() {
    return this.showPageIndex
};
mini_Pager_setShowTotalCount = function($) {

    this.showTotalCount = $;
    this.update()
};
mini_Pager_getShowTotalCount = function() {
    return this.showTotalCount
};
mini_Pager_setShowPageInfo = function($) {
    this.showPageInfo = $;
    this.update()
};
mini_Pager_getShowPageInfo = function() {
    return this.showPageInfo
};
mini_Pager_setShowReloadButton = function($) {
    this.showReloadButton = $;
    this.update()
};
mini_Pager_getShowReloadButton = function() {
    return this.showReloadButton
};
mini_Pager_setShowButtonText = function($) {
    this.showButtonText = $;
    this.update()
};
mini_Pager_getShowButtonText = function() {
    return this.showButtonText
};
mini_Pager_setShowButtonIcon = function($) {
    this.showButtonIcon = $;
    this.update()
};
mini_Pager_getShowButtonIcon = function() {

    return this.showButtonIcon
};
mini_Pager_getTotalPage = function() {
    return this.totalPage
};
mini_Pager_update = function($, J, G) {
    if (mini.isNumber($)) this.pageIndex = parseInt($);
    if (mini.isNumber(J)) this.pageSize = parseInt(J);
    if (mini.isNumber(G)) this.totalCount = parseInt(G);
    this.totalPage = parseInt(this.totalCount / this.pageSize) + 1;
    if ((this.totalPage - 1) * this.pageSize == this.totalCount) this.totalPage -= 1;
    if (this.totalCount == 0) this.totalPage = 0;
    if (this.pageIndex > this.totalPage - 1) this.pageIndex = this.totalPage - 1;
    if (this.pageIndex <= 0) this.pageIndex = 0;
    if (this.totalPage <= 0) this.totalPage = 0;
    this.firstButton.enable();
    this.prevButton.enable();
    this.nextButton.enable();
    this.lastButton.enable();
    if (this.pageIndex == 0) {
        this.firstButton.disable();
        this.prevButton.disable()
    }
    if (this.pageIndex >= this.totalPage - 1) {
        this.nextButton.disable();
        this.lastButton.disable()
    }
    var H = this.pageIndex > -1 ? this.pageIndex + 1 : 0;
    if (this.totalCount == 0) H = 0;
    this.numInput.value = H;
    this.pagesLabel.innerHTML = "/ " + this.totalPage;
    var N = this.sizeList.clone();
    if (N.indexOf(this.pageSize) == -1) {
        N.push(this.pageSize);
        N = N.sort(function($, _) {
            return $ > _
        })
    }
    var A = [];
    for (var F = 0, C = N.length; F < C; F++) {
        var E = N[F],
            I = {};
        I.text = E;
        I.id = E;
        A.push(I)
    }
    this.sizeCombo.setData(A);
    this.sizeCombo.setValue(this.pageSize);
    this.sizeTextEl.innerHTML = this.sizeText;
    this.sizeTextEl.style.display = this.sizeText ? "" : "none";
    var B = this.firstText,
        M = this.prevText,
        D = this.nextText,
        K = this.lastText,
        _ = this.reloadText;
    if (this.showButtonText == false) B = M = D = K = _ = "";
    this.firstButton.setText(B);
    this.prevButton.setText(M);
    this.nextButton.setText(D);
    this.lastButton.setText(K);
    this.reloadButton.setText(_);
    B = this.firstText, M = this.prevText, D = this.nextText, K = this.lastText;
    if (this.showButtonText) {
        this.firstButton.setTooltip(B);
        this.prevButton.setTooltip(M);
        this.nextButton.setTooltip(D);
        this.lastButton.setTooltip(K);
        this.reloadButton.setTooltip(_)
    }
    this.firstButton.setIconCls(this.showButtonIcon ? "mini-pager-first" : "");
    this.prevButton.setIconCls(this.showButtonIcon ? "mini-pager-prev" : "");
    this.nextButton.setIconCls(this.showButtonIcon ? "mini-pager-next" : "");
    this.lastButton.setIconCls(this.showButtonIcon ? "mini-pager-last" : "");
    this.reloadButton.setIconCls(this.showButtonIcon ? "mini-pager-reload" : "");
    this.reloadButton.setVisible(this.showReloadButton);
    var L = this.reloadButton.el.previousSibling;
    if (L) L.style.display = this.showReloadButton ? "" : "none";
    this._rightEl.innerHTML = String.format(this.pageInfoText, this.pageSize, this.totalCount);
    this.indexEl.style.display = this.showPageIndex ? "" : "none";
    this.sizeEl.style.display = this.showPageSize ? "" : "none";
    this._rightEl.style.display = this.showPageInfo ? "" : "none"
};
mini_Pager_l0l0 = function(_) {
    var $ = parseInt(this.sizeCombo.getValue());
    this.o1loo0(0, $)
};
mini_Pager_o1loo0 = function($, _) {
    var A = {
        pageIndex: mini.isNumber($) ? $ : this.pageIndex,
        pageSize: mini.isNumber(_) ? _ : this.pageSize,
        cancel: false
    };
    if (A.pageIndex > this.totalPage - 1) A.pageIndex = this.totalPage - 1;
    if (A.pageIndex < 0) A.pageIndex = 0;
    this.fire("beforepagechanged", A);
    if (A.cancel == true) return;
    this.fire("pagechanged", A);
    this.update(A.pageIndex, A.pageSize)
};
mini_Pager_onPageChanged = function(_, $) {
    this.on("pagechanged", _, $);
};
mini_Pager_getAttrs = function(el) {

    var attrs = mini.Pager.superclass.getAttrs.call(this, el);
    mini._ParseString(el, attrs, ["onpagechanged", "sizeList", "onbeforepagechanged", "buttons", "sizeText"]);
    mini._ParseBool(el, attrs, ["showPageIndex", "showPageSize", "showTotalCount", "showPageInfo", "showReloadButton", "showButtonText", "showButtonIcon"]);
    mini._ParseInt(el, attrs, ["pageIndex", "pageSize", "totalCount", "pageSizeWidth"]);
    if (typeof attrs.sizeList == "string") attrs.sizeList = eval(attrs.sizeList);
    if (attrs.buttons) attrs.buttons = mini.byId(attrs.buttons);
    return attrs
};
mini_Panel_set = function(_) {
    if (typeof _ == "string") return this;
    var D = this._allowLayout;
    this._allowLayout = false;
    var B = _.toolbar;
    delete _.toolbar;
    var $ = _.footer;
    delete _.footer;
    var A = _.url;
    delete _.url;
    var C = _.buttons;
    delete _.buttons;
    mini.Panel.superclass.set.call(this, _);
    if (C) this.setButtons(C);
    if (B) this.setToolbar(B);
    if ($) this.setFooter($);
    if (A) this.setUrl(A);
    this._allowLayout = D;
    this.doLayout();
    return this
};
mini_Panel__create = function() {
    this.el = document.createElement("div");
    this.el.className = "mini-panel";
    this.el.tabIndex = 0;
    var _ = "<div class=\"mini-panel-border\">" + "<div class=\"mini-panel-header\" ><div class=\"mini-panel-header-inner\" ><span class=\"mini-panel-icon mini-iconfont\"></span><div class=\"mini-panel-title\" ></div><div class=\"mini-tools\" ></div></div></div>" + "<div class=\"mini-panel-viewport\">" + "<div class=\"mini-panel-toolbar\"></div>" + "<div class=\"mini-panel-body\" ></div>" + "<div class=\"mini-panel-footer\"></div>" + "<div class=\"mini-resizer-trigger\"></div>" + "</div>" + "</div>";
    this.el.innerHTML = _;
    this.el.hideFocus = true;
    this._borderEl = this.el.firstChild;
    this.o1oO0 = this._borderEl.firstChild;
    this.ololOO = this._borderEl.lastChild;
    this.OO01O = mini.byClass("mini-panel-toolbar", this.el);
    this._bodyEl = mini.byClass("mini-panel-body", this.el);
    this.OOO1ll = mini.byClass("mini-panel-footer", this.el);
    this.Ooo0OO = mini.byClass("mini-resizer-trigger", this.el);
    var $ = mini.byClass("mini-panel-header-inner", this.el);
    this.o01O0 = mini.byClass("mini-panel-icon", this.el);
    this.lo0o0o = mini.byClass("mini-panel-title", this.el);
    this.olOo0o = mini.byClass("mini-tools", this.el);
    mini.setStyle(this._bodyEl, this.bodyStyle);
    this._doTitle()
};
mini_Panel_destroy = function($) {
    this.O01o0l();
    this.ll1ol = null;
    this.ololOO = this._borderEl = this._bodyEl = this.OOO1ll = this.OO01O = null;
    this.olOo0o = this.lo0o0o = this.o01O0 = this.Ooo0OO = null;
    mini.Panel.superclass.destroy.call(this, $)
};
mini_Panel__initEvents = function() {

    mini._BindEvents(function() {
        mini.on(this.el, "click", this.__OnClick, this)
    }, this)
};
mini_Panel__doVisibleEls = function() {
    this.o1oO0.style.display = this.showHeader ? "" : "none";
    this.OO01O.style.display = this.showToolbar ? "" : "none";
    this.OOO1ll.style.display = this.showFooter ? "" : "none"
};
mini_Panel_doLayout = function() {
    if (!this.canLayout()) return;
    this.Ooo0OO.style.display = this.allowResize ? "" : "none";
    var A = this.isAutoHeight(),
        D = this.isAutoWidth(),
        $ = this.getWidth(true),
        _ = $;
    if (mini.isIE6) mini.setWidth(this._bodyEl, $);
    if (!A) {
        var C = this.getViewportHeight();
        mini.setHeight(this.ololOO, C);
        var B = this.getBodyHeight();
        mini.setHeight(this._bodyEl, B)
    } else {
        this.ololOO.style.height = "auto";
        this._bodyEl.style.height = "auto"
    }
    mini.layout(this._borderEl);
    if (this.Ooo0OO) mini.repaint(this.Ooo0OO);
    this.fire("layout")
};
mini_Panel_deferLayout = function($) {
    if (!$) $ = 10;
    if (this.O1oOl) return;
    var _ = this;
    this.O1oOl = setTimeout(function() {
        _.O1oOl = null;
        _.doLayout()
    }, $)
};
mini_Panel__stopLayout = function() {
    clearTimeout(this.O1oOl);
    this.O1oOl = null
};
mini_Panel_getViewportWidth = function($) {
    return this.getWidth(true)
};
mini_Panel_getViewportHeight = function(_) {

    var $ = this.getHeight(true) - this.getHeaderHeight();
    if (_) {
        var C = mini.getPaddings(this.ololOO),
            B = mini.getBorders(this.ololOO),
            A = mini.getMargins(this.ololOO);
        if (jQuery.boxModel) $ = $ - C.top - C.bottom - B.top - B.bottom;
        $ = $ - A.top - A.bottom
    }
    return $
};
mini_Panel_getBodyHeight = function(A) {
    var _ = this.getViewportHeight(),
        _ = _ - this.getToolbarHeight() - this.getFooterHeight();
    if (A) {
        var $ = mini.getPaddings(this._bodyEl),
            B = mini.getBorders(this._bodyEl),
            C = mini.getMargins(this._bodyEl);
        if (jQuery.boxModel) _ = _ - $.top - $.bottom - B.top - B.bottom;
        _ = _ - C.top - C.bottom
    }
    if (_ < 0) _ = 0;
    return _
};

mini_TreeSelect_beforenodeselect = function(e) {
    e.tree = e.sender;
    this.fire("beforenodeselect", e);
    if (e.cancel) {
        this._nohide = true;
    }
}
mini_Panel_getHeaderHeight = function() {
    var $ = this.showHeader ? jQuery(this.o1oO0).outerHeight() : 0;
    return $
};
mini_Panel_getToolbarHeight = function() {
    var $ = this.showToolbar ? jQuery(this.OO01O).outerHeight() : 0;
    return $
};
mini_Panel_getFooterHeight = function() {

    var $ = this.showFooter ? jQuery(this.OOO1ll).outerHeight() : 0;
    return $
};
mini_Panel_setHeaderStyle = function($) {

    this.headerStyle = $;
    mini.setStyle(this.o1oO0, $);
    this.doLayout()
};
mini_Panel_getHeaderStyle = function() {
    return this.headerStyle
};
mini_Panel_setBodyStyle = function($) {
    this.bodyStyle = $;
    mini.setStyle(this._bodyEl, $);
    this.doLayout()
};
mini_Panel_getBodyStyle = function() {
    return this.bodyStyle
};
mini_Panel_setToolbarStyle = function($) {
    this.toolbarStyle = $;
    mini.setStyle(this.OO01O, $);
    this.doLayout()
};
mini_Panel_getToolbarStyle = function() {
    return this.toolbarStyle
};
mini_Panel_setFooterStyle = function($) {
    this.footerStyle = $;
    mini.setStyle(this.OOO1ll, $);
    this.doLayout()
};
mini_Panel_getFooterStyle = function() {

    return this.footerStyle
};
mini_Panel_setHeaderCls = function($) {
    jQuery(this.o1oO0).removeClass(this.headerCls);
    jQuery(this.o1oO0).addClass($);
    this.headerCls = $;
    this.doLayout()
};
mini_Panel_getHeaderCls = function() {
    return this.headerCls
};
mini_Panel_setBodyCls = function($) {
    jQuery(this._bodyEl).removeClass(this.bodyCls);
    jQuery(this._bodyEl).addClass($);
    this.bodyCls = $;
    this.doLayout()
};
mini_Panel_getBodyCls = function() {
    return this.bodyCls
};
mini_Panel_setToolbarCls = function($) {
    jQuery(this.OO01O).removeClass(this.toolbarCls);
    jQuery(this.OO01O).addClass($);
    this.toolbarCls = $;
    this.doLayout()
};
mini_Panel_getToolbarCls = function() {
    return this.toolbarCls
};
mini_Panel_setFooterCls = function($) {
    jQuery(this.OOO1ll).removeClass(this.footerCls);
    jQuery(this.OOO1ll).addClass($);
    this.footerCls = $;
    this.doLayout()
};
mini_Panel_getFooterCls = function() {

    return this.footerCls
};
mini_Panel__doTitle = function() {
    var $ = this.title == "" ? "&nbsp" : this.title;
    this.lo0o0o.innerHTML = $;
    this.o01O0.style.display = (this.iconCls || this.iconStyle) ? "inline" : "none";
    this.o01O0.className = "mini-panel-icon mini-iconfont " + this.iconCls;
    mini.setStyle(this.o01O0, this.iconStyle)
};
mini_Panel_setTitle = function($) {

    this.title = $;
    this._doTitle()
};
mini_Panel_getTitle = function() {
    return this.title
};
mini_Panel_setIconCls = function($) {
    this.iconCls = $;
    this._doTitle()
};
mini_Panel_getIconCls = function() {
    return this.iconCls
};
mini_Panel_setIconStyle = function($) {
    this.iconStyle = $;
    this._doTitle()
};
mini_Panel_getIconStyle = function() {
    return this.iconStyle
};
mini_Panel__doTools = function() {
    var B = "";
    for (var $ = 0, _ = this.buttons.length; $ < _; $++) {
        var A = this.buttons[$];
        if (A.html) B += A.html;
        else B += "<span id=\"" + $ + "\" class=\"mini-iconfont " + A.cls + " " + (A.enabled ? "" : "mini-disabled") + "\" style=\"" + A.style + ";" + (A.visible ? "" : "display:none;") + "\"></span>"
    }
    this.olOo0o.innerHTML = B
};
mini_Panel_setShowCloseButton = function($) {
    this.showCloseButton = $;
    var _ = this.getButton("close");
    if (!_) return;
    _.visible = $;
    this._doTools()
};

mini_DatePicker_setShowWeekNumber = function(value) {
    this.showWeekNumber = value;
};

mini_DatePicker_getShowWeekNumber = function() {
    return this.showWeekNumber;
};

mini_Panel_getShowCloseButton = function() {
    return this.showCloseButton
};
mini_Panel_setCloseAction = function($) {
    this.closeAction = $
};
mini_Panel_getCloseAction = function() {
    return this.closeAction
};
mini_Panel_setShowCollapseButton = function($) {
    this.showCollapseButton = $;
    var _ = this.getButton("collapse");
    if (!_) return;
    _.visible = $;
    this._doTools()
};
mini_Panel_getShowCollapseButton = function() {

    return this.showCollapseButton
};
mini_Panel_setShowHeader = function($) {
    this.showHeader = $;
    this._doVisibleEls();
    this.deferLayout()
};
mini_Panel_getShowHeader = function() {

    return this.showHeader
};
mini_Panel_setShowToolbar = function($) {
    this.showToolbar = $;
    this._doVisibleEls();
    this.deferLayout()
};
mini_Panel_getShowToolbar = function() {
    return this.showToolbar
};
mini_Panel_setShowFooter = function($) {
    this.showFooter = $;
    this._doVisibleEls();
    this.deferLayout()
};
mini_Panel_getShowFooter = function() {

    return this.showFooter
};
mini_Panel_Ol1o1 = function(A) {
    if (Oolo(this.o1oO0, A.target)) {
        var $ = oOlO(A.target, "mini-tools");
        if ($) {
            var _ = this.getButton(parseInt(A.target.id));
            if (_) this.lo101(_, A)
        } else if (this.collapseOnTitleClick) this.toggle()
    }
};
mini_Panel_lo101 = function(B, $) {
    var C = {
        button: B,
        index: this.buttons.indexOf(B),
        name: B.name.toLowerCase(),
        htmlEvent: $,
        cancel: false
    };
    this.fire("beforebuttonclick", C);
    var _ = true;
    try {
        if (C.name == "close" && this.closeAction == "destroy" && this.ll1ol && this.ll1ol.contentWindow)
            if (this.ll1ol.contentWindow.CloseWindow) _ = this.ll1ol.contentWindow.CloseWindow("close");
            else if (this.ll1ol.contentWindow.CloseOwnerWindow) _ = this.ll1ol.contentWindow.CloseOwnerWindow("close");
        else _ = this._CloseOwnerWindow("close")
    } catch (A) {
        _ = this._CloseOwnerWindow("close")
    }
    if (_ === false) C.cancel = true;
    if (C.cancel == true) return C;
    this.fire("buttonclick", C);
    if (C.name == "close")
        if (this.closeAction == "destroy") {
            this.__HideAction = "close";
            this.destroy()
        } else this.hide();
    if (C.name == "collapse") {
        this.toggle();
        if (this.refreshOnExpand && this.expanded && this.url) this.reload()
    }
    return C
};
mini_Panel_onButtonClick = function(_, $) {
    this.on("buttonclick", _, $)
};

mini_TreeSelect_getAt = function(index) {
    return this.data[index];
};
mini_Panel_ol110 = function() {
    this.buttons = [];
    var $ = this.createButton({
        name: "collapse",
        cls: "mini-tools-collapse",
        visible: this.showCollapseButton
    });
    this.buttons.push($);
    var _ = this.createButton({
        name: "close",
        cls: "mini-tools-close",
        visible: this.showCloseButton
    });
    this.buttons.push(_)
};
mini_Panel_createButton = function(_) {
    var $ = mini.copyTo({
        name: "",
        cls: "",
        style: "",
        visible: true,
        enabled: true,
        html: ""
    }, _);
    return $
};
mini_Panel_setButtons = function(A) {
    if (typeof A == "string") A = A.split(" ");
    if (!mini.isArray(A)) A = [];
    var C = [];
    for (var $ = 0, B = A.length; $ < B; $++) {
        var _ = A[$];
        if (typeof _ == "string") {
            _ = _.trim();
            if (!_) continue;
            _ = {
                name: _,
                cls: "mini-tools-" + _,
                html: ""
            }
        }
        _ = this.createButton(_);
        C.push(_)
    }
    this.buttons = C;
    this._doTools()
};
mini_Panel_getButtons = function() {
    return this.buttons
};
mini_Panel_addButton = function(_, $) {
    if (typeof _ == "string") _ = {
        iconCls: _
    };
    _ = this.createButton(_);
    if (typeof $ != "number") $ = this.buttons.length;
    this.buttons.insert($, _);
    this._doTools()
};
mini_Panel_updateButton = function($, A) {
    var _ = this.getButton($);
    if (!_) return;
    mini.copyTo(_, A);
    this._doTools()
};
mini_Panel_removeButton = function($) {
    var _ = this.getButton($);
    if (!_) return;
    this.buttons.remove(_);
    this._doTools()
};
mini_Panel_getButton = function($) {
    if (typeof $ == "number") return this.buttons[$];
    else
        for (var _ = 0, A = this.buttons.length; _ < A; _++) {
            var B = this.buttons[_];
            if (B.name == $) return B
        }
};
mini_Panel_setBody = function($) {
    __mini_setControls($, this._bodyEl, this)
};
mini_Panel_set_bodyParent = function($) {};
mini_Panel_setToolbar = function($) {

    __mini_setControls($, this.OO01O, this)
};
mini_Panel_setFooter = function($) {
    __mini_setControls($, this.OOO1ll, this)
};
mini_Panel_getHeaderEl = function() {
    return this.o1oO0
};
mini_Panel_getToolbarEl = function() {
    return this.OO01O
};
mini_Panel_getBodyEl = function() {
    return this._bodyEl
};
mini_Panel_getFooterEl = function() {
    return this.OOO1ll
};
mini_Panel_getIFrameEl = function($) {
    return this.ll1ol
};
mini_Panel_setClearTimeStamp = function($) {
    this.clearTimeStamp = $
};
mini_Panel_getClearTimeStamp = function() {

    return this.clearTimeStamp
};
mini_Panel_oOlolO = function() {
    return this._bodyEl
};
mini_Panel_O01o0l = function($) {
    if (this.ll1ol) {
        var _ = this.ll1ol;
        if (_._ondestroy) _._ondestroy();
        _.onload = function() {};
        jQuery(_).unbind("load");
        _.src = "";
        if (mini.isIE) {
            try {
                _.contentWindow.document.write("");
                _.contentWindow.document.close()
            } catch (A) {}
        }
        try {
            this.ll1ol.parentNode.removeChild(this.ll1ol);
            this.ll1ol.removeNode(true)
        } catch (A) {}
    }
    this.ll1ol = null;
    if ($ === true) mini.removeChilds(this._bodyEl)
};
mini_Panel__doLoad = function() {
    if (!this.url) return;
    this.O01o0l(true);
    var B = new Date(),
        $ = this;
    this.loadedUrl = this.url;
    if (this.maskOnLoad) this.loading();
    jQuery(this._bodyEl).css("overflow", "hidden");

    function A(_) {
        $.__HideAction = _;
        var A = true;
        if ($.__onDestroy) A = $.__onDestroy(_);
        if (A === false) return false;
        var B = {
            iframe: $.ll1ol,
            action: _
        };
        $.fire("unload", B);
        setTimeout(function() {
            $.destroy()
        }, 10)
    }
    $._CloseOwnerWindow = A;
    var _ = mini.createIFrame(this.url, function(_, D) {
        if ($.destroyed) return;
        var C = (B - new Date()) + $.l111Oo;
        if (C < 0) C = 0;
        setTimeout(function() {
            $.unmask()
        }, C);
        try {
            $.ll1ol.contentWindow.Owner = $.Owner;
            $.ll1ol.contentWindow.CloseOwnerWindow = A
        } catch (E) {}
        if (D || $.loadOnRefresh) {
            if ($.__onLoad) $.__onLoad();
            var E = {
                iframe: $.ll1ol
            };
            $.fire("load", E)
        }
    }, this.clearTimeStamp);
    this._bodyEl.appendChild(_);
    this.ll1ol = _
};
mini_Panel_load = function(_, $, A) {
    this.setUrl(_, $, A)
};
mini_Panel_reload = function() {

    this.setUrl(this.url)
};
mini_Panel_setUrl = function($, _, A) {
    this.url = $;
    this.__onLoad = _;
    this.__onDestroy = A;
    if (this.expanded && $) this._doLoad()
};
mini_Panel_getUrl = function() {
    return this.url
};
mini_Panel_setRefreshOnExpand = function($) {
    this.refreshOnExpand = $
};
mini_Panel_getRefreshOnExpand = function() {
    return this.refreshOnExpand
};
mini_Panel_setMaskOnLoad = function($) {
    this.maskOnLoad = $
};
mini_Panel_getMaskOnLoad = function($) {
    return this.maskOnLoad
};
mini_Panel_setAllowResize = function($) {
    if (this.allowResize != $) {
        this.allowResize = $;
        this.doLayout()
    }
};
mini_Panel_getAllowResize = function() {
    return this.allowResize
};
mini_Panel_setLoadOnRefresh = function($) {
    this.loadOnRefresh = $
};
mini_Panel_getLoadOnRefresh = function($) {
    return this.loadOnRefresh
};
mini_Panel_setExpanded = function($) {

    if (this.expanded != $) {
        this.expanded = $;
        if (this.expanded) this.expand();
        else this.collapse()
    }
};
mini_Panel_getExpanded = function() {
    return this.expanded
};
mini_Panel_toggle = function() {
    if (this.expanded) this.collapse();
    else this.expand()
};
mini_Panel_collapse = function() {

    this.expanded = false;
    if (this.state != "max") this._height = this.el.style.height;
    this.el.style.height = "auto";
    this.ololOO.style.display = "none";
    mini.addClass(this.el, "mini-panel-collapse");
    this.doLayout()
};
mini_Panel_expand = function() {
    this.expanded = true;
    if (this._height) this.el.style.height = this._height;
    this.ololOO.style.display = "block";
    if (this.state != "max") delete this._height;
    mini.removeClass(this.el, "mini-panel-collapse");
    if (this.url && this.url != this.loadedUrl) this._doLoad();
    this.doLayout()
};

mini_TreeSelect_setExpandOnPopup = function(value) {
    this.expandOnPopup = value;
};

mini_Panel_setCollapseOnTitleClick = function($) {
    this.collapseOnTitleClick = $;
    mini.removeClass(this.el, "mini-panel-titleclick");
    if ($) mini.addClass(this.el, "mini-panel-titleclick")
};
mini_Panel_getCollapseOnTitleClick = function() {
    return this.collapseOnTitleClick
};
mini_Panel_getAttrs = function(_) {
    var D = mini.Panel.superclass.getAttrs.call(this, _);
    mini._ParseString(_, D, ["title", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle", "footerCls", "footerStyle", "toolbarCls", "toolbarStyle", "footer", "toolbar", "url", "closeAction", "loadingMsg", "onbeforebuttonclick", "onbuttonclick", "onload", "buttons"]);
    mini._ParseBool(_, D, ["allowResize", "showCloseButton", "showHeader", "showToolbar", "showFooter", "loadOnRefresh", "showCollapseButton", "refreshOnExpand", "maskOnLoad", "expanded", "collapseOnTitleClick", "clearTimeStamp"]);
    var C = mini.getChildNodes(_, true);
    for (var $ = C.length - 1; $ >= 0; $--) {
        var B = C[$],
            A = jQuery(B).attr("property");
        if (!A) continue;
        A = A.toLowerCase();
        if (A == "toolbar") D.toolbar = B;
        else if (A == "footer") D.footer = B
    }
    D.body = C;
    return D
};
mini_Hidden__create = function() {
    this.el = document.createElement("input");
    this.el.type = "hidden";
    this.el.className = "mini-hidden"
};
mini_Hidden_setName = function($) {
    this.name = $;
    this.el.name = $
};
mini_Hidden_setValue = function(_) {
    if (_ === null || _ === undefined) _ = "";
    this.value = _;
    if (mini.isDate(_)) {
        var B = _.getFullYear(),
            A = _.getMonth() + 1,
            $ = _.getDate();
        A = A < 10 ? "0" + A : A;
        $ = $ < 10 ? "0" + $ : $;
        this.el.value = B + "-" + A + "-" + $
    } else this.el.value = _
};
mini_Hidden_getValue = function() {
    return this.value
};
mini_Hidden_getFormValue = function() {
    return this.el.value
};
mini_Layout__create = function() {
    this.el = document.createElement("div");
    this.el.className = "mini-layout";
    this.el.innerHTML = "<div class=\"mini-layout-border\"></div>";
    this._borderEl = this.el.firstChild;
    this.doUpdate()
};
mini_Layout__initEvents = function() {
    mini._BindEvents(function() {
        mini.on(this.el, "click", this.__OnClick, this);
        mini.on(this.el, "mousedown", this.__OnMouseDown, this);
        mini.on(this.el, "mouseover", this.__OnMouseOver, this);
        mini.on(this.el, "mouseout", this.__OnMouseOut, this);
        mini.on(document, "mousedown", this.oll01, this)
    }, this)
};
mini_Layout_getRegionEl = function($) {
    var $ = this.getRegion($);
    if (!$) return null;
    return $._el
};
mini_Layout_getRegionHeaderEl = function($) {
    var $ = this.getRegion($);
    if (!$) return null;
    return $._header
};
mini_Layout_getRegionBodyEl = function($) {
    var $ = this.getRegion($);
    if (!$) return null;
    return $._body
};
mini_Layout_getRegionSplitEl = function($) {
    var $ = this.getRegion($);
    if (!$) return null;
    return $._split
};
mini_Layout_getRegionProxyEl = function($) {
    var $ = this.getRegion($);
    if (!$) return null;
    return $._proxy
};
mini_Layout_getRegionBox = function(_) {
    var $ = this.getRegionEl(_);
    if ($) return mini.getBox($);
    return null
};
mini_Layout_getRegion = function($) {
    if (typeof $ == "string") return this.regionMap[$];
    return $
};
mini_Layout_loOOoO = function(_, B) {
    var D = _.buttons;
    for (var $ = 0, A = D.length; $ < A; $++) {
        var C = D[$];
        if (C.name == B) return C
    }
};
mini_Layout_OOOoo0 = function(_) {
    var $ = mini.copyTo({
        region: "",
        title: "",
        iconCls: "",
        iconStyle: "",
        showCloseButton: false,
        showCollapseButton: true,
        buttons: [{
            name: "close",
            cls: "mini-tools-close",
            html: "",
            visible: false
        }, {
            name: "collapse",
            cls: "mini-tools-collapse",
            html: "",
            visible: true
        }],
        showSplitIcon: false,
        showSplit: true,
        splitToolTip: "",
        showHeader: true,
        splitSize: this.splitSize,
        collapseSize: this.collapseWidth,
        width: this.regionWidth,
        height: this.regionHeight,
        minWidth: this.regionMinWidth,
        minHeight: this.regionMinHeight,
        maxWidth: this.regionMaxWidth,
        maxHeight: this.regionMaxHeight,
        allowResize: true,
        showProxy: true,
        showProxyText: false,
        isShowProxyText: function() {
            return this.showProxyText && !mini.isIE6 && !mini.isIE7 && !mini.isIE8
        },
        cls: "",
        style: "",
        headerCls: "",
        headerStyle: "",
        bodyCls: "",
        bodyStyle: "",
        visible: true,
        expanded: true
    }, _);
    return $
};
mini_Layout_olOO = function($) {
    var $ = this.getRegion($);
    if (!$) return;
    mini.append(this._borderEl, "<div id=\"" + $.region + "\" class=\"mini-layout-region\"><div class=\"mini-layout-region-header\" style=\"" + $.headerStyle + "\"></div><div class=\"mini-layout-region-body " + $.bodyCls + "\" style=\"" + $.bodyStyle + "\"></div></div>");
    $._el = this._borderEl.lastChild;
    $._header = $._el.firstChild;
    $._body = $._el.lastChild;
    if ($.cls) mini.addClass($._el, $.cls);
    if ($.style) mini.setStyle($._el, $.style);
    if ($.headerCls) mini.addClass($._el.firstChild, $.headerCls);
    mini.addClass($._el, "mini-layout-region-" + $.region);
    if ($.region != "center") {
        mini.append(this._borderEl, "<div uid=\"" + this.uid + "\" id=\"" + $.region + "\" class=\"mini-layout-split\"><div class=\"mini-layout-spliticon\" title=\"" + $.splitToolTip + "\"></div></div>");
        $._split = this._borderEl.lastChild;
        mini.addClass($._split, "mini-layout-split-" + $.region)
    }
    if ($.region != "center") {
        mini.append(this._borderEl, "<div id=\"" + $.region + "\" class=\"mini-layout-proxy\"></div>");
        $._proxy = this._borderEl.lastChild;
        mini.addClass($._proxy, "mini-layout-proxy-" + $.region)
    }
};
mini_Layout_setRegionControls = function(A, $) {
    var A = this.getRegion(A);
    if (!A) return;
    var _ = this.getRegionBodyEl(A);
    __mini_setControls($, _, this)
};
mini_Layout_setRegions = function(A) {
    if (!mini.isArray(A)) return;
    for (var $ = 0, _ = A.length; $ < _; $++) this.addRegion(A[$])
};
mini_Layout_addRegion = function(E, $) {
    var H = E;
    E = this.OOOoo0(E);
    if (!E.region) E.region = "center";
    E.region = E.region.toLowerCase();
    if (E.region == "center" && H && !H.showHeader) E.showHeader = false;
    if (E.region == "north" || E.region == "south")
        if (!H.collapseSize) E.collapseSize = this.collapseHeight;
    this.olOO1o(E);
    if (typeof $ != "number") $ = this.regions.length;
    var B = this.regionMap[E.region];
    if (B) return;
    this.regions.insert($, E);
    this.regionMap[E.region] = E;
    this.olOO(E);
    var C = this.getRegionBodyEl(E),
        D = E.body;
    delete E.body;
    if (D) {
        if (!mini.isArray(D)) D = [D];
        for (var _ = 0, G = D.length; _ < G; _++) mini.append(C, D[_])
    }
    if (E.bodyParent) {
        var F = E.bodyParent;
        while (F.firstChild) {
            var A = F.firstChild;
            C.appendChild(A)
        }
    }
    delete E.bodyParent;
    if (E.controls) {
        this.setRegionControls(E, E.controls);
        delete E.controls
    }
    this.doUpdate()
};
mini_Layout_removeRegion = function($) {
    var $ = this.getRegion($);
    if (!$) return;
    this.regions.remove($);
    delete this.regionMap[$.region];
    jQuery($._el).remove();
    jQuery($._split).remove();
    jQuery($._proxy).remove();
    this.doUpdate()
};
mini_Layout_moveRegion = function(A, $) {
    var A = this.getRegion(A);
    if (!A) return;
    var _ = this.regions[$];
    if (!_ || _ == A) return;
    this.regions.remove(A);
    var $ = this.region.indexOf(_);
    this.regions.insert($, A);
    this.doUpdate()
};
mini_Layout_olOO1o = function($) {
    var _ = this.loOOoO($, "close");
    _.visible = $.showCloseButton;
    _ = this.loOOoO($, "collapse");
    _.visible = $.showCollapseButton;
    if ($.width < $.minWidth) $.width = $.minWidth;
    if ($.width > $.maxWidth) $.width = $.maxWidth;
    if ($.height < $.minHeight) $.height = $.minHeight;
    if ($.height > $.maxHeight) $.height = $.maxHeight
};
mini_Layout_updateRegion = function($, _) {
    $ = this.getRegion($);
    if (!$) return;
    if (_) delete _.region;
    mini.copyTo($, _);
    this.olOO1o($);
    this.doUpdate()
};
mini_Layout_expandRegion = function($) {
    $ = this.getRegion($);
    if (!$) return;
    $.expanded = true;
    this.doUpdate()
};
mini_Layout_collapseRegion = function($) {
    $ = this.getRegion($);
    if (!$) return;
    $.expanded = false;
    this.doUpdate()
};
mini_Layout_toggleRegion = function($) {

    $ = this.getRegion($);
    if (!$) return;
    if ($.expanded) this.collapseRegion($);
    else this.expandRegion($)
};
mini_Layout_showRegion = function($) {
    $ = this.getRegion($);
    if (!$) return;
    $.visible = true;
    this.doUpdate()
};
mini_Layout_hideRegion = function($) {
    $ = this.getRegion($);
    if (!$) return;
    $.visible = false;
    this.doUpdate()
};
mini_Layout_isExpandRegion = function($) {
    $ = this.getRegion($);
    if (!$) return null;
    return $.expanded
};

mini_TreeSelect_getParentNode = function(node) {
    return this.tree.getParentNode(node);
};
mini_Layout_isVisibleRegion = function($) {
    $ = this.getRegion($);
    if (!$) return null;
    return $.visible
};
mini_Layout_o0o0 = function($) {
    $ = this.getRegion($);
    var _ = {
        region: $,
        cancel: false
    };
    if ($.expanded) {
        this.fire("BeforeCollapse", _);
        if (_.cancel == false) this.collapseRegion($)
    } else {
        this.fire("BeforeExpand", _);
        if (_.cancel == false) this.expandRegion($)
    }
};
mini_Layout_llooOl = function(_) {
    var $ = oOlO(_.target, "mini-layout-proxy");
    return $
};
mini_Layout_l0o1l = function(_) {
    var $ = oOlO(_.target, "mini-layout-region");
    return $
};

mini_Layout_Ol1o1 = function(D) {
    if (this.O1lll0) return;
    var A = this.llooOl(D);
    if (A) {
        var _ = A.id,
            C = oOlO(D.target, "mini-tools-collapse");
        if (C) this.o0o0(_);
        else this.OO11ol(_)
    }
    var B = this.l0o1l(D);
    if (B && oOlO(D.target, "mini-layout-region-header")) {
        _ = B.id, C = oOlO(D.target, "mini-tools-collapse");
        if (C) this.o0o0(_);
        var $ = oOlO(D.target, "mini-tools-close");
        if ($) this.updateRegion(_, {
            visible: false
        })
    }
    if (mini.hasClass(D.target, "mini-layout-spliticon")) {
        _ = D.target.parentNode.id;
        this.o0o0(_)
    }
};
mini_Layout_lo101 = function(_, A, $) {

    this.fire("buttonclick", {
        htmlEvent: $,
        region: _,
        button: A,
        index: this.buttons.indexOf(A),
        name: A.name
    })
};
mini_Layout_O1Oo1 = function(_, A, $) {
    this.fire("buttonmousedown", {
        htmlEvent: $,
        region: _,
        button: A,
        index: this.buttons.indexOf(A),
        name: A.name
    })
};
mini_Layout_O1l1lo = function(_) {
    var $ = this.llooOl(_);
    if ($) {
        mini.addClass($, "mini-layout-proxy-hover");
        this.hoverProxyEl = $
    }
};
mini_Layout_O11O11 = function($) {
    if (this.hoverProxyEl) mini.removeClass(this.hoverProxyEl, "mini-layout-proxy-hover");
    this.hoverProxyEl = null
};
mini_Layout_onButtonClick = function(_, $) {
    this.on("buttonclick", _, $)
};
mini_Layout_onButtonMouseDown = function(_, $) {

    this.on("buttonmousedown", _, $)
};
mini_Button_set = function($) {
    if (typeof $ == "string") return this;
    this.lO10O = $.text || $.iconStyle || $.iconCls || $.iconPosition;
    mini.Button.superclass.set.call(this, $);
    if (this.lO10O === false) {
        this.lO10O = true;
        this.doUpdate()
    }
    return this
};
mini_Button__create = function() {

    this.el = document.createElement("a");
    this.el.className = "mini-button";
    this.el.hideFocus = true;
    this.el.href = "javascript:void(0)";
    this.doUpdate()
};
mini_Button__initEvents = function() {
    mini._BindEvents(function() {
        OooO(this.el, "mousedown", this.__OnMouseDown, this);
        OooO(this.el, "click", this.__OnClick, this)
    }, this)
};
mini_Button_destroy = function($) {
    if (this.el) {
        this.el.onclick = null;
        this.el.onmousedown = null
    }
    if (this.menu) this.menu.owner = null;
    this.menu = null;
    mini.Button.superclass.destroy.call(this, $)
};
mini_Button_doUpdate = function() {
    if (this.lO10O === false) return;
    var B = "",
        _ = this.text,
        $ = this.iconStyle || this.iconCls || this.img;
    if ($ && _) B = " mini-button-icon-text ";
    else if ($ && _ === "") {
        B = " mini-button-icon-only ";
        _ = "&nbsp;"
    } else if (_ == "") _ = "&nbsp;";
    var A = this.iconStyle || "";
    if (!A && this.img) A = "background-image:url(" + this.img + ")";
    var D = "";
    if ($) D = "<span class=\"mini-button-icon mini-iconfont " + this.iconCls + "\" style=\"" + A + "\"></span>";
    var C = "<span class=\"mini-button-text " + B + "\">" + D + _ + "</span>";
    if (this.allowCls) C = C + "<span class=\"mini-button-allow " + this.allowCls + "\"></span>";
    this.el.innerHTML = C
};
mini_Button_setHref = function($) {
    this.href = $;
    this.el.href = $;
    var _ = this.el;
    setTimeout(function() {
        _.onclick = null
    }, 100)
};
mini_Button_getHref = function() {
    return this.href
};
mini_Button_setTarget = function($) {

    this.target = $;
    this.el.target = $
};
mini_Button_getTarget = function() {
    return this.target
};
mini_Button_setText = function($) {
    if (this.text != $) {
        this.text = $;
        this.doUpdate()
    }
};
mini_Button_getText = function() {
    return this.text
};
mini_Button_setIconCls = function($) {

    this.iconCls = $;
    this.doUpdate()
};
mini_Button_getIconCls = function() {


    return this.iconCls
};
mini_Button_setIconStyle = function($) {
    this.iconStyle = $;
    this.doUpdate()
};
mini_Button_getIconStyle = function() {
    return this.iconStyle
};
mini_Button_setImg = function($) {

    this.img = $;
    this.doUpdate()
};
mini_Button_getImg = function() {
    return this.img
};
mini_Button_setIconPosition = function($) {
    this.iconPosition = "left";
    this.doUpdate()
};
mini_Button_getIconPosition = function() {

    return this.iconPosition
};
mini_Button_setPlain = function($) {
    this.plain = $;
    if ($) this.addCls(this.llOOoO);
    else this.removeCls(this.llOOoO)
};
mini_Button_getPlain = function() {
    return this.plain
};
mini_Button_setGroupName = function($) {

    this.groupName = $
};
mini_Button_getGroupName = function() {

    return this.groupName
};
mini_Button_setCheckOnClick = function($) {
    this.checkOnClick = $
};
mini_Button_getCheckOnClick = function() {
    return this.checkOnClick
};
mini_Button_setChecked = function($) {

    var _ = this.checked != $;
    this.checked = $;
    if ($) this.addCls(this.ll0O1o);
    else this.removeCls(this.ll0O1o);
    if (_) this.fire("CheckedChanged")
};
mini_Button_getChecked = function() {
    return this.checked
};
mini_Button_doClick = function() {
    this.__OnClick(null)
};
mini_Button_Ol1o1 = function(D) {


    if (!this.href && D) D.preventDefault();
    if (this.readOnly || this.enabled == false) return;
    this.focus();
    if (this.checkOnClick)
        if (this.groupName) {
            var _ = this.groupName,
                C = mini.findControls(function($) {
                    if ($.type == "button" && $.groupName == _) return true
                });
            if (C.length > 0) {
                for (var $ = 0, A = C.length; $ < A; $++) {
                    var B = C[$];
                    if (B != this) B.setChecked(false)
                }
                this.setChecked(true)
            } else this.setChecked(!this.checked)
        } else this.setChecked(!this.checked);
    this.fire("click", {
        htmlEvent: D
    })
};
mini_Button_olol = function($) {
    if (this.isReadOnly()) return;
    this.addCls(this.oll001);
    mini.on(document, "mouseup", this.lo010o, this)
};
mini_Button_lo010o = function($) {
    this.removeCls(this.oll001);
    mini.un(document, "mouseup", this.lo010o, this)
};

mini_DatePicker_setMinDateErrorText = function(value) {
    this.minDateErrorText = value;
};
mini_Button_onClick = function(_, $) {
    this.on("click", _, $)
};
mini_Button_getAttrs = function($) {
    var _ = mini.Button.superclass.getAttrs.call(this, $);
    _.text = $.innerHTML;
    mini._ParseString($, _, ["text", "href", "iconCls", "iconStyle", "iconPosition", "groupName", "menu", "onclick", "oncheckedchanged", "target", "img"]);
    mini._ParseBool($, _, ["plain", "checkOnClick", "checked"]);
    return _
};
mini_Window__create = function() {
    mini.Window.superclass._create.call(this);
    if (mini.isIE && mini_useShims) {
        var $ = "<iframe frameborder='0' style='position:absolute; z-index:-1; width:100%; height:100%; top:0;left:0;scrolling:no;'></iframe>";
        mini.append(this.el, $)
    }
};
mini_Window_ol110 = function() {

    this.buttons = [];
    var $ = this.createButton({
        name: "collapse",
        cls: "mini-tools-collapse",
        visible: this.showCollapseButton
    });
    this.buttons.push($);
    var A = this.createButton({
        name: "min",
        cls: "mini-tools-min",
        visible: this.showMinButton
    });
    this.buttons.push(A);
    var B = this.createButton({
        name: "max",
        cls: "mini-tools-max",
        visible: this.showMaxButton
    });
    this.buttons.push(B);
    var _ = this.createButton({
        name: "close",
        cls: "mini-tools-close",
        visible: this.showCloseButton
    });
    this.buttons.push(_)
};
mini_Window__initEvents = function() {
    mini.Window.superclass._initEvents.call(this);
    mini._BindEvents(function() {
        mini.on(this.el, "mouseover", this.__OnMouseOver, this);
        mini.on(window, "resize", this.l10Ol, this);
        mini.on(this.el, "mousedown", this.l10l1, this)
    }, this)
};
mini_Window_doLayout = function() {
    if (!this.canLayout()) return;
    if (this.state == "max") {
        var $ = this.getParentBox();
        this.el.style.left = "0px";
        this.el.style.top = "0px";
        mini.setSize(this.el, $.width, $.height)
    }
    mini.Window.superclass.doLayout.call(this);
    if (this.allowDrag) mini.addClass(this.el, this.OO00oO);
    if (this.state == "max") {
        this.Ooo0OO.style.display = "none";
        mini.removeClass(this.el, this.OO00oO)
    }
    this.oll01l()
};
mini_Window_oll01l = function() {
    if (!this.el) {
        if (this.Ooo1) mini.removeNode(this.Ooo1);
        return
    }
    var _ = this.showModal && this.isDisplay() && this.visible;
    if (!this.Ooo1 && this.showModal == false) {
        if (this.Ooo1) mini.removeNode(this.Ooo1);
        return
    }
    if (!this.Ooo1) {
        var A = "__modal" + this._id,
            $ = mini_useShims ? "<iframe frameborder='0' style='position:absolute; z-index:-1; width:100%; height:100%; top:0;left:0;scrolling:no;'></iframe>" : "";
        this.Ooo1 = mini.append(document.body, "<div id=\"" + A + "\" class=\"mini-modal\" style=\"display:none\">" + $ + "</div>")
    }
    if (_) {
        this.Ooo1.style.display = "block";
        this.Ooo1.style.zIndex = mini.getStyle(this.el, "zIndex") - 1
    } else this.Ooo1.style.display = "none"
};
mini_Window_getParentBox = function() {
    var $ = mini.getViewportBox(),
        _ = this._containerEl || document.body;
    if (_ != document.body) $ = mini.getBox(_);
    return $
};
mini_Window_setShowModal = function($) {
    this.showModal = $
};
mini_Window_getShowModal = function() {
    return this.showModal
};
mini_Window_setMinWidth = function($) {
    if (isNaN($)) return;
    this.minWidth = $
};
mini_Window_getMinWidth = function() {
    return this.minWidth
};
mini_Window_setMinHeight = function($) {
    if (isNaN($)) return;
    this.minHeight = $
};
mini_Window_getMinHeight = function() {
    return this.minHeight
};
mini_Window_setMaxWidth = function($) {
    if (isNaN($)) return;
    this.maxWidth = $
};
mini_Window_getMaxWidth = function() {
    return this.maxWidth
};
mini_Window_setMaxHeight = function($) {
    if (isNaN($)) return;
    this.maxHeight = $
};
mini_Window_getMaxHeight = function() {
    return this.maxHeight
};
mini_Window_setAllowDrag = function($) {
    this.allowDrag = $;
    mini.removeClass(this.el, this.OO00oO);
    if ($) mini.addClass(this.el, this.OO00oO)
};
mini_Window_getAllowDrag = function() {
    return this.allowDrag
};
mini_Window_setShowMaxButton = function($) {
    this.showMaxButton = $;
    var _ = this.getButton("max");
    if (!_) return;
    _.visible = $;
    this._doTools()
};
mini_Window_getShowMaxButton = function() {
    return this.showMaxButton
};
mini_Window_setShowMinButton = function($) {
    this.showMinButton = $;
    var _ = this.getButton("min");
    if (!_) return;
    _.visible = $;
    this._doTools()
};
mini_Window_getShowMinButton = function() {
    return this.showMinButton
};
mini_Window_max = function() {
    this.state = "max";
    this.show();
    var $ = this.getButton("max");
    if ($) {
        $.cls = "mini-tools-restore";
        this._doTools()
    }
};
mini_Window_restore = function() {
    this.state = "restore";
    this.show(this.x, this.y);
    var $ = this.getButton("max");
    if ($) {
        $.cls = "mini-tools-max";
        this._doTools()
    }
};
mini_Window_setShowInBody = function($) {
    this.showInBody = $
};
mini_Window_getShowInBody = function() {
    return this.showInBody
};
mini_Window_showAtPos = function(_, $, A) {
    this.show(_, $, A)
};
mini_Window_show = function(B, _, D) {
    this._allowLayout = false;
    var A = this._containerEl || document.body;
    if (!this.isRender() || (this.el.parentNode != A && this.showInBody)) this.render(A);
    this.el.style.zIndex = mini.getMaxZIndex();
    this.Oo1O11(B, _);
    this._allowLayout = true;
    this.setVisible(true);
    if (this.state != "max") {
        var $ = this.getBox();
        this.x = $.x;
        this.y = $.y
    }
    try {
        document.body.focus()
    } catch (C) {}
};
mini_Window_hide = function() {
    this.setVisible(false);
    this.oll01l()
};
mini_Window_getWidth = function(_) {
    this.o1oO0.style.width = "50px";
    var $ = mini.getWidth(this.el);
    this.o1oO0.style.width = "auto";
    if (_ && this._borderEl) {
        var A = mini.getBorders(this._borderEl);
        $ = $ - A.left - A.right
    }
    return $
};
mini_Window_getBox = function() {
    this.o1oO0.style.width = "50px";
    this.el.style.display = "";
    var $ = mini.getWidth(this.el);
    this.o1oO0.style.width = "auto";
    var _ = mini.getBox(this.el);
    _.width = $;
    _.right = _.x + $;
    return _
};

mini_Window_O0oOoo = function() {
    this.el.style.display = "";
    var $ = this.getBox();
    if ($.width > this.maxWidth) {
        mini.setWidth(this.el, this.maxWidth);
        $ = this.getBox()
    }
    if ($.height > this.maxHeight) {
        mini.setHeight(this.el, this.maxHeight);
        $ = this.getBox()
    }
    if ($.width < this.minWidth) {
        mini.setWidth(this.el, this.minWidth);
        $ = this.getBox()
    }
    if ($.height < this.minHeight) {
        mini.setHeight(this.el, this.minHeight);
        $ = this.getBox()
    }
};
mini_Window_Oo1O11 = function(B, A) {
    var _ = this.getParentBox();
    if (this.state == "max") {
        if (!this._width) {
            var $ = this.getBox();
            this._width = $.width;
            if (this.expanded) this._height = $.height;
            this.x = $.x;
            this.y = $.y
        }
        this.el.style.left = "-10000px";
        this.el.style.top = "-10000px"
    } else {
        if (mini.isNull(B)) B = "center";
        if (mini.isNull(A)) A = "middle";
        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";
        if (this._width) {
            this.setWidth(this._width);
            this.setHeight(this._height);
            delete this._width;
            delete this._height
        }
        this.O0oOoo();
        $ = this.getBox();
        if (B == "left") B = 0;
        if (B == "center") B = _.width / 2 - $.width / 2;
        if (B == "right") B = _.width - $.width;
        if (A == "top") A = 0;
        if (A == "middle") A = _.y + _.height / 2 - $.height / 2;
        if (A == "bottom") A = _.height - $.height;
        if (B + $.width > _.right) B = _.right - $.width;
        if (A + $.height > _.bottom) A = _.bottom - $.height;
        if (B < 0) B = 0;
        if (A < 0) A = 0;
        this.el.style.display = "";
        mini.setX(this.el, B);
        mini.setY(this.el, A)
    }
    this.doLayout()
};
mini_Window_lo101 = function(_, $) {
    var A = mini.Window.superclass.lo101.call(this, _, $);
    if (A.cancel == true) return A;
    if (A.name == "max")
        if (this.state == "max") this.restore();
        else this.max();
    return A
};
mini_Window_l10Ol = function($) {

    if (this.state == "max") this.doLayout();
    if (!mini.isIE6) this.oll01l()
};
mini_Window_setEnableDragProxy = function($) {

    this.enableDragProxy = $
};
mini_Window_getEnableDragProxy = function($) {
    return this.enableDragProxy
};
mini_Window_setAllowCrossBottom = function($) {
    this.allowCrossBottom = $
};
mini_Window_getAllowCrossBottom = function() {
    return this.allowCrossBottom
};
mini_Window_l10l1 = function(B) {
    var _ = this;
    if (this.state != "max" && this.allowDrag && Oolo(this.o1oO0, B.target) && !oOlO(B.target, "mini-tools")) {
        _ = this;
        if (this.el) this.el.style.zIndex = mini.getMaxZIndex();
        var A = this.getBox(),
            $ = new mini.Drag({
                capture: false,
                onStart: function() {
                    _.Oool0o = mini.append(document.body, "<div class=\"mini-resizer-mask\" style=\"\"></div>");
                    if (_.enableDragProxy) {
                        _.O0Ool = mini.append(document.body, "<div class=\"mini-drag-proxy\"></div>");
                        _.el.style.left = "-2000px";
                        _.el.style.top = "-2000px"
                    } else _.O0Ool = _.el;
                    var $ = mini.append(document.body, "<div class=\"mini-resizer-mask\"></div>");
                    setTimeout(function() {
                        mini.removeNode($)
                    }, 300)
                },
                onMove: function(B) {
                    var F = B.now[0] - B.init[0],
                        E = B.now[1] - B.init[1];
                    F = A.x + F;
                    E = A.y + E;
                    var D = _.getParentBox(),
                        $ = F + A.width,
                        C = E + A.height;
                    if ($ > D.width) F = D.width - A.width;
                    if (!_.allowCrossBottom)
                        if (C > D.height) E = D.height - A.height;
                    if (F < 0) F = 0;
                    if (E < 0) E = 0;
                    _.x = F;
                    _.y = E;
                    var G = {
                        x: F,
                        y: E,
                        width: A.width,
                        height: A.height
                    };
                    mini.setBox(_.O0Ool, G);
                    this.moved = true
                },
                onStop: function() {
                    if (_.el) {
                        _.el.style.display = "block";
                        if (this.moved) {
                            var $ = mini.getBox(_.O0Ool);
                            mini.setBox(_.el, $)
                        }
                    }
                    jQuery(_.Oool0o).remove();
                    _.Oool0o = null;
                    if (_.enableDragProxy) jQuery(_.O0Ool).remove();
                    _.O0Ool = null;
                    _.fire("moveend")
                }
            });
        $.start(B)
    }
};
mini_Window_destroy = function($) {
    mini.un(window, "resize", this.l10Ol, this);
    if (this.Ooo1) {
        jQuery(this.Ooo1).remove();
        this.Ooo1 = null
    }
    if (this.shadowEl) {
        jQuery(this.shadowEl).remove();
        this.shadowEl = null
    }
    var _ = "__modal" + this._id;
    jQuery("[id='" + _ + "']").remove();
    mini.Window.superclass.destroy.call(this, $)
};
mini_Window_getAttrs = function($) {
    var _ = mini.Window.superclass.getAttrs.call(this, $);
    mini._ParseString($, _, ["modalStyle", "onmoveend"]);
    mini._ParseBool($, _, ["showModal", "showShadow", "allowDrag", "allowResize", "showMaxButton", "showMinButton", "showInBody", "enableDragProxy", "allowCrossBottom"]);
    mini._ParseInt($, _, ["minWidth", "minHeight", "maxWidth", "maxHeight"]);
    return _
};
mini_Window_showAtEl = function(H, D) {

    H = mini.byId(H);
    if (!H) return;
    if (!this.isRender() || this.el.parentNode != document.body) this.render(document.body);
    var A = {
        xAlign: this.xAlign,
        yAlign: this.yAlign,
        xOffset: 0,
        yOffset: 0,
        popupCls: this.popupCls
    };
    mini.copyTo(A, D);
    this._popupEl = H;
    this.el.style.position = "absolute";
    this.el.style.left = "-2000px";
    this.el.style.top = "-2000px";
    this.el.style.display = "";
    this.doLayout();
    this.O0oOoo();
    var J = mini.getViewportBox(),
        B = this.getBox(),
        L = mini.getBox(H),
        F = A.xy,
        C = A.xAlign,
        E = A.yAlign,
        M = J.width / 2 - B.width / 2,
        K = 0;
    if (F) {
        M = F[0];
        K = F[1]
    }
    switch (A.xAlign) {
        case "outleft":
            M = L.x - B.width;
            break;
        case "left":
            M = L.x;
            break;
        case "center":
            M = L.x + L.width / 2 - B.width / 2;
            break;
        case "right":
            M = L.right - B.width;
            break;
        case "outright":
            M = L.right;
            break;
        default:
            break
    }
    switch (A.yAlign) {
        case "above":
            K = L.y - B.height;
            break;
        case "top":
            K = L.y;
            break;
        case "middle":
            K = L.y + L.height / 2 - B.height / 2;
            break;
        case "bottom":
            K = L.bottom - B.height;
            break;
        case "below":
            K = L.bottom;
            break;
        default:
            break
    }
    M = parseInt(M);
    K = parseInt(K);
    if (A.outYAlign || A.outXAlign) {
        if (A.outYAlign == "above")
            if (K + B.height > J.bottom) {
                var _ = L.y - J.y,
                    I = J.bottom - L.bottom;
                if (_ > I) K = L.y - B.height
            }
        if (A.outXAlign == "outleft")
            if (M + B.width > J.right) {
                var G = L.x - J.x,
                    $ = J.right - L.right;
                if (G > $) M = L.x - B.width
            }
        if (A.outXAlign == "right")
            if (M + B.width > J.right) M = L.right - B.width;
        this.O0ll(M, K)
    } else this.showAtPos(M + A.xOffset, K + A.yOffset)
};
mini_Lookup_destroy = function($) {
    if (this.grid) {
        this.grid.un("rowclick", this.__OnGridRowClickChanged, this);
        this.grid.un("load", this.o0OO, this);
        this.grid.un("checkall", this.__OnGridRowClickChanged, this);
        this.grid = null
    }
    mini.Lookup.superclass.destroy.call(this, $)
};
mini_Lookup_setMultiSelect = function($) {
    this.multiSelect = $;
    if (this.grid) this.grid.setMultiSelect($)
};
mini_Lookup_setGrid = function($) {
    if (typeof $ == "string") {
        mini.parse($);
        $ = mini.get($)
    }
    this.grid = mini.getAndCreate($);
    if (this.grid) {
        this.grid.setMultiSelect(this.multiSelect);
        this.grid.setCheckSelectOnLoad(false);
        this.grid.on("rowclick", this.__OnGridRowClickChanged, this);
        this.grid.on("load", this.o0OO, this);
        this.grid.on("checkall", this.__OnGridRowClickChanged, this)
    }
};
mini_Lookup_getGrid = function() {
    return this.grid
};
mini_Lookup_setValueField = function($) {
    this.valueField = $
};
mini_Lookup_getValueField = function() {
    return this.valueField
};
mini_Lookup_setTextField = function($) {
    this.textField = $
};
mini_Lookup_getTextField = function() {
    return this.textField
};
mini_Lookup_deselectAll = function() {
    this.data = [];
    this.setValue("");
    this.setText("");
    if (this.grid) this.grid.deselectAll()
};
mini_Lookup_getItemValue = function($) {
    return String($[this.valueField])
};
mini_Lookup_getItemText = function($) {
    var _ = $[this.textField];
    return mini.isNull(_) ? "" : String(_)
};
mini_Lookup_ll0l0 = function(A) {
    if (mini.isNull(A)) A = [];
    var B = [],
        C = [];
    for (var _ = 0, D = A.length; _ < D; _++) {
        var $ = A[_];
        if ($) {
            B.push(this.getItemValue($));
            C.push(this.getItemText($))
        }
    }
    return [B.join(this.delimiter), C.join(this.delimiter)]
};
mini_Lookup_OllooO = function() {
    this.value = mini.isNull(this.value) ? "" : String(this.value);
    this.text = mini.isNull(this.text) ? "" : String(this.text);
    var D = [],
        C = this.value.split(this.delimiter),
        E = this.text.split(this.delimiter),
        $ = C.length;
    if (this.value)
        for (var _ = 0, F = $; _ < F; _++) {
            var B = {},
                G = C[_],
                A = E[_];
            B[this.valueField] = G ? G : "";
            B[this.textField] = A ? A : "";
            D.push(B)
        }
    this.data = D
};
mini_Lookup_o01lo = function(A) {
    var D = {};
    for (var $ = 0, B = A.length; $ < B; $++) {
        var _ = A[$],
            C = _[this.valueField];
        D[C] = _
    }
    return D
};
mini_Lookup_setValue = function($) {
    mini.Lookup.superclass.setValue.call(this, $);
    this.OllooO()
};
mini_Lookup_setText = function($) {
    mini.Lookup.superclass.setText.call(this, $);
    this.OllooO()
};
mini_Lookup___OnGridRowClickChanged = function(G) {
    var B = this.o01lo(this.grid.getList()),
        C = this.o01lo(this.grid.getSelecteds()),
        F = this.o01lo(this.data);
    if (this.multiSelect == false) {
        F = {};
        this.data = []
    }
    var A = {};
    for (var E in F) {
        var $ = F[E];
        if (B[E])
            if (C[E]);
            else A[E] = $
    }
    for (var _ = this.data.length - 1; _ >= 0; _--) {
        $ = this.data[_], E = $[this.valueField];
        if (A[E]) this.data.removeAt(_)
    }
    for (E in C) {
        $ = C[E];
        if (!F[E]) this.data.push($)
    }
    var D = this.ll0l0(this.data);
    this.setValue(D[0]);
    this.setText(D[1]);
    this.Ol11o()
};
mini_Lookup_o0OO = function($) {
    this.__OnShowPopup($)
};
mini_Lookup___OnShowPopup = function(H) {
    var C = String(this.value).split(this.delimiter),
        F = {};
    for (var $ = 0, D = C.length; $ < D; $++) {
        var G = C[$];
        F[G] = 1
    }
    var A = this.grid.getData(),
        B = [];
    for ($ = 0, D = A.length; $ < D; $++) {
        var _ = A[$],
            E = _[this.valueField];
        if (F[E]) B.push(_)
    }
    this.grid.selects(B)
};
mini_Lookup_doUpdate = function() {
    mini.Lookup.superclass.doUpdate.call(this);
    this._textEl.readOnly = true;
    this.el.style.cursor = "default"
};
mini_Lookup_O10l1 = function($) {
    mini.Lookup.superclass.O10l1.call(this, $);
    switch ($.keyCode) {
        case 46:
        case 8:
            break;
        case 37:
            break;
        case 39:
            break
    }
};
mini_Lookup_oOlo0 = function(C) {

    if (this.isReadOnly()) return;
    var _ = mini.getSelectRange(this._textEl),
        A = _[0],
        B = _[1],
        $ = this.ll01(A)
};
mini_Lookup_ll01 = function(E) {
    var _ = -1;
    if (this.text == "") return _;
    var C = String(this.text).split(this.delimiter),
        $ = 0;
    for (var A = 0, D = C.length; A < D; A++) {
        var B = C[A];
        if ($ < E && E <= $ + B.length) {
            _ = A;
            break
        }
        $ = $ + B.length + 1
    }
    return _
};
mini_Lookup_getAttrs = function($) {
    var _ = mini.Lookup.superclass.getAttrs.call(this, $);
    mini._ParseString($, _, ["grid", "valueField", "textField"]);
    mini._ParseBool($, _, ["multiSelect"]);
    return _
};
mini_Control__create = function() {
    this.el = document.createElement("div")
};
mini_Control__initEvents = function() {};
mini_Control_within = function($) {
    if (Oolo(this.el, $.target)) return true;
    return false
};
mini_Control_setName = function($) {

    this.name = $
};
mini_Control_getName = function() {
    return this.name
};
mini_Control_isAutoHeight = function() {

    var $ = this.el.style.height;
    return $ == "auto" || $ == ""
};
mini_Control_isAutoWidth = function() {

    var $ = this.el.style.width;
    return $ == "auto" || $ == ""
};
mini_Control_isFixedSize = function() {
    var $ = this.width,
        _ = this.height;
    if (parseInt($) + "px" == $ && parseInt(_) + "px" == _) return true;
    return false
};
mini_Control_isRender = function($) {
    return !!(this.el && this.el.parentNode && this.el.parentNode.tagName)
};
mini_Control_render = function(_, $) {
    if (typeof _ === "string")
        if (_ == "#body") _ = document.body;
        else _ = mini.byId(_);
    if (!_) return;
    if (!$) $ = "append";
    $ = $.toLowerCase();
    if ($ == "before") jQuery(_).before(this.el);
    else if ($ == "preend") jQuery(_).preend(this.el);
    else if ($ == "after") jQuery(_).after(this.el);
    else _.appendChild(this.el);
    this.el.id = this.id;
    this.doLayout();
    this.fire("render")
};
mini_Control_getEl = function() {
    return this.el
};
mini_Control_setJsName = function($) {
    this.jsName = $;
    window[$] = this
};
mini_Control_getJsName = function() {

    return this.jsName
};
mini_Control_setTooltip = function($) {
    this.tooltip = $;
    this.el.title = $;
    if (this.tooltipPlacement) jQuery(this.el).attr("data-placement", this.tooltipPlacement)
};
mini_Control_getTooltip = function() {
    return this.tooltip
};
mini_Control__sizeChanged = function() {

    this.doLayout()
};
mini_Control_setWidth = function($) {
    if (parseInt($) == $) $ += "px";
    this.width = $;
    this.el.style.width = $;
    this._sizeChanged()
};
mini_Control_getWidth = function(A) {
    var _ = this.el,
        $ = A ? jQuery(_).width() : jQuery(_).outerWidth();
    if (A && this._borderEl) {
        var B = mini.getBorders(this._borderEl);
        $ = $ - B.left - B.right
    }
    return $
};
mini_Control_setHeight = function($) {
    if (parseInt($) == $) $ += "px";
    this.height = $;
    this.el.style.height = $;
    this._sizeChanged()
};
mini_Control_getHeight = function(_) {

    var $ = _ ? jQuery(this.el).height() : jQuery(this.el).outerHeight();
    if (_ && this._borderEl) {
        var A = mini.getBorders(this._borderEl);
        $ = $ - A.top - A.bottom
    }
    return $
};
mini_Control_getBox = function() {
    return mini.getBox(this.el)
};

mini_Control_setBorderStyle = function($) {
    var _ = this._borderEl || this.el;
    mini.setStyle(_, $);
    this.doLayout()
};
mini_Control_getBorderStyle = function() {
    return this.borderStyle
};
mini_Control_setStyle = function($) {
    this.style = $;
    mini.setStyle(this.el, $);
    if (this._clearBorder) {
        this.el.style.borderWidth = "0";
        this.el.style.padding = "0px"
    }
    this.width = this.el.style.width;
    this.height = this.el.style.height;
    this._sizeChanged()
};
mini_Control_getStyle = function() {
    return this.style
};
mini_Control_setCls = function($) {
    this.addCls($)
};
mini_Control_getCls = function() {
    return this.cls
};
mini_Control_addCls = function($) {
    mini.addClass(this.el, $)
};
mini_Control_removeCls = function($) {
    mini.removeClass(this.el, $)
};
mini_Control__doReadOnly = function() {
    if (this.readOnly) this.addCls(this.OooO01);
    else this.removeCls(this.OooO01)
};
mini_Control_setReadOnly = function($) {
    this.readOnly = $;
    this._doReadOnly()
};
mini_Control_getReadOnly = function() {
    return this.readOnly
};
mini_Control_getParent = function(A) {
    var $ = document,
        B = this.el.parentNode;
    while (B != $ && B != null) {
        var _ = mini.get(B);
        if (_) {
            if (!mini.isControl(_)) return null;
            if (!A || _.uiCls == A) return _
        }
        B = B.parentNode
    }
    return null
};
mini_Control_isReadOnly = function() {
    if (this.readOnly || !this.enabled) return true;
    var $ = this.getParent();
    if ($) return $.isReadOnly();
    return false
};
mini_Control_setEnabled = function($) {
    this.enabled = $;
    if (this.enabled) this.removeCls(this.o0010);
    else this.addCls(this.o0010);
    this._doReadOnly()
};
mini_Control_getEnabled = function() {
    return this.enabled
};
mini_Control_enable = function() {
    this.setEnabled(true)
};
mini_Control_disable = function() {
    this.setEnabled(false)
};
mini_Control_setVisible = function($) {
    this.visible = $;
    if (this.el) {
        this.el.style.display = $ ? this.l10O0 : "none";
        this.doLayout()
    }
};
mini_Control_getVisible = function() {
    return this.visible
};
mini_Control_show = function() {
    this.setVisible(true)
};
mini_Control_hide = function() {
    this.setVisible(false)
};
mini_Control_isDisplay = function(_) {

    if (o101O1 == false || !this.el) return false;
    var $ = document.body,
        A = this.el;
    while (1) {
        if (A == null || !A.style) return false;
        if (A && A.style && A.style.display == "none")
            if (_) {
                if (_(A) !== true) return false
            } else return false;
        if (A == $) return true;
        A = A.parentNode
    }
    return true
};
mini_Control_beginUpdate = function() {

    this.lO10O = false
};
mini_Control_endUpdate = function() {

    this.lO10O = true;
    this.doUpdate()
};
mini_Control_doUpdate = function() {};
mini_Control_canLayout = function() {
    if (!mini.enableLayout) return false;
    if (this._allowLayout == false) return false;
    return this.isDisplay()
};
mini_Control_doLayout = function() {};
mini_Control_layoutChanged = function() {

    if (this.canLayout() == false) return;
    this.doLayout()
};
mini_Control__destroyChildren = function(B) {
    if (this.el) {
        var A = mini.getChildControls(this);
        for (var $ = 0, C = A.length; $ < C; $++) {
            var _ = A[$];
            if (_.destroyed !== true) _.destroy(B)
        }
    }
};
mini_Control_destroy = function(_) {

    if (this.destroyed !== true)
        if (!mini._destroying) this._destroyChildren(_);
    if (this.el) {
        var $ = this.el;
        $.onclick = $.ondblclick = $.onmousedown = $.onmouseup = $.onmousemove = $.onmouseover = $.onmouseout = $.onkeydown = $.onkeyup = $.oncontextmenu = null;
        mini.clearEvent($);
        if (_ !== false) mini.removeNode($)
    }
    this._borderEl = this._contentEl = this.ll10l = this._textEl = this.oO1100 = null;
    this.el = null;
    mini["unreg"](this);
    this.destroyed = true;
    this.fire("destroy")
};
mini_Control_focus = function() {
    try {
        var $ = this;
        $.el.focus()
    } catch (_) {}
};
mini_Control_blur = function() {
    try {
        var $ = this;
        $.el.blur()
    } catch (_) {}
};
mini_Control_setAllowAnim = function($) {

    this.allowAnim = $
};
mini_Control_getAllowAnim = function() {

    return this.allowAnim
};
mini_Control_oOlolO = function() {
    return this.el
};
mini_Control_mask = function($) {
    if (typeof $ == "string") $ = {
        html: $
    };
    $ = $ || {};
    $.el = this.oOlolO();
    if (!$.cls) $.cls = this.Oo00;
    mini.mask($)
};
mini_Control_unmask = function() {
    mini.unmask(this.oOlolO());
    this.isLoading = false
};
mini_Control_loading = function($) {

    this.mask($ || this.loadingMsg)
};
mini_Control_setLoadingMsg = function($) {
    this.loadingMsg = $
};
mini_Control_getLoadingMsg = function() {

    return this.loadingMsg
};
mini_Control_o000Oo = function($) {
    var _ = $;
    if (typeof $ == "string") {
        _ = mini.get($);
        if (!_) {
            mini.parse($);
            _ = mini.get($)
        }
    } else if (mini.isArray($)) _ = {
        type: "menu",
        items: $
    };
    else if (!mini.isControl($)) _ = mini.create($);
    return _
};
mini_Control_Ol0l10 = function(_) {
    var $ = {
        popupEl: this.el,
        htmlEvent: _,
        cancel: false
    };
    this.contextMenu.fire("BeforeOpen", $);
    if ($.cancel == true) return;
    this.contextMenu.fire("opening", $);
    if ($.cancel == true) return;
    this.contextMenu.showAtPos(_.pageX, _.pageY);
    this.contextMenu.fire("Open", $);
    return false
};
mini_Control_setContextMenu = function($) {
    var _ = this.o000Oo($);
    if (!_) return;
    if (this.contextMenu !== _) {
        this.contextMenu = _;
        this.contextMenu.owner = this;
        mini.on(this.el, "contextmenu", this.Ol0l10, this)
    }
};
mini_Control_getContextMenu = function() {
    return this.contextMenu
};
mini_Control_setDefaultValue = function($) {
    this.defaultValue = $
};
mini_Control_getDefaultValue = function() {
    return this.defaultValue
};
mini_Control_setValue = function($) {
    this.value = $
};
mini_Control_getValue = function() {
    return this.value
};

mini_Control_setAjaxData = function($) {
    this.ajaxData = $
};
mini_Control_getAjaxData = function() {


    return this.ajaxData
};
mini_Control_setAjaxType = function($) {

    this.ajaxType = $
};
mini_Control_getAjaxType = function() {
    return this.ajaxType
};
mini_Control_o1o1 = function($) {};
mini_Control_setDataField = function($) {

    this.dataField = $
};
mini_Control_getDataField = function() {
    return this.dataField
};
mini_Control_setTabIndex = function($) {
    var _ = this._textEl || this.el;
    _.tabIndex = $;
    this.tabIndex = $
};
mini_Control_getTabIndex = function() {
    return this.tabIndex
};
mini_Control_getAttrs = function(el) {
    var attrs = {},
        cls = el.className;
    if (cls) attrs.cls = cls;
    if (el.value) attrs.value = el.value;
    mini._ParseString(el, attrs, ["id", "name", "width", "height", "borderStyle", "value", "defaultValue", "tabIndex", "contextMenu", "tooltip", "ondestroy", "data-options", "ajaxData", "ajaxType", "dataField", "ajaxOptions", "data-placement"]);
    if (attrs["data-placement"]) this.tooltipPlacement = attrs["data-placement"];
    mini._ParseBool(el, attrs, ["visible", "enabled", "readOnly"]);
    if (el.readOnly && el.readOnly != "false") attrs.readOnly = true;
    var style = el.style.cssText;
    if (style) attrs.style = style;
    if (isIE9) {
        var bg = el.style.background;
        if (bg) {
            if (!attrs.style) attrs.style = "";
            attrs.style += ";background:" + bg
        }
    }
    if (this.style)
        if (attrs.style) attrs.style = this.style + ";" + attrs.style;
        else attrs.style = this.style;
    if (this.borderStyle)
        if (attrs.borderStyle) attrs.borderStyle = this.borderStyle + ";" + attrs.borderStyle;
        else attrs.borderStyle = this.borderStyle;
    if (typeof attrs.ajaxOptions == "string") attrs.ajaxOptions = eval("(" + attrs.ajaxOptions + ")");
    var ts = mini._attrs;
    if (ts)
        for (var i = 0, l = ts.length; i < l; i++) {
            var t = ts[i],
                name = t[0],
                type = t[1];
            if (!type) type = "string";
            if (type == "string") mini._ParseString(el, attrs, [name]);
            else if (type == "bool") mini._ParseBool(el, attrs, [name]);
            else if (type == "int") mini._ParseInt(el, attrs, [name])
        }
    var options = attrs["data-options"];
    if (options) {
        options = eval("(" + options + ")");
        if (options) mini.copyTo(attrs, options)
    }
    return attrs
};
mini_DataSet_add = function(_, $) {
    if (!_ || !$) return;
    this._sources[_] = $;
    this._data[_] = [];
    $._set_autoCreateNewID(true);
    $._setOo0o($.getIdField());
    $._setOlo0(false);
    $.on("addrow", this.__OnRowChanged, this);
    $.on("updaterow", this.__OnRowChanged, this);
    $.on("deleterow", this.__OnRowChanged, this);
    $.on("removerow", this.__OnRowChanged, this);
    $.on("preload", this.__OnDataSelectionChanged, this);
    $.on("selectionchanged", this.__OnDataSelectionChanged, this)
};
mini_TreeSelect_getItem = function(item) {
    return typeof item == "object" ? item : this.data[item];
};
mini_DataSet_addLink = function(B, _, $) {
    if (!B || !_ || !$) return;
    if (!this._sources[B] || !this._sources[_]) return;
    var A = {
        parentName: B,
        childName: _,
        parentField: $
    };
    this._links.push(A)
};
mini_DataSet_clearData = function() {
    this._data = {};
    this._originals = {};
    for (var $ in this._sources) this._data = []
};
mini_DataSet_getData = function() {
    return this._data
};
mini_DataSet_l001 = function($) {
    for (var A in this._sources) {
        var _ = this._sources[A];
        if (_ == $) return A
    }
};
mini_DataSet_l110O0 = function(E, _, D) {
    var B = this._data[E];
    if (!B) return false;
    for (var $ = 0, C = B.length; $ < C; $++) {
        var A = B[$];
        if (A[D] == _[D]) return A
    }
    return null
};
mini_DataSet_l0l00 = function(F) {
    var C = F.type,
        _ = F.record,
        D = this._getNameByListControl(F.sender),
        E = this._getRecord(D, _, F.sender.getIdField()),
        A = this._data[D];
    if (E) {
        A = this._data[D];
        A.remove(E)
    }
    if (C == "removerow" && _._state == "added");
    else A.push(_);
    this._originals[D] = F.sender._getlOOoO();
    if (_._state == "added") {
        var $ = this._getParentSource(F.sender);
        if ($) {
            var B = $.getSelected();
            if (B) _._parentId = B[$.getIdField()];
            else A.remove(_)
        }
    }
};
mini_DataSet_Oo1l = function(M) {
    var J = M.sender,
        L = this._getNameByListControl(J),
        K = M.sender.getIdField(),
        A = this._data[L],
        $ = {};
    for (var F = 0, C = A.length; F < C; F++) {
        var G = A[F];
        $[G[K]] = G
    }
    var N = this._originals[L];
    if (N) J._setlOOoO(N);
    var I = M.data || [];
    for (F = 0, C = I.length; F < C; F++) {
        var G = I[F],
            H = $[G[K]];
        if (H) {
            delete H._uid;
            mini.copyTo(G, H)
        }
    }
    var D = this._getParentSource(J);
    if (J.getPageIndex && J.getPageIndex() == 0) {
        var E = [];
        for (F = 0, C = A.length; F < C; F++) {
            G = A[F];
            if (G._state == "added")
                if (D) {
                    var B = D.getSelected();
                    if (B && B[D.getIdField()] == G._parentId) E.push(G)
                } else E.push(G)
        }
        E.reverse();
        I.insertRange(0, E)
    }
    var _ = [];
    for (F = I.length - 1; F >= 0; F--) {
        G = I[F], H = $[G[K]];
        if (H && H._state == "removed") {
            I.removeAt(F);
            _.push(H)
        }
    }
};
mini_DataSet_l1lo = function(C) {
    var _ = this._getNameByListControl(C);
    for (var $ = 0, B = this._links.length; $ < B; $++) {
        var A = this._links[$];
        if (A.childName == _) return this._sources[A.parentName]
    }
};
mini_DataSet_loloOl = function(B) {
    var C = this._getNameByListControl(B),
        D = [];
    for (var $ = 0, A = this._links.length; $ < A; $++) {
        var _ = this._links[$];
        if (_.parentName == C) D.push(_)
    }
    return D
};
mini_DataSet___OnDataSelectionChanged = function(G) {
    var A = G.sender,
        _ = A.getSelected(),
        F = this._getLinks(A);
    for (var $ = 0, E = F.length; $ < E; $++) {
        var D = F[$],
            C = this._sources[D.childName];
        if (_) {
            var B = {};
            B[D.parentField] = _[A.getIdField()];
            C.load(B)
        } else C.loadData([])
    }
};
mini_TextBox__create = function() {
    var $ = "<input  type=\"" + this.O000l + "\" class=\"mini-textbox-input\" autocomplete=\"off\"/>";
    if (this.O000l == "textarea") $ = "<textarea  class=\"mini-textbox-input\" autocomplete=\"off\"/></textarea>";
    $ = "<span class=\"mini-textbox-border\">" + $ + "</span>";
    $ += "<input type=\"hidden\"/>";
    this.el = document.createElement("span");
    this.el.className = "mini-textbox";
    this.el.innerHTML = $;
    this._borderEl = this.el.firstChild;
    this._textEl = this._borderEl.firstChild;
    this.ll10l = this._borderEl.lastChild;
    this.o1olOo()
};
mini_TextBox__initEvents = function() {
    mini._BindEvents(function() {
        OooO(this._textEl, "drop", this.lOOo, this);
        OooO(this._textEl, "change", this.O00l10, this);
        OooO(this._textEl, "focus", this.ol00, this);
        OooO(this.el, "mousedown", this.__OnMouseDown, this);
        var $ = this.value;
        this.value = null;
        if (this.el) this.setValue($)
    }, this);
    this.on("validation", this.O0OO, this)
};
mini_TextBox_o0oO = function() {
    if (this.l0l1O1) return;
    this.l0l1O1 = true;
    mini.on(this._textEl, "blur", this.Ol0O1, this);
    mini.on(this._textEl, "keydown", this.O10l1, this);
    mini.on(this._textEl, "keyup", this.OoOlO1, this);
    mini.on(this._textEl, "keypress", this.o1oO, this);
    OooO(this.el, "click", this.__OnClick, this)
};
mini_TextBox_destroy = function(_) {

    if (this.el) this.el.onmousedown = null;
    if (this._textEl) {
        var $ = this._textEl;
        if ($._placeholder_label) {
            $._placeholder_label.onmousedown = null;
            $._placeholder_label = null
        }
        $.onpropertychange = $.ondrop = $.onchange = $.onfocus = null;
        mini.clearEvent($);
        this._textEl = null
    }
    if (this.ll10l) {
        mini.clearEvent(this.ll10l);
        this.ll10l = null
    }
    mini.TextBox.superclass.destroy.call(this, _)
};
mini_TextBox_doLayout = function() {
    if (this._doLabelLayout) this._labelLayout()
};
mini_TextBox_setHeight = function($) {
    if (parseInt($) == $) $ += "px";
    this.height = $;
    if (this.O000l == "textarea") {
        this.el.style.height = $;
        this.doLayout()
    }
};
mini_TextBox_setName = function($) {
    if (this.name != $) {
        this.name = $;
        if (this.ll10l) mini.setAttr(this.ll10l, "name", this.name)
    }
};
mini_TextBox_setValue = function($) {
    if ($ === null || $ === undefined) $ = "";
    $ = String($);
    if ($.length > this.maxLength) $ = $.substring(0, this.maxLength);
    if (this.value !== $) {
        this.value = $;
        this.ll10l.value = this._textEl.value = $;
        this.o1olOo()
    }
};
mini_TextBox_getValue = function() {
    return this.value
};
mini_TextBox_getFormValue = function() {
    var $ = this.value;
    if ($ === null || $ === undefined) $ = "";
    return String($)
};
mini_TextBox_setAllowInput = function($) {
    if (this.allowInput != $) {
        this.allowInput = $;
        this.doUpdate()
    }
};
mini_TextBox_getAllowInput = function() {
    return this.allowInput
};
mini_TextBox_o1olOo = function() {
    this._textEl.placeholder = this.emptyText;
    if (this.emptyText) O011(this._textEl)
};
mini_TextBox_setEmptyText = function($) {
    if (this.emptyText != $) {
        this.emptyText = $;
        this.o1olOo()
    }
};
mini_TextBox_getEmptyText = function() {

    return this.emptyText
};
mini_TextBox_setMaxLength = function($) {
    this.maxLength = $;
    mini.setAttr(this._textEl, "maxLength", $);
    if (this.O000l == "textarea" && mini.isIE) {
        mini.on(this._textEl, "keyup", this.l00O1l, this);
        mini.on(this._textEl, "keypress", this.l00O1l, this);
        mini.on(this._textEl, "paste", this.__OnPaste, this)
    }
};
mini_TextBox___OnPaste = function(_) {
    var $ = this;
    setTimeout(function() {
        var _ = $._textEl.value;
        if (_.length > $.maxLength) $._textEl.value = _.substring(0, $.maxLength);
        $.O00l10()
    }, 0)
};
mini_TextBox_l00O1l = function($) {
    if (this._textEl.value.length >= this.maxLength) {
        this.__OnPaste($);
        $.preventDefault()
    }
};
mini_TextBox_getMaxLength = function() {
    return this.maxLength
};
mini_TextBox_setReadOnly = function($) {

    if (this.readOnly != $) {
        this.readOnly = $;
        this.doUpdate()
    }
};
mini_TextBox_setEnabled = function($) {
    if (this.enabled != $) {
        this.enabled = $;
        this.doUpdate()
    }
};
mini_TextBox_doUpdate = function() {
    if (this.enabled) this.removeCls(this.o0010);
    else this.addCls(this.o0010);
    if (this.isReadOnly() || this.allowInput == false) {
        this._textEl.readOnly = true;
        mini.addClass(this.el, "mini-textbox-readOnly")
    } else {
        this._textEl.readOnly = false;
        mini.removeClass(this.el, "mini-textbox-readOnly")
    }
    if (this.required) this.addCls(this.o11o);
    else this.removeCls(this.o11o);
    if (this.enabled) this._textEl.disabled = false;
    else this._textEl.disabled = true
};
mini_TextBox_focus = function() {
    var $ = this;
    setTimeout(function() {
        try {
            $._textEl.focus();
            if (mini.isIE) {
                var _ = $._textEl.createTextRange();
                _.collapse(false);
                _.select()
            }
        } catch (A) {}
    }, 10)
};
mini_TextBox_blur = function() {
    try {
        this._textEl.blur()
    } catch ($) {}
};
mini_TextBox_selectText = function() {
    var _ = this;

    function $() {
        try {
            _._textEl.select()
        } catch ($) {}
    }
    $()
};
mini_TextBox_getTextEl = function() {
    return this._textEl
};
mini_TextBox_getInputText = function() {

    return this._textEl.value
};
mini_TextBox_setSelectOnFocus = function($) {
    this.selectOnFocus = $
};
mini_TextBox_getSelectOnFocus = function($) {
    return this.selectOnFocus
};
mini_TextBox_getErrorIconEl = function() {
    if (!this.oO1100) this.oO1100 = mini.append(this.el, "<span class=\"mini-errorIcon\"></span>");
    return this.oO1100
};
mini_TextBox_Olll1 = function() {

    if (this.oO1100) {
        var $ = this.oO1100;
        jQuery($).remove()
    }
    this.oO1100 = null
};
mini_TextBox_Ol1o1 = function($) {
    if (!this.enabled) return;
    this.fire("click", {
        htmlEvent: $
    })
};
mini_TextBox_olol = function(_) {
    var $ = this;
    if (this.O000l == "textarea") return;
    if (!Oolo(this._textEl, _.target)) setTimeout(function() {
        $.focus();
        mini.selectRange($._textEl, 10000, 10000)
    }, 1);
    else setTimeout(function() {
        try {
            $._textEl.focus()
        } catch (_) {}
    }, 1)
};
mini_TextBox_O00l10 = function(A, _) {
    var $ = this.value;
    this.setValue(this._textEl.value);
    if ($ !== this.getValue() || _ === true) this.Ol11o()
};
mini_TextBox_lOOo = function(_) {
    var $ = this;
    setTimeout(function() {
        $.O00l10(_)
    }, 0)
};
mini_TextBox_O10l1 = function(A) {
    var _ = {
        htmlEvent: A
    };
    this.fire("keydown", _);
    if (A.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) return false;
    if (A.keyCode == 27 || A.keyCode == 13 || A.keyCode == 9)
        if (this.O000l == "textarea" && A.keyCode == 13);
        else {
            this.O00l10(null);
            if (A.keyCode == 13) {
                var $ = this;
                $.fire("enter", _)
            }
        }
    if (A.keyCode == 27) A.preventDefault()
};
mini_TextBox_OoOlO1 = function($) {

    this.fire("keyup", {
        htmlEvent: $
    })
};
mini_TextBox_o1oO = function($) {
    this.fire("keypress", {
        htmlEvent: $
    })
};
mini_TextBox_ol00 = function(_) {
    this.doUpdate();
    if (this.isReadOnly()) return;
    this.OO0Ol = true;
    this.addCls(this.l0l0l1);
    this.o0oO();
    if (this.selectOnFocus) {
        var $ = this;
        setTimeout(function() {
            $.selectText()
        }, 1)
    }
    this.fire("focus", {
        htmlEvent: _
    })
};
mini_TextBox_Ol0O1 = function(_) {
    this.OO0Ol = false;
    var $ = this;
    setTimeout(function() {
        if ($.OO0Ol == false) $.removeCls($.l0l0l1)
    }, 2);
    this.fire("blur", {
        htmlEvent: _
    });
    if (this.validateOnLeave && this.isEditable()) this._tryValidate()
};
mini_TextBox_setInputStyle = function($) {
    this.inputStyle = $;
    mini.setStyle(this._textEl, $)
};
mini_TextBox_getAttrs = function($) {
    var A = mini.TextBox.superclass.getAttrs.call(this, $),
        _ = jQuery($);
    mini._ParseString($, A, ["value", "text", "emptyText", "inputStyle", "onenter", "onkeydown", "onkeyup", "onkeypress", "onclick", "maxLengthErrorText", "minLengthErrorText", "onfocus", "onblur", "vtype", "emailErrorText", "urlErrorText", "floatErrorText", "intErrorText", "dateErrorText", "minErrorText", "maxErrorText", "rangeLengthErrorText", "rangeErrorText", "rangeCharErrorText"]);
    mini._ParseBool($, A, ["allowInput", "selectOnFocus"]);
    mini._ParseInt($, A, ["maxLength", "minLength", "minHeight", "minWidth"]);
    return A
};
mini_TextBox_setVtype = function($) {

    this.vtype = $
};
mini_TextBox_getVtype = function() {

    return this.vtype
};
mini_TextBox_O0OO = function($) {
    if ($.isValid == false) return;
    mini.Oool(this.vtype, $.value, $, this)
};
mini_TextBox_setEmailErrorText = function($) {
    this.emailErrorText = $
};
mini_TextBox_getEmailErrorText = function() {

    return this.emailErrorText
};
mini_TextBox_setUrlErrorText = function($) {
    this.urlErrorText = $
};

mini_DatePicker_setShowOkButton = function(value) {
    this.showOkButton = value;
};
mini_TextBox_getUrlErrorText = function() {


    return this.urlErrorText
};
mini_TextBox_setFloatErrorText = function($) {

    this.floatErrorText = $
};
mini_TextBox_getFloatErrorText = function() {
    return this.floatErrorText
};
mini_TextBox_setIntErrorText = function($) {
    this.intErrorText = $
};
mini_TextBox_getIntErrorText = function() {
    return this.intErrorText
};
mini_TextBox_setDateErrorText = function($) {
    this.dateErrorText = $
};
mini_TextBox_getDateErrorText = function() {
    return this.dateErrorText
};
mini_TextBox_setMaxLengthErrorText = function($) {
    this.maxLengthErrorText = $
};
mini_TextBox_getMaxLengthErrorText = function() {
    return this.maxLengthErrorText
};
mini_TextBox_setMinLengthErrorText = function($) {
    this.minLengthErrorText = $
};
mini_TextBox_getMinLengthErrorText = function() {

    return this.minLengthErrorText
};
mini_TextBox_setMaxErrorText = function($) {
    this.maxErrorText = $
};
mini_TextBox_getMaxErrorText = function() {
    return this.maxErrorText
};
mini_TextBox_setMinErrorText = function($) {


    this.minErrorText = $
};
mini_TextBox_getMinErrorText = function() {
    return this.minErrorText
};
mini_TextBox_setRangeLengthErrorText = function($) {

    this.rangeLengthErrorText = $
};
mini_TextBox_getRangeLengthErrorText = function() {

    return this.rangeLengthErrorText
};
mini_TextBox_setRangeCharErrorText = function($) {
    this.rangeCharErrorText = $
};
mini_TextBox_getRangeCharErrorText = function() {
    return this.rangeCharErrorText
};
mini_TextBox_setRangeErrorText = function($) {
    this.rangeErrorText = $
};
mini_TextBox_getRangeErrorText = function() {

    return this.rangeErrorText
};
mini_Include__create = function() {
    this.el = document.createElement("div");
    this.el.className = "mini-include"
};
mini_Include__initEvents = function() {

};
mini_Include_doLayout = function() {
    if (!this.canLayout()) return;
    var A = this.el.childNodes;
    if (A)
        for (var $ = 0, B = A.length; $ < B; $++) {
            var _ = A[$];
            mini.layout(_)
        }
};
mini_Include_setUrl = function($) {
    this.url = $;
    mini.update({
        url: this.url,
        el: this.el,
        async: this.async
    });
    this.doLayout()
};
mini_Include_getUrl = function($) {
    return this.url
};
mini_Include_getAttrs = function($) {

    var _ = mini.Include.superclass.getAttrs.call(this, $);
    mini._ParseString($, _, ["url"]);
    return _
};
mini_ListBox__create = function() {
    var $ = this.el = document.createElement("div");
    this.el.className = "mini-listbox";
    this.el.innerHTML = "<div class=\"mini-listbox-border\"><div class=\"mini-listbox-header\"></div><div class=\"mini-listbox-view\"></div><input type=\"hidden\"/></div><div class=\"mini-errorIcon\"></div>";
    this._borderEl = this.el.firstChild;
    this.o1oO0 = this._borderEl.firstChild;
    this.oOooo1 = this._borderEl.childNodes[1];
    this.ll10l = this._borderEl.childNodes[2];
    this.oO1100 = this.el.lastChild;
    this.oo11O = this.oOooo1;
    this.oOooo1.innerHTML = "<div class=\"mini-grid-rows-content\"></div>";
    this._contentEl = this.oOooo1.firstChild
};
mini_ListBox__initEvents = function() {
    mini.ListBox.superclass._initEvents.call(this);
    mini._BindEvents(function() {
        OooO(this.oOooo1, "scroll", this.l0ol1, this)
    }, this)
};
mini_ListBox_destroy = function($) {
    if (this.oOooo1) {
        this.oOooo1.onscroll = null;
        mini.clearEvent(this.oOooo1);
        this.oOooo1 = null
    }
    this._borderEl = this.o1oO0 = this.oOooo1 = this.ll10l = this.oO1100 = this.oo11O = this._contentEl = null;
    mini.ListBox.superclass.destroy.call(this, $)
};
mini_ListBox_setColumns = function(_) {
    if (!mini.isArray(_)) _ = [];
    this.columns = _;
    for (var $ = 0, D = this.columns.length; $ < D; $++) {
        var B = this.columns[$];
        if (B.type) {
            if (!mini.isNull(B.header) && typeof B.header !== "function")
                if (B.header.trim() == "") delete B.header;
            var C = mini._getColumn(B.type);
            if (C) {
                var E = mini.copyTo({}, B);
                mini.copyTo(B, C);
                mini.copyTo(B, E)
            }
        }
        var A = parseInt(B.width);
        if (mini.isNumber(A) && String(A) == B.width) B.width = A + "px";
        if (mini.isNull(B.width)) B.width = this.columnWidth + "px"
    }
    this.doUpdate()
};
mini_ListBox_getColumns = function() {
    return this.columns
};
mini_ListBox_doUpdate = function() {
    if (this.lO10O === false) return;
    var S = this.columns && this.columns.length > 0;
    if (S) mini.addClass(this.el, "mini-listbox-showColumns");
    else mini.removeClass(this.el, "mini-listbox-showColumns");
    this.o1oO0.style.display = S ? "" : "none";
    var I = [];
    if (S) {
        I[I.length] = "<table class=\"mini-listbox-headerInner\" cellspacing=\"0\" cellpadding=\"0\"><tr>";
        var D = this.uid + "$ck$all";
        I[I.length] = "<td class=\"mini-listbox-checkbox\"><input type=\"checkbox\" id=\"" + D + "\"></td>";
        for (var R = 0, _ = this.columns.length; R < _; R++) {
            var B = this.columns[R],
                E = B.header;
            if (mini.isNull(E)) E = "&nbsp;";
            var A = B.width;
            if (mini.isNumber(A)) A = A + "px";
            I[I.length] = "<td class=\"";
            if (B.headerCls) I[I.length] = B.headerCls;
            I[I.length] = "\" style=\"";
            if (B.headerStyle) I[I.length] = B.headerStyle + ";";
            if (A) I[I.length] = "width:" + A + ";";
            if (B.headerAlign) I[I.length] = "text-align:" + B.headerAlign + ";";
            I[I.length] = "\">";
            I[I.length] = E;
            I[I.length] = "</td>"
        }
        I[I.length] = "</tr></table>"
    }
    this.o1oO0.innerHTML = I.join("");
    var I = [],
        P = this.data;
    I[I.length] = "<table class=\"mini-listbox-items\" cellspacing=\"0\" cellpadding=\"0\">";
    if (this.showEmpty && P.length == 0) I[I.length] = "<tr><td colspan=\"20\">" + this.emptyText + "</td></tr>";
    else {
        this.Oo01o0();
        for (var K = 0, G = P.length; K < G; K++) {
            var $ = P[K],
                M = -1,
                O = " ",
                J = -1,
                N = " ";
            I[I.length] = "<tr id=\"";
            I[I.length] = this.O0OO01(K);
            I[I.length] = "\" index=\"";
            I[I.length] = K;
            I[I.length] = "\" class=\"mini-listbox-item ";
            if ($.enabled === false) I[I.length] = " mini-disabled ";
            M = I.length;
            I[I.length] = O;
            I[I.length] = "\" style=\"";
            J = I.length;
            I[I.length] = N;
            I[I.length] = "\">";
            var H = this.lo1ol(K),
                L = this.name,
                F = this.getItemValue($),
                C = "";
            if ($.enabled === false) C = "disabled";
            if ($.__NullItem === true) I[I.length] = "<td class=\"mini-listbox-checkbox\"></td>";
            else I[I.length] = "<td class=\"mini-listbox-checkbox\"><input " + C + " id=\"" + H + "\" type=\"checkbox\" ></td>";
            if (S) {
                for (R = 0, _ = this.columns.length; R < _; R++) {
                    var B = this.columns[R],
                        T = this._OnDrawCell($, K, B),
                        A = B.width;
                    if (typeof A == "number") A = A + "px";
                    I[I.length] = "<td class=\"";
                    if (T.cellCls) I[I.length] = T.cellCls;
                    I[I.length] = "\" style=\"";
                    if (T.cellStyle) I[I.length] = T.cellStyle + ";";
                    if (A) I[I.length] = "width:" + A + ";";
                    if (B.align) I[I.length] = "text-align:" + B.align + ";";
                    I[I.length] = "\">";
                    I[I.length] = T.cellHtml;
                    I[I.length] = "</td>";
                    if (T.rowCls) O = T.rowCls;
                    if (T.rowStyle) N = T.rowStyle
                }
            } else {
                T = this._OnDrawCell($, K, null);
                I[I.length] = "<td class=\"";
                if (T.cellCls) I[I.length] = T.cellCls;
                I[I.length] = "\" style=\"";
                if (T.cellStyle) I[I.length] = T.cellStyle;
                I[I.length] = "\">";
                I[I.length] = T.cellHtml;
                I[I.length] = "</td>";
                if (T.rowCls) O = T.rowCls;
                if (T.rowStyle) N = T.rowStyle
            }
            I[M] = O;
            I[J] = N;
            I[I.length] = "</tr>"
        }
    }
    I[I.length] = "</table>";
    var Q = I.join("");
    this.oOooo1.firstChild.innerHTML = Q;
    this.O0oo0O();
    this.doLayout()
};
mini_ListBox_doLayout = function(I) {
    if (!this.canLayout()) return;
    if (this.columns && this.columns.length > 0) mini.addClass(this.el, "mini-listbox-showcolumns");
    else mini.removeClass(this.el, "mini-listbox-showcolumns");
    if (this.showCheckBox) mini.removeClass(this.el, "mini-listbox-hideCheckBox");
    else mini.addClass(this.el, "mini-listbox-hideCheckBox");
    var A = this.uid + "$ck$all",
        E = document.getElementById(A);
    if (E) E.style.display = this.showAllCheckBox ? "" : "none";
    var J = this.oOooo1,
        H = this.isAutoHeight();
    if (H) J.style.height = "auto";
    var _ = this.getHeight(true),
        $ = mini.getWidth(this._borderEl, true),
        G = $;
    if (!mini.isIE6) J.style.width = $ + "px";
    var D = mini.getHeight(this.o1oO0);
    _ = _ - D;
    J.style.height = _ + "px";
    if (isIE) {
        var F = this.o1oO0.firstChild,
            B = this.oOooo1.firstChild.firstChild;
        if (this.oOooo1.offsetHeight >= this.oOooo1.scrollHeight) {
            B.style.width = "100%";
            if (F) F.style.width = "100%"
        } else {
            $ = parseInt(B.parentNode.offsetWidth) + "px";
            if (F) F.style.width = $
        }
    }
    if (this.oOooo1.offsetHeight < this.oOooo1.scrollHeight) {
        var C = jQuery(this.oOooo1).width() - jQuery(this._contentEl).width();
        this.o1oO0.style.width = (G - C) + "px"
    } else this.o1oO0.style.width = "100%"
};
mini_ListBox_setShowCheckBox = function($) {
    this.showCheckBox = $;
    this.doLayout()
};
mini_ListBox_getShowCheckBox = function() {
    return this.showCheckBox
};
mini_ListBox_setShowAllCheckBox = function($) {
    this.showAllCheckBox = $;
    this.doLayout()
};
mini_ListBox_getShowAllCheckBox = function() {
    return this.showAllCheckBox
};
mini_ListBox_setShowNullItem = function($) {
    if (this.showNullItem != $) {
        this.showNullItem = $;
        this.Oo01o0();
        this.doUpdate()
    }
};
mini_ListBox_getShowNullItem = function() {
    return this.showNullItem
};
mini_ListBox_setNullItemText = function($) {


    if (this.nullItemText != $) {
        this.nullItemText = $;
        this.Oo01o0();
        this.doUpdate()
    }
};
mini_ListBox_getNullItemText = function() {

    return this.nullItemText
};
mini_ListBox_Oo01o0 = function() {
    for (var _ = 0, A = this.data.length; _ < A; _++) {
        var $ = this.data[_];
        if ($.__NullItem) {
            this.data.removeAt(_);
            break
        }
    }
    if (this.showNullItem) {
        $ = {
            __NullItem: true
        };
        $[this.textField] = "";
        $[this.valueField] = "";
        this.data.insert(0, $)
    }
};
mini_ListBox__OnDrawCell = function(_, $, C) {
    var A = C ? mini._getMap(C.field, _) : this.getItemText(_),
        E = {
            sender: this,
            index: $,
            rowIndex: $,
            record: _,
            item: _,
            column: C,
            field: C ? C.field : null,
            value: A,
            cellHtml: A,
            rowCls: null,
            cellCls: C ? (C.cellCls || "") : "",
            rowStyle: null,
            cellStyle: C ? (C.cellStyle || "") : ""
        },
        D = this.columns && this.columns.length > 0;
    if (!D)
        if ($ == 0 && this.showNullItem) E.cellHtml = this.nullItemText;
    if (E.autoEscape == true) E.cellHtml = mini.htmlEncode(E.cellHtml);
    if (C) {
        if (C.dateFormat)
            if (mini.isDate(E.value)) E.cellHtml = mini.formatDate(A, C.dateFormat);
            else E.cellHtml = A;
        var B = C.renderer;
        if (B) {
            fn = typeof B == "function" ? B : window[B];
            if (fn) E.cellHtml = fn.call(C, E)
        }
    }
    this.fire("drawcell", E);
    if (E.cellHtml === null || E.cellHtml === undefined || E.cellHtml === "") E.cellHtml = "&nbsp;";
    return E
};
mini_ListBox_l0ol1 = function($) {
    this.o1oO0.scrollLeft = this.oOooo1.scrollLeft
};
mini_ListBox_Ol1o1 = function(C) {
    var A = this.uid + "$ck$all";
    if (C.target.id == A) {
        var _ = document.getElementById(A);
        if (_) {
            var B = _.checked,
                $ = this.getValue();
            if (B) this.selectAll();
            else this.deselectAll();
            this._OnSelectionChanged();
            if ($ != this.getValue()) {
                this.Ol11o();
                this.fire("itemclick", {
                    htmlEvent: C
                })
            }
        }
        return
    }
    this.o00lol(C, "Click")
};
mini_ListBox_setValue = function($) {
    mini.ListBox.superclass.setValue.call(this, $);
    this._doCheckState()
};
mini_ListBox__doCheckState = function() {
    var A = this.uid + "$ck$all",
        _ = document.getElementById(A);
    if (this.getSelecteds().length == this.getData().length && this.getSelecteds().length != 0) $(_).attr("checked", true);
    else $(_).attr("checked", false)
};
mini_ListBox_Ol11o = function($) {
    mini.ListBox.superclass.Ol11o.call(this);
    this._doCheckState()
};
mini_ListBox_getAttrs = function(_) {
    var E = mini.ListBox.superclass.getAttrs.call(this, _);
    mini._ParseString(_, E, ["nullItemText", "ondrawcell"]);
    mini._ParseBool(_, E, ["showCheckBox", "showAllCheckBox", "showNullItem"]);
    if (_.nodeName.toLowerCase() != "select") {
        var C = mini.getChildNodes(_);
        for (var $ = 0, D = C.length; $ < D; $++) {
            var B = C[$],
                A = jQuery(B).attr("property");
            if (!A) continue;
            A = A.toLowerCase();
            if (A == "columns") E.columns = mini.oolo(B);
            else if (A == "data") E.data = B.innerHTML
        }
    }
    return E
};
mini_Spinner_set = function(_) {

    if (typeof _ == "string") return this;
    var $ = _.value;
    delete _.value;
    mini.Spinner.superclass.set.call(this, _);
    if (!mini.isNull($)) this.setValue($);
    return this
};
mini_Spinner_loOOoOHtml = function() {
    var $ = "onmouseover=\"mini.addClass(this,'" + this.O1l0 + "');\" " + "onmouseout=\"mini.removeClass(this,'" + this.O1l0 + "');\"";
    return "<span name=\"trigger\" class=\"mini-buttonedit-button mini-buttonedit-trigger\" " + $ + "><span class=\"mini-buttonedit-up\"><span></span></span><span class=\"mini-buttonedit-down\"><span></span></span></span>"
};
mini_Spinner__initEvents = function() {
    mini.Spinner.superclass._initEvents.call(this);
    mini._BindEvents(function() {
        this.on("buttonmousedown", this.ll0Ol0, this);
        mini.on(this.el, "mousewheel", this.l1ll1, this)
    }, this)
};
mini_Spinner_o10O0 = function() {
    if (this.allowLimitValue == false) return;
    if (mini.isNull(this.value) && this.allowNull) return;
    if (this.minValue > this.maxValue) this.maxValue = this.minValue + 100;
    if (this.value < this.minValue) this.setValue(this.minValue);
    if (this.value > this.maxValue) this.setValue(this.maxValue)
};
mini_Spinner_getFormValue = function() {


    var D = this.value;
    D = parseFloat(D);
    if (this.allowNull && isNaN(D)) return "";
    if (isNaN(D)) D = 0;
    var C = String(D).split("."),
        B = C[0],
        _ = C[1];
    if (!_) _ = "";
    if (this.decimalPlaces > 0) {
        for (var $ = _.length, A = this.decimalPlaces; $ < A; $++) _ += "0";
        _ = "." + _
    } else if (_) _ = "." + _;
    return B + _
};
mini_Spinner_setValue = function($) {
    $ = mini.parseFloat($, this.culture, this.format);
    $ = parseFloat($);
    if (isNaN($) && !this.allowNull) $ = this.minValue;
    if (isNaN($) && this.allowNull) $ = null;
    if ($ && this.decimalPlaces >= 0) $ = parseFloat($.toFixed(this.decimalPlaces));
    if (this.value != $) {
        this.value = $;
        this.o10O0();
        this.ll10l.value = this.value;
        this.text = this._textEl.value = this.getFormatValue()
    } else this.text = this._textEl.value = this.getFormatValue()
};
mini_Spinner_setMaxValue = function($) {
    $ = parseFloat($);
    if (isNaN($)) return;
    $ = parseFloat($);
    if (this.maxValue != $) {
        this.maxValue = $;
        this.o10O0()
    }
};
mini_Spinner_getMaxValue = function($) {
    return this.maxValue
};
mini_Spinner_setMinValue = function($) {
    $ = parseFloat($);
    if (isNaN($)) return;
    $ = parseFloat($);
    if (this.minValue != $) {
        this.minValue = $;
        this.o10O0()
    }
};
mini_Spinner_getMinValue = function($) {
    return this.minValue
};
mini_Spinner_setIncrement = function($) {
    $ = parseFloat($);
    if (isNaN($)) return;
    if (this.increment != $) this.increment = $
};
mini_Spinner_getIncrement = function($) {

    return this.increment
};
mini_Spinner_setDecimalPlaces = function($) {
    $ = parseInt($);
    if (isNaN($) || $ < 0) return;
    this.decimalPlaces = $
};
mini_Spinner_getDecimalPlaces = function($) {
    return this.decimalPlaces
};
mini_Spinner_setChangeOnMousewheel = function($) {
    this.changeOnMousewheel = $
};
mini_Spinner_getChangeOnMousewheel = function($) {
    return this.changeOnMousewheel
};
mini_Spinner_setAllowLimitValue = function($) {

    this.allowLimitValue = $
};
mini_Spinner_getAllowLimitValue = function($) {
    return this.allowLimitValue
};
mini_Spinner_setAllowNull = function($) {
    this.allowNull = $
};
mini_Spinner_getAllowNull = function($) {
    return this.allowNull
};
mini_Spinner_setFormat = function($) {
    if (typeof $ != "string") return;
    if (this.format != $) {
        this.format = $;
        this.setText(this.getFormatValue())
    }
};
mini_Spinner_getFormat = function() {
    return this.format
};
mini_Spinner_getFormatValue = function() {
    if (mini.isNull(this.value)) return "";
    if (this.format && mini.isNumber(this.value)) return mini.formatNumber(this.value, this.format, this.culture);
    return this.value
};
mini_Spinner_setAllowLoopValue = function($) {
    this.allowLoopValue = $
};
mini_Spinner_getAllowLoopValue = function() {
    return this.allowLoopValue
};
mini_Spinner_O0l11 = function(I, B, F) {
    this.oooO();
    var A = this;

    function D($) {
        if (I > 0) {
            if ($ > A.maxValue) A.setValue(A.minValue)
        } else if ($ < A.minValue) A.setValue(A.maxValue)
    }
    var E = 1000000,
        C = this.value * E,
        G = I * E,
        H = (C + G) / E;
    this.setValue(H);
    if (A.allowLoopValue) D(H);
    var _ = F,
        $ = new Date();
    this.ol0lo1 = setInterval(function() {
        var E = A.value + I;
        A.setValue(E);
        if (A.allowLoopValue) D(E);
        A.Ol11o();
        F--;
        if (F == 0 && B > 50) A.O0l11(I, B - 100, _ + 3);
        var C = new Date();
        if (C - $ > 500) A.oooO();
        $ = C
    }, B);
    mini.on(document, "mouseup", this.O1ol01, this)
};
mini_Spinner_oooO = function() {

    clearInterval(this.ol0lo1);
    this.ol0lo1 = null
};

mini_TreeSelect_getList = function() {
    return this.tree.getList();
}
mini_Spinner_ll0Ol0 = function($) {
    this._DownValue = this.getValue();
    this.O00l10();
    if ($.spinType == "up") this.O0l11(this.increment, 230, 2);
    else this.O0l11(-this.increment, 230, 2)
};
mini_Spinner_O10l1 = function(_) {
    mini.Spinner.superclass.O10l1.call(this, _);
    var $ = mini.Keyboard;
    if (this.isReadOnly()) return;
    switch (_.keyCode) {
        case $.Top:
            if (this.keyNavEnabled) {
                this.setValue(this.value + this.increment);
                this.Ol11o()
            }
            break;
        case $.Bottom:
            if (this.keyNavEnabled) {
                this.setValue(this.value - this.increment);
                this.Ol11o()
            }
            break
    }
};
mini_Spinner_l1ll1 = function(E) {
    if (this.isReadOnly()) return;
    if (this.changeOnMousewheel == false) return;
    var $ = E.wheelDelta || E.originalEvent.wheelDelta;
    if (mini.isNull($)) $ = -E.originalEvent.detail * 24;
    var _ = this.increment;
    if ($ < 0) _ = -_;
    var B = 1000000,
        A = this.value * B,
        C = _ * B,
        D = (A + C) / B;
    this.setValue(D);
    this.Ol11o();
    return false
};
mini_Spinner_O1ol01 = function($) {
    this.oooO();
    mini.un(document, "mouseup", this.O1ol01, this);
    if (this._DownValue != this.getValue()) this.Ol11o()
};
mini_Spinner_O00l10 = function(A) {
    var _ = this.getValue(),
        $ = mini.parseFloat(this._textEl.value, this.culture, this.format);
    this.setValue($);
    if (_ != this.getValue()) this.Ol11o()
};
mini_Spinner_getAttrs = function($) {
    var _ = mini.Spinner.superclass.getAttrs.call(this, $);
    mini._ParseString($, _, ["minValue", "maxValue", "increment", "decimalPlaces", "format"]);
    mini._ParseBool($, _, ["allowLimitValue", "allowNull", "changeOnMousewheel", "allowLoopValue"]);
    return _
};
mini_TreeGrid_isEditingNode = function($) {
    return this._editingNode == $
};
mini_TreeGrid_indexOf = function($) {
    return this._dataSource.indexOfList($)
};
mini_TreeGrid_l11o10Text = function($) {
    return "Nodes " + $.length
};
mini_TreeGrid__initEvents = function() {

    mini.TreeGrid.superclass._initEvents.call(this);
    this.on("nodedblclick", this.__OnNodeDblClick, this);
    this.on("nodeclick", this.nodeclick, this);
    this.on("cellclick", function($) {
        $.node = $.record;
        $.isLeaf = this.isLeaf($.node);
        this.fire("nodeclick", $)
    }, this);
    this.on("cellmousedown", function($) {
        $.node = $.record;
        $.isLeaf = this.isLeaf($.node);
        this.fire("nodemousedown", $)
    }, this);
    this.on("celldblclick", function($) {
        $.node = $.record;
        $.isLeaf = this.isLeaf($.node);
        this.fire("nodedblclick", $)
    }, this);
    this.on("beforerowselect", function($) {
        $.node = $.selected;
        $.isLeaf = this.isLeaf($.node);
        this.fire("beforenodeselect", $)
    }, this);
    this.on("rowselect", function($) {
        $.node = $.selected;
        $.isLeaf = this.isLeaf($.node);
        this.fire("nodeselect", $)
    }, this)
};
mini_TreeGrid_setValue = function($, A) {
    if (mini.isNull($)) $ = "";
    $ = String($);
    if (this.getValue() != $) {
        var B = this.getCheckedNodes();
        this.uncheckNodes(B, this.checkRecursive);
        this.value = $;
        if (this.showCheckBox) {
            var _ = String($).split(",");
            this._dataSource.doCheckNodes(_, true, A !== false)
        } else this.selectNode($, false)
    }
};
mini_TreeGrid_getValue = function($) {
    if (this.showCheckBox) {
        if ($ === false) $ = "leaf";
        return this._dataSource.getCheckedNodesId($)
    } else return this._dataSource.getSelectedsId()
};
mini_TreeGrid_getText = function() {


    var C = [];
    if (this.showCheckBox) C = this.getCheckedNodes();
    else {
        var A = this.getSelectedNode();
        if (A) C.push(A)
    }
    var D = [],
        _ = this.getTextField();
    for (var $ = 0, B = C.length; $ < B; $++) {
        A = C[$];
        D.push(A[_])
    }
    return D.join(",")
};
mini_TreeGrid_isGrouping = function() {
    return false
};
mini_TreeGrid__createSource = function() {
    this._dataSource = new mini.DataTree()
};
mini_TreeGrid_lllO = function() {
    mini.TreeGrid.superclass.lllO.call(this);
    var $ = this._dataSource;
    $.on("expand", this.expand, this);
    $.on("collapse", this.collapse, this);
    $.on("checkchanged", this.__OnCheckChanged, this);
    $.on("addnode", this.__OnSourceAddNode, this);
    $.on("removenode", this.__OnSourceRemoveNode, this);
    $.on("movenode", this.__OnSourceMoveNode, this);
    $.on("beforeloadnode", this.__OnBeforeLoadNode, this);
    $.on("loadnode", this.__OnLoadNode, this)
};
mini_TreeGrid___OnBeforeLoadNode = function($) {
    this.__showLoading = this.showLoading;
    this.showLoading = false;
    this.addNodeCls($.node, "mini-tree-loading");
    this.fire("beforeloadnode", $)
};
mini_TreeGrid___OnLoadNode = function($) {
    this.showLoading = this.__showLoading;
    this.removeNodeCls($.node, "mini-tree-loading");
    this.fire("loadnode", $)
};
mini_TreeGrid__virtualUpdate = function() {

    var $ = this;
    if ($._updateNodeTimer) {
        clearTimeout($._updateNodeTimer);
        $._updateNodeTimer = null
    }
    $._updateNodeTimer = setTimeout(function() {
        $._updateNodeTimer = null;
        $.doUpdateRows();
        $.deferLayout(50)
    }, 5)
};
mini_TreeGrid___OnSourceAddNode = function(A) {
    var _ = this._dataSource.isVisibleNode(A.node);
    if (this.isVirtualScroll() == true) this._virtualUpdate();
    else if (_) this._doAddNodeEl(A.node);
    else {
        var $ = this.getParentNode(A.node);
        if (this._dataSource.isVisibleNode($)) this._doUpdateTreeNodeEl($)
    }
    this.fire("addnode", A)
};
mini_TreeGrid___OnSourceRemoveNode = function(A) {
    if (this.isVirtualScroll() == true) this._virtualUpdate();
    else {
        this._doRemoveNodeEl(A.node);
        var $ = this.getParentNode(A.node),
            _ = this.getChildNodes($);
        if (_.length == 0) this._doUpdateTreeNodeEl($)
    }
    this.fire("removenode", A)
};
mini_TreeGrid___OnSourceMoveNode = function(C) {
    this._doMoveNodeEl(C.node);
    this.fire("movenode", C);
    var A = C.oldParentNode,
        $ = C.parentNode;
    if (A != $) {
        var B = this.getChildNodes(A);
        if (B) {
            var _ = B[B.length - 1];
            if (_) this._doUpdateTreeNodeEl(_)
        }
    }
};
mini_TreeGrid__doAddNodeEl = function(B) {
    var A = this.getFrozenColumns(),
        E = this.getUnFrozenColumns(),
        $ = this.getParentNode(B),
        C = this.indexOf(B),
        D = false;

    function _(E, G, B) {
        var I = this.l11OoHTML(E, C, G, B),
            _ = this.indexOfNode(E) + 1,
            A = this.getChildNodeAt(_, $);
        if (A) {
            var H = this._getNodeEl(A, B);
            jQuery(H).before(I)
        } else {
            var F = this.olo1O($, B);
            if (F) mini.append(F.firstChild, I);
            else D = true
        }
    }
    _.call(this, B, E, 2);
    _.call(this, B, A, 1);
    if (D) this._doUpdateTreeNodeEl($)
};
mini_TreeGrid__doRemoveNodeEl = function(_) {
    this._doRemoveRowEl(_);
    var A = this.olo1O(_, 1),
        $ = this.olo1O(_, 2);
    if (A) A.parentNode.removeChild(A);
    if ($) $.parentNode.removeChild($)
};
mini_TreeGrid__doMoveNodeEl = function(_) {
    if (this.isVirtualScroll() == true) this._virtualUpdate();
    else {
        this._doRemoveNodeEl(_);
        var $ = this.getParentNode(_);
        this._doUpdateTreeNodeEl($)
    }
};
mini_TreeGrid_OoO1 = function($) {
    this._doUpdateTreeNodeEl($, false)
};
mini_TreeGrid__doUpdateTreeNodeEl = function(D, K) {
    K = K !== false;
    var E = this.getRootNode();
    if (E == D) {
        this.doUpdate();
        return
    }
    if (!this.isVisibleNode(D)) return;
    var _ = D,
        B = this.getFrozenColumns(),
        A = this.getUnFrozenColumns(),
        $ = this.oO0OOHTML(D, B, 1, null, K),
        C = this.oO0OOHTML(D, A, 2, null, K),
        I = this._getNodeEl(D, 1),
        L = this._getNodeEl(D, 2),
        F = this._getNodesTr(D, 1),
        J = this._getNodesTr(D, 2),
        H = this._getRowDetailEl(D, 1),
        N = this._getRowDetailEl(D, 2),
        M = mini.createElements($),
        D = M[0],
        G = M[1];
    if (I) {
        mini.before(I, D);
        if (K)
            if (H) mini.after(H, G);
            else mini.before(I, G);
        mini.removeNode(I);
        if (K) mini.removeNode(F)
    }
    M = mini.createElements(C), D = M[0], G = M[1];
    if (L) {
        mini.before(L, D);
        if (K)
            if (N) mini.after(N, G);
            else mini.before(L, G);
        mini.removeNode(L);
        if (K) mini.removeNode(J)
    }
    if (D.checked != true && !this.isLeaf(D)) this._doCheckNodeEl(_)
};
mini_TreeGrid_addNodeCls = function($, _) {
    this.addRowCls($, _)
};
mini_TreeGrid_removeNodeCls = function($, _) {
    this.removeRowCls($, _)
};
mini_TreeGrid_doUpdate = function() {
    mini.TreeGrid.superclass.doUpdate.apply(this, arguments)
};
mini_TreeGrid_setData = function($) {
    if (!$) $ = [];
    this._dataSource.setData($)
};
mini_TreeGrid_loadList = function($, B, _) {
    B = B || this.getIdField();
    _ = _ || this.getParentField();
    var A = mini.listToTree($, this.getNodesField(), B, _);
    this.setData(A)
};
mini_TreeGrid__createDrawCellEvent = function($, _, A, B) {
    var C = mini.TreeGrid.superclass._createDrawCellEvent.call(this, $, _, A, B);
    C.node = C.record;
    C.isLeaf = this.isLeaf(C.node);
    if (this._treeColumn && this._treeColumn == _.name) {
        C.isTreeCell = true;
        C.img = $[this.imgField];
        C.iconCls = this._getNodeIcon($);
        C.nodeCls = "";
        C.nodeStyle = "";
        C.nodeHtml = "";
        C.showTreeIcon = this.showTreeIcon;
        C.checkBoxType = this._checkBoxType;
        C.showCheckBox = this.showCheckBox;
        C.showRadioButton = this.showRadioButton;
        if (C.showCheckBox && !C.isLeaf) C.showCheckBox = this.showFolderCheckBox;
        if (C.showRadioButton && !C.isLeaf) C.showRadioButton = this.showFolderCheckBox;
        C.enabled = C.node.enabled !== false;
        C.checkable = this.getCheckable(C.node)
    }
    return C
};
mini_TreeGrid__OnDrawCell = function($, _, A, B) {
    var C = mini.TreeGrid.superclass._OnDrawCell.call(this, $, _, A, B);
    if (this._treeColumn && this._treeColumn == _.name) {
        this.fire("drawnode", C);
        if (C.nodeStyle) C.cellStyle = C.nodeStyle;
        if (C.nodeCls) C.cellCls = C.nodeCls;
        if (C.nodeHtml) C.cellHtml = C.nodeHtml;
        this._createTreeColumn(C)
    }
    return C
};
mini_TreeGrid__isViewFirstNode = function(_) {
    if (this._viewNodes) {
        var $ = this.getParentNode(_),
            A = this._getViewChildNodes($);
        return A[0] === _
    } else return this.isFirstNode(_)
};
mini_TreeGrid__isViewLastNode = function(_) {
    if (this._viewNodes) {
        var $ = this.getParentNode(_),
            A = this._getViewChildNodes($);
        return A[A.length - 1] === _
    } else return this.isLastNode(_)
};
mini_TreeGrid__isInViewLastNode = function(D, $) {

    if (this._viewNodes) {
        var C = null,
            A = this.getAncestors(D);
        for (var _ = 0, E = A.length; _ < E; _++) {
            var B = A[_];
            if (this.getLevel(B) == $) C = B
        }
        if (!C || C == this.root) return false;
        return this._isViewLastNode(C)
    } else return this.isInLastNode(D, $)
};
mini_TreeGrid_isInLastNode = function(D, $) {
    var C = null,
        A = this.getAncestors(D);
    for (var _ = 0, E = A.length; _ < E; _++) {
        var B = A[_];
        if (this.getLevel(B) == $) C = B
    }
    if (!C || C == this.root) return false;
    return this.isLastNode(C)
};
mini_TreeGrid_ollo = function(D, H, R) {
    var Q = !H;
    if (!H) H = [];
    var O = this.isLeaf(D),
        $ = this.getLevel(D),
        E = R.nodeCls;
    if (!O) E = this.isExpandedNode(D) ? this.OlolO : this.loOoo;
    if (D.enabled === false) E += " mini-disabled";
    if (!O) E += " mini-tree-parentNode";
    var F = this.getChildNodes(D),
        I = F && F.length > 0;
    H[H.length] = "<div class=\"mini-tree-nodetitle " + E + "\" >";
    var _ = this.getParentNode(D),
        A = 0;
    for (var J = A; J <= $; J++) {
        if (J == $) continue;
        if (O)
            if (J > $ - 1) continue;
        var N = "";
        if (this._isInViewLastNode(D, J)) N = "background:none";
        H[H.length] = "<span class=\"mini-tree-indent \" style=\"" + N + "\"></span>"
    }
    var C = "";
    if (this._isViewFirstNode(D) && $ == 0) C = "mini-tree-node-ecicon-first";
    else if (this._isViewLastNode(D)) C = "mini-tree-node-ecicon-last";
    if (this._isViewFirstNode(D) && this._isViewLastNode(D)) {
        C = "mini-tree-node-ecicon-firstAndlast";
        if (_ == this.root) C = "mini-tree-node-ecicon-firstLast"
    }
    if (!O) H[H.length] = "<a class=\"" + this.oO0o + " " + C + "\" style=\"" + (this.showExpandButtons ? "" : "display:none") + "\" " + (mini.isChrome ? "" : "href=\"javascript:void(0);\"") + " onclick=\"return false;\" hidefocus></a>";
    else H[H.length] = "<span class=\"" + this.oO0o + " " + C + "\" style=\"" + (this.showExpandButtons ? "" : "display:none") + "\"></span>";
    H[H.length] = "<span class=\"mini-tree-nodeshow\">";
    if (R.showTreeIcon)
        if (R.img) {
            var M = this.imgPath + R.img;
            H[H.length] = "<span class=\"mini-tree-icon mini-iconfont\" style=\"background-image:url(" + M + ");\"></span>"
        } else H[H.length] = "<span class=\"" + R.iconCls + " mini-tree-icon mini-iconfont\"></span>";
    if (R.showRadioButton && !R.showCheckBox) H[H.length] = "<span class=\"mini-tree-radio\" ></span>";
    if (R.showCheckBox) {
        var G = this.ll0l(D),
            P = this.isCheckedNode(D),
            L = R.enabled === false ? "disabled" : "";
        if (R.enabled !== false) L = R.checkable === false ? "disabled" : "";
        H[H.length] = "<span id=\"" + G + "\" class=\"" + this.oo1o10 + " " + (P ? "mini-tree-checkbox-checked" : "") + "\"></span>"
    }
    H[H.length] = "<span class=\"mini-tree-nodetext\">";
    if (this._editingNode == D) {
        var B = this._id + "$edit$" + D._id,
            K = R.value;
        H[H.length] = "<input id=\"" + B + "\" type=\"text\" class=\"mini-tree-editinput\" value=\"" + K + "\"/>"
    } else H[H.length] = R.cellHtml;
    H[H.length] = "</span>";
    H[H.length] = "</span>";
    H[H.length] = "</div>";
    if (Q) return H.join("")
};
mini_TreeGrid__createTreeColumn = function(C) {
    var A = C.record,
        _ = C.column;
    C.headerCls += " mini-tree-treecolumn";
    C.cellCls += " mini-tree-treecell";
    C.cellStyle += ";padding:0;";
    var B = this.isLeaf(A);
    C.cellHtml = this.ollo(A, null, C);
    if (A.checked != true && !B) {
        var $ = this.getCheckState(A);
        if ($ == "indeterminate") this._renderCheckState(A)
    }
};
mini_TreeGrid_ll0l = function($) {

    return this._id + "$checkbox$" + $._id
};
mini_TreeGrid__renderCheckState = function($) {
    if (!this._renderCheckStateNodes) this._renderCheckStateNodes = [];
    this._renderCheckStateNodes.push($);
    if (this._renderCheckStateTimer) return;
    var _ = this;
    this._renderCheckStateTimer = setTimeout(function() {
        _._renderCheckStateTimer = null;
        var B = _._renderCheckStateNodes;
        _._renderCheckStateNodes = null;
        for (var $ = 0, A = B.length; $ < A; $++) _._doCheckNodeEl(B[$])
    }, 1)
};
mini_TreeGrid_oO0OOHTML = function($, B, E, C, G) {
    var I = !C;
    if (!C) C = [];
    var J = this._dataSource,
        K = J.getDataView().indexOf($);
    this.l11OoHTML($, K, B, E, C);
    if (G !== false) {
        var A = J.getChildNodes($),
            _ = this.isVisibleNode($);
        if (A && A.length > 0) {
            var D = this.isExpandedNode($);
            if (D == true) {
                var H = (D && _) ? "" : "display:none",
                    F = this.ooooo($, E);
                C[C.length] = "<tr class=\"mini-tree-nodes-tr\" style=\"";
                if (mini.isIE) C[C.length] = H;
                C[C.length] = "\" ><td class=\"mini-tree-nodes-td\" colspan=\"";
                C[C.length] = B.length + 1;
                C[C.length] = "\" >";
                C[C.length] = "<div class=\"mini-tree-nodes\" id=\"";
                C[C.length] = F;
                C[C.length] = "\" style=\"";
                C[C.length] = H;
                C[C.length] = "\">";
                this.l0l0olHTML(A, B, E, C);
                C[C.length] = "</div>";
                C[C.length] = "</td></tr>"
            }
        }
    }
    if (I) return C.join("")
};
mini_TreeGrid_l0l0olHTML = function(E, C, _, F) {
    if (!E) return "";
    var D = !F;
    if (!F) F = [];
    F.push("<table class=\"mini-grid-table\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">");
    F.push(this._createTopRowHTML(C, true));
    if (C.length > 0)
        for (var B = 0, $ = E.length; B < $; B++) {
            var A = E[B];
            this.oO0OOHTML(A, C, _, F)
        }
    F.push("</table>");
    if (D) return F.join("")
};
mini_TreeGrid_l11OosHTML = function(C, $) {
    if (this.isVirtualScroll()) return mini.TreeGrid.superclass.l11OosHTML.apply(this, arguments);
    var E = this._dataSource,
        B = this,
        F = [],
        D = [],
        _ = E.getRootNode();
    if (this._useEmptyView !== true) D = E.getChildNodes(_);
    var A = $ == 2 ? this._rowsViewEl.firstChild : this._rowsLockEl.firstChild;
    A.id = this.ooooo(_, $);
    this.l0l0olHTML(D, C, $, F);
    return F.join("")
};
mini_TreeGrid_ooooo = function(_, $) {
    var A = this._id + "$nodes" + $ + "$" + _._id;
    return A
};
mini_TreeGrid__getNodeEl = function(_, $) {
    return this.OOl0(_, $)
};
mini_TreeGrid_olo1O = function(_, $) {
    _ = this.getNode(_);
    var A = this.ooooo(_, $);
    return document.getElementById(A)
};
mini_TreeGrid__getNodesTr = function(A, _) {
    var $ = this.olo1O(A, _);
    if ($) return $.parentNode.parentNode
};
mini_TreeGrid_setCheckOnTextClick = function($) {
    this.checkOnTextClick = $
};
mini_TreeGrid_getCheckOnTextClick = function() {
    return this.checkOnTextClick
};
mini_TreeGrid_setTreeColumn = function($) {
    this._treeColumn = $;
    this.deferUpdate()
};
mini_TreeGrid_getTreeColumn = function() {
    return this._treeColumn
};
mini_TreeGrid_setShowTreeIcon = function($) {

    this.showTreeIcon = $;
    this.deferUpdate()
};
mini_TreeGrid_getShowTreeIcon = function() {
    return this.showTreeIcon
};
mini_TreeGrid_setShowCheckBox = function($) {
    this.showCheckBox = $;
    this.deferUpdate()
};
mini_TreeGrid_getShowCheckBox = function() {
    return this.showCheckBox
};
mini_TreeGrid_setShowRadioButton = function($) {
    this.showRadioButton = $;
    this.deferUpdate()
};
mini_TreeGrid_getShowRadioButton = function() {
    return this.showRadioButton
};
mini_TreeGrid_setCheckBoxType = function($) {
    this._checkBoxType = $;
    this._doUpdateCheckState()
};
mini_TreeGrid_getCheckBoxType = function() {

    return this._checkBoxType
};
mini_TreeGrid_setIconsField = function($) {
    this._iconsField = $
};
mini_TreeGrid_getIconsField = function() {
    return this._iconsField
};
mini_TreeGrid__getNodeIcon = function(_) {
    var $ = _[this.iconField];
    if (!$)
        if (this.isLeaf(_)) $ = this.leafIconCls;
        else $ = this.folderIconCls;
    return $
};
mini_TreeGrid_o1oo = function($) {
    if (this.isVisibleNode($) == false) return null;
    var _ = this._id + "$checkbox$" + $._id;
    return mini.byId(_, this.el)
};
mini_TreeGrid__doExpandCollapseNode = function(A) {
    var $ = this;
    if ($._updateNodeTimer) {
        clearTimeout($._updateNodeTimer);
        $._updateNodeTimer = null
    }
    var D = new Date();
    if (this.isVirtualScroll() == true) {
        $._updateNodeTimer = setTimeout(function() {
            $._updateNodeTimer = null;
            $.doUpdateRows();
            $.deferLayout(50)
        }, 5);
        return
    }

    function B() {
        this._doUpdateTreeNodeEl(A);
        this.deferLayout(20)
    }
    if (false || mini.isIE6 || !this.useAnimation || this.isFrozen()) B.call(this);
    else {
        var C = this.isExpandedNode(A);

        function _(C, B, D) {
            var E = this.olo1O(C, B);
            if (E) {
                var A = mini.getHeight(E);
                E.style.overflow = "hidden";
                E.style.height = "0px";
                var $ = {
                        height: A + "px"
                    },
                    _ = this;
                _.O1lll0 = true;
                var F = jQuery(E);
                F.animate($, 250, function() {
                    E.style.height = "auto";
                    _.O1lll0 = false;
                    _.doLayout();
                    mini.repaint(E)
                })
            }
        }

        function E(C, B, D) {
            var E = this.olo1O(C, B);
            if (E) {
                var A = mini.getHeight(E),
                    $ = {
                        height: 0 + "px"
                    },
                    _ = this;
                _.O1lll0 = true;
                var F = jQuery(E);
                F.animate($, 180, function() {
                    E.style.height = "auto";
                    _.O1lll0 = false;
                    if (D) D.call(_);
                    _.doLayout();
                    mini.repaint(E)
                })
            } else if (D) D.call(this)
        }
        $ = this;
        if (C) {
            B.call(this);
            _.call(this, A, 2);
            _.call(this, A, 1)
        } else {
            E.call(this, A, 2, B);
            E.call(this, A, 1)
        }
    }
};
mini_TreeGrid_l0Ooll = function($) {
    this._doExpandCollapseNode($.node)
};
mini_TreeGrid_oo00ll = function($) {
    this._doExpandCollapseNode($.node)
};
mini_TreeGrid__doCheckNodeEl = function(B) {
    var _ = this.o1oo(B);
    if (_) {
        var A = this.getCheckModel();
        mini.removeClass(_, "mini-tree-checkbox-indeterminate");
        if (A == "cascade") {
            var $ = this.getCheckState(B);
            if ($ == "indeterminate") mini.addClass(_, "mini-tree-checkbox-indeterminate");
            else mini.removeClass(_, "mini-tree-checkbox-indeterminate")
        }
        if (B.checked) mini.addClass(_, "mini-tree-checkbox-checked");
        else mini.removeClass(_, "mini-tree-checkbox-checked")
    }
};
mini_TreeGrid___OnCheckChanged = function(C) {
    for (var $ = 0, B = C._nodes.length; $ < B; $++) {
        var _ = C._nodes[$];
        this._doCheckNodeEl(_)
    }
    if (this._checkChangedTimer) {
        clearTimeout(this._checkChangedTimer);
        this._checkChangedTimer = null
    }
    var A = this;
    this._checkChangedTimer = setTimeout(function() {
        A._checkChangedTimer = null;
        A.fire("checkchanged")
    }, 1)
};
mini_TreeGrid__tryToggleCheckNode = function(_) {
    if (_.enabled === false) return;
    var $ = this.getCheckable(_);
    if ($ == false) return;
    var A = this.isCheckedNode(_),
        B = {
            node: _,
            cancel: false,
            checked: A,
            isLeaf: this.isLeaf(_)
        };
    this.fire("beforenodecheck", B);
    if (B.cancel) return;
    this._dataSource.doCheckNodes(_, !A, true);
    this.fire("nodecheck", B)
};
mini_TreeGrid__tryToggleNode = function(_) {
    var $ = this.isExpandedNode(_),
        A = {
            node: _,
            cancel: false
        };
    if ($) {
        this.fire("beforecollapse", A);
        if (A.cancel == true) return;
        this.collapseNode(_);
        A.type = "collapse";
        this.fire("collapse", A)
    } else {
        this.fire("beforeexpand", A);
        if (A.cancel == true) return;
        this.expandNode(_);
        A.type = "expand";
        this.fire("expand", A)
    }
};
mini_TreeGrid__OnCellMouseDown = function($) {
    if (oOlO($.htmlEvent.target, this.oO0o));
    else if (oOlO($.htmlEvent.target, "mini-tree-checkbox"));
    else this.fire("cellmousedown", $)
};
mini_TreeGrid__OnCellClick = function($) {

    if (oOlO($.htmlEvent.target, this.oO0o)) return;
    if (oOlO($.htmlEvent.target, "mini-tree-checkbox") || this.checkOnTextClick) this._tryToggleCheckNode($.record);
    else this.fire("cellclick", $)
};
mini_TreeGrid___OnNodeDblClick = function($) {};
mini_TreeGrid_l1l1 = function($) {};
mini_TreeGrid_setNodeText = function(A, _) {
    A = this.getNode(A);
    if (!A) return;
    var $ = {};
    $[this.getTextField()] = _;
    this.updateNode(A, $)
};
mini_TreeGrid_setNodeIconCls = function(A, _) {
    A = this.getNode(A);
    if (!A) return;
    var $ = {};
    $[this.iconField] = _;
    this.updateNode(A, $)
};
mini_TreeGrid_setIconField = function($) {
    this.iconField = $
};
mini_TreeGrid_getIconField = function() {
    return this.iconField
};
mini_TreeGrid_setAllowSelect = function($) {
    this.setAllowRowSelect($)
};
mini_TreeGrid_getAllowSelect = function() {
    return this.getAllowRowSelect()
};
mini_TreeGrid_setShowExpandButtons = function($) {
    if (this.showExpandButtons != $) {
        this.showExpandButtons = $;
        this.doUpdate()
    }
};
mini_TreeGrid_getShowExpandButtons = function() {
    return this.showExpandButtons
};
mini_TreeGrid_setShowTreeLines = function($) {
    this.showTreeLines = $;
    if ($ == true) mini.addClass(this.el, "mini-tree-treeLine");
    else mini.removeClass(this.el, "mini-tree-treeLine")
};
mini_TreeGrid_getShowTreeLines = function() {
    return this.showTreeLines
};
mini_TreeGrid_setShowArrow = function($) {
    this.showArrow = $;
    if ($ == true) mini.addClass(this.el, "mini-tree-showArrows");
    else mini.removeClass(this.el, "mini-tree-showArrows")
};
mini_TreeGrid_getShowArrow = function() {
    return this.showArrow
};
mini_TreeGrid_setLeafIcon = function($) {
    this.leafIcon = $
};
mini_TreeGrid_getLeafIcon = function() {
    return this.leafIcon
};
mini_TreeGrid_setFolderIcon = function($) {
    this.folderIcon = $
};
mini_TreeGrid_getFolderIcon = function() {



    return this.folderIcon
};
mini_TreeGrid_getExpandOnDblClick = function() {
    return this.expandOnDblClick
};
mini_TreeGrid_setExpandOnNodeClick = function($) {
    this.expandOnNodeClick = $;
    if ($) mini.addClass(this.el, "mini-tree-nodeclick");
    else mini.removeClass(this.el, "mini-tree-nodeclick")
};
mini_TreeGrid_getExpandOnNodeClick = function() {
    return this.expandOnNodeClick
};
mini_TreeGrid_setLoadOnExpand = function($) {
    this.loadOnExpand = $
};
mini_TreeGrid_getLoadOnExpand = function() {
    return this.loadOnExpand
};
mini_TreeGrid_hideNode = function(A) {

    A = this.getNode(A);
    if (!A) return;
    A.visible = false;
    this._doUpdateTreeNodeEl(A);
    var _ = this._getNodeEl(A, 1),
        $ = this._getNodeEl(A, 2);
    if (_) _.style.display = "none";
    if ($) $.style.display = "none"
};
mini_TreeGrid_showNode = function($) {
    $ = this.getNode($);
    if (!$) return;
    $.visible = true;
    this._doUpdateTreeNodeEl($)
};
mini_TreeGrid_enableNode = function(B) {
    B = this.getNode(B);
    if (!B) return;
    B.enabled = true;
    var A = this._getNodeEl(B, 1),
        $ = this._getNodeEl(B, 2);
    if (A) mini.removeClass(A, "mini-disabled");
    if ($) mini.removeClass($, "mini-disabled");
    var _ = this.o1oo(B);
    if (_) _.disabled = false
};
mini_TreeGrid_disableNode = function(B) {
    B = this.getNode(B);
    if (!B) return;
    B.enabled = false;
    var A = this._getNodeEl(B, 1),
        $ = this._getNodeEl(B, 2);
    if (A) mini.addClass(A, "mini-disabled");
    if ($) mini.addClass($, "mini-disabled");
    var _ = this.o1oo(B);
    if (_) _.disabled = true
};
mini_TreeGrid_setImgPath = function($) {
    this.imgPath = $
};
mini_TreeGrid_getImgPath = function() {

    return this.imgPath
};
mini_TreeGrid_setImgField = function($) {
    this.imgField = $
};
mini_TreeGrid_getImgField = function() {
    return this.imgField
};
mini_TreeGrid_getAttrs = function(C) {
    var G = mini.TreeGrid.superclass.getAttrs.call(this, C);
    mini._ParseString(C, G, ["value", "url", "idField", "textField", "iconField", "nodesField", "parentField", "valueField", "checkedField", "leafIcon", "folderIcon", "leafField", "ondrawnode", "onbeforenodeselect", "onnodeselect", "onnodemousedown", "onnodeclick", "onnodedblclick", "onbeforenodecheck", "onnodecheck", "onbeforeexpand", "onexpand", "onbeforecollapse", "oncollapse", "dragGroupName", "dropGroupName", "onendedit", "expandOnLoad", "ondragstart", "onbeforedrop", "ondrop", "ongivefeedback", "treeColumn", "onaddnode", "onremovenode", "onmovenode", "imgPath", "imgField", "hoverMode"]);
    mini._ParseBool(C, G, ["allowSelect", "showCheckBox", "showRadioButton", "showExpandButtons", "showTreeIcon", "showTreeLines", "checkRecursive", "enableHotTrack", "showFolderCheckBox", "resultAsTree", "allowDrag", "allowDrop", "showArrow", "expandOnDblClick", "removeOnCollapse", "autoCheckParent", "loadOnExpand", "expandOnNodeClick", "useAnimation", "checkOnTextClick"]);
    if (G.expandOnLoad) {
        var _ = parseInt(G.expandOnLoad);
        if (mini.isNumber(_)) G.expandOnLoad = _;
        else G.expandOnLoad = G.expandOnLoad == "true" ? true : false
    }
    var E = G.idField || this.getIdField(),
        B = G.textField || this.getTextField(),
        F = G.iconField || this.getIconField(),
        A = G.nodesField || this.getNodesField();

    function $(I) {
        var N = [];
        for (var L = 0, J = I.length; L < J; L++) {
            var D = I[L],
                H = mini.getChildNodes(D),
                R = H[0],
                G = H[1];
            if (!R || !G) R = D;
            var C = jQuery(R),
                _ = {},
                K = _[E] = R.getAttribute("value");
            _[F] = C.attr("iconCls");
            _[B] = R.innerHTML;
            N.add(_);
            var P = C.attr("expanded");
            if (P) _.expanded = P == "false" ? false : true;
            var Q = C.attr("allowSelect");
            if (Q) _.allowSelect = Q == "false" ? false : true;
            if (!G) continue;
            var O = mini.getChildNodes(G),
                M = $(O);
            if (M.length > 0) _[A] = M
        }
        return N
    }
    var D = $(mini.getChildNodes(C));
    if (D.length > 0) G.data = D;
    if (!G.idField && G.valueField) G.idField = G.valueField;
    return G
};
mini_CheckBox_set = function($) {
    if (typeof $ == "string") return this;
    var _ = this;
    if (!mini.isNull($.trueValue)) {
        _.setTrueValue($.trueValue);
        delete $.trueValue
    }
    if (!mini.isNull($.falseValue)) {
        _.setFalseValue($.falseValue);
        delete $.falseValue
    }
    mini.CheckBox.superclass.set.call(this, $);
    return this
};
mini_CheckBox__create = function() {
    var $ = this.uid + "$check";
    this.el = document.createElement("span");
    this.el.className = "mini-checkbox";
    this.el.innerHTML = "<input id=\"" + $ + "\" name=\"" + this.id + "\" type=\"checkbox\" class=\"mini-checkbox-check\"><span class=\"mini-checkbox-icon\"></span><label for=\"" + $ + "\" onclick=\"return false;\">" + this.text + "</label>";
    this.loooO0 = this.el.firstChild;
    this.lo1ooO = this.el.lastChild
};
mini_CheckBox_destroy = function($) {
    if (this.loooO0) {
        this.loooO0.onmouseup = null;
        this.loooO0.onclick = null;
        this.loooO0 = null
    }
    mini.CheckBox.superclass.destroy.call(this, $)
};
mini_CheckBox__initEvents = function() {
    mini._BindEvents(function() {
        mini.on(this.el, "click", this.oollO, this);
        this.loooO0.onmouseup = function() {
            return false
        };
        var $ = this;
        this.loooO0.onclick = function() {
            if ($.isReadOnly()) return false
        };
        this.loooO0.checked = this.checked
    }, this)
};
mini_CheckBox_setName = function($) {
    this.name = $;
    mini.setAttr(this.loooO0, "name", this.name)
};
mini_CheckBox_setText = function($) {
    if (this.text !== $) {
        this.text = $;
        this.lo1ooO.innerHTML = $
    }
};
mini_CheckBox_getText = function() {

    return this.text
};
mini_CheckBox_setChecked = function(_) {
    if (_ === true) _ = true;
    else if (String(_) == String(this.trueValue)) _ = true;
    else if (_ == "true") _ = true;
    else if (_ == "True") _ = true;
    else if (String(_) === "1") _ = true;
    else if (_ == "Y") _ = true;
    else _ = false;
    if (this.checked !== _) {
        this.checked = !!_;
        this.loooO0.checked = this.checked;
        this.value = this.getValue()
    }
    var A = $(this.el);
    if (this.checked) A.addClass(this.checkedCls);
    else A.removeClass(this.checkedCls)
};
mini_CheckBox_getChecked = function() {
    return this.checked
};
mini_CheckBox_setValue = function($) {
    if (this.checked !== $) {
        this.setChecked($);
        this.value = this.getValue()
    }
};
mini_CheckBox_getValue = function() {
    return String(this.checked == true ? this.trueValue : this.falseValue)
};
mini_CheckBox_getFormValue = function() {
    return this.getValue()
};
mini_CheckBox_setTrueValue = function($) {
    this.loooO0.value = $;
    this.trueValue = $
};
mini_CheckBox_getTrueValue = function() {

    return this.trueValue
};
mini_CheckBox_setFalseValue = function($) {
    this.falseValue = $
};
mini_CheckBox_getFalseValue = function() {

    return this.falseValue
};
mini_CheckBox_oollO = function($) {
    if (this.isReadOnly()) return;
    this.setChecked(!this.checked);
    this.fire("checkedchanged", {
        checked: this.checked
    });
    this.fire("valuechanged", {
        value: this.getValue()
    });
    this.fire("click", $, this)
};
mini_CheckBox_getAttrs = function(A) {
    var D = mini.CheckBox.superclass.getAttrs.call(this, A),
        C = jQuery(A);
    D.text = A.innerHTML;
    mini._ParseString(A, D, ["text", "oncheckedchanged", "onclick", "onvaluechanged"]);
    mini._ParseBool(A, D, ["enabled"]);
    var B = mini.getAttr(A, "checked");
    if (B) D.checked = (B == "true" || B == "checked") ? true : false;
    var _ = C.attr("trueValue");
    if (_) {
        D.trueValue = _;
        _ = parseInt(_);
        if (!isNaN(_)) D.trueValue = _
    }
    var $ = C.attr("falseValue");
    if ($) {
        D.falseValue = $;
        $ = parseInt($);
        if (!isNaN($)) D.falseValue = $
    }
    return D
};
mini_DataGrid_set = function(A) {
    if (typeof A == "string") return this;
    var $ = A.value;
    delete A.value;
    var C = A.url;
    delete A.url;
    var _ = A.data;
    delete A.data;
    var D = A.columns;
    delete A.columns;
    var B = A.defaultColumnWidth;
    delete A.defaultColumnWidth;
    if (B) this.setDefaultColumnWidth(B);
    if (!mini.isNull(D)) this.setColumns(D);
    mini.DataGrid.superclass.set.call(this, A);
    if (!mini.isNull(_)) this.setData(_);
    if (!mini.isNull(C)) this.setUrl(C);
    if (!mini.isNull($)) this.setValue($);
    return this
};
mini_DataGrid_doUpdate = function() {
    this._destroyEditors();
    mini.DataGrid.superclass.doUpdate.apply(this, arguments)
};
mini_DataGrid__destroyEditors = function() {
    var $ = mini.getChildControls(this),
        A = [];
    for (var _ = 0, B = $.length; _ < B; _++) {
        var C = $[_];
        if (C.el && oOlO(C.el, this.llO1oo)) {
            A.push(C);
            C.destroy()
        }
    }
};
mini_DataGrid__OnDrawCell = function() {
    var $ = mini.DataGrid.superclass._OnDrawCell.apply(this, arguments);
    return $
};
mini_DataGrid_lllO = function() {
    var $ = this._dataSource;
    $.on("beforeload", this.__OnSourceBeforeLoad, this);
    $.on("preload", this.__OnSourcePreLoad, this);
    $.on("load", this.__OnSourceLoadSuccess, this);
    $.on("loaderror", this.__OnSourceLoadError, this);
    $.on("loaddata", this.__OnSourceLoadData, this);
    $.on("cleardata", this.__OnSourceClearData, this);
    $.on("sort", this.__OnSourceSort, this);
    $.on("filter", this.__OnSourceFilter, this);
    $.on("pageinfochanged", this.__OnPageInfoChanged, this);
    $.on("selectionchanged", this.__OnSelectionChanged, this);
    $.on("currentchanged", function($) {
        this.fire("currentchanged", $)
    }, this);
    $.on("add", this.__OnSourceAdd, this);
    $.on("update", this.__OnSourceUpdate, this);
    $.on("remove", this.__OnSourceRemove, this);
    $.on("move", this.__OnSourceMove, this);
    $.on("beforeadd", function($) {
        this.fire("beforeaddrow", $)
    }, this);
    $.on("beforeupdate", function($) {
        this.fire("beforeupdaterow", $)
    }, this);
    $.on("beforeremove", function($) {
        this.fire("beforeremoverow", $)
    }, this);
    $.on("beforemove", function($) {
        this.fire("beforemoverow", $)
    }, this);
    $.on("beforeselect", function($) {
        this.fire("beforeselect", $)
    }, this);
    $.on("beforedeselect", function($) {
        this.fire("beforedeselect", $)
    }, this);
    $.on("select", function($) {
        this.fire("select", $)
    }, this);
    $.on("deselect", function($) {
        this.fire("deselect", $)
    }, this)
};
mini_DataGrid_oOlolO = function() {

    return this.el
};
mini_DataGrid__initData = function() {
    this.data = this._dataSource.getSource();
    this.pageIndex = this.getPageIndex();
    this.pageSize = this.getPageSize();
    this.totalCount = this.getTotalCount();
    this.totalPage = this.getTotalPage();
    this.sortField = this.getSortField();
    this.sortOrder = this.getSortOrder();
    this.url = this.getUrl();
    this._mergedCellMaps = {};
    this._mergedCells = {};
    this._cellErrors = [];
    this._cellMapErrors = {};
    if (this.isGrouping()) {
        this.groupBy(this.o1lol, this.ll01Oo);
        if (this.collapseGroupOnLoad) this.collapseGroups()
    }
};
mini_DataGrid___OnSourceBeforeLoad = function($) {
    this.fire("beforeload", $);
    if ($.cancel == true) return;
    if (this.showLoading) this.loading()
};
mini_DataGrid___OnSourcePreLoad = function($) {

    this.fire("preload", $)
};
mini_DataGrid___OnSourceLoadSuccess = function($) {
    this.fire("load", $);
    this.unmask()
};
mini_DataGrid___OnSourceLoadError = function($) {

    this.fire("loaderror", $);
    this.unmask()
};
mini_DataGrid___OnSourceSort = function($) {
    this.deferUpdate();
    this.fire("sort", $)
};
mini_DataGrid___OnSourceFilter = function($) {
    this.deferUpdate();
    this.fire("filter", $)
};
mini_DataGrid___OnSourceAdd = function($) {
    this._doAddRowEl($.record);
    this.Oool0();
    this._viewRegion = this._getViewRegion();
    this.fire("addrow", $)
};
mini_DataGrid___OnSourceUpdate = function($) {
    this.l1111OEl($.record);
    this.Oool0();
    this.fire("updaterow", $)
};
mini_DataGrid___OnSourceRemove = function($) {
    this._doRemoveRowEl($.record);
    this.Oool0();
    this.fire("removerow", $);
    if (this.isVirtualScroll()) this.deferUpdate()
};
mini_DataGrid___OnSourceMove = function($) {
    this._doMoveRowEl($.record, $.index);
    this.Oool0();
    this.fire("moverow", $)
};
mini_DataGrid___OnSelectionChanged = function(A) {
    if (A.fireEvent !== false)
        if (A.select) this.fire("rowselect", A);
        else this.fire("rowdeselect", A);
    var _ = this;
    if (this.OllO) {
        clearTimeout(this.OllO);
        this.OllO = null
    }
    this.OllO = setTimeout(function() {
        _.OllO = null;
        if (A.fireEvent !== false) _.fire("SelectionChanged", A);
        _.fire("_selectchange", A)
    }, 1);
    var $ = new Date();
    this._doRowSelect(A._records, A.select)
};
mini_DataGrid___OnPageInfoChanged = function($) {
    this._updatePagesInfo()
};
mini_DataGrid__updatePagesInfo = function() {
    var B = this.getPageIndex(),
        D = this.getPageSize(),
        C = this.getTotalCount(),
        F = this.getTotalPage(),
        _ = this._pagers;
    for (var A = 0, E = _.length; A < E; A++) {
        var $ = _[A];
        $.update(B, D, C);
        this._dataSource.totalPage = $.totalPage
    }
};
mini_DataGrid_setPagerButtons = function($) {
    this._bottomPager.setButtons($)
};
mini_DataGrid_setPager = function($) {
    if (typeof $ == "string") {
        var _ = mini.byId($);
        if (!_) return;
        mini.parse($);
        $ = mini.get($)
    }
    if ($) this.bindPager($)
};
mini_DataGrid_bindPager = function($) {
    if (!$) return;
    this.unbindPager($);
    this._pagers.add($);
//    $.on("beforepagechanged", this.__OnPageChanged, this)
    //add by luozp 修改触发事件
    $.on("pagechanged", this.__OnPageChanged, this);
};
mini_DataGrid_unbindPager = function($) {
    if (!$) return;
    this._pagers.remove($);
    $.un("pagechanged", this.__OnPageChanged, this)
};
mini_DataGrid___OnPageChanged = function(e) {
    /*添加pagechanged事件*/
    this.fire("pagechanged", e);
    e.cancel = true;
    this.gotoPage(e.pageIndex, e.pageSize);
};
mini_DataGrid_l1111OEl = function(A) {
    var _ = this.getFrozenColumns(),
        F = this.getUnFrozenColumns(),
        D, B, C = this.indexOf(A),
        E = this.l11OoHTML(A, C, F, 2),
        $ = this.OOl0(A, 2);
    if (!$) return;
    jQuery($).before(E);
    D = $.previousSibling;
    if ($) $.parentNode.removeChild($);
    if (this.isFrozen()) {
        E = this.l11OoHTML(A, C, _, 1), $ = this.OOl0(A, 1);
        jQuery($).before(E);
        B = $.previousSibling;
        jQuery($).remove()
    }
    this.deferLayout();
    if (D && B) this._doSyncRowHeight(D, B)
};
mini_DataGrid__doAddRowEl = function(A) {
    var _ = this.getFrozenColumns(),
        G = this.getUnFrozenColumns(),
        F = this._rowsLockContentEl.firstChild,
        B = this._rowsViewContentEl.firstChild,
        E = this.indexOf(A),
        D = this.getAt(E + 1);

    function $(_, B, C, $) {
        var F = this.l11OoHTML(_, E, C, B);
        if (D) {
            var A = this.OOl0(D, B);
            jQuery(A).before(F)
        } else mini.append($, F)
    }
    $.call(this, A, 2, G, B);
    if (this.isFrozen()) $.call(this, A, 1, _, F);
    this.deferLayout();
    if (this.showEmptyText) {
        var C = jQuery(".mini-grid-emptyText", this._bodyEl)[0];
        if (C) {
            C.style.display = "none";
            C.parentNode.style.display = "none"
        }
    }
};
mini_DataGrid__doRemoveRowEl = function(_) {
    var $ = this.OOl0(_, 1),
        A = this.OOl0(_, 2);
    if ($) $.parentNode.removeChild($);
    if (A) A.parentNode.removeChild(A);
    if (!A) return;
    var D = this._getRowDetailEl(_, 1),
        C = this._getRowDetailEl(_, 2);
    if (D) D.parentNode.removeChild(D);
    if (C) C.parentNode.removeChild(C);
    this.deferLayout();
    if (this.showEmptyText && this.getVisibleRows().length == 0) {
        var B = jQuery(".mini-grid-emptyText", this._bodyEl)[0];
        if (B) {
            B.style.display = "";
            B.parentNode.style.display = ""
        }
    }
};
mini_DataGrid__doMoveRowEl = function(_, $) {
    this._doRemoveRowEl(_);
    this._doAddRowEl(_)
};
mini_DataGrid__getRowGroupEl = function(_, $) {
    if ($ == 1 && !this.isFrozen()) return null;
    var B = this.l11OoGroupId(_, $),
        A = mini.byId(B, this.el);
    return A
};
mini_DataGrid__getRowGroupRowsEl = function(_, $) {
    if ($ == 1 && !this.isFrozen()) return null;
    var B = this.l11OoGroupRowsId(_, $),
        A = mini.byId(B, this.el);
    return A
};
mini_DataGrid_OOl0 = function(_, $) {
    if ($ == 1 && !this.isFrozen()) return null;
    _ = this.getRecord(_);
    var B = this.lOo100(_, $),
        A = mini.byId(B, this.el);
    return A
};
mini_DataGrid_lOOlOl = function(A, $) {
    if ($ == 1 && !this.isFrozen()) return null;
    A = this.getColumn(A);
    var B = this.Ooo0Id(A, $),
        _ = mini.byId(B, this.el);
    return _
};

mini_DatePicker_getMinDateErrorText = function() {
    return this.minDateErrorText;
};
mini_DataGrid_oOOO1O = function($, A) {
    $ = this.getRecord($);
    A = this.getColumn(A);
    if (!$ || !A) return null;
    var B = this.loOloo($, A),
        _ = mini.byId(B, this.el);
    return _
};
mini_DataGrid_getCellEl = function($, _) {
    return this.oOOO1O($, _)
};
mini_DataGrid_getRecordByEvent = function($) {
    return this.l110O0ByEvent($)
};
mini_DataGrid_l110O0ByEvent = function(B) {
    var A = oOlO(B.target, this.llO1oo);
    if (!A) return null;
    var $ = A.id.split("$"),
        _ = $[$.length - 1];
    return this._getRowByID(_)
};
mini_DataGrid_getColumnByEvent = function($) {
    if (!$) return null;
    return this.O1loo($)
};
mini_DataGrid_O1loo = function(B) {
    var _ = oOlO(B.target, this._cellCls);
    if (!_) _ = oOlO(B.target, this._headerCellCls);
    if (_) {
        var $ = _.id.split("$"),
            A = $[$.length - 1];
        return this.olo1(A)
    }
    return null
};
mini_DataGrid_oOlol = function(A) {
    var $ = this.l110O0ByEvent(A),
        _ = this.O1loo(A);
    return [$, _]
};
mini_DataGrid_getCellFromEvent = function($) {
    return this.oOlol($)
};
mini_DataGrid__getRowByID = function($) {
    return this._dataSource.getby_id($)
};
mini_DataGrid_olo1 = function($) {
    return this._columnModel.olo1($)
};
mini_DataGrid_hasRowCls = function($, _) {
    var A = this.llO1ooHash[$._id];
    if (A) return A.indexOf(_) != -1;
    return false
};

mini_TreeSelect_findItems = function(value) {
    return this.tree.findNodes(this.tree.getIdField(), value);
};
mini_DataGrid_addRowCls = function($, A) {
    var _ = this.OOl0($, 1),
        B = this.OOl0($, 2);
    if (_) mini.addClass(_, A);
    if (B) mini.addClass(B, A);
    if ($) {
        var C = this.llO1ooHash[$._id];
        if (!C) C = this.llO1ooHash[$._id] = [];
        else C.remove(A);
        C.push(A)
    }
};
mini_DataGrid_removeRowCls = function($, A) {
    var _ = this.OOl0($, 1),
        B = this.OOl0($, 2);
    if (_) mini.removeClass(_, A);
    if (B) mini.removeClass(B, A);
    if ($) {
        var C = this.llO1ooHash[$._id];
        if (C) {
            C.remove(A);
            if (C.length == 0) delete this.llO1ooHash[$._id]
        }
    }
};
mini_DataGrid_getCellBox = function(_, A) {
    _ = this.getRow(_);
    A = this.getColumn(A);
    if (!_ || !A) return null;
    var $ = this.oOOO1O(_, A);
    if (!$) return null;
    return mini.getBox($)
};
mini_DataGrid_getColumnBox = function(A) {
    var B = this.Ooo0Id(A, 2),
        _ = document.getElementById(B);
    if (!_) {
        B = this.Ooo0Id(A, 1);
        _ = document.getElementById(B)
    }
    if (_) {
        var $ = mini.getBox(_);
        $.x -= 1;
        $.left = $.x;
        $.right = $.x + $.width;
        return $
    }
};
mini_DataGrid_getRowBox = function(_) {
    var $ = this.OOl0(_, 1),
        A = this.OOl0(_, 2);
    if (!A) return null;
    var B = mini.getBox(A);
    if ($) {
        var C = mini.getBox($);
        B.x = B.left = C.left;
        B.width = B.right - B.x
    }
    return B
};
mini_DataGrid__doRowSelect = function(_, E) {
    var F = this.isVirtualScroll(),
        C = this._viewRegion,
        A = F ? C.start : -1,
        B = F ? C.end : -1,
        K = {};
    if (A != -1) {
        var I = this.getVisibleRows();
        for (var G = A, D = B; G < D; G++) {
            var H = I[G];
            if (H) K[H._id] = true
        }
    }
    var J = new Date();
    for (G = 0, D = _.length; G < D; G++) {
        var $ = _[G];
        if (A != -1)
            if (!K[$._id]) continue;
        if (E) this.addRowCls($, this.O10oo);
        else this.removeRowCls($, this.O10oo)
    }
};
mini_DataGrid__tryFocus = function(A) {

    try {
        var _ = A.target.tagName.toLowerCase();
        if (_ == "input" || _ == "textarea" || _ == "select") return;
        if (mini.hasClass(A.target, "mini-placeholder-label")) return;
        if (oOlO(A.target, "mini-grid-rows-content")) {
            mini.setXY(this._focusEl, A.pageX, A.pageY);
            this.focus(false)
        }
    } catch ($) {}
};
mini_DataGrid_focus = function(B) {
    try {
        var _ = this,
            D = this.getCurrentCell();
        if (D && B !== false) {
            var C = this.getCellBox(D[0], D[1]);
            mini.setX(this._focusEl, C.x)
        }
        var A = this.getCurrent();
        if (A) {
            var $ = this.OOl0(A, 2);
            if ($) {
                if (B !== false) {
                    var E = mini.getBox($);
                    mini.setY(_._focusEl, E.top)
                }
                if (mini.isIE || mini.isIE11 || mini.isChrome) _._focusEl.focus();
                else _.el.focus()
            }
        } else if (mini.isIE || mini.isIE11 || mini.isChrome) _._focusEl.focus();
        else _.el.focus()
    } catch (F) {}
};
mini_DataGrid_focusRow = function($) {
    if (this.O1loo1 == $) return;
    if (this.O1loo1) this.removeRowCls(this.O1loo1, this.l11010);
    this.O1loo1 = $;
    if ($) this.addRowCls($, this.l11010);
    if (mini.isIE6) mini.repaint()
};
mini_DataGrid_scrollIntoView = function(B, D, C) {
    B = this.getRow(B);
    if (!B) return;
    try {
        if (D)
            if (this._columnModel.isFrozenColumn(D)) D = null;
        if (D) {
            var A = this.oOOO1O(B, D);
            mini.scrollIntoView(A, this._rowsViewEl, true)
        } else if (this.isVirtualScroll()) {
            if (C != false) {
                var E = this._getViewRegion(),
                    $ = this.indexOf(B),
                    F = this._getRangeHeight(0, $);
                this.setScrollTop(F)
            }
        } else {
            var _ = this.OOl0(B, 2);
            mini.scrollIntoView(_, this._rowsViewEl, false);
            this._syncScroll()
        }
    } catch (G) {}
};
mini_DataGrid_setShowLoading = function($) {
    this.showLoading = $
};
mini_DataGrid_getShowLoading = function() {
    return this.showLoading
};
mini_DataGrid_setEnableHotTrack = function($) {

    this.enableHotTrack = $
};
mini_DataGrid_getEnableHotTrack = function() {

    return this.enableHotTrack
};
mini_DataGrid_setAllowHotTrackOut = function($) {
    this.allowHotTrackOut = $
};
mini_DataGrid_getAllowHotTrackOut = function() {
    return this.allowHotTrackOut
};
mini_DataGrid_setOnlyCheckSelection = function($) {
    this.onlyCheckSelection = $
};
mini_DataGrid_getOnlyCheckSelection = function() {
    return this.onlyCheckSelection
};
mini_DataGrid_setAllowUnselect = function($) {

    this.allowUnselect = $
};
mini_DataGrid_getAllowUnselect = function() {

    return this.allowUnselect
};
mini_DataGrid_setAllowRowSelect = function($) {
    this.allowRowSelect = $
};
mini_DataGrid_getAllowRowSelect = function() {
    return this.allowRowSelect
};
mini_DataGrid_setAllowCellSelect = function($) {
    this.allowCellSelect = $
};
mini_DataGrid_getAllowCellSelect = function() {

    return this.allowCellSelect
};
mini_DataGrid_setAllowCellEdit = function($) {
    this.allowCellEdit = $
};
mini_DataGrid_getAllowCellEdit = function() {
    return this.allowCellEdit
};
mini_DataGrid_setCellEditAction = function($) {
    this.cellEditAction = $
};
mini_DataGrid_getCellEditAction = function() {
    return this.cellEditAction
};
mini_DataGrid_setAllowCellValid = function($) {
    this.allowCellValid = $
};
mini_DataGrid_getAllowCellValid = function() {
    return this.allowCellValid
};
mini_DataGrid_setAllowResizeColumn = function($) {
    this.allowResizeColumn = $;
    mini.removeClass(this.el, "mini-grid-resizeColumns-no");
    if (!$) mini.addClass(this.el, "mini-grid-resizeColumns-no")
};
mini_DataGrid_getAllowResizeColumn = function() {

    return this.allowResizeColumn
};
mini_DataGrid_setAllowSortColumn = function($) {

    this.allowSortColumn = $
};
mini_DataGrid_getAllowSortColumn = function() {
    return this.allowSortColumn
};
mini_DataGrid_setAllowMoveColumn = function($) {
    this.allowMoveColumn = $
};
mini_DataGrid_getAllowMoveColumn = function() {
    return this.allowMoveColumn
};
mini_DataGrid_setShowColumnsMenu = function($) {
    this.showColumnsMenu = $
};
mini_DataGrid_getShowColumnsMenu = function() {
    return this.showColumnsMenu
};
mini_DataGrid_setEditNextRowCell = function($) {

    this.editNextRowCell = $
};
mini_DataGrid_getEditNextRowCell = function() {
    return this.editNextRowCell
};
mini_DataGrid_setEditNextOnEnterKey = function($) {

    this.editNextOnEnterKey = $
};
mini_DataGrid_getEditNextOnEnterKey = function() {

    return this.editNextOnEnterKey
};
mini_DataGrid_setEditOnTabKey = function($) {

    this.editOnTabKey = $
};
mini_DataGrid_getEditOnTabKey = function() {
    return this.editOnTabKey
};
mini_DataGrid_setCreateOnEnter = function($) {
    this.createOnEnter = $
};
mini_DataGrid_getCreateOnEnter = function() {
    return this.createOnEnter
};
mini_DataGrid_Ooll0o = function(B) {
    if (this.oloo) {
        var $ = this.oloo[0],
            A = this.oloo[1],
            _ = this.oOOO1O($, A);
        if (_)
            if (B) mini.addClass(_, this.lo01O);
            else mini.removeClass(_, this.lo01O)
    }
};
mini_DataGrid_setCurrentCell = function(A) {
    if (this.oloo != A) {
        this.Ooll0o(false);
        this.oloo = A;
        if (A) {
            var $ = this.getRow(A[0]),
                _ = this.getColumn(A[1]);
            if ($ && _) this.oloo = [$, _];
            else this.oloo = null
        }
        this.Ooll0o(true);
        if (A) {
            var B = this._getAnchorCell(A[0], A[1]);
            if (!B)
                if (this.isFrozen()) this.scrollIntoView(A[0], null, false);
                else this.scrollIntoView(A[0], A[1], false)
        }
        this.fire("currentcellchanged")
    }
};
mini_DataGrid_getCurrentCell = function() {
    var $ = this.oloo;
    if ($)
        if (this.indexOf($[0]) == -1) {
            this.oloo = null;
            $ = null
        }
    return $
};
mini_DataGrid_isEditingCell = function($) {
    return this.o01Ol1 && this.o01Ol1[0] == $[0] && this.o01Ol1[1] == $[1]
};
mini_DataGrid_beginEditCell = function($, A) {
    function _($, A) {
        var B = new Date();
        $ = this.getRow($);
        A = this.getColumn(A);
        var _ = [$, A];
        if ($ && A) this.setCurrentCell(_);
        _ = this.getCurrentCell();
        if (this.o01Ol1 && _)
            if (this.o01Ol1[0] == _[0] && this.o01Ol1[1] == _[1]) return;
        if (this.o01Ol1) this.commitEdit();
        if (_) {
            var $ = _[0],
                A = _[1];
            if (A.editMode != "inline") {
                var C = this.O1o000($, A, this.getCellEditor(A));
                if (C !== false) {
                    this.scrollIntoView($, A, false);
                    this.o01Ol1 = _;
                    this.Ool0($, A)
                }
            }
        }
    }
    this._pushUpdateCallback(_, this, [$, A])
};
mini_DataGrid_cancelEdit = function() {

    if (this.allowCellEdit) {
        if (this.o01Ol1) this.lo1Oo1()
    } else if (this.isEditing()) {
        this._allowLayout = false;
        var A = this.getDataView();
        for (var $ = 0, B = A.length; $ < B; $++) {
            var _ = A[$];
            if (_._editing == true) this.cancelEditRow($)
        }
        this._allowLayout = true;
        this.doLayout()
    }
};
mini_DataGrid_commitEdit = function() {
    if (this.allowCellEdit) {
        if (this.o01Ol1) {
            this.oo0l(this.o01Ol1[0], this.o01Ol1[1]);
            this.lo1Oo1()
        }
    } else if (this.isEditing()) {
        this._allowLayout = false;
        var A = this.getDataView();
        for (var $ = 0, B = A.length; $ < B; $++) {
            var _ = A[$];
            if (_._editing == true) this.commitEditRow(_)
        }
        this._allowLayout = true;
        this.doLayout()
    }
};
mini_DataGrid_getCellEditor = function(_, $) {

    _ = this.getColumn(_);
    if (!_) return;
    if (this.allowCellEdit) {
        var B = _.__editor;
        if (!B) B = mini.getAndCreate(_.editor);
        if (B && B != _.editor) _.editor = B;
        return B
    } else {
        $ = this.getRow($);
        _ = this.getColumn(_);
        if (!$) $ = this.getEditingRow();
        if (!$ || !_) return null;
        var A = this.uid + "$" + $._uid + "$" + _._id + "$editor";
        return mini.get(A)
    }
};
mini_DataGrid_O1o000 = function($, E, G, D) {
    var _ = mini._getMap(E.field, $),
        F = {
            sender: this,
            rowIndex: this.indexOf($),
            row: $,
            record: $,
            column: E,
            field: E.field,
            editor: G,
            value: _,
            cancel: false
        };
    this.fire("cellbeginedit", F);
    if (!mini.isNull(E.defaultValue) && (mini.isNull(F.value) || F.value === "")) {
        var C = E.defaultValue,
            B = mini.clone({
                d: C
            });
        F.value = B.d
    }
    var G = F.editor;
    _ = F.value;
    if (F.cancel) return false;
    if (!G && E.editMode != "inline") return false;
    if (E.readOnly === true) return false;
    if (D === false) return true;
    if (E.editMode != "inline") {
        if (mini.isNull(_)) _ = "";
        if (G.setValue) G.setValue(_);
        G.ownerRowID = $._uid;
        if (E.displayField && G.setText) {
            var A = mini._getMap(E.displayField, $);
            if (!mini.isNull(E.defaultText) && (mini.isNull(A) || A === "")) {
                B = mini.clone({
                    d: E.defaultText
                });
                A = B.d
            }
            G.setText(A)
        }
        if (this.allowCellEdit) this.OO00 = F.editor
    }
    return true
};
mini_DataGrid_oo0l = function(A, C, B, G) {
    var F = {
        sender: this,
        rowIndex: this.indexOf(A),
        record: A,
        row: A,
        column: C,
        field: C.field,
        editor: G ? G : this.getCellEditor(C),
        value: mini.isNull(B) ? "" : B,
        text: "",
        cancel: false
    };
    if (F.editor && F.editor.getValue) {
        try {
            F.editor.blur()
        } catch (E) {}
        F.value = F.editor.getValue()
    }
    if (F.editor && F.editor.getText) F.text = F.editor.getText();
    var D = mini._getMap(C.field, A),
        _ = F.value;
    F.oldValue = D;
    if (mini.isEquals(D, _)) return F;
    this.fire("cellcommitedit", F);
    if (F.cancel == false)
        if (this.allowCellEdit) {
            var $ = {};
            $[C.field] = F.value;
            if (C.displayField) $[C.displayField] = F.text;
            this.updateRow(A, $)
        }
    return F
};
mini_DataGrid_lo1Oo1 = function(_, D) {
    if (!this.o01Ol1 && !_) return;
    if (!_) _ = this.o01Ol1[0];
    if (!D) D = this.o01Ol1[1];
    var B = mini._getMap(D.field, _),
        F = {
            sender: this,
            rowIndex: this.indexOf(_),
            record: _,
            row: _,
            column: D,
            field: D.field,
            editor: this.OO00,
            value: B
        };
    this.fire("cellendedit", F);
    if (this.allowCellEdit && F.editor) {
        var E = F.editor;
        if (E && E.setIsValid) E.setIsValid(true);
        if (this.Oo00l) this.Oo00l.style.display = "none";
        var A = this.Oo00l.childNodes;
        for (var $ = A.length - 1; $ >= 0; $--) {
            var C = A[$];
            this.Oo00l.removeChild(C)
        }
        if (E && E.hidePopup) E.hidePopup();
        if (E && E.setValue) E.setValue("");
        this.OO00 = null;
        this.o01Ol1 = null;
        if (this.allowCellValid) this.validateCell(_, D)
    }
};
mini_DataGrid_Ool0 = function(_, B) {
    if (!this.OO00) return false;
    var $ = this.getCellBox(_, B);
    if ($) {
        var C = document.body.scrollWidth;
        if ($.right > C) {
            $.width = C - $.left;
            if ($.width < 10) $.width = 10;
            $.right = $.left + $.width
        }
    }
    var E = {
        sender: this,
        rowIndex: this.indexOf(_),
        record: _,
        row: _,
        column: B,
        field: B.field,
        cellBox: $,
        editor: this.OO00
    };
    this.fire("cellshowingedit", E);
    var D = E.editor;
    if (D && D.setIsValid) D.setIsValid(true);
    if ($) {
        var A = this.oo0000($, D);
        this.Oo00l.style.zIndex = mini.getMaxZIndex();
        this._setEdiorBox(D, $);
        mini.on(document, "mousedown", this.lO00Oo, this);
        if (B.autoShowPopup && D.showPopup) D.showPopup()
    }
    if (D) D.keyNavEnabled = !this.navEditMode
};
mini_DataGrid__getEditingControl = function() {
    return this.OO00
};
mini_DataGrid__setEdiorBox = function(B, $) {
    if (B.setWidth) {
        var _ = $.width;
        if (_ < 20) _ = 20;
        B.setWidth(_)
    }
    if (B.setHeight && B.type == "textarea") {
        var A = $.height - 1;
        if (B.minHeight && A < B.minHeight) A = B.minHeight;
        B.setHeight(A)
    }
    if (B.setWidth) {
        _ = $.width - 1;
        if (B.minWidth && _ < B.minWidth) _ = B.minWidth;
        B.setWidth(_)
    }
};
mini_DataGrid_lO00Oo = function(C) {

    if (this.OO00) {
        var A = this.oOlol(C);
        if (this.o01Ol1 && A)
            if (this.o01Ol1[0] == A.record && this.o01Ol1[1] == A.column) return false;
        var _ = false;
        if (this.OO00.within) _ = this.OO00.within(C);
        else _ = Oolo(this.Oo00l, C.target);
        if (_ == false) {
            var B = this;
            if (Oolo(this._bodyEl, C.target) == false) setTimeout(function() {
                B.commitEdit()
            }, 1);
            else {
                var $ = B.o01Ol1;
                setTimeout(function() {
                    var _ = B.o01Ol1;
                    if ($ == _) B.commitEdit()
                }, 70)
            }
            mini.un(document, "mousedown", this.lO00Oo, this)
        }
    }
};
mini_DataGrid_getEditWrap = function() {

    return this.Oo00l
};
mini_DataGrid_oo0000 = function($, C) {
    if (!this.Oo00l) {
        this.Oo00l = mini.append(document.body, "<div class=\"mini-grid-editwrap\" style=\"position:absolute;\"></div>");
        mini.on(this.Oo00l, "keydown", this.l0o00, this)
    }
    this.Oo00l.style.zIndex = 1000000000;
    this.Oo00l.style.display = "block";
    if (C.render) {
        C.render(this.Oo00l);
        setTimeout(function() {
            C.focus();
            if (C.selectText) setTimeout(function() {
                C.selectText()
            }, 11)
        }, 50);
        if (C.setVisible) C.setVisible(true)
    } else if (C.el) {
        this.Oo00l.appendChild(C.el);
        setTimeout(function() {
            try {
                C.el.focus()
            } catch ($) {}
        }, 50)
    }
    var B = C.getHeight(),
        _ = $.y;
    if (B < $.height) _ = Math.round($.y + $.height / 2 - B / 2);
    mini.setXY(this.Oo00l, $.x, _);
    mini.setWidth(this.Oo00l, $.width);
    var A = document.body.scrollWidth;
    if ($.x > A) mini.setX(this.Oo00l, -1000);
    return this.Oo00l
};
mini_DataGrid_l0o00 = function(F) {
    var E = this.OO00;
    if (F.keyCode == 13 && E && E.type == "textarea") return;
    if (F.keyCode == 13) {
        var C = this.o01Ol1;
        if (C && C[1] && C[1].enterCommit === false) return;
        this.commitEdit();
        this.focus();
        if (this.editNextOnEnterKey) {
            this.fire("celleditenter", {
                record: C[0],
                column: C[1]
            });
            this._beginEditNextCell(F.shiftKey == false)
        }
    } else if (F.keyCode == 27) {
        this.cancelEdit();
        this.focus()
    } else if (F.keyCode == 9) {
        this.commitEdit();
        if (this.editOnTabKey) {
            F.preventDefault();
            this.commitEdit();
            this._beginEditNextCell(F.shiftKey == false, true)
        }
    }
    if (this.navEditMode) switch (F.keyCode) {
        case 37:
            F.preventDefault();
            this.commitEdit();
            this._beginEditNextCell(F.shiftKey !== false);
            break;
        case 39:
            this.commitEdit();
            if (this.editOnTabKey) {
                F.preventDefault();
                this.commitEdit();
                this._beginEditNextCell(F.shiftKey == false, true)
            }
            break;
        case 38:
            F.preventDefault();
            C = this.o01Ol1;
            this.commitEdit();
            var $ = C[0],
                B = C[1];
            if ($) {
                var D = grid.indexOf($);
                if (D > 0) D -= 1
            } else return;
            var A = grid.getRow(D),
                _ = [A, B];
            this.setCurrentCell(_);
            this.beginEditCell();
            break;
        case 40:
            F.preventDefault();
            this.commitEdit();
            this._beginEditNextCell(F.shiftKey == false);
            break
    }
};

mini_DatePicker_setMaxDateErrorText = function(value) {
    this.maxDateErrorText = value;
};
mini_DataGrid_setNavEditMode = function($) {
    this.navEditMode = $
};
mini_DataGrid_getNavEditMode = function() {
    return this.navEditMode
};
mini_DataGrid_setSkipReadOnlyCell = function($) {
    this.skipReadOnlyCell = $
};
mini_DataGrid_getSkipReadOnlyCell = function() {
    return this.skipReadOnlyCell
};
mini_DataGrid_isCellCanEdit = function($, _) {
    var A = this.O1o000($, _, this.getCellEditor(_), false);
    return A
};
mini_DataGrid__beginEditNextCell = function(F, Q) {

    var M = this,
        B = this.getCurrentCell();
    if (!B) return;
    this.focus();
    var G = M.getVisibleColumns(),
        E = B ? B[1] : null,
        _ = B ? B[0] : null;

    function C($) {
        return M.getVisibleRows()[$]
    }

    function A($) {
        return M.getVisibleRows().indexOf($)
    }

    function D() {
        return M.getVisibleRows().length
    }
    var J = G.indexOf(E),
        R = A(_),
        S = D();
    if (F === false) {
        if (this.skipReadOnlyCell) {
            var H = this,
                N = $();

            function $() {
                var A = 0,
                    $ = (J - 1 === 0) ? G.length : J - 1;
                for (; $ > A; $--) {
                    E = G[$];
                    var B = H.isCellCanEdit(_, E);
                    if (B) return E
                }
            }
            if (!N || J == 0) {
                J = G.length;
                var O = $();
                K()
            }
        } else {
            J -= 1;
            E = G[J];
            if (!E) {
                E = G[G.length - 1];
                K()
            }
        }

        function K() {
            _ = C(R - 1);
            if (!_) return
        }
    } else if (this.editNextRowCell && !Q) {
        if (R + 1 < S) _ = C(R + 1)
    } else {
        function L() {
            _ = M.getAt(R + 1);
            if (!_)
                if (this.createOnEnter) {
                    _ = {};
                    this.addRow(_)
                } else return
        }

        function P() {
            var $ = (J + 1 == I) ? 0 : (J + 1);
            for (; $ < I; $++) {
                E = G[$];
                var A = H.isCellCanEdit(_, E);
                if (A) return E
            }
        }
        if (this.skipReadOnlyCell) {
            var H = this,
                I = G.length,
                N = P();
            if (!N || J + 1 == I) {
                J = 0;
                O = P();
                L()
            }
        } else {
            J += 1;
            E = G[J];
            if (!E) {
                E = G[0];
                L()
            }
        }
    }
    B = [_, E];
    M.setCurrentCell(B);
    if (!M.onlyCheckSelection && M.allowRowSelect)
        if (M.getCurrent() != _) {
            M.deselectAll();
            M.setCurrent(_)
        }
    M.scrollIntoView(_, E, false);
    if (M.isReadOnly() || E.readOnly) return false;
    M.beginEditCell()
};
mini_DataGrid_getEditorOwnerRow = function(_) {
    var $ = _.ownerRowID;
    return this.getRowByUID($)
};
mini_DataGrid_beginEditRow = function(row) {
    if (this.allowCellEdit) return;

    function beginEdit(row) {
        var sss = new Date();
        row = this.getRow(row);
        if (!row) return;
        var rowEl = this.OOl0(row, 2);
        if (!rowEl) return;
        row._editing = true;
        this.l1111OEl(row);
        rowEl = this.OOl0(row, 2);
        mini.addClass(rowEl, "mini-grid-rowEdit");
        var columns = this.getVisibleColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i],
                value = row[column.field],
                cellEl = this.oOOO1O(row, column);
            if (!cellEl) continue;
            if (typeof column.editor == "string") column.editor = eval("(" + column.editor + ")");
            var editorConfig = mini.copyTo({}, column.editor);
            editorConfig.id = this.uid + "$" + row._uid + "$" + column._id + "$editor";
            var editor = mini.create(editorConfig);
            if (this.O1o000(row, column, editor))
                if (editor) {
                    mini.addClass(cellEl, "mini-grid-cellEdit");
                    cellEl.innerHTML = "";
                    cellEl.appendChild(editor.el);
                    mini.addClass(editor.el, "mini-grid-editor")
                }
        }
        this.doLayout()
    }
    this._pushUpdateCallback(beginEdit, this, [row])
};
mini_DataGrid_cancelEditRow = function(B) {

    if (this.allowCellEdit) return;
    B = this.getRow(B);
    if (!B || !B._editing) return;
    delete B._editing;
    var _ = this.OOl0(B),
        D = this.getVisibleColumns();
    for (var $ = 0, F = D.length; $ < F; $++) {
        var C = D[$],
            G = this.loOloo(B, D[$]),
            A = document.getElementById(G);
        if (!A) continue;
        var E = A.firstChild,
            H = mini.get(E);
        if (!H) continue;
        H.destroy()
    }
    this.l1111OEl(B);
    this.doLayout()
};
mini_DataGrid_commitEditRow = function($) {
    if (this.allowCellEdit) return;
    $ = this.getRow($);
    if (!$ || !$._editing) return;
    var _ = this.getEditRowData($, false, false);
    this.l0010 = false;
    this.updateRow($, _);
    this.l0010 = true;
    this.cancelEditRow($)
};
mini_DataGrid_isEditing = function() {
    var A = this.getDataView();
    for (var $ = 0, B = A.length; $ < B; $++) {
        var _ = A[$];
        if (_._editing == true) return true
    }
    return false
};
mini_DataGrid_isEditingRow = function($) {
    $ = this.getRow($);
    if (!$) return false;
    return !!$._editing
};
mini_DataGrid_isNewRow = function($) {

    return $._state == "added"
};
mini_DataGrid_getEditingRows = function() {
    var A = [],
        B = this.getDataView();
    for (var $ = 0, C = B.length; $ < C; $++) {
        var _ = B[$];
        if (_._editing == true) A.push(_)
    }
    return A
};
mini_DataGrid_getEditingRow = function() {
    var $ = this.getEditingRows();
    return $[0]
};
mini_DataGrid_getEditData = function(D) {
    var C = [],
        B = this.getDataView();
    for (var $ = 0, E = B.length; $ < E; $++) {
        var _ = B[$];
        if (_._editing == true) {
            var A = this.getEditRowData($, D);
            C.push(A)
        }
    }
    return C
};
mini_DataGrid_getEditRowData = function(I, K, D) {
    I = this.getRow(I);
    if (!I || !I._editing) return null;
    var N = this.getIdField(),
        O = this.getParentField ? this.getParentField() : null,
        J = {},
        C = this.getVisibleColumns();
    for (var H = 0, E = C.length; H < E; H++) {
        var B = C[H],
            F = this.loOloo(I, C[H]),
            A = document.getElementById(F);
        if (!A) continue;
        var P = null;
        if (B.type == "checkboxcolumn" || B.type == "radiobuttoncolumn") {
            var L = B.isChecked(I, B),
                _ = L ? B.trueValue : B.falseValue;
            P = this.oo0l(I, B, _)
        } else {
            var M = A.firstChild,
                G = mini.get(M);
            if (!G) continue;
            P = this.oo0l(I, B, null, G)
        }
        if (D !== false) {
            mini._setMap(B.field, P.value, J);
            if (B.displayField) mini._setMap(B.displayField, P.text, J)
        } else {
            J[B.field] = P.value;
            if (B.displayField) J[B.displayField] = P.text
        }
    }
    J[N] = I[N];
    if (O) J[O] = I[O];
    if (K) {
        var $ = mini.copyTo({}, I);
        J = mini.copyTo($, J)
    }
    return J
};
mini_DataGrid_collapseGroups = function() {
    if (!this.isGrouping()) return;
    this._allowLayout = false;
    var _ = this.getGroupingView();
    for (var $ = 0, B = _.length; $ < B; $++) {
        var A = _[$];
        this.collapseRowGroup(A)
    }
    this._allowLayout = true;
    this.doLayout()
};
mini_DataGrid_expandGroups = function() {
    if (!this.isGrouping()) return;
    this._allowLayout = false;
    var _ = this.getGroupingView();
    for (var $ = 0, B = _.length; $ < B; $++) {
        var A = _[$];
        this.expandRowGroup(A)
    }
    this._allowLayout = true;
    this.doLayout()
};
mini_DataGrid_toggleRowGroup = function($) {
    if ($.expanded) this.collapseRowGroup($);
    else this.expandRowGroup($)
};
mini_DataGrid_collapseRowGroup = function($) {
    $ = this.getRowGroup($);
    if (!$) return;
    $.expanded = false;
    var C = this._getRowGroupEl($, 1),
        _ = this._getRowGroupRowsEl($, 1),
        B = this._getRowGroupEl($, 2),
        A = this._getRowGroupRowsEl($, 2);
    if (_) _.style.display = "none";
    if (A) A.style.display = "none";
    if (C) mini.addClass(C, "mini-grid-group-collapse");
    if (B) mini.addClass(B, "mini-grid-group-collapse");
    this.doLayout()
};
mini_DataGrid_expandRowGroup = function($) {
    $ = this.getRowGroup($);
    if (!$) return;
    $.expanded = true;
    var C = this._getRowGroupEl($, 1),
        _ = this._getRowGroupRowsEl($, 1),
        B = this._getRowGroupEl($, 2),
        A = this._getRowGroupRowsEl($, 2);
    if (_) _.style.display = "";
    if (A) A.style.display = "";
    if (C) mini.removeClass(C, "mini-grid-group-collapse");
    if (B) mini.removeClass(B, "mini-grid-group-collapse");
    this.doLayout()
};
mini_DataGrid_showAllRowDetail = function() {
    this._allowLayout = false;
    var A = this.getDataView();
    for (var $ = 0, B = A.length; $ < B; $++) {
        var _ = A[$];
        this.showRowDetail(_)
    }
    this._allowLayout = true;
    this.doLayout()
};
mini_DataGrid_hideAllRowDetail = function() {
    this._allowLayout = false;
    var A = this.getDataView();
    for (var $ = 0, B = A.length; $ < B; $++) {
        var _ = A[$];
        this.hideRowDetail(_)
    }
    this._allowLayout = true;
    this.doLayout()
};
mini_DataGrid_isShowRowDetail = function($) {
    $ = this.getRow($);
    if (!$) return false;
    return !!$._showDetail
};
mini_DataGrid_toggleRowDetail = function($) {
    $ = this.getRow($);
    if (!$) return;
    if (grid.isShowRowDetail($)) grid.hideRowDetail($);
    else grid.showRowDetail($)
};
mini_DataGrid_showRowDetail = function(_) {
    _ = this.getRow(_);
    if (!_ || _._showDetail == true) return;
    _._showDetail = true;
    var D = this._getRowDetailEl(_, 1, true),
        C = this._getRowDetailEl(_, 2, true);
    if (D) D.style.display = "";
    if (C) C.style.display = "";
    var $ = this.OOl0(_, 1),
        A = this.OOl0(_, 2);
    if ($) mini.addClass($, "mini-grid-expandRow");
    if (A) mini.addClass(A, "mini-grid-expandRow");
    this.fire("showrowdetail", {
        record: _
    });
    var B = this;
    if (this.isFrozen()) setTimeout(function() {
        B.syncRowDetail(_)
    }, 1);
    this.doLayout()
};
mini_DataGrid_hideRowDetail = function(_) {
    _ = this.getRow(_);
    if (!_ || _._showDetail !== true) return;
    _._showDetail = false;
    var C = this._getRowDetailEl(_, 1),
        B = this._getRowDetailEl(_, 2);
    if (C) C.style.display = "none";
    if (B) B.style.display = "none";
    var $ = this.OOl0(_, 1),
        A = this.OOl0(_, 2);
    if ($) mini.removeClass($, "mini-grid-expandRow");
    if (A) mini.removeClass(A, "mini-grid-expandRow");
    this.fire("hiderowdetail", {
        record: _
    });
    this.doLayout()
};
mini_DataGrid__getRowDetailEl = function(_, B, $) {
    _ = this.getRow(_);
    if (!_) return null;
    var C = this.lo00(_, B),
        A = document.getElementById(C);
    if (!A && $ === true) A = this.oO1l(_, B);
    return A
};
mini_DataGrid_oO1l = function(_, B) {

    var $ = this.getFrozenColumns(),
        F = this.getUnFrozenColumns(),
        C = $.length;
    if (B == 2) C = F.length;
    var A = this.OOl0(_, B);
    if (!A) return null;
    var E = this.lo00(_, B),
        D = "<tr id=\"" + E + "\" class=\"mini-grid-detailRow\"><td style=\"width:0\"></td><td class=\"mini-grid-detailCell\" colspan=\"" + C + "\"></td></tr>";
    jQuery(A).after(D);
    return document.getElementById(E)
};
mini_DataGrid_lo00 = function($, _) {
    return this._id + "$detail" + _ + "$" + $._id
};
mini_DataGrid_getRowDetailCellEl = function($, A) {

    if (!A) A = 2;
    var _ = this._getRowDetailEl($, A);
    if (_) return _.cells[1]
};
mini_DataGrid_setAutoHideRowDetail = function($) {
    this.autoHideRowDetail = $
};
mini_DataGrid_getAutoHideRowDetail = function() {
    return this.autoHideRowDetail
};
mini_DataGrid_mergeColumns = function(F) {

    if (F && mini.isArray(F) == false) F = [F];
    var $ = this,
        A = $.getVisibleColumns();
    if (!F) F = A;
    var D = $.getDataView();
    D.push({});
    var B = [];
    for (var _ = 0, G = F.length; _ < G; _++) {
        var C = F[_];
        C = $.getColumn(C);
        if (!C) continue;
        var H = E(C);
        B.addRange(H)
    }

    function E(F) {
        if (!F.field) return;
        var K = [],
            I = -1,
            G = 1,
            J = A.indexOf(F),
            C = null;
        for (var $ = 0, H = D.length; $ < H; $++) {
            var B = D[$],
                _ = mini._getMap(F.field, B);
            if (I == -1 || !mini.isEquals(_, C)) {
                if (G > 1) {
                    var E = {
                        rowIndex: I,
                        columnIndex: J,
                        rowSpan: G,
                        colSpan: 1
                    };
                    K.push(E)
                }
                I = $;
                G = 1;
                C = _
            } else G++
        }
        return K
    }
    $.mergeCells(B)
};
mini_DataGrid_mergeCells = function(D) {
    if (!mini.isArray(D)) return;
    this._mergedCells = D;
    var C = this._mergedCellMaps = {};

    function _(G, H, E, D, A) {
        for (var $ = G, F = G + E; $ < F; $++)
            for (var B = H, _ = H + D; B < _; B++)
                if ($ == G && B == H) C[$ + ":" + B] = A;
                else C[$ + ":" + B] = true
    }
    var D = this._mergedCells;
    if (D)
        for (var $ = 0, B = D.length; $ < B; $++) {
            var A = D[$];
            if (!A.rowSpan) A.rowSpan = 1;
            if (!A.colSpan) A.colSpan = 1;
            _(A.rowIndex, A.columnIndex, A.rowSpan, A.colSpan, A)
        }
    this.deferUpdate()
};
mini_DataGrid_margeCells = function($) {
    this.mergeCells($)
};
mini_DataGrid__isCellVisible = function(_, A) {
    if (!this._mergedCellMaps) return true;
    var $ = this._mergedCellMaps[_ + ":" + A];
    return !($ === true)
};
mini_DataGrid__getAnchorCell = function($, _) {

    if (!this._mergedCellMaps) return null;
    var A = this.indexOf($),
        B = this.getBottomColumns().indexOf(_);
    return this._mergedCellMaps[A + ":" + B]
};
mini_DataGrid_l1l0lo = function(I, E, A, B) {
    var J = [];
    if (!mini.isNumber(I)) return [];
    if (!mini.isNumber(E)) return [];
    var C = this.getVisibleColumns(),
        G = this.getDataView();
    for (var F = I, D = I + A; F < D; F++)
        for (var H = E, $ = E + B; H < $; H++) {
            var _ = this.oOOO1O(F, H);
            if (_) J.push(_)
        }
    return J
};
mini_DataGrid_l11o10Data = function() {

    var _ = this.getSelecteds().clone(),
        $ = this;
    mini.sort(_, function(A, C) {
        var _ = $.indexOf(A),
            B = $.indexOf(C);
        if (_ > B) return 1;
        if (_ < B) return -1;
        return 0
    }, this);
    return _
};
mini_DataGrid_l11o10Text = function($) {

    return "Records " + $.length
};
mini_DataGrid_setAllowLeafDropIn = function($) {

    this.allowLeafDropIn = $
};
mini_DataGrid_getAllowLeafDropIn = function() {
    return this.allowLeafDropIn
};
mini_DataGrid_setAllowDrag = function($) {

    this.allowDrag = $
};
mini_DataGrid_getAllowDrag = function() {
    return this.allowDrag
};
mini_DataGrid_setAllowDrop = function($) {
    this.allowDrop = $
};
mini_DataGrid_getAllowDrop = function() {
    return this.allowDrop
};
mini_DataGrid_isAllowDrag = function(_, $) {
    if (this.isReadOnly() || this.enabled == false) return false;
    if (!this.allowDrag || !$.allowDrag) return false;
    if (_.allowDrag === false) return false;
    return true
};
mini_DataGrid_O0oo = function(_, $) {


    var A = {
        node: _,
        nodes: this.l11o10Data(),
        column: $,
        cancel: false
    };
    A.record = A.node;
    A.records = A.nodes;
    A.dragText = this.l11o10Text(A.nodes);
    this.fire("dragstart", A);
    return A
};
mini_DataGrid_O0l1oO = function(A, _, $, B) {


    var C = {};
    C.from = B;
    C.effect = A;
    C.nodes = _;
    C.node = C.nodes[0];
    C.targetNode = $;
    C.dragNodes = _;
    C.dragNode = C.dragNodes[0];
    C.dropNode = C.targetNode;
    C.dragAction = C.action;
    this.fire("givefeedback", C);
    return C
};
mini_DataGrid_ooo00O = function(_, $, A) {
    _ = _.clone();
    var B = {
        dragNodes: _,
        targetNode: $,
        action: A,
        cancel: false
    };
    B.dragNode = B.dragNodes[0];
    B.dropNode = B.targetNode;
    B.dragAction = B.action;
    this.fire("beforedrop", B);
    this.fire("dragdrop", B);
    return B
};
mini_DataGrid_moveUp = function(B) {
    if (!mini.isArray(B)) return;
    var C = this;
    B = B.sort(function($, A) {
        var B = C.indexOf($),
            _ = C.indexOf(A);
        if (B > _) return 1;
        return -1
    });
    for (var A = 0, D = B.length; A < D; A++) {
        var _ = B[A],
            $ = this.indexOf(_);
        this.moveRow(_, $ - 1)
    }
};
mini_DataGrid_moveDown = function(B) {
    if (!mini.isArray(B)) return;
    var C = this;
    B = B.sort(function($, A) {
        var B = C.indexOf($),
            _ = C.indexOf(A);
        if (B > _) return 1;
        return -1
    });
    B.reverse();
    for (var A = 0, D = B.length; A < D; A++) {
        var _ = B[A],
            $ = this.indexOf(_);
        this.moveRow(_, $ + 2)
    }
};
mini_DataGrid_setAjaxAsync = function($) {

    this._dataSource.ajaxAsync = $;
    this.ajaxAsync = $
};
mini_DataGrid_getAjaxAsync = function() {

    return this._dataSource.ajaxAsync
};
mini_DataGrid_setAjaxMethod = function($) {
    this._dataSource.ajaxMethod = $;
    this.ajaxMethod = $
};
mini_DataGrid_getAjaxMethod = function() {
    return this._dataSource.ajaxMethod
};
mini_DataGrid_setAjaxType = function($) {

    this._dataSource.ajaxType = $;
    this.ajaxType = $
};
mini_DataGrid_getAjaxType = function() {

    return this._dataSource.ajaxType
};
mini_DataGrid_setAjaxOptions = function($) {
    this._dataSource.setAjaxOptions($)
};
mini_DataGrid_getAjaxOptions = function() {
    return this._dataSource.getAjaxOptions()
};
mini_DataGrid_setAutoLoad = function($) {
    this._dataSource.setAutoLoad($)
};
mini_DataGrid_getAutoLoad = function() {
    return this._dataSource.getAutoLoad()
};
mini_DataGrid_setUrl = function($) {
    this._dataSource.setUrl($);
    this.url = $
};
mini_DataGrid_getUrl = function() {
    return this._dataSource.getUrl()
};
mini_DataGrid_load = function($, B, A, _) {
    this._dataSource.load($, B, A, _)
};
mini_DataGrid_reload = function(A, _, $) {

    this.accept();
    this._dataSource.reload(A, _, $)
};
mini_DataGrid_gotoPage = function($, _) {
    this._dataSource.gotoPage($, _)
};
mini_DataGrid_sortBy = function(A, _) {
    if (!A) return null;
    var B = this._dataSource;
    this.sortField = B.sortField = A;
    this.sortOrder = B.sortOrder = _;
    if (this._dataSource.sortMode == "server") this._dataSource.sortBy(A, _);
    else {
        var $ = this._columnModel._getDataTypeByField(A);
        this._dataSource._doClientSortField(A, _, $)
    }
};
mini_DataGrid_setShowCellTip = function($) {
    this.showCellTip = $
};
mini_DataGrid_getShowCellTip = function() {
    return this.showCellTip
};
mini_DataGrid_setCheckSelectOnLoad = function($) {
    this._dataSource.setCheckSelectOnLoad($);
    this.checkSelectOnLoad = $
};
mini_DataGrid_getCheckSelectOnLoad = function() {
    return this._dataSource.getCheckSelectOnLoad()
};
mini_DataGrid_setSelectOnLoad = function($) {
    this._dataSource.setSelectOnLoad($);
    this.selectOnLoad = $
};
mini_DataGrid_getSelectOnLoad = function() {
    return this._dataSource.getSelectOnLoad()
};
mini_DataGrid_setSortMode = function($) {
    this._dataSource.setSortMode($);
    this.sortMode = $
};
mini_DataGrid_getSortMode = function() {
    return this._dataSource.getSortMode()
};
mini_DataGrid_setPageIndex = function($) {

    this._dataSource.setPageIndex($);
    this.pageIndex = $
};
mini_DataGrid_getPageIndex = function() {
    return this._dataSource.getPageIndex()
};
mini_DataGrid_setPageSize = function($) {
    this._dataSource.setPageSize($);
    this._virtualRows = $;
    this.pageSize = $
};
mini_DataGrid_getPageSize = function() {
    return this._dataSource.getPageSize()
};
mini_DataGrid_setTotalCount = function($) {
    this._dataSource.setTotalCount($);
    this.totalCount = $
};
mini_DataGrid_getTotalCount = function() {
    return this._dataSource.getTotalCount()
};
mini_DataGrid_getTotalPage = function() {
    return this._dataSource.getTotalPage()
};
mini_DataGrid_setSortField = function($) {
    this._dataSource.setSortField($);
    this.sortField = $
};
mini_DataGrid_getSortField = function() {


    return this._dataSource.sortField
};
mini_DataGrid_setSortOrder = function($) {
    this._dataSource.setSortOrder($);
    this.sortOrder = $
};
mini_DataGrid_getSortOrder = function() {
    return this._dataSource.sortOrder
};
mini_DataGrid_setPageIndexField = function($) {

    this._dataSource.pageIndexField = $;
    this.pageIndexField = $
};
mini_DataGrid_getPageIndexField = function() {
    return this._dataSource.pageIndexField
};
mini_DataGrid_setPageSizeField = function($) {
    this._dataSource.pageSizeField = $;
    this.pageSizeField = $
};
mini_DataGrid_getPageSizeField = function() {
    return this._dataSource.pageSizeField
};
mini_DataGrid_setStartField = function($) {
    this._dataSource.startField = $;
    this.startField = $
};
mini_DataGrid_getStartField = function() {
    return this._dataSource.startField
};
mini_DataGrid_setLimitField = function($) {
    this._dataSource.limitField = $;
    this.limitField = $
};
mini_DataGrid_getLimitField = function() {
    return this._dataSource.limitField
};
mini_DataGrid_setSortFieldField = function($) {
    this._dataSource.sortFieldField = $;
    this.sortFieldField = $
};
mini_DataGrid_getSortFieldField = function() {
    return this._dataSource.sortFieldField
};
mini_DataGrid_setSortOrderField = function($) {
    this._dataSource.sortOrderField = $;
    this.sortOrderField = $
};
mini_DataGrid_getSortOrderField = function() {
    return this._dataSource.sortOrderField
};
mini_DataGrid_setTotalField = function($) {

    this._dataSource.totalField = $;
    this.totalField = $
};
mini_DataGrid_getTotalField = function() {
    return this._dataSource.totalField
};
mini_DataGrid_setDataField = function($) {
    this._dataSource.dataField = $;
    this.dataField = $
};
mini_DataGrid_getDataField = function() {
    return this._dataSource.dataField
};
mini_DataGrid_setErrorField = function($) {
    this._dataSource.errorField = $;
    this.errorField = $
};
mini_DataGrid_getErrorField = function() {

    return this._dataSource.errorField
};
mini_DataGrid_setErrorMsgField = function($) {
    this._dataSource.errorMsgField = $;
    this.errorMsgField = $
};
mini_DataGrid_getErrorMsgField = function() {
    return this._dataSource.errorMsgField
};
mini_DataGrid_setStackTraceField = function($) {

    this._dataSource.stackTraceField = $;
    this.stackTraceField = $
};
mini_DataGrid_getStackTraceField = function() {
    return this._dataSource.stackTraceField
};
mini_DataGrid_setPageSizeWidth = function($) {
    this._bottomPager.setPageSizeWidth($)
};
mini_DataGrid_getPageSizeWidth = function() {
    return this._bottomPager.getPageSizeWidth()
};


mini_DataGrid_getBottomPager = function() {
    return this._bottomPager
};
mini_DataGrid_setSizeText = function($) {
    this._bottomPager.sizeText = $
};

mini_DatePicker_getShowClearButton = function() {
    return this.showClearButton;
};
mini_DataGrid_getSizeText = function() {
    return this.sizeText
};
mini_DataGrid_setShowPagerButtonText = function($) {
    this._bottomPager.setShowButtonText($)
};
mini_DataGrid_getShowPagerButtonText = function() {
    return this.showPagerButtonText
};
mini_DataGrid_setShowPagerButtonIcon = function($) {

    this._bottomPager.setShowButtonIcon($)
};
mini_DataGrid_getShowPagerButtonIcon = function() {
    return this.showPagerButtonIcon
};
mini_DataGrid_setShowReloadButton = function($) {
    this._bottomPager.setShowReloadButton($)
};
mini_DataGrid_getShowReloadButton = function() {
    return this._bottomPager.getShowReloadButton()
};
mini_DataGrid_setShowPageInfo = function($) {
    this._bottomPager.setShowPageInfo($)
};
mini_DataGrid_getShowPageInfo = function() {
    return this._bottomPager.getShowPageInfo()
};
mini_DataGrid_setSizeList = function($) {

    if (!mini.isArray($)) return;
    this._bottomPager.setSizeList($)
};
mini_DataGrid_getSizeList = function() {
    return this._bottomPager.getSizeList()
};
mini_DataGrid_setShowPageSize = function($) {

    this._bottomPager.setShowPageSize($)
};
mini_DataGrid_getShowPageSize = function() {
    return this._bottomPager.getShowPageSize()
};
mini_DataGrid_setShowPageIndex = function($) {
    this.showPageIndex = $;
    this._bottomPager.setShowPageIndex($)
};
mini_DataGrid_getShowPageIndex = function() {
    return this._bottomPager.getShowPageIndex()
};
mini_DataGrid_setShowTotalCount = function($) {
    this._bottomPager.setShowTotalCount($)
};
mini_DataGrid_getShowTotalCount = function() {

    return this._bottomPager.getShowTotalCount()
};
mini_DataGrid_setPagerStyle = function($) {

    this.pagerStyle = $;
    mini.setStyle(this._bottomPager.el, $)
};
mini_DataGrid_setPagerCls = function($) {
    this.pagerCls = $;
    mini.addClass(this._bottomPager.el, $)
};
mini_DataGrid_setDropAction = function($) {

    this.dropAction = $
};
mini_DataGrid_getDropAction = function() {
    return this.dropAction
};
mini_DataGrid_setGroupTitleCollapsible = function($) {
    this.groupTitleCollapsible = $
};
mini_DataGrid_getGroupTitleCollapsible = function() {
    return this.groupTitleCollapsible
};
mini_DataGrid__beforeOpenContentMenu = function(_, A) {
    var $ = Oolo(this._bodyEl, A.htmlEvent.target);
    if ($) _.fire("BeforeOpen", A);
    else A.cancel = true
};
mini_DataGrid_Ol0l10 = function(B) {
    var A = {
        popupEl: this.el,
        htmlEvent: B,
        cancel: false
    };
    if (Oolo(this._columnsEl, B.target)) {
        if (this.headerContextMenu) {
            this.headerContextMenu.fire("BeforeOpen", A);
            if (A.cancel == true) return;
            this.headerContextMenu.fire("opening", A);
            if (A.cancel == true) return;
            this.headerContextMenu.showAtPos(B.pageX, B.pageY);
            this.headerContextMenu.fire("Open", A)
        }
    } else {
        var $ = oOlO(B.target, "mini-grid-detailRow");
        if ($ && Oolo(this.el, $)) return;
        var _ = oOlO(B.target, "mini-tree-nodeshow");
        if (!_ && this.type == "tree") return;
        if (this.contextMenu) {
            this._beforeOpenContentMenu(this.contextMenu, A);
            if (A.cancel == true) return;
            this.contextMenu.fire("opening", A);
            if (A.cancel == true) return;
            this.contextMenu.showAtPos(B.pageX, B.pageY);
            this.contextMenu.fire("Open", A)
        }
    }
    return false
};
mini_DataGrid_setHeaderContextMenu = function($) {
    var _ = this.o000Oo($);
    if (!_) return;
    if (this.headerContextMenu !== _) {
        this.headerContextMenu = _;
        this.headerContextMenu.owner = this;
        mini.on(this.el, "contextmenu", this.Ol0l10, this)
    }
};
mini_DataGrid_getHeaderContextMenu = function() {
    return this.headerContextMenu
};
mini_DataGrid_setSelectOnRightClick = function($) {
    this.selectOnRightClick = $
};
mini_DataGrid_getSelectOnRightClick = function() {
    return this.selectOnRightClick
};
mini_DataGrid__getlOOoO = function() {

    return this._dataSource._originals
};
mini_DataGrid__setlOOoO = function($) {
    this._dataSource._originals = $
};
mini_DataGrid__setOlo0 = function($) {
    this._dataSource.Olo0 = $
};
mini_DataGrid__setOo0o = function($) {
    this._dataSource.Oo0o = $
};
mini_DataGrid__set_autoCreateNewID = function($) {
    this._dataSource._autoCreateNewID = $
};
mini_DataGrid_getAttrs = function(el) {
    var attrs = mini.DataGrid.superclass.getAttrs.call(this, el),
        cs = mini.getChildNodes(el);
    for (var i = 0, l = cs.length; i < l; i++) {
        var node = cs[i],
            property = jQuery(node).attr("property");
        if (!property) continue;
        property = property.toLowerCase();
        if (property == "columns") {
            attrs.columns = mini.oolo(node);
            mini.removeNode(node)
        } else if (property == "data") {
            attrs.data = node.innerHTML;
            mini.removeNode(node)
        }
    }
    mini._ParseString(el, attrs, ["oncelleditenter", "onselect", "ondeselect", "onbeforeselect", "onbeforedeselect", "url", "sizeList", "bodyCls", "bodyStyle", "footerCls", "footerStyle", "pagerCls", "pagerStyle", "onheadercellclick", "onheadercellmousedown", "onheadercellcontextmenu", "onrowdblclick", "onrowclick", "onrowmousedown", "onrowcontextmenu", "onrowmouseenter", "onrowmouseleave", "oncellclick", "oncellmousedown", "oncellcontextmenu", "oncelldblclick", "onbeforeload", "onpreload", "onloaderror", "onload", "onupdate", "ondrawcell", "oncellbeginedit", "onselectionchanged", "ondrawgroup", "onbeforeshowrowdetail", "onbeforehiderowdetail", "onshowrowdetail", "onhiderowdetail", "idField", "valueField", "pager", "oncellcommitedit", "oncellendedit", "headerContextMenu", "loadingMsg", "emptyText", "cellEditAction", "sortMode", "oncellvalidation", "onsort", "ondrawsummarycell", "ondrawgroupsummarycell", "onresize", "oncolumnschanged", "ajaxMethod", "ajaxOptions", "onaddrow", "onupdaterow", "onremoverow", "onmoverow", "onbeforeaddrow", "onbeforeupdaterow", "onbeforeremoverow", "onbeforemoverow", "pageIndexField", "pageSizeField", "sortFieldField", "sortOrderField", "startField", "limitField", "totalField", "dataField", "sortField", "sortOrder", "stackTraceField", "errorField", "errorMsgField", "pagerButtons", "onbeforegroupclick", "dropAction", "sizeText", "pagerType"]);
    mini._ParseBool(el, attrs, ["showColumns", "showFilterRow", "showSummaryRow", "showPager", "showFooter", "enableGroupOrder", "showHGridLines", "showVGridLines", "showSortIcon", "allowSortColumn", "allowMoveColumn", "allowResizeColumn", "fitColumns", "showLoading", "multiSelect", "allowAlternating", "resultAsData", "allowRowSelect", "allowUnselect", "onlyCheckSelection", "allowHotTrackOut", "enableHotTrack", "showPageIndex", "showPageSize", "showTotalCount", "checkSelectOnLoad", "allowResize", "autoLoad", "autoHideRowDetail", "allowCellSelect", "allowCellEdit", "allowCellWrap", "allowHeaderWrap", "selectOnLoad", "virtualScroll", "collapseGroupOnLoad", "showGroupSummary", "showEmptyText", "allowCellValid", "showModified", "showColumnsMenu", "showPageInfo", "showReloadButton", "showNewRow", "editNextOnEnterKey", "createOnEnter", "skipReadOnlyCell", "ajaxAsync", "allowDrag", "allowDrop", "allowLeafDropIn", "editNextRowCell", "fixedRowHeight", "showCellTip", "showPagerButtonText", "showPagerButtonIcon", "groupTitleCollapsible", "navEditMode", "selectOnRightClick"]);
    mini._ParseInt(el, attrs, ["frozenStartColumn", "frozenEndColumn", "pageSizeWidth", "pageIndex", "pageSize", "defaultRowHeight", "defaultColumnWidth", "wheelIncrement"]);
    if (typeof attrs.ajaxOptions == "string") attrs.ajaxOptions = eval("(" + attrs.ajaxOptions + ")");
    if (typeof attrs.sizeList == "string") attrs.sizeList = eval("(" + attrs.sizeList + ")");
    if (!attrs.idField && attrs.valueField) attrs.idField = attrs.valueField;
    if (attrs.pagerButtons) attrs.pagerButtons = mini.byId(attrs.pagerButtons);
    return attrs
};
mini_Password_getValue = function() {
    return this._textEl.value
};
mini_MenuItem_set = function($) {
    if (typeof $ == "string") return this;
    this.ownerMenu = $.ownerMenu;
    delete $.ownerMenu;
    mini.MenuItem.superclass.set.call(this, $);
    return this
};
mini_MenuItem__create = function() {
    var $ = this.el = document.createElement("div");
    this.el.className = "mini-menuitem";
    this.el.innerHTML = "<div class=\"mini-menuitem-inner\"><div class=\"mini-menuitem-icon mini-iconfont\"></div><div class=\"mini-menuitem-text\"></div><div class=\"mini-menuitem-allow\"></div></div>";
    this._innerEl = this.el.firstChild;
    this.o01O0 = this._innerEl.firstChild;
    this._textEl = this._innerEl.childNodes[1];
    this.allowEl = this._innerEl.lastChild
};
mini_MenuItem__initEvents = function() {

    mini._BindEvents(function() {
        OooO(this.el, "mouseover", this.__OnMouseOver, this)
    }, this)
};
mini_MenuItem_o0oO = function() {
    if (this.l0l1O1) return;
    this.l0l1O1 = true;
    OooO(this.el, "click", this.__OnClick, this);
    OooO(this.el, "mouseup", this.__mouseup, this);
    OooO(this.el, "mouseout", this.__OnMouseOut, this)
};
mini_MenuItem_destroy = function($) {
    if (this.menu) this.menu.destroy();
    this.menu = this._innerEl = this.o01O0 = this._textEl = this.allowEl = null;
    mini.MenuItem.superclass.destroy.call(this, $)
};
mini_MenuItem_within = function($) {
    if (Oolo(this.el, $.target)) return true;
    if (this.menu && this.menu.within($)) return true;
    return false
};
mini_MenuItem__getIconImg = function() {
    return this.img && this.getTopMenu() ? this.getTopMenu().imgPath + this.img : this.img
};
mini_MenuItem__doUpdateIcon = function() {
    var _ = this._getIconImg(),
        $ = !!(this.iconStyle || this.iconCls || this.checkOnClick || _);
    if (this.o01O0) {
        mini.setStyle(this.o01O0, this.iconStyle);
        mini.addClass(this.o01O0, this.iconCls);
        if (_ && !this.checked) {
            var A = "background-image:url(" + _ + ")";
            mini.setStyle(this.o01O0, A)
        }
        if (this.checked) jQuery(this.o01O0).css({
            "background-image": ""
        });
        this.o01O0.style.display = $ ? "block" : "none"
    }
    if (this.iconPosition == "top") mini.addClass(this.el, "mini-menuitem-icontop");
    else mini.removeClass(this.el, "mini-menuitem-icontop")
};
mini_MenuItem__hasChildMenu = function() {
    return this.menu && this.menu.items.length > 0
};
mini_MenuItem_doUpdate = function() {

    if (this._textEl) this._textEl.innerHTML = this.text;
    this._doUpdateIcon();
    if (this.checked) {
        mini.addClass(this.el, this.ll0O1o);
        jQuery(this.o01O0).css({
            "background-image": ""
        })
    } else mini.removeClass(this.el, this.ll0O1o);
    if (this.allowEl)
        if (this._hasChildMenu()) this.allowEl.style.display = "block";
        else this.allowEl.style.display = "none"
};
mini_MenuItem_setText = function($) {

    this.text = $;
    if (this._textEl) this._textEl.innerHTML = this.text
};
mini_MenuItem_getText = function() {
    return this.text
};
mini_MenuItem_setIconCls = function($) {

    mini.removeClass(this.o01O0, this.iconCls);
    this.iconCls = $;
    this._doUpdateIcon()
};
mini_MenuItem_getIconCls = function() {
    return this.iconCls
};
mini_MenuItem_setImg = function($) {

    this.img = $;
    this._doUpdateIcon()
};
mini_MenuItem_getImg = function() {
    return this.img
};
mini_MenuItem_setIconStyle = function($) {
    this.iconStyle = $;
    this._doUpdateIcon()
};
mini_MenuItem_getIconStyle = function() {
    return this.iconStyle
};
mini_MenuItem_setIconPosition = function($) {
    this.iconPosition = $;
    this._doUpdateIcon()
};
mini_MenuItem_getIconPosition = function() {
    return this.iconPosition
};
mini_MenuItem_setCheckOnClick = function($) {
    this.checkOnClick = $;
    if ($) mini.addClass(this.el, "mini-menuitem-showcheck");
    else mini.removeClass(this.el, "mini-menuitem-showcheck");
    this.doUpdate()
};
mini_MenuItem_getCheckOnClick = function() {

    return this.checkOnClick
};
mini_MenuItem_setChecked = function($) {
    if (this.checked != $) {
        this.checked = $;
        this.doUpdate();
        this.fire("checkedchanged")
    }
};
mini_MenuItem_getChecked = function() {
    return this.checked
};
mini_MenuItem_setGroupName = function($) {
    if (this.groupName != $) this.groupName = $
};
mini_MenuItem_getGroupName = function() {


    return this.groupName
};
mini_MenuItem_setChildren = function($) {
    this.setMenu($)
};
mini_MenuItem_setMenu = function($) {
    if (mini.isArray($)) $ = {
        type: "menu",
        items: $
    };
    if (this.menu !== $) {
        $.ownerItem = this;
        this.menu = mini.getAndCreate($);
        this.menu.hide();
        this.menu.ownerItem = this;
        this.doUpdate();
        this.menu.on("itemschanged", this.l1O100, this)
    }
};
mini_MenuItem_getMenu = function() {
    return this.menu
};
mini_MenuItem_showMenu = function() {
    if (this.menu && this.menu.isDisplay() == false) {
        this.menu.setHideAction("outerclick");
        var $ = {
            xAlign: "outright",
            yAlign: "top",
            outXAlign: "outleft",
            outYAlign: "below",
            popupCls: "mini-menu-popup"
        };
        if (this.ownerMenu && this.ownerMenu.vertical == false) {
            $.xAlign = "left";
            $.yAlign = "below";
            $.outXAlign = null
        }
        this.menu.showAtEl(this.el, $);
        this.menu.addCls("mini-menu-open")
    }
};
mini_MenuItem_hideMenu = function() {
    if (this.menu) this.menu.hide()
};

mini_MenuItem_hide = function() {
    this.hideMenu();
    this.setVisible(false)
};
mini_MenuItem_l1O100 = function($) {
    this.doUpdate()
};
mini_MenuItem_getTopMenu = function() {
    if (this.ownerMenu)
        if (this.ownerMenu.ownerItem) return this.ownerMenu.ownerItem.getTopMenu();
        else return this.ownerMenu;
    return null
};
mini_MenuItem_Ol1o1 = function(D) {
    if (this.isReadOnly()) return;
    if (this.checkOnClick)
        if (this.ownerMenu && this.groupName) {
            var B = this.ownerMenu.getGroupItems(this.groupName);
            if (B.length > 0) {
                if (this.checked == false) {
                    for (var _ = 0, C = B.length; _ < C; _++) {
                        var $ = B[_];
                        if ($ != this) $.setChecked(false)
                    }
                    this.setChecked(true)
                }
            } else this.setChecked(!this.checked)
        } else this.setChecked(!this.checked);
    this.fire("click");
    var A = this.getTopMenu();
    if (A) A._OnItemClick(this, D)
};
mini_MenuItem_oOlo0 = function(_) {
    if (this.isReadOnly()) return;
    if (this.ownerMenu) {
        var $ = this;
        setTimeout(function() {
            if ($.isDisplay()) $.ownerMenu.showItemMenu($)
        }, 1)
    }
};
mini_MenuItem_O1l1lo = function($) {
    if (this.isReadOnly()) return;
    this.o0oO();
    mini.addClass(this.el, this._hoverCls);
    this.el.title = this.text;
    if (this._textEl.scrollWidth > this._textEl.clientWidth) this.el.title = this.text;
    else this.el.title = "";
    if (this.ownerMenu)
        if (this.ownerMenu.isVertical() == true) this.ownerMenu.showItemMenu(this);
        else if (this.ownerMenu.hasShowItemMenu()) this.ownerMenu.showItemMenu(this)
};
mini_MenuItem_O11O11 = function($) {
    mini.removeClass(this.el, this._hoverCls)
};
mini_MenuItem_onClick = function(_, $) {
    this.on("click", _, $)
};
mini_MenuItem_onCheckedChanged = function(_, $) {
    this.on("checkedchanged", _, $)
};
mini_MenuItem_getAttrs = function($) {
    var A = mini.MenuItem.superclass.getAttrs.call(this, $),
        _ = jQuery($);
    A.text = $.innerHTML;
    mini._ParseString($, A, ["text", "iconCls", "iconStyle", "iconPosition", "groupName", "onclick", "oncheckedchanged"]);
    mini._ParseBool($, A, ["checkOnClick", "checked"]);
    return A
};
mini_TextArea_doLayout = function() {
    if (!this.canLayout()) return;
    mini.TextArea.superclass.doLayout.call(this);
    var $ = mini.getHeight(this.el);
    if (mini.isIE6) mini.setHeight(this._borderEl, $);
    $ -= 2;
    if ($ < 0) $ = 0;
    this._textEl.style.height = $ + "px"
};
mini_Splitter__create = function() {
    this.el = document.createElement("div");
    this.el.className = "mini-splitter";
    this.el.innerHTML = "<div class=\"mini-splitter-border\"><div id=\"1\" class=\"mini-splitter-pane mini-splitter-pane1\"></div><div id=\"2\" class=\"mini-splitter-pane mini-splitter-pane2\"></div><div class=\"mini-splitter-handler\"></div></div>";
    this._borderEl = this.el.firstChild;
    this.O0lO = this._borderEl.firstChild;
    this.o11Oo1 = this._borderEl.childNodes[1];
    this.o0l01l = this._borderEl.lastChild
};
mini_Splitter__initEvents = function() {
    mini._BindEvents(function() {
        mini.on(this.el, "click", this.__OnClick, this);
        mini.on(this.el, "mousedown", this.__OnMouseDown, this)
    }, this)
};
mini_Splitter_O10O0 = function() {
    this.pane1 = {
        id: "",
        index: 1,
        minSize: 10,
        maxSize: 100000,
        size: "",
        showCollapseButton: false,
        cls: "",
        style: "",
        visible: true,
        expanded: true
    };
    this.pane2 = mini.copyTo({}, this.pane1);
    this.pane2.index = 2
};
mini_Splitter_doUpdate = function() {
    this.doLayout()
};
mini_Splitter_doLayout = function() {
    if (!this.canLayout()) return;
    this.o0l01l.style.cursor = this.allowResize ? "" : "default";
    mini.removeClass(this.el, "mini-splitter-vertical");
    if (this.vertical) mini.addClass(this.el, "mini-splitter-vertical");
    mini.removeClass(this.O0lO, "mini-splitter-pane1-vertical");
    mini.removeClass(this.o11Oo1, "mini-splitter-pane2-vertical");
    if (this.vertical) {
        mini.addClass(this.O0lO, "mini-splitter-pane1-vertical");
        mini.addClass(this.o11Oo1, "mini-splitter-pane2-vertical")
    }
    mini.removeClass(this.o0l01l, "mini-splitter-handler-vertical");
    if (this.vertical) mini.addClass(this.o0l01l, "mini-splitter-handler-vertical");
    var B = this.getHeight(true),
        _ = this.getWidth(true);
    if (!jQuery.boxModel) {
        var Q = mini.getBorders(this._borderEl);
        B = B + Q.top + Q.bottom;
        _ = _ + Q.left + Q.right
    }
    if (_ < 0) _ = 0;
    if (B < 0) B = 0;
    this._borderEl.style.width = _ + "px";
    this._borderEl.style.height = B + "px";
    var $ = this.O0lO,
        C = this.o11Oo1,
        G = jQuery($),
        I = jQuery(C);
    $.style.display = C.style.display = this.o0l01l.style.display = "";
    var D = this.handlerSize;
    this.pane1.size = String(this.pane1.size);
    this.pane2.size = String(this.pane2.size);
    var F = parseFloat(this.pane1.size),
        H = parseFloat(this.pane2.size),
        O = isNaN(F),
        T = isNaN(H),
        N = !isNaN(F) && this.pane1.size.indexOf("%") != -1,
        R = !isNaN(H) && this.pane2.size.indexOf("%") != -1,
        J = !O && !N,
        M = !T && !R,
        P = this.vertical ? B - this.handlerSize : _ - this.handlerSize,
        K = p2Size = 0;
    if (O || T) {
        if (O && T) {
            K = parseInt(P / 2);
            p2Size = P - K
        } else if (J) {
            K = F;
            p2Size = P - K
        } else if (N) {
            K = parseInt(P * F / 100);
            p2Size = P - K
        } else if (M) {
            p2Size = H;
            K = P - p2Size
        } else if (R) {
            p2Size = parseInt(P * H / 100);
            K = P - p2Size
        }
    } else if (N && M) {
        p2Size = H;
        K = P - p2Size
    } else if (J && R) {
        K = F;
        p2Size = P - K
    } else {
        var L = F + H;
        K = parseInt(P * F / L);
        p2Size = P - K
    }
    if (K > this.pane1.maxSize) {
        K = this.pane1.maxSize;
        p2Size = P - K
    }
    if (p2Size > this.pane2.maxSize) {
        p2Size = this.pane2.maxSize;
        K = P - p2Size
    }
    if (K < this.pane1.minSize) {
        K = this.pane1.minSize;
        p2Size = P - K
    }
    if (p2Size < this.pane2.minSize) {
        p2Size = this.pane2.minSize;
        K = P - p2Size
    }
    if (this.pane1.expanded == false) {
        p2Size = P;
        K = 0;
        $.style.display = "none"
    } else if (this.pane2.expanded == false) {
        K = P;
        p2Size = 0;
        C.style.display = "none"
    }
    if (this.pane1.visible == false) {
        p2Size = P + D;
        K = D = 0;
        $.style.display = "none";
        this.o0l01l.style.display = "none"
    } else if (this.pane2.visible == false) {
        K = P + D;
        p2Size = D = 0;
        C.style.display = "none";
        this.o0l01l.style.display = "none"
    }
    if (this.vertical) {
        mini.setWidth($, _);
        mini.setWidth(C, _);
        mini.setHeight($, K);
        mini.setHeight(C, p2Size);
        C.style.top = (K + D) + "px";
        this.o0l01l.style.left = "0px";
        this.o0l01l.style.top = K + "px";
        mini.setWidth(this.o0l01l, _);
        mini.setHeight(this.o0l01l, this.handlerSize);
        $.style.left = "0px";
        C.style.left = "0px"
    } else {
        mini.setWidth($, K);
        mini.setWidth(C, p2Size);
        mini.setHeight($, B);
        mini.setHeight(C, B);
        C.style.left = (K + D) + "px";
        this.o0l01l.style.top = "0px";
        this.o0l01l.style.left = K + "px";
        mini.setWidth(this.o0l01l, this.handlerSize);
        mini.setHeight(this.o0l01l, B);
        $.style.top = "0px";
        C.style.top = "0px"
    }
    var S = "<div class=\"mini-splitter-handler-buttons\">";
    if (!this.pane1.expanded || !this.pane2.expanded) {
        if (!this.pane1.expanded) {
            if (this.pane1.showCollapseButton) S += "<a id=\"1\" class=\"mini-splitter-pane2-button\" title=\"" + (this.pane1.collapseTooltip || this.pane1.tooltip || "") + "\"></a>"
        } else if (this.pane2.showCollapseButton) S += "<a id=\"2\" class=\"mini-splitter-pane1-button\" title=\"" + (this.pane2.collapseTooltip || this.pane2.tooltip || "") + "\"></a>"
    } else {
        if (this.pane1.showCollapseButton) S += "<a id=\"1\" class=\"mini-splitter-pane1-button\" title=\"" + (this.pane1.tooltip || "") + "\"></a>";
        if (this.allowResize)
            if ((!this.pane1.showCollapseButton && !this.pane2.showCollapseButton)) S += "<span class=\"mini-splitter-resize-button\"></span>";
        if (this.pane2.showCollapseButton) S += "<a id=\"2\" class=\"mini-splitter-pane2-button\" title=\"" + (this.pane2.tooltip || "") + "\"></a>"
    }
    S += "</div>";
    this.o0l01l.innerHTML = S;
    var E = this.o0l01l.firstChild;
    E.style.display = this.showHandleButton ? "" : "none";
    var A = mini.getBox(E);
    if (this.vertical) E.style.marginLeft = -A.width / 2 + "px";
    else E.style.marginTop = -A.height / 2 + "px";
    if (!this.pane1.visible || !this.pane2.visible || !this.pane1.expanded || !this.pane2.expanded) mini.addClass(this.o0l01l, "mini-splitter-nodrag");
    else mini.removeClass(this.o0l01l, "mini-splitter-nodrag");
    mini.layout(this._borderEl);
    this.fire("layout")
};
mini_Splitter_getPaneBox = function($) {
    var _ = this.getPaneEl($);
    if (!_) return null;
    return mini.getBox(_)
};
mini_Splitter_getPane = function($) {
    if ($ == 1) return this.pane1;
    else if ($ == 2) return this.pane2;
    return $
};
mini_Splitter_setPanes = function(_) {
    if (!mini.isArray(_)) return;
    for (var $ = 0; $ < 2; $++) {
        var A = _[$];
        this.updatePane($ + 1, A)
    }
};
mini_Splitter_setPaneControls = function(_, A) {
    var $ = this.getPane(_);
    if (!$) return;
    var B = this.getPaneEl(_);
    __mini_setControls(A, B, this)
};
mini_Splitter_getPaneEl = function($) {
    if ($ == 1) return this.O0lO;
    return this.o11Oo1
};
mini_Splitter_updatePane = function(_, F) {
    var $ = this.getPane(_);
    if (!$) return;
    mini.copyTo($, F);
    var B = this.getPaneEl(_),
        C = $.body;
    delete $.body;
    if (C) {
        if (!mini.isArray(C)) C = [C];
        for (var A = 0, E = C.length; A < E; A++) mini.append(B, C[A])
    }
    if ($.bodyParent) {
        var D = $.bodyParent;
        while (D.firstChild) B.appendChild(D.firstChild)
    }
    delete $.bodyParent;
    B.id = $.id;
    mini.setStyle(B, $.style);
    mini.addClass(B, $["class"]);
    if ($.cls) mini.addClass(B, $.cls);
    if ($.controls) {
        var _ = $ == this.pane1 ? 1 : 2;
        this.setPaneControls(_, $.controls);
        delete $.controls
    }
    this.doUpdate()
};
mini_Splitter_setShowHandleButton = function($) {
    this.showHandleButton = $;
    this.doUpdate()
};
mini_Splitter_getShowHandleButton = function($) {
    return this.showHandleButton
};
mini_Splitter_setVertical = function($) {
    this.vertical = $;
    this.doUpdate()
};
mini_Splitter_getVertical = function() {
    return this.vertical
};
mini_Splitter_expandPane = function(_) {

    var $ = this.getPane(_);
    if (!$) return;
    $.expanded = true;
    this.doUpdate();
    var A = {
        pane: $,
        paneIndex: this.pane1 == $ ? 1 : 2
    };
    this.fire("expand", A)
};
mini_Splitter_collapsePane = function(_) {

    var $ = this.getPane(_);
    if (!$) return;
    $.expanded = false;
    var A = $ == this.pane1 ? this.pane2 : this.pane1;
    if (A.expanded == false) {
        A.expanded = true;
        A.visible = true
    }
    this.doUpdate();
    var B = {
        pane: $,
        paneIndex: this.pane1 == $ ? 1 : 2
    };
    this.fire("collapse", B)
};
mini_Splitter_togglePane = function(_) {

    var $ = this.getPane(_);
    if (!$) return;
    if ($.expanded) this.collapsePane($);
    else this.expandPane($)
};
mini_Splitter_showPane = function(_) {
    var $ = this.getPane(_);
    if (!$) return;
    $.visible = true;
    this.doUpdate()
};
mini_Splitter_hidePane = function(_) {
    var $ = this.getPane(_);
    if (!$) return;
    $.visible = false;
    var A = $ == this.pane1 ? this.pane2 : this.pane1;
    if (A.visible == false) {
        A.expanded = true;
        A.visible = true
    }
    this.doUpdate()
};
mini_Splitter_setAllowResize = function($) {
    if (this.allowResize != $) {
        this.allowResize = $;
        this.doLayout()
    }
};
mini_Splitter_getAllowResize = function() {
    return this.allowResize
};
mini_Splitter_setHandlerSize = function($) {
    if (this.handlerSize != $) {
        this.handlerSize = $;
        this.doLayout()
    }
};
mini_Splitter_getHandlerSize = function() {
    return this.handlerSize
};
mini_Splitter_Ol1o1 = function(B) {

    var A = B.target;
    if (!Oolo(this.o0l01l, A)) return;
    var _ = parseInt(A.id),
        $ = this.getPane(_),
        B = {
            pane: $,
            paneIndex: _,
            cancel: false
        };
    if ($.expanded) this.fire("beforecollapse", B);
    else this.fire("beforeexpand", B);
    if (B.cancel == true) return;
    if (A.className == "mini-splitter-pane1-button") this.togglePane(_);
    else if (A.className == "mini-splitter-pane2-button") this.togglePane(_)
};
mini_Splitter_lo101 = function($, _) {
    this.fire("buttonclick", {
        pane: $,
        index: this.pane1 == $ ? 1 : 2,
        htmlEvent: _
    })
};
mini_Splitter_onButtonClick = function(_, $) {
    this.on("buttonclick", _, $)
};
mini_Splitter_olol = function(A) {

    var _ = A.target;
    if (!this.allowResize) return;
    if (!this.pane1.visible || !this.pane2.visible || !this.pane1.expanded || !this.pane2.expanded) return;
    if (Oolo(this.o0l01l, _))
        if (_.className == "mini-splitter-pane1-button" || _.className == "mini-splitter-pane2-button");
        else {
            var $ = this.l11o10();
            $.start(A)
        }
};
mini_Splitter_l11o10 = function() {
    if (!this.drag) this.drag = new mini.Drag({
        capture: true,
        onStart: mini.createDelegate(this.O0oo, this),
        onMove: mini.createDelegate(this.l1olo, this),
        onStop: mini.createDelegate(this.lO1011, this)
    });
    return this.drag
};
mini_Splitter_O0oo = function($) {
    this.handlerBox = mini.getBox(this.o0l01l);
    this.Oool0o = mini.append(document.body, "<div class=\"mini-resizer-mask\"></div>");
    this.O0Ool = mini.append(document.body, "<div class=\"mini-proxy\"></div>");
    this.O0Ool.style.cursor = this.vertical ? "n-resize" : "w-resize";
    this.elBox = mini.getBox(this._borderEl, true);
    mini.setBox(this.O0Ool, this.handlerBox)
};
mini_Splitter_l1olo = function(C) {
    if (!this.handlerBox) return;
    if (!this.elBox) this.elBox = mini.getBox(this._borderEl, true);
    var B = this.elBox.width,
        D = this.elBox.height,
        E = this.handlerSize,
        I = this.vertical ? D - this.handlerSize : B - this.handlerSize,
        A = this.pane1.minSize,
        F = this.pane1.maxSize,
        $ = this.pane2.minSize,
        G = this.pane2.maxSize;
    if (this.vertical == true) {
        var _ = C.now[1] - C.init[1],
            H = this.handlerBox.y + _;
        if (H - this.elBox.y > F) H = this.elBox.y + F;
        if (H + this.handlerBox.height < this.elBox.bottom - G) H = this.elBox.bottom - G - this.handlerBox.height;
        if (H - this.elBox.y < A) H = this.elBox.y + A;
        if (H + this.handlerBox.height > this.elBox.bottom - $) H = this.elBox.bottom - $ - this.handlerBox.height;
        mini.setY(this.O0Ool, H)
    } else {
        var J = C.now[0] - C.init[0],
            K = this.handlerBox.x + J;
        if (K - this.elBox.x > F) K = this.elBox.x + F;
        if (K + this.handlerBox.width < this.elBox.right - G) K = this.elBox.right - G - this.handlerBox.width;
        if (K - this.elBox.x < A) K = this.elBox.x + A;
        if (K + this.handlerBox.width > this.elBox.right - $) K = this.elBox.right - $ - this.handlerBox.width;
        mini.setX(this.O0Ool, K)
    }
};
mini_Splitter_lO1011 = function(_) {
    var $ = this.elBox.width,
        B = this.elBox.height,
        C = this.handlerSize,
        D = parseFloat(this.pane1.size),
        E = parseFloat(this.pane2.size),
        I = isNaN(D),
        N = isNaN(E),
        J = !isNaN(D) && this.pane1.size.indexOf("%") != -1,
        M = !isNaN(E) && this.pane2.size.indexOf("%") != -1,
        G = !I && !J,
        K = !N && !M,
        L = this.vertical ? B - this.handlerSize : $ - this.handlerSize,
        A = mini.getBox(this.O0Ool),
        H = A.x - this.elBox.x,
        F = L - H;
    if (this.vertical) {
        H = A.y - this.elBox.y;
        F = L - H
    }
    if (I || N) {
        if (I && N) {
            D = parseFloat(H / L * 100).toFixed(1);
            this.pane1.size = D + "%"
        } else if (G) {
            D = H;
            this.pane1.size = D
        } else if (J) {
            D = parseFloat(H / L * 100).toFixed(1);
            this.pane1.size = D + "%"
        } else if (K) {
            E = F;
            this.pane2.size = E
        } else if (M) {
            E = parseFloat(F / L * 100).toFixed(1);
            this.pane2.size = E + "%"
        }
    } else if (J && K) this.pane2.size = F;
    else if (G && M) this.pane1.size = H;
    else {
        this.pane1.size = parseFloat(H / L * 100).toFixed(1);
        this.pane2.size = 100 - this.pane1.size
    }
    jQuery(this.O0Ool).remove();
    jQuery(this.Oool0o).remove();
    this.Oool0o = null;
    this.O0Ool = null;
    this.elBox = this.handlerBox = null;
    this.doLayout();
    this.fire("resize")
};
mini_Splitter_getAttrs = function(B) {
    var G = mini.Splitter.superclass.getAttrs.call(this, B);
    mini._ParseString(B, G, ["onexpand", "oncollapse", "onresize"]);
    mini._ParseBool(B, G, ["allowResize", "vertical", "showHandleButton"]);
    mini._ParseInt(B, G, ["handlerSize"]);
    var A = [],
        F = mini.getChildNodes(B);
    for (var _ = 0, E = 2; _ < E; _++) {
        var C = F[_],
            D = jQuery(C),
            $ = {};
        A.push($);
        if (!C) continue;
        $.style = C.style.cssText;
        mini._ParseString(C, $, ["cls", "size", "id", "class", "tooltip", "collapseTooltip"]);
        mini._ParseBool(C, $, ["visible", "expanded", "showCollapseButton"]);
        mini._ParseInt(C, $, ["minSize", "maxSize", "handlerSize"]);
        $.bodyParent = C
    }
    G.panes = A;
    return G
};

mini_DatePicker_setMaxDate = function(value) {
    this.maxDate = value;
};
mini_ComboBox__initInput = function() {
    var $ = this;
    if (isFirefox) this._textEl.oninput = function() {
        $.l0111l()
    }
};
mini_ComboBox_set = function(B) {
    if (typeof B == "string") return this;
    var _ = B.text;
    delete B.text;
    var $ = B.value;
    delete B.value;
    var C = B.url;
    delete B.url;
    var A = B.data;
    delete B.data;
    mini.ComboBox.superclass.set.call(this, B);
    if (!mini.isNull(A)) {
        this.setData(A);
        B.data = A
    }
    if (!mini.isNull(C)) {
        this.setUrl(C);
        B.url = C
    }
    if (!mini.isNull($)) {
        this.setValue($);
        B.value = $
    }
    if (!mini.isNull(_)) this.setText(_);
    return this
};
mini_ComboBox__createPopup = function() {
    mini.ComboBox.superclass._createPopup.call(this);
    this.loo01 = new mini.ListBox();
    this.loo01.setBorderStyle("border:0;");
    this.loo01.setStyle("width:100%;height:auto;");
    this.loo01.render(this.popup._contentEl);
    this.loo01.on("itemclick", this.olloo, this);
    this.loo01.on("drawcell", this.__OnItemDrawCell, this);
    var $ = this;
    this.loo01.on("beforeload", function(_) {
        $.fire("beforeload", _)
    }, this);
    this.loo01.on("preload", function(_) {
        $.fire("preload", _)
    }, this);
    this.loo01.on("load", function(_) {
        $.data = _.data;
        $.fire("load", _)
    }, this);
    this.loo01.on("loaderror", function(_) {
        $.fire("loaderror", _)
    }, this)
};
mini_ComboBox_showPopup = function() {
    var _ = {
        cancel: false
    };
    this.fire("beforeshowpopup", _);
    this._firebeforeshowpopup = false;
    if (_.cancel == true) return;
    this.loo01.setHeight("auto");
    mini.ComboBox.superclass.showPopup.call(this);
    var $ = this.popup.el.style.height;
    if ($ == "" || $ == "auto") this.loo01.setHeight("auto");
    else this.loo01.setHeight("100%");
    this.loo01.setValueInCheckOrder(this.valueInCheckOrder);
    this.loo01.setValue(this.value)
};
mini_ComboBox_deselect = function($) {
    this.loo01.deselect($);
    var A = this.loo01.getSelecteds(),
        _ = this.loo01.ll0l0(A);
    this.setValue(_[0]);
    this.setText(_[1])
};
mini_ComboBox_select = function($) {
    this.loo01.deselectAll();
    $ = this.getItem($);
    if ($) {
        this.loo01.select($);
        this.olloo({
            item: $
        }, false);
        if (this.changeOnSelectMethod) this.Ol11o()
    }
};
mini_ComboBox_selects = function(_) {
    if (!_) return;
    var $ = this.loo01.ll0l0(_);
    this.setValue($[0]);
    this.loo01.setValue(this.value)
};
mini_ComboBox_getItem = function($) {
    return typeof $ == "object" ? $ : this.data[$]
};
mini_ComboBox_indexOf = function($) {

    return this.data.indexOf($)
};
mini_ComboBox_getAt = function($) {
    return this.data[$]
};
mini_ComboBox_load = function($) {
    if (typeof $ == "string") this.setUrl($);
    else this.setData($)
};
mini_ComboBox__eval = function(_) {

    return eval("(" + _ + ")")
};
mini_ComboBox_setData = function($) {
    if (typeof $ == "string") $ = this._eval($);
    if (!mini.isArray($)) $ = [];
    this.loo01.setData($);
    this.data = this.loo01.data;
    this.doDataChange()
};
mini_ComboBox_getData = function() {
    return this.data
};
mini_ComboBox_setClearOnLoad = function($) {

    this.clearOnLoad = $
};
mini_ComboBox_getClearOnLoad = function() {
    return this.clearOnLoad
};
mini_ComboBox_doDataChange = function() {
    var A = this.loo01.ll0l0(this.value),
        $ = A[0],
        _ = A[1];
    if ($ === "" && !this.clearOnLoad) {
        $ = this.value;
        _ = this.text;
        this.value = null
    }
    this.text = this._textEl.value = _;
    this.setValue($)
};
mini_ComboBox_setUrl = function($) {
    this.getPopup();
    this.loo01.setUrl($);
    this.url = this.loo01.url;
    this.data = this.loo01.data;
    this.doDataChange()
};
mini_ComboBox_getUrl = function() {

    return this.url
};
mini_ComboBox_setValueField = function($) {
    this.valueField = $;
    if (this.loo01) this.loo01.setValueField($)
};
mini_ComboBox_getValueField = function() {
    return this.valueField
};
mini_ComboBox_setTextField = function($) {

    if (this.loo01) this.loo01.setTextField($);
    this.textField = $
};

mini_TreeSelect_oo00ll = function(e) {}
mini_ComboBox_getTextField = function() {
    return this.textField
};
mini_ComboBox_setPinyinField = function($) {

    this.pinyinField = $
};
mini_ComboBox_getPinyinField = function() {

    return this.pinyinField
};
mini_ComboBox_setDisplayField = function($) {
    this.setTextField($)
};
mini_ComboBox_setDataField = function($) {
    if (this.loo01) this.loo01.setDataField($);
    this.dataField = $
};
mini_ComboBox_getDataField = function() {
    return this.dataField
};
mini_ComboBox_setValueInCheckOrder = function($) {
    this.valueInCheckOrder = $
};
mini_ComboBox_getValueInCheckOrder = function() {
    return this.valueInCheckOrder
};
mini_ComboBox_setValue = function($) {
    if (mini.isNull($)) $ = "";
    var A = this.loo01.ll0l0($),
        B = A[0],
        _ = A[1];
    if (_ === "" || mini.isNull(_)) _ = $;
    if (this.valueFromSelect && (B === "" || mini.isNull(B))) $ = _ = "";
    this.value = $;
    this.ll10l.value = this.value;
    this.text = this._textEl.value = _;
    this.o1olOo()
};
mini_ComboBox_setMultiSelect = function($) {
    if (this.multiSelect != $) {
        this.multiSelect = $;
        if (this.loo01) {
            this.loo01.setMultiSelect($);
            this.loo01.setShowCheckBox($)
        }
    }
};
mini_ComboBox_getMultiSelect = function() {
    return this.multiSelect
};
mini_ComboBox_setColumns = function($) {
    if (!mini.isArray($)) $ = [];
    this.columns = $;
    this.loo01.setColumns($)
};
mini_ComboBox_getColumns = function() {
    return this.columns
};
mini_ComboBox_setShowNullItem = function($) {
    if (this.showNullItem != $) {
        this.showNullItem = $;
        this.loo01.setShowNullItem($)
    }
};
mini_ComboBox_getShowNullItem = function() {
    return this.showNullItem
};
mini_ComboBox_setNullItemText = function($) {
    if (this.nullItemText != $) {
        this.nullItemText = $;
        this.loo01.setNullItemText($)
    }
};
mini_ComboBox_getNullItemText = function() {
    return this.nullItemText
};
mini_ComboBox_setValueFromSelect = function($) {
    this.valueFromSelect = $
};
mini_ComboBox_getValueFromSelect = function() {
    return this.valueFromSelect
};
mini_ComboBox_Ol11o = function() {

    if (this.validateOnChanged) this._tryValidate();
    var _ = this;

    function $() {
        var $ = _.getValue(),
            B = _.getSelecteds(),
            A = B[0];
        _.fire("valuechanged", {
            value: $,
            selecteds: B,
            selected: A
        })
    }
    setTimeout(function() {
        $()
    }, 50)
};
mini_ComboBox_getSelecteds = function() {
    return this.loo01.findItems(this.value)
};
mini_ComboBox_getSelected = function() {
    return this.getSelecteds()[0]
};
mini_ComboBox___OnItemDrawCell = function($) {
    this.fire("drawcell", $)
};
mini_ComboBox_olloo = function(E, C) {
    var D = {
        item: E.item,
        cancel: false
    };
    if (C !== false) {
        this.fire("beforeitemclick", D);
        if (D.cancel) return
    }
    var B = this.loo01.getSelecteds(),
        A = this.loo01.ll0l0(B),
        $ = this.getValue();
    this.setValue(A[0]);
    this.setText(A[1]);
    if (E)
        if (C !== false) {
            if ($ != this.getValue()) {
                var _ = this;
                setTimeout(function() {
                    _.Ol11o()
                }, 1)
            }
            if (!this.multiSelect) this.hidePopup();
            this.focus();
            this.fire("itemclick", {
                item: E.item
            })
        }
};
mini_ComboBox_O10l1 = function(F, A) {
    var E = {
        htmlEvent: F
    };
    this.fire("keydown", E);
    if (F.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) return false;
    if (F.keyCode == 9) {
        if (this.isShowPopup()) {
            this._autoBlur = false;
            this.hidePopup();
            delete this._autoBlur
        }
        return
    }
    if (this.isReadOnly()) return;
    switch (F.keyCode) {
        case 27:
            F.preventDefault();
            if (this.isShowPopup()) F.stopPropagation();
            this.hidePopup();
            this.focus();
            break;
        case 13:
            if (this.isShowPopup()) {
                F.preventDefault();
                F.stopPropagation();
                var _ = this.loo01.getFocusedIndex(),
                    $ = this.loo01.getAt(_);
                if ($ && $.enabled !== false) {
                    if (_ != -1) {
                        var D = {
                            item: $,
                            cancel: false
                        };
                        this.fire("beforeitemclick", D);
                        if (D.cancel == false) {
                            if (this.multiSelect);
                            else {
                                this.loo01.deselectAll();
                                this.loo01.select($)
                            }
                            var C = this.loo01.getSelecteds(),
                                B = this.loo01.ll0l0(C);
                            this.setValue(B[0]);
                            this.setText(B[1]);
                            this.Ol11o()
                        }
                    }
                    this.hidePopup();
                    this.focus()
                }
            } else this.fire("enter", E);
            break;
        case 37:
            break;
        case 38:
            F.preventDefault();
            _ = this.loo01.getFocusedIndex();
            if (_ == -1) {
                _ = 0;
                if (!this.multiSelect) {
                    $ = this.loo01.findItems(this.value)[0];
                    if ($) _ = this.loo01.indexOf($)
                }
            }
            if (this.isShowPopup())
                if (!this.multiSelect) {
                    _ -= 1;
                    if (_ < 0) _ = 0;
                    this.loo01.l1O000(_, true)
                }
            break;
        case 39:
            break;
        case 40:
            F.preventDefault();
            _ = this.loo01.getFocusedIndex();
            if (_ == -1) {
                _ = -1;
                if (!this.multiSelect) {
                    $ = this.loo01.findItems(this.value)[0];
                    if ($) _ = this.loo01.indexOf($)
                }
            }
            if (this.isShowPopup()) {
                if (!this.multiSelect) {
                    _ += 1;
                    if (_ > this.loo01.getCount() - 1) _ = this.loo01.getCount() - 1;
                    this.loo01.l1O000(_, true)
                }
            } else if (this.keyNavEnabled) {
                this.showPopup();
                if (!this.multiSelect) this.loo01.l1O000(_, true)
            }
            break;
        default:
            if (this.allowInput == false);
            else this.l0111l(this._textEl.value);
            break
    }
};
mini_ComboBox_OoOlO1 = function($) {
    this.fire("keyup", {
        htmlEvent: $
    })
};
mini_ComboBox_o1oO = function($) {
    this.fire("keypress", {
        htmlEvent: $
    })
};
mini_ComboBox_l0111l = function(_) {
    var $ = this;
    setTimeout(function() {
        var A = $._textEl.value;
        if (A != _) $.l100O(A)
    }, 10)
};
mini_ComboBox_l100O = function(B) {
    if (!this.autoFilter) return;
    if (this.multiSelect == true) return;
    var A = [];
    B = B.toUpperCase();
    for (var C = 0, F = this.data.length; C < F; C++) {
        var _ = this.data[C],
            D = mini._getMap(this.textField, _),
            G = mini._getMap(this.pinyinField, _);
        D = D ? String(D).toUpperCase() : "";
        G = G ? String(G).toUpperCase() : "";
        if (D.indexOf(B) != -1 || G.indexOf(B) != -1) A.push(_)
    }
    this.loo01.setData(A);
    this._filtered = true;
    if (B !== "" || this.isShowPopup()) {
        this.showPopup();
        var $ = 0;
        if (this.loo01.getShowNullItem()) $ = 1;
        var E = this;
        E.loo01.l1O000($, true)
    }
};
mini_ComboBox_oo11o = function($) {
    if (this.valueFromSelect) this.O00l10();
    if (this._textEl.value == "") this.loo01.o11l();
    if (this._filtered) {
        this._filtered = false;
        if (this.loo01.el) this.loo01.setData(this.data)
    }
    this.__doFocusCls();
    this.fire("hidepopup")
};
mini_ComboBox_findItems = function($) {
    return this.loo01.findItems($)
};
mini_ComboBox_O00l10 = function(J) {

    if (this.isShowPopup()) return;
    if (this.multiSelect == false) {
        var E = this._textEl.value,
            H = this.getData(),
            F = null;
        for (var D = 0, B = H.length; D < B; D++) {
            var $ = H[D],
                I = $[this.textField];
            if (I == E) {
                F = $;
                break
            }
        }
        if (F) {
            this.loo01.setValue(F ? F[this.valueField] : "");
            var C = this.loo01.getValue(),
                A = this.loo01.ll0l0(C),
                _ = this.getValue();
            this.setValue(C);
            this.setText(A[1])
        } else if (this.valueFromSelect) {
            this.setValue("");
            this.setText("")
        } else {
            this.setValue(E);
            this.setText(E)
        }
        if (_ != this.getValue()) {
            var G = this;
            G.Ol11o()
        }
    }
};
mini_ComboBox_setAjaxData = function($) {
    this.ajaxData = $;
    this.loo01.setAjaxData($)
};
mini_ComboBox_setAjaxType = function($) {
    this.ajaxType = $;
    this.loo01.setAjaxType($)
};
mini_ComboBox_setAutoFilter = function($) {
    this.autoFilter = $
};
mini_ComboBox_getAutoFilter = function() {
    return this.autoFilter
};
mini_ComboBox_getAttrs = function(G) {
    var E = mini.ComboBox.superclass.getAttrs.call(this, G);
    mini._ParseString(G, E, ["url", "data", "textField", "valueField", "displayField", "nullItemText", "pinyinField", "ondrawcell", "onbeforeload", "onpreload", "onload", "onloaderror", "onitemclick", "onbeforeitemclick"]);
    mini._ParseBool(G, E, ["multiSelect", "showNullItem", "valueFromSelect", "valueInCheckOrder", "clearOnLoad", "autoFilter"]);
    if (E.displayField) E.textField = E.displayField;
    var C = E.valueField || this.valueField,
        H = E.textField || this.textField;
    if (G.nodeName.toLowerCase() == "select") {
        var I = [];
        for (var F = 0, D = G.length; F < D; F++) {
            var $ = G.options[F],
                _ = {};
            _[H] = $.text;
            _[C] = $.value;
            I.push(_)
        }
        if (I.length > 0) E.data = I
    } else {
        var J = mini.getChildNodes(G);
        for (F = 0, D = J.length; F < D; F++) {
            var A = J[F],
                B = jQuery(A).attr("property");
            if (!B) continue;
            B = B.toLowerCase();
            if (B == "columns") E.columns = mini.oolo(A);
            else if (B == "data") E.data = A.innerHTML
        }
    }
    return E
};
mini_HtmlFile__create = function() {
    mini.HtmlFile.superclass._create.call(this);
    this.llOl1 = mini.append(this.el, "<input type=\"file\" hideFocus class=\"mini-htmlfile-file\" name=\"" + this.name + "\" ContentEditable=false/>");
    mini.on(this._borderEl, "mousemove", this.__mousemove, this);
    mini.on(this.llOl1, "change", this.o11lO, this)
};
mini_HtmlFile_destroy = function($) {
    if (!this.destroyed) {
        mini.clearEvent(this._borderEl);
        mini.clearEvent(this.llOl1)
    }
    mini.HtmlFile.superclass.destroy.call(this, $)
};
mini_HtmlFile_loOOoOHtml = function() {
    var $ = "onmouseover=\"mini.addClass(this,'" + this.O1l0 + "');\" " + "onmouseout=\"mini.removeClass(this,'" + this.O1l0 + "');\"";
    return "<span class=\"mini-buttonedit-button\" " + $ + ">" + this.buttonText + "</span>"
};
mini_HtmlFile_o11lO = function($) {
    this.value = this._textEl.value = this.llOl1.value;
    this.Ol11o();
    $ = {
        htmlEvent: $
    };
    this.fire("fileselect", $)
};
mini_HtmlFile_ol1o0 = function(B) {
    var A = B.pageX,
        _ = B.pageY,
        $ = mini.getBox(this.el);
    A = (A - $.x - 5);
    _ = (_ - $.y - 5);
    if (this.enabled == false) {
        A = -20;
        _ = -20
    }
    this.llOl1.style.display = "";
    this.llOl1.style.left = A + "px";
    this.llOl1.style.top = _ + "px"
};
mini_HtmlFile_O0OO = function(B) {

    if (!this.limitType) return;
    if (B.isValid == false) return;
    if (this.required == false && B.value == "") return;
    var A = B.value.split("."),
        $ = ("*." + A[A.length - 1]).toLowerCase(),
        _ = this.limitType.split(";");
    if (_.length > 0 && _.indexOf($) == -1) {
        B.errorText = this.limitTypeErrorText + this.limitType;
        B.isValid = false
    }
};
mini_HtmlFile_setName = function($) {
    this.name = $;
    mini.setAttr(this.llOl1, "name", this.name)
};
mini_HtmlFile_getValue = function() {

    return this._textEl.value
};
mini_HtmlFile_clear = function() {
    var B = this.llOl1,
        _ = document.createElement("form");
    _.style.position = "absolute";
    _.style.left = "-1000px";
    _.style.top = "-1000px";
    document.body.appendChild(_);
    var A = B.previousSibling;
    _.appendChild(B);
    _.reset();
    $(B).insertAfter(A);
    document.body.removeChild(_)
};
mini_HtmlFile_setButtonText = function($) {
    this.buttonText = $;
    var _ = mini.byClass("mini-buttonedit-button", this.el);
    if (_) _.innerHTML = $
};
mini_HtmlFile_getButtonText = function() {
    return this.buttonText
};
mini_HtmlFile_setLimitType = function($) {
    this.limitType = $
};
mini_HtmlFile_getLimitType = function() {
    return this.limitType
};
mini_HtmlFile_getAttrs = function($) {
    var _ = mini.HtmlFile.superclass.getAttrs.call(this, $);
    mini._ParseString($, _, ["limitType", "buttonText", "limitTypeErrorText", "onfileselect"]);
    return _
};
mini_Calendar_isWeekend = function(_) {
    var $ = _.getDay();
    return $ == 0 || $ == 6
};
mini_Calendar_getFirstDateOfMonth = function($) {
    var $ = new Date($.getFullYear(), $.getMonth(), 1);
    return mini.getWeekStartDate($, this.firstDayOfWeek)
};
mini_Calendar_getShortWeek = function($) {
    return this.daysShort[$]
};
mini_Calendar__create = function() {
    var C = "<tr style=\"width:100%;\"><td style=\"width:100%;\"></td></tr>";
    C += "<tr ><td><div class=\"mini-calendar-footer\">" + "<span style=\"display:inline-block;\"><input name=\"time\" class=\"mini-timespinner mini-calendar-timespinner\" format=\"" + this.timeFormat + "\"/>" + "<span class=\"mini-calendar-footerSpace\"></span></span>" + "<span class=\"mini-calendar-tadayButton\">" + this.todayText + "</span>" + "<span class=\"mini-calendar-footerSpace\"></span>" + "<span class=\"mini-calendar-clearButton\">" + this.clearText + "</span>" + "<span class=\"mini-calendar-okButton\">" + this.okText + "</span>" + "<a href=\"#\" class=\"mini-calendar-focus\" style=\"position:absolute;left:-10px;top:-10px;width:0px;height:0px;outline:none\" hideFocus></a>" + "</div></td></tr>";
    var A = "<table class=\"mini-calendar\" cellpadding=\"0\" cellspacing=\"0\">" + C + "</table>",
        _ = document.createElement("div");
    _.innerHTML = A;
    this.el = _.firstChild;
    var $ = this.el.getElementsByTagName("tr"),
        B = this.el.getElementsByTagName("td");
    this._innerEl = B[0];
    this.OOO1ll = mini.byClass("mini-calendar-footer", this.el);
    this.timeWrapEl = this.OOO1ll.childNodes[0];
    this.todayButtonEl = this.OOO1ll.childNodes[1];
    this.footerSpaceEl = this.OOO1ll.childNodes[2];
    this.closeButtonEl = this.OOO1ll.childNodes[3];
    this.okButtonEl = this.OOO1ll.childNodes[4];
    this._focusEl = this.OOO1ll.lastChild;
    this.yesterdayButtonEl = mini.after(this.todayButtonEl, "<span class=\"mini-calendar-tadayButton yesterday\">" + this.yesterdayText + "</span>");
    mini.parse(this.OOO1ll);
    this.timeSpinner = mini.getbyName("time", this.el);
    this.doUpdate()
};
mini_Calendar_focus = function() {
    try {
        this._focusEl.focus()
    } catch ($) {}
};
mini_Calendar_destroy = function($) {
    if (this.timeSpinner) {
        this.timeSpinner.destroy();
        this.timeSpinner = null
    }
    this._innerEl = this.OOO1ll = this.timeWrapEl = this.todayButtonEl = this.footerSpaceEl = this.closeButtonEl = null;
    this._focusEl = this.okButtonEl = this.yesterdayButtonEl = null;
    this.timeSpinner = null;
    mini.Calendar.superclass.destroy.call(this, $)
};
mini_Calendar__initEvents = function() {
    if (this.timeSpinner) this.timeSpinner.on("valuechanged", this.O0OoO, this);
    mini._BindEvents(function() {
        mini.on(this.el, "click", this.__OnClick, this);
        mini.on(this.el, "mousedown", this.__OnMouseDown, this);
        mini.on(this.el, "keydown", this.__keydown, this)
    }, this)
};
mini_Calendar_getDateEl = function($) {

    if (!$) return null;
    var _ = this.uid + "$" + mini.clearTime($).getTime();
    return document.getElementById(_)
};
mini_Calendar_within = function($) {
    if (Oolo(this.el, $.target)) return true;
    if (this.menuEl && Oolo(this.menuEl, $.target)) return true;
    return false
};
mini_Calendar_setShowHeader = function($) {
    this.showHeader = $;
    this.doUpdate()
};
mini_Calendar_getShowHeader = function() {
    return this.showHeader
};
mini_Calendar_setShowFooter = function($) {
    this.showFooter = $;
    this.doUpdate()
};
mini_Calendar_getShowFooter = function() {
    return this.showFooter
};
mini_Calendar_setShowWeekNumber = function($) {
    this.showWeekNumber = $;
    this.doUpdate()
};
mini_Calendar_getShowWeekNumber = function() {
    return this.showWeekNumber
};
mini_Calendar_setShowDaysHeader = function($) {
    this.showDaysHeader = $;
    this.doUpdate()
};
mini_Calendar_getShowDaysHeader = function() {

    return this.showDaysHeader
};
mini_Calendar_setShowMonthButtons = function($) {
    this.showMonthButtons = $;
    this.doUpdate()
};
mini_Calendar_getShowMonthButtons = function() {
    return this.showMonthButtons
};
mini_Calendar_setShowYearButtons = function($) {
    this.showYearButtons = $;
    this.doUpdate()
};
mini_Calendar_getShowYearButtons = function() {
    return this.showYearButtons
};
mini_Calendar_setShowTodayButton = function($) {
    this.showTodayButton = $;
    this.todayButtonEl.style.display = this.showTodayButton ? "" : "none";
    this.doUpdate()
};
mini_Calendar_getShowTodayButton = function() {
    return this.showTodayButton
};
mini_Calendar_setShowYesterdayButton = function($) {
    this.showYesterdayButton = $;
    this.yesterdayButtonEl.style.display = this.showYesterdayButton ? "" : "none";
    this.doUpdate()
};
mini_Calendar_getShowYesterdayButton = function() {
    return this.showYesterdayButton
};
mini_Calendar_setShowClearButton = function($) {
    this.showClearButton = $;
    this.closeButtonEl.style.display = this.showClearButton ? "" : "none";
    this.doUpdate()
};
mini_Calendar_getShowClearButton = function() {
    return this.showClearButton
};
mini_Calendar_setShowOkButton = function($) {
    this.showOkButton = $;
    this.okButtonEl.style.display = this.showOkButton ? "" : "none";
    this.doUpdate()
};
mini_Calendar_getShowOkButton = function() {

    return this.showOkButton
};
mini_Calendar_setViewDate = function($) {
    $ = mini.parseDate($);
    if (!$) $ = new Date();
    if (mini.isDate($)) $ = new Date($.getTime());
    this.viewDate = $;
    this.doUpdate()
};
mini_Calendar_getViewDate = function() {
    return this.viewDate
};
mini_Calendar_setSelectedDate = function($) {
    $ = mini.parseDate($);
    if (!mini.isDate($)) $ = "";
    else $ = new Date($.getTime());
    var _ = this.getDateEl(this.Ol00O);
    if (_) mini.removeClass(_, this.l0Oo);
    this.Ol00O = $;
    if (this.Ol00O) this.Ol00O = mini.cloneDate(this.Ol00O);
    _ = this.getDateEl(this.Ol00O);
    if (_) mini.addClass(_, this.l0Oo);
    this.fire("datechanged")
};
mini_Calendar_setSelectedDates = function($) {
    if (!mini.isArray($)) $ = [];
    this.O1Ol0O = $;
    this.doUpdate()
};
mini_Calendar_getSelectedDate = function() {
    return this.Ol00O ? this.Ol00O : ""
};
mini_Calendar_setTime = function($) {
    this.timeSpinner.setValue($)
};
mini_Calendar_getTime = function() {


    return this.timeSpinner.getFormValue()
};
mini_Calendar_setValue = function($) {
    this.setSelectedDate($);
    if (!$) $ = new Date();
    this.setTime($)
};
mini_Calendar_getValue = function() {
    var $ = this.Ol00O;
    if ($) {
        $ = mini.clearTime($);
        if (this.showTime) {
            var _ = this.timeSpinner.getValue();
            if (_) {
                $.setHours(_.getHours());
                $.setMinutes(_.getMinutes());
                $.setSeconds(_.getSeconds())
            }
        }
    }
    return $ ? $ : ""
};
mini_Calendar_getFormValue = function() {
    var $ = this.getValue();
    if ($) return mini.formatDate($, "yyyy-MM-dd HH:mm:ss");
    return ""
};
mini_Calendar_isSelectedDate = function($) {
    if (!$ || !this.Ol00O) return false;
    return mini.clearTime($).getTime() == mini.clearTime(this.Ol00O).getTime()
};
mini_Calendar_setMultiSelect = function($) {
    this.multiSelect = $;
    this.doUpdate()
};
mini_Calendar_getMultiSelect = function() {
    return this.multiSelect
};
mini_Calendar_setRows = function($) {
    if (isNaN($)) return;
    if ($ < 1) $ = 1;
    this.rows = $;
    this.doUpdate()
};
mini_Calendar_getRows = function() {
    return this.rows
};
mini_Calendar_setColumns = function($) {

    if (isNaN($)) return;
    if ($ < 1) $ = 1;
    this.columns = $;
    this.doUpdate()
};
mini_Calendar_getColumns = function() {
    return this.columns
};
mini_Calendar_setShowTime = function($) {
    if (this.showTime != $) {
        this.showTime = $;
        this.timeWrapEl.style.display = this.showTime ? "" : "none";
        this.doLayout()
    }
};
mini_Calendar_getShowTime = function() {
    return this.showTime
};
mini_Calendar_setTimeFormat = function($) {
    if (this.timeFormat != $) {
        this.timeSpinner.setFormat($);
        this.timeFormat = this.timeSpinner.format
    }
};
mini_Calendar_getTimeFormat = function() {
    return this.timeFormat
};
mini_Calendar_doLayout = function() {

    if (!this.canLayout()) return;
    this.timeWrapEl.style.display = this.showTime ? "" : "none";
    this.todayButtonEl.style.display = this.showTodayButton ? "" : "none";
    this.closeButtonEl.style.display = this.showClearButton ? "" : "none";
    this.yesterdayButtonEl.style.display = this.showYesterdayButton ? "" : "none";
    this.okButtonEl.style.display = this.showOkButton ? "" : "none";
    this.footerSpaceEl.style.display = (this.showClearButton && this.showTodayButton) ? "" : "none";
    this.OOO1ll.style.display = this.showFooter ? "" : "none";
    var _ = this._innerEl.firstChild,
        $ = this.isAutoHeight();
    if (!$) {
        _.parentNode.style.height = "100px";
        h = jQuery(this.el).height();
        h -= jQuery(this.OOO1ll).outerHeight();
        _.parentNode.style.height = h + "px"
    } else _.parentNode.style.height = "";
    mini.layout(this.OOO1ll);
    if (this.monthPicker) this._tryShowMenu()
};
mini_Calendar_doUpdate = function() {

    if (!this.lO10O) return;
    var G = new Date(this.viewDate.getTime()),
        A = this.rows == 1 && this.columns == 1,
        C = 100 / this.rows,
        F = "<table class=\"mini-calendar-views\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">";
    for (var $ = 0, E = this.rows; $ < E; $++) {
        F += "<tr >";
        for (var D = 0, _ = this.columns; D < _; D++) {
            F += "<td style=\"height:" + C + "%\">";
            F += this.oO11Oo(G, $, D);
            F += "</td>";
            G = new Date(G.getFullYear(), G.getMonth() + 1, 1)
        }
        F += "</tr>"
    }
    F += "</table>";
    this._innerEl.innerHTML = F;
    var B = this.el;
    setTimeout(function() {
        mini.repaint(B)
    }, 100);
    this.doLayout()
};
mini_Calendar_oO11Oo = function(R, J, C) {
    var _ = R.getMonth(),
        F = this.getFirstDateOfMonth(R),
        K = new Date(F.getTime()),
        A = mini.clearTime(new Date()).getTime(),
        D = this.value ? mini.clearTime(this.value).getTime() : -1,
        N = this.rows > 1 || this.columns > 1,
        P = "";
    P += "<table class=\"mini-calendar-view\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">";
    if (this.showHeader) {
        P += "<tr ><td colSpan=\"10\" class=\"mini-calendar-header\"><div class=\"mini-calendar-headerInner\">";
        if (J == 0 && C == 0) {
            P += "<div class=\"mini-calendar-prev\">";
            if (this.showYearButtons) P += "<span class=\"mini-calendar-yearPrev\"></span>";
            if (this.showMonthButtons) P += "<span class=\"mini-calendar-monthPrev\"></span>";
            P += "</div>"
        }
        if (J == 0 && C == this.columns - 1) {
            P += "<div class=\"mini-calendar-next\">";
            if (this.showMonthButtons) P += "<span class=\"mini-calendar-monthNext\"></span>";
            if (this.showYearButtons) P += "<span class=\"mini-calendar-yearNext\"></span>";
            P += "</div>"
        }
        P += "<span class=\"mini-calendar-title\">" + mini.formatDate(R, this.format); + "</span>";
        P += "</div></td></tr>"
    }
    if (this.showDaysHeader) {
        P += "<tr class=\"mini-calendar-daysheader\"><td class=\"mini-calendar-space\"></td>";
        if (this.showWeekNumber) P += "<td sclass=\"mini-calendar-weeknumber\"></td>";
        for (var L = this.firstDayOfWeek, B = L + 7; L < B; L++) {
            var O = this.getShortWeek(L);
            P += "<td yAlign=\"middle\">";
            P += O;
            P += "</td>";
            F = new Date(F.getFullYear(), F.getMonth(), F.getDate() + 1)
        }
        P += "<td class=\"mini-calendar-space\"></td></tr>"
    }
    F = K;
    for (var H = 0; H <= 5; H++) {
        P += "<tr class=\"mini-calendar-days\"><td class=\"mini-calendar-space\"></td>";
        if (this.showWeekNumber) {
            var G = mini.getWeek(F.getFullYear(), F.getMonth() + 1, F.getDate());
            if (String(G).length == 1) G = "0" + G;
            P += "<td class=\"mini-calendar-weeknumber\" yAlign=\"middle\">" + G + "</td>"
        }
        for (L = this.firstDayOfWeek, B = L + 7; L < B; L++) {
            var M = this.isWeekend(F),
                I = mini.clearTime(F).getTime(),
                $ = I == A,
                E = this.isSelectedDate(F);
            if (_ != F.getMonth() && N) I = -1;
            var Q = this.oOl0ll(F);
            P += "<td yAlign=\"middle\" id=\"";
            P += this.uid + "$" + I;
            P += "\" class=\"mini-calendar-date ";
            if (M) P += " mini-calendar-weekend ";
            if (Q.allowSelect == false) P += " mini-calendar-disabled ";
            if (_ != F.getMonth() && N);
            else {
                if (E) P += " " + this.l0Oo + " ";
                if ($) P += " mini-calendar-today "
            }
            if (_ != F.getMonth()) P += " mini-calendar-othermonth ";
            if (Q.dateCls) P += " " + Q.dateCls;
            P += "\" style=\"";
            if (Q.dateStyle) P += Q.dateStyle;
            P += "\">";
            if (_ != F.getMonth() && N);
            else P += Q.dateHtml;
            P += "</td>";
            F = new Date(F.getFullYear(), F.getMonth(), F.getDate() + 1)
        }
        P += "<td class=\"mini-calendar-space\"></td></tr>"
    }
    P += "<tr class=\"mini-calendar-bottom\" colSpan=\"10\"><td ></td></tr>";
    P += "</table>";
    return P
};
mini_Calendar_oOl0ll = function($) {
    var _ = {
        date: $,
        dateCls: "",
        dateStyle: "",
        dateHtml: $.getDate(),
        allowSelect: true
    };
    this.fire("drawdate", _);
    return _
};
mini_Calendar_olOol0 = function(_, $) {
    this.hideMenu();
    var A = {
        date: _,
        action: $
    };
    this.fire("dateclick", A);
    this.Ol11o()
};
mini_Calendar__tryShowMenu = function() {
    if (!this.menuEl) {
        var $ = this;
        setTimeout(function() {
            $.showMenu()
        }, 1)
    }
};
mini_Calendar_showMenu = function() {
    this.hideMenu();
    this.menuYear = parseInt(this.viewDate.getFullYear() / 10) * 10;
    this.OollO1electMonth = this.viewDate.getMonth();
    this.OollO1electYear = this.viewDate.getFullYear();
    var _ = "<div class=\"mini-calendar-menu\"></div>";
    this.menuEl = mini.append(document.body, _);
    this.updateMenu(this.viewDate);
    var $ = this.getBox();
    if (this.el.style.borderWidth == "0px") this.menuEl.style.border = "0";
    mini.setBox(this.menuEl, $);
    mini.on(this.menuEl, "click", this.l00oo0, this);
    mini.on(this.menuEl, "dblclick", this.__OnMenuDblClick, this);
    mini.on(document, "mousedown", this.Ooo0lO, this)
};
mini_Calendar_hideMenu = function() {
    if (this.menuEl) {
        mini.un(this.menuEl, "click", this.l00oo0, this);
        mini.un(document, "mousedown", this.Ooo0lO, this);
        jQuery(this.menuEl).remove();
        this.menuEl = null
    }
};
mini_Calendar_updateMenu = function() {
    if (!this.menuEl) return;
    var C = "<div class=\"mini-calendar-menu-months\">";
    for (var $ = 0, B = 12; $ < B; $++) {
        var _ = mini.getShortMonth($),
            A = "";
        if (this.OollO1electMonth == $) A = "mini-calendar-menu-selected";
        C += "<a id=\"" + $ + "\" class=\"mini-calendar-menu-month " + A + "\" href=\"javascript:void(0);\" hideFocus onclick=\"return false\">" + _ + "</a>"
    }
    C += "<div style=\"clear:both;\"></div></div>";
    C += "<div class=\"mini-calendar-menu-years\">";
    for ($ = this.menuYear, B = this.menuYear + 10; $ < B; $++) {
        _ = $, A = "";
        if (this.OollO1electYear == $) A = "mini-calendar-menu-selected";
        C += "<a id=\"" + $ + "\" class=\"mini-calendar-menu-year " + A + "\" href=\"javascript:void(0);\" hideFocus onclick=\"return false\">" + _ + "</a>"
    }
    C += "<div class=\"mini-calendar-menu-prevYear\"></div><div class=\"mini-calendar-menu-nextYear\"></div><div style=\"clear:both;\"></div></div>";
    C += "<div class=\"mini-calendar-footer\">" + "<span class=\"mini-calendar-okButton\">" + this.okText + "</span>" + "<span class=\"mini-calendar-footerSpace\"></span>" + "<span class=\"mini-calendar-cancelButton\">" + this.cancelText + "</span>" + "</div><div style=\"clear:both;\"></div>";
    this.menuEl.innerHTML = C
};
mini_Calendar_l00oo0 = function(H) {
    var D = this,
        B = H.target,
        C = "mini-calendar-menu-month",
        F = "mini-calendar-menu-year",
        G = "mini-calendar-menu-selected";

    function _() {
        setTimeout(function() {
            D.updateMenu()
        }, 30)
    }
    var E = oOlO(B, C),
        A = oOlO(B, F);
    if (E) {
        this.OollO1electMonth = parseInt(E.id);
        $("." + C, D.menuEl).removeClass(G);
        $(B).parent().find("#" + this.OollO1electMonth).addClass(G)
    } else if (A) {
        this.OollO1electYear = parseInt(A.id);
        $("." + F, D.menuEl).removeClass(G);
        $(B).parent().find("#" + this.OollO1electYear).addClass(G)
    } else if (oOlO(B, "mini-calendar-menu-prevYear")) {
        this.menuYear = this.menuYear - 1;
        this.menuYear = parseInt(this.menuYear / 10) * 10;
        _()
    } else if (oOlO(B, "mini-calendar-menu-nextYear")) {
        this.menuYear = this.menuYear + 11;
        this.menuYear = parseInt(this.menuYear / 10) * 10;
        _()
    } else if (oOlO(B, "mini-calendar-okButton")) this.__getMonthYear();
    else if (oOlO(B, "mini-calendar-cancelButton"))
        if (this.monthPicker) this.olOol0(null, "cancel");
        else this.hideMenu()
};
mini_Calendar___OnMenuDblClick = function(B) {
    var $ = oOlO(B.target, "mini-calendar-menu-year"),
        _ = oOlO(B.target, "mini-calendar-menu-month"),
        A = oOlO(B.target, "mini-calendar-date ");
    if (!$ && !_ && !A) return;
    if (this.monthPicker)
        if (!_ && !$) return;
    this.__getMonthYear()
};
mini_Calendar___getMonthYear = function() {

    var $ = new Date(this.OollO1electYear, this.OollO1electMonth, 1);
    if (this.monthPicker) {
        this.setViewDate($);
        this.setSelectedDate($);
        this.olOol0($)
    } else {
        this.setViewDate($);
        this.hideMenu()
    }
};
mini_Calendar_Ooo0lO = function($) {
    if (!oOlO($.target, "mini-calendar-menu"))
        if (!oOlO($.target, "mini-monthpicker")) this.hideMenu()
};
mini_Calendar_Ol1o1 = function(I) {
    var H = this.viewDate;
    if (this.enabled == false) return;
    var C = I.target,
        G = oOlO(I.target, "mini-calendar-title");
    if (oOlO(C, "mini-calendar-monthNext")) {
        H.setDate(1);
        H.setMonth(H.getMonth() + 1);
        this.setViewDate(H)
    } else if (oOlO(C, "mini-calendar-yearNext")) {
        H.setDate(1);
        H.setFullYear(H.getFullYear() + 1);
        this.setViewDate(H)
    } else if (oOlO(C, "mini-calendar-monthPrev")) {
        H.setMonth(H.getMonth() - 1);
        this.setViewDate(H)
    } else if (oOlO(C, "mini-calendar-yearPrev")) {
        H.setFullYear(H.getFullYear() - 1);
        this.setViewDate(H)
    } else if (oOlO(C, "mini-calendar-tadayButton")) {
        var F = !!oOlO(C, "yesterday"),
            _ = new Date();
        if (F) _.setDate(_.getDate() - 1);
        this.setViewDate(_);
        this.setSelectedDate(_);
        if (this.currentTime) {
            var $ = new Date();
            this.setTime($)
        }
        this.olOol0(_, "today")
    } else if (oOlO(C, "mini-calendar-clearButton")) {
        this.setSelectedDate(null);
        this.setTime(null);
        this.olOol0(null, "clear")
    } else if (oOlO(C, "mini-calendar-okButton")) this.olOol0(null, "ok");
    else if (G) this.showMenu();
    var E = oOlO(I.target, "mini-calendar-date");
    if (E && !mini.hasClass(E, "mini-calendar-disabled")) {
        var A = E.id.split("$"),
            B = parseInt(A[A.length - 1]);
        if (B == -1) return;
        var D = new Date(B);
        this.olOol0(D)
    }
};
mini_Calendar_olol = function(C) {
    if (this.enabled == false) return;
    var B = oOlO(C.target, "mini-calendar-date");
    if (B && !mini.hasClass(B, "mini-calendar-disabled")) {
        var $ = B.id.split("$"),
            _ = parseInt($[$.length - 1]);
        if (_ == -1) return;
        var A = new Date(_);
        this.setSelectedDate(A)
    }
};
mini_Calendar_O0OoO = function($) {

    this.fire("timechanged");
    this.Ol11o()
};
mini_Calendar_l001l = function(B) {
    if (this.enabled == false) return;
    var _ = this.getSelectedDate();
    if (!_) _ = new Date(this.viewDate.getTime());
    switch (B.keyCode) {
        case 27:
            break;
        case 13:
            if (_) this.olOol0(_);
            return;
            break;
        case 37:
            _ = mini.addDate(_, -1, "D");
            break;
        case 38:
            _ = mini.addDate(_, -7, "D");
            break;
        case 39:
            _ = mini.addDate(_, 1, "D");
            break;
        case 40:
            _ = mini.addDate(_, 7, "D");
            break;
        default:
            break
    }
    var $ = this;
    if (_.getMonth() != $.viewDate.getMonth()) {
        $.setViewDate(mini.cloneDate(_));
        $.focus()
    }
    var A = this.getDateEl(_);
    if (A && mini.hasClass(A, "mini-calendar-disabled")) return;
    $.setSelectedDate(_);
    if (B.keyCode == 37 || B.keyCode == 38 || B.keyCode == 39 || B.keyCode == 40) B.preventDefault()
};

mini_DatePicker_getMaxDate = function() {
    return this.maxDate;
};
mini_Calendar_Ol11o = function() {

    this.fire("valuechanged")
};
mini_Calendar_getAttrs = function($) {
    var _ = mini.Calendar.superclass.getAttrs.call(this, $);
    mini._ParseString($, _, ["viewDate", "rows", "columns", "ondateclick", "ondrawdate", "ondatechanged", "timeFormat", "ontimechanged", "onvaluechanged"]);
    mini._ParseBool($, _, ["multiSelect", "showHeader", "showFooter", "showWeekNumber", "showDaysHeader", "showMonthButtons", "showYearButtons", "showTodayButton", "showClearButton", "showYesterdayButton", "showTime", "showOkButton"]);
    return _;
};
/**
* 通用的设置属性方法，可以用于设置事件，设置属性。设置属性完成就会自动调用组件的doLayout方法。
* 属性中可以包括自定义的renderTo 或 render 用于指向渲染到的容器对象，
* 则设置完成后将会调用组件的render方法把组件渲染到容器中。
* @param kv {Object} 参数对象
* @return {Object} 组件实例本身
* @example
* var a = new Component();
* a.set({id:'id'});
* a.id => id
*/
mini_Component_set = function(kv) {
    if (typeof kv == "string") return this;
    var _allowLayout = this._allowLayout;
    this._allowLayout = false;
    var renderTo = kv.renderTo || kv.render;
    delete kv.renderTo;
    delete kv.render;
    for (var key in kv)
        if (key.toLowerCase().indexOf("on") == 0) {
            if (this["_$" + key]) continue;
            var fn = kv[key];
            this.on(key.substring(2, key.length).toLowerCase(), fn);
            delete kv[key];
        }
    for (key in kv) {
        var v = kv[key],
            n = "set" + key.charAt(0).toUpperCase() + key.substring(1, key.length),
            setter = this[n];
        if (setter) setter.call(this, v);
        else this[key] = v;
    }
    if (renderTo && this.render) this.render(renderTo);
    this._allowLayout = _allowLayout;
    if (this.doLayout) this.doLayout();
    return this;
};

/**
* 触发组件实例的一个事件
* @param type {String}事件类型
* @param [event] {Event}可以使一个JSON对象
* @example 
* var a = new Component();
* a.fire('click');
*/
mini_Component_fire = function(type, event) {
    if (this._canFire == false) return;
    type = type.toLowerCase();
    var handlers = this._events[type];
    if (handlers) {
        if (!event) event = {};
        if (event && event != this) {
            event.source = event.sender = this;
            if (!event.type) event.type = type;
        }
        for (var i = 0, l = handlers.length; i < l; i++) {
            var listener = handlers[i];
            if (listener) {
                listener[0].apply(listener[1], [event]);
            }
        }
    }
};
/**
* 为组件实例添加一个事件响应函数
* @param type {String} 事件类型
* @param fn {Function} 响应函数
* @param [scope] {Object} 函数上下文
* @returns {Object} 组件实例本身
*/
mini_Component_on = function(type, fn, scope) {
    if (typeof fn == "string") {
        var f = mini._getFunctoin(fn);
        if (!f) {
            var id = mini.newId("__str_");
            window[id] = fn;
            eval("fn = function(e){var s = " + id + ";var fn = mini._getFunctoin(s); if(fn) {fn.call(this,e)}else{eval(s);}}");
        } else fn = f;
    }
    if (typeof fn != "function" || !type) return false;
    type = type.toLowerCase();
    var event = this._events[type];
    if (!event) event = this._events[type] = [];
    scope = scope || this;
    if (!this.findListener(type, fn, scope)) event.push([fn, scope]);
    return this;
};
/**
* 删除一个事件响应函数
* @param type {String} 事件类型
* @param fn {Function} 响应函数
* @param [scope] {Object} 函数上下文
* @returns {Object} 组件实例本身
*/
mini_Component_un = function(type, fn, scope) {
    type = type.toLowerCase();
    var event = this._events[type];
    if (event)
        if (fn) {
            scope = scope || this;
            var listener = this.findListener(type, fn, scope);
            if (listener) {
                event.remove(listener);
            }
        } else {
            delete this._events[type];
        }
    return this;
};
/**
* 获得指定类型时间的执行响应函数的定义内容 Listener。
* @param type {String} 事件类型
* @param fn {Function} 响应函数
* @param [scope] {Object} 函数上下文
* @returns {Object} Listener
*/
mini_Component_findListener = function(type, fn, scope) {
    type = type.toLowerCase();
    scope = scope || this;
    var handlers = this._events[type];
    if (handlers) {
        for (var i = 0, l = handlers.length; i < l; i++) {
            var listener = handlers[i];
            if (listener[0] === fn && listener[1] === scope) return listener;
        }
    }
};
mini_Component_setId = function($) {

    if (!$) throw new Error("id not null");
    if (this.l00O0) throw new Error("id just set only one");
    mini["unreg"](this);
    this.id = $;
    if (this.el) this.el.id = $;
    if (this.ll10l) this.ll10l.id = $ + "$value";
    if (this._textEl) this._textEl.id = $ + "$text";
    this.l00O0 = true;
    mini.reg(this)
};
mini_Component_getId = function() {
    return this.id
};
mini_Component_destroy = function() {

    mini["unreg"](this);
    this.fire("destroy")
};
mini_PopupEdit_destroy = function($) {
    if (this.isShowPopup()) this.hidePopup();
    if (this.popup) {
        if (this._destroyPopup) this.popup.destroy();
        this.popup = null
    }
    if (this._popupInner) {
        this._popupInner.owner = null;
        this._popupInner = null
    }
    if (this.el) this.el.onmouseover = this.el.onmouseout = null;
    this.loo01 = this.tree = null;
    mini.PopupEdit.superclass.destroy.call(this, $)
};
mini_PopupEdit__initEvents = function() {
    mini.PopupEdit.superclass._initEvents.call(this);
    mini._BindEvents(function() {
        OooO(this.el, "mouseover", this.__OnMouseOver, this);
        OooO(this.el, "mouseout", this.__OnMouseOut, this)
    }, this)
};
mini_PopupEdit_Ol0O1 = function($) {
    this.OO0Ol = false;
    if (this._clickTarget && Oolo(this.el, this._clickTarget)) return;
    if (this.isShowPopup()) return;
    mini.PopupEdit.superclass.Ol0O1.call(this, $)
};
mini_PopupEdit_O1l1lo = function(_) {
    if (this.isReadOnly() || this.allowInput) return;
    if (oOlO(_.target, "mini-buttonedit-border")) {
        var $ = oOlO(_.target, "mini-buttonedit-button");
        if ($ && $ != this._buttonEl);
        else this.addCls(this._hoverCls)
    }
};
mini_PopupEdit_O11O11 = function($) {
    if (this.isReadOnly() || this.allowInput) return;
    this.removeCls(this._hoverCls)
};
mini_PopupEdit_olol = function($) {
    if (this.isReadOnly()) return;
    mini.PopupEdit.superclass.__OnMouseDown.call(this, $);
    if (this.allowInput == false && oOlO($.target, "mini-buttonedit-border")) {
        mini.addClass(this.el, this.oll001);
        mini.on(document, "mouseup", this.lo010o, this)
    }
};
mini_PopupEdit_O10l1 = function($) {
    this.fire("keydown", {
        htmlEvent: $
    });
    if ($.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) return false;
    if ($.keyCode == 9) {
        this.hidePopup();
        return
    }
    if ($.keyCode == 27) {
        this.hidePopup();
        return
    }
    if ($.keyCode == 13) this.fire("enter");
    if (this.isShowPopup())
        if ($.keyCode == 13 || $.keyCode == 27) $.stopPropagation()
};
mini_PopupEdit_within = function($) {
    if (Oolo(this.el, $.target)) return true;
    if (this.popup.within($)) return true;
    return false
};
mini_PopupEdit_setPopup = function($) {
    if (typeof $ == "string") {
        mini.parse($);
        $ = mini.get($)
    }
    var _ = mini.getAndCreate($);
    if (!_) return;
    _.setVisible(false);
    this._popupInner = _;
    _.owner = this;
    _.on("beforebuttonclick", this.l1OO1O, this)
};
mini_PopupEdit_getPopup = function() {
    if (!this.popup) this._createPopup();
    return this.popup
};
mini_PopupEdit__createPopup = function() {
    this.popup = new mini.Popup();
    this.popup.setShowAction("none");
    this.popup.setHideAction("outerclick");
    this.popup.setPopupEl(this.el);
    this.popup.on("BeforeClose", this.loOo, this);
    this.popup.on("close", this.__OnPopupClose, this);
    mini.on(this.popup.el, "keydown", this.O1Ol10, this)
};
mini_PopupEdit___OnPopupClose = function($) {};
mini_PopupEdit_loOo = function($) {
    if (this.within($.htmlEvent)) $.cancel = true;
    else this._unDocumentMousewheel()
};
mini_PopupEdit_O1Ol10 = function($) {};
mini_PopupEdit_showPopup = function() {
    var _ = {
        cancel: false
    };
    if (this._firebeforeshowpopup !== false) {
        this.fire("beforeshowpopup", _);
        if (_.cancel == true) return false
    }
    var $ = this.getPopup();
    this._syncShowPopup();
    $.on("Close", this.hidepopup, this);
    this._onDocumentMousewheel();
    this.fire("showpopup")
};
mini_PopupEdit__unDocumentMousewheel = function() {
    mini.un(document, "mousewheel", this.__OnDocumentMousewheel, this);
    this._mousewheelXY = null
};
mini_PopupEdit__onDocumentMousewheel = function() {
    this._unDocumentMousewheel();
    this._mousewheelXY = mini.getXY(this.el);
    mini.on(document, "mousewheel", this.__OnDocumentMousewheel, this)
};
mini_PopupEdit___OnDocumentMousewheel = function(A) {
    var $ = this;

    function _() {
        if (!$.isShowPopup()) return;
        var B = $._mousewheelXY,
            A = mini.getXY($.el);
        if (B[0] != A[0] || B[1] != A[1]) $.hidePopup();
        else setTimeout(_, 300)
    }
    setTimeout(_, 300)
};
mini_PopupEdit__syncShowPopup = function() {
    var _ = this.getPopup();
    if (this._popupInner && this._popupInner.el.parentNode != this.popup._contentEl) {
        this.popup._contentEl.appendChild(this._popupInner.el);
        this._popupInner.setVisible(true)
    }
    var B = mini.getBox(this._borderEl),
        $ = this.popupWidth;
    if (this.popupWidth == "100%") $ = B.width;
    _.show();
    _.setWidth($);
    var A = parseInt(this.popupHeight);
    if (!isNaN(A)) _.setHeight(A);
    else _.setHeight("auto");
    _.setMinWidth(this.popupMinWidth);
    _.setMinHeight(this.popupMinHeight);
    _.setMaxWidth(this.popupMaxWidth);
    _.setMaxHeight(this.popupMaxHeight);
    var C = {
        xAlign: "left",
        yAlign: "below",
        outYAlign: "above",
        outXAlign: "right",
        popupCls: this.popupCls,
        alwaysView: this.alwaysView
    };
    this.Oo1O11AtEl(this._borderEl, C)
};
mini_PopupEdit_Oo1O11AtEl = function(_, A) {

    var $ = this.getPopup();
    $.showAtEl(_, A)
};
mini_PopupEdit_oo11o = function($) {
    this.__doFocusCls();
    this.fire("hidepopup")
};
mini_PopupEdit_hidePopup = function() {
    if (this.isShowPopup()) {
        var $ = this.getPopup();
        $.close();
        if (this._autoBlur !== false) this.blur()
    }
};
mini_PopupEdit_isShowPopup = function() {
    if (this.popup && this.popup.isDisplay()) return true;
    else return false
};
mini_PopupEdit_setAlwaysView = function($) {
    this.alwaysView = $
};
mini_PopupEdit_getAlwaysView = function() {

    return this.alwaysView
};
mini_PopupEdit_setPopupWidth = function($) {
    this.popupWidth = $
};
mini_PopupEdit_setPopupMaxWidth = function($) {
    this.popupMaxWidth = $
};
mini_PopupEdit_setPopupMinWidth = function($) {
    this.popupMinWidth = $
};
mini_PopupEdit_getPopupWidth = function($) {

    return this.popupWidth
};
mini_PopupEdit_getPopupMaxWidth = function($) {
    return this.popupMaxWidth
};
mini_PopupEdit_getPopupMinWidth = function($) {
    return this.popupMinWidth
};
mini_PopupEdit_setPopupHeight = function($) {

    this.popupHeight = $
};
mini_PopupEdit_setPopupMaxHeight = function($) {
    this.popupMaxHeight = $
};
mini_PopupEdit_setPopupMinHeight = function($) {
    this.popupMinHeight = $
};
mini_PopupEdit_getPopupHeight = function($) {
    return this.popupHeight
};
mini_PopupEdit_getPopupMaxHeight = function($) {
    return this.popupMaxHeight
};
mini_PopupEdit_getPopupMinHeight = function($) {
    return this.popupMinHeight
};
mini_PopupEdit_setShowPopupOnClick = function($) {
    this.showPopupOnClick = $
};
mini_PopupEdit_getShowPopupOnClick = function($) {

    return this.showPopupOnClick
};
mini_PopupEdit_Ol1o1 = function(A) {

    if (this.enabled == false) return;
    this.fire("click", {
        htmlEvent: A
    });
    if (this.isReadOnly()) return;
    if (Oolo(this._buttonEl, A.target)) this.lo101(A);
    if (oOlO(A.target, this._closeCls)) {
        if (this.isShowPopup()) this.hidePopup();
        if (this.autoClear)
            if ((this.value && this.value !== 0) || this.text !== "") {
                this.setValue("");
                this.setText("");
                this.Ol11o()
            }
        this.fire("closeclick", {
            htmlEvent: A
        });
        return
    }
    if (this.allowInput == false || Oolo(this._buttonEl, A.target) || this.showPopupOnClick) {
        var _ = oOlO(A.target, "mini-buttonedit-button");
        if (_ && _ != this._buttonEl);
        else if (this.isShowPopup()) this.hidePopup();
        else {
            var $ = this;
            setTimeout(function() {
                $.showPopup()
            }, 1)
        }
    }
    this._handlerButtonElClick(A)
};
mini_PopupEdit_l1OO1O = function($) {
    if ($.name == "close") this.hidePopup();
    $.cancel = true
};
mini_PopupEdit_getAttrs = function($) {

    var _ = mini.PopupEdit.superclass.getAttrs.call(this, $);
    mini._ParseString($, _, ["popupWidth", "popupHeight", "popup", "onshowpopup", "onhidepopup", "onbeforeshowpopup"]);
    mini._ParseInt($, _, ["popupMinWidth", "popupMaxWidth", "popupMinHeight", "popupMaxHeight"]);
    mini._ParseBool($, _, ["showPopupOnClick", "alwaysView"]);
    return _
};
mini_MenuButton_setMenu = function($) {

    if (mini.isArray($)) $ = {
        type: "menu",
        items: $
    };
    if (typeof $ == "string") {
        var _ = mini.byId($);
        if (!_) return;
        mini.parse($);
        $ = mini.get($)
    }
    if (this.menu !== $) {
        this.menu = mini.getAndCreate($);
        this.menu.setPopupEl(this.el);
        this.menu.setPopupCls("mini-button-popup");
        this.menu.setShowAction("leftclick");
        this.menu.setHideAction("outerclick");
        this.menu.setXAlign("left");
        this.menu.setYAlign("below");
        this.menu.hide();
        this.menu.owner = this;
        this.menu.addCls("mini-menu-open")
    }
};
mini_MenuButton_setEnabled = function($) {
    this.enabled = $;
    if ($) this.removeCls(this.o0010);
    else this.addCls(this.o0010);
    jQuery(this.el).attr("allowPopup", !!$)
};
mini_OutlookBar_set = function(_) {
    if (typeof _ == "string") return this;
    var A = this._allowLayout;
    this._allowLayout = false;
    var $ = _.activeIndex;
    delete _.activeIndex;
    if (_.imgPath) this.setImgPath(_.imgPath);
    delete _.imgPath;
    mini.OutlookBar.superclass.set.call(this, _);
    if (mini.isNumber($)) this.setActiveIndex($);
    this._allowLayout = A;
    this.doLayout();
    return this
};
mini_OutlookBar__create = function() {
    this.el = document.createElement("div");
    this.el.className = "mini-outlookbar";
    this.el.innerHTML = "<div class=\"mini-outlookbar-border\"></div>";
    this._borderEl = this.el.firstChild
};
mini_OutlookBar__initEvents = function() {
    mini._BindEvents(function() {
        mini.on(this.el, "click", this.__OnClick, this)
    }, this);
    var $ = "mini-outlookbar-hover";
    jQuery(this.el).on("mouseenter", ".mini-outlookbar-groupHeader", function(_) {
        jQuery(_.currentTarget).addClass($)
    });
    jQuery(this.el).on("mouseleave", ".mini-outlookbar-groupHeader", function(_) {
        jQuery(_.currentTarget).removeClass($)
    })
};
mini_OutlookBar_destroy = function(A) {
    if (!this.destroyed && this.el) {
        jQuery(this.el).unbind("mouseenter");
        jQuery(this.el).unbind("mouseleave");
        if (this.groups) {
            for (var $ = 0, B = this.groups.length; $ < B; $++) {
                var _ = this.groups[$];
                delete _._el
            }
            this.groups = null
        }
    }
    mini.OutlookBar.superclass.destroy.call(this, A)
};
mini_OutlookBar_l1O111 = function($) {
    return this.uid + "$" + $._id
};
mini_OutlookBar_ol1O = function() {
    this.groups = []
};
mini_OutlookBar_lOOO = function(_) {
    var H = this.l1O111(_),
        G = "<div id=\"" + H + "\" class=\"mini-outlookbar-group " + _.cls + "\" style=\"" + _.style + "\">" + "<div class=\"mini-outlookbar-groupHeader " + _.headerCls + "\" style=\"" + _.headerStyle + ";\"></div>" + "<div class=\"mini-outlookbar-groupBody " + _.bodyCls + "\" style=\"" + _.bodyStyle + ";\"></div>" + "</div>",
        A = mini.append(this._borderEl, G),
        E = A.lastChild,
        C = _.body;
    delete _.body;
    if (C) {
        if (!mini.isArray(C)) C = [C];
        for (var $ = 0, F = C.length; $ < F; $++) {
            var B = C[$];
            mini.append(E, B)
        }
        C.length = 0
    }
    if (_.bodyParent) {
        var D = _.bodyParent;
        while (D.firstChild) E.appendChild(D.firstChild)
    }
    delete _.bodyParent;
    return A
};
mini_OutlookBar_createGroup = function(_) {
    var $ = mini.copyTo({
        _id: this._GroupId++,
        name: "",
        title: "",
        cls: "",
        style: "",
        iconCls: "",
        iconStyle: "",
        headerCls: "",
        headerStyle: "",
        bodyCls: "",
        bodyStyle: "",
        visible: true,
        enabled: true,
        showCollapseButton: true,
        expanded: this.expandOnLoad
    }, _);
    return $
};
mini_OutlookBar_setImgPath = function($) {
    this.imgPath = $
};
mini_OutlookBar_getImgPath = function() {
    return this.imgPath
};
mini_OutlookBar_setGroups = function(_) {
    if (!mini.isArray(_)) return;
    this.removeAll();
    for (var $ = 0, A = _.length; $ < A; $++) this.addGroup(_[$])
};
mini_OutlookBar_getGroups = function() {
    return this.groups
};
mini_OutlookBar_addGroup = function(_, $) {
    if (typeof _ == "string") _ = {
        title: _
    };
    _ = this.createGroup(_);
    if (typeof $ != "number") $ = this.groups.length;
    this.groups.insert($, _);
    var B = this.lOOO(_);
    _._el = B;
    var $ = this.groups.indexOf(_),
        A = this.groups[$ + 1];
    if (A) {
        var C = this.getGroupEl(A);
        jQuery(C).before(B)
    }
    this.doUpdate();
    return _
};
mini_OutlookBar_updateGroup = function($, _) {
    var $ = this.getGroup($);
    if (!$) return;
    mini.copyTo($, _);
    this.doUpdate()
};
mini_OutlookBar_removeGroup = function($) {
    $ = this.getGroup($);
    if (!$) return;
    var _ = this.getGroupEl($);
    if (_) _.parentNode.removeChild(_);
    this.groups.remove($);
    this.doUpdate()
};
mini_OutlookBar_removeAll = function() {
    for (var $ = this.groups.length - 1; $ >= 0; $--) this.removeGroup($)
};
mini_OutlookBar_moveGroup = function(_, $) {
    _ = this.getGroup(_);
    if (!_) return;
    target = this.getGroup($);
    var A = this.getGroupEl(_);
    this.groups.remove(_);
    if (target) {
        $ = this.groups.indexOf(target);
        this.groups.insert($, _);
        var B = this.getGroupEl(target);
        jQuery(B).before(A)
    } else {
        this.groups.add(_);
        this._borderEl.appendChild(A)
    }
    this.doUpdate()
};
mini_OutlookBar__getIconImg = function($) {
    return $ && this.imgPath + $
};
mini_OutlookBar_doUpdate = function() {

    for (var _ = 0, H = this.groups.length; _ < H; _++) {
        var A = this.groups[_],
            B = A._el,
            G = B.firstChild,
            C = B.lastChild,
            D = this._getIconImg(A.img),
            E = "background-image:url(" + D + ")",
            $ = "<div class=\"mini-outlookbar-icon mini-iconfont " + A.iconCls + "\" style=\"" + A.iconStyle + ";\"></div>",
            I = "<div class=\"mini-tools\"><span class=\"mini-tools-collapse\" style=\"" + (A.showCollapseButton ? "" : "display:none;") + "\"></span></div>" + ((A.iconStyle || A.iconCls || A.img) ? $ : "") + "<div class=\"mini-outlookbar-groupTitle\">" + A.title + "</div>";
        G.innerHTML = I;
        if (D) {
            var F = G.childNodes[1];
            mini.setStyle(F, E)
        }
        if (A.enabled) mini.removeClass(B, "mini-disabled");
        else mini.addClass(B, "mini-disabled");
        mini.addClass(B, A.cls);
        mini.setStyle(B, A.style);
        mini.addClass(C, A.bodyCls);
        mini.setStyle(C, A.bodyStyle);
        mini.addClass(G, A.headerCls);
        mini.setStyle(G, A.headerStyle);
        mini.removeClass(B, "mini-outlookbar-firstGroup");
        mini.removeClass(B, "mini-outlookbar-lastGroup");
        if (_ == 0) mini.addClass(B, "mini-outlookbar-firstGroup");
        if (_ == H - 1) mini.addClass(B, "mini-outlookbar-lastGroup")
    }
    this.doLayout()
};
mini_OutlookBar_doLayout = function() {
    if (!this.canLayout()) return;
    if (this.O1lll0) return;
    this.l1OO1();
    for (var $ = 0, H = this.groups.length; $ < H; $++) {
        var _ = this.groups[$],
            B = _._el,
            D = B.lastChild;
        if (_.expanded) {
            mini.addClass(B, "mini-outlookbar-expand");
            mini.removeClass(B, "mini-outlookbar-collapse")
        } else {
            mini.removeClass(B, "mini-outlookbar-expand");
            mini.addClass(B, "mini-outlookbar-collapse")
        }
        D.style.height = "auto";
        D.style.display = _.expanded ? "block" : "none";
        B.style.display = _.visible ? "" : "none";
        var A = mini.getWidth(B, true),
            E = mini.getPaddings(D),
            G = mini.getBorders(D);
        if (jQuery.boxModel) A = A - E.left - E.right - G.left - G.right;
        D.style.width = A + "px"
    }
    var F = this.isAutoHeight(),
        C = this.getActiveGroup();
    if (!F && this.autoCollapse && !this.expandOnLoad && C) {
        B = this.getGroupEl(this.activeIndex);
        B.lastChild.style.height = this.ooo01() + "px"
    }
    mini.layout(this._borderEl)
};
mini_OutlookBar_l1OO1 = function() {
    if (this.isAutoHeight()) this._borderEl.style.height = "auto";
    else {
        var $ = this.getHeight(true);
        if (!jQuery.boxModel) {
            var _ = mini.getBorders(this._borderEl);
            $ = $ + _.top + _.bottom
        }
        if ($ < 0) $ = 0;
        this._borderEl.style.height = $ + "px"
    }
};
mini_OutlookBar_ooo01 = function() {

    var C = jQuery(this.el).height(),
        K = mini.getBorders(this._borderEl);
    C = C - K.top - K.bottom;
    var A = this.getActiveGroup(),
        E = 0;
    for (var F = 0, D = this.groups.length; F < D; F++) {
        var _ = this.groups[F],
            G = this.getGroupEl(_);
        if (_.visible == false || _ == A) continue;
        var $ = G.lastChild.style.display;
        G.lastChild.style.display = "none";
        var J = jQuery(G).outerHeight();
        G.lastChild.style.display = $;
        var L = mini.getMargins(G);
        J = J + L.top + L.bottom;
        E += J
    }
    C = C - E;
    var H = this.getGroupEl(this.activeIndex);
    if (!H) return 0;
    C = C - jQuery(H.firstChild).outerHeight();
    if (jQuery.boxModel) {
        var B = mini.getPaddings(H.lastChild),
            I = mini.getBorders(H.lastChild);
        C = C - B.top - B.bottom - I.top - I.bottom
    }
    B = lol0(H), I = mini.getBorders(H), L = l0l1(H);
    C = C - L.top - L.bottom;
    C = C - B.top - B.bottom - I.top - I.bottom;
    if (C < 0) C = 0;
    return C
};
mini_OutlookBar_getGroup = function($) {
    if (typeof $ == "object") return $;
    if (typeof $ == "number") return this.groups[$];
    else
        for (var _ = 0, B = this.groups.length; _ < B; _++) {
            var A = this.groups[_];
            if (A.name == $) return A
        }
};
mini_OutlookBar_OO01l = function(B) {
    for (var $ = 0, A = this.groups.length; $ < A; $++) {
        var _ = this.groups[$];
        if (_._id == B) return _
    }
};
mini_OutlookBar_getGroupEl = function($) {
    var _ = this.getGroup($);
    if (!_) return null;
    return _._el
};
mini_OutlookBar_getGroupBodyEl = function($) {

    var _ = this.getGroupEl($);
    if (_) return _.lastChild;
    return null
};
mini_OutlookBar_setAutoCollapse = function($) {
    this.autoCollapse = $
};
mini_OutlookBar_getAutoCollapse = function() {
    return this.autoCollapse
};
mini_OutlookBar_setExpandOnLoad = function($) {

    this.expandOnLoad = $
};
mini_OutlookBar_getExpandOnLoad = function() {
    return this.expandOnLoad
};
mini_OutlookBar_setActiveIndex = function(_) {


    var D = this.activeIndex,
        $ = this.getGroup(_),
        A = this.getGroup(this.activeIndex),
        B = $ != A;
    if ($) this.activeIndex = this.groups.indexOf($);
    else this.activeIndex = -1;
    $ = this.getGroup(this.activeIndex);
    if ($) {
        var C = this.allowAnim;
        this.allowAnim = false;
        this.expandGroup($);
        this.allowAnim = C
    }
    if (this.activeIndex == -1 && D != -1) this.collapseGroup(D)
};
mini_OutlookBar_getActiveIndex = function() {
    return this.activeIndex
};
mini_OutlookBar_getActiveGroup = function() {
    return this.getGroup(this.activeIndex)
};
mini_OutlookBar_showGroup = function($) {
    $ = this.getGroup($);
    if (!$ || $.visible == true) return;
    $.visible = true;
    this.doUpdate()
};
mini_OutlookBar_hideGroup = function($) {
    $ = this.getGroup($);
    if (!$ || $.visible == false) return;
    $.visible = false;
    this.doUpdate()
};
mini_OutlookBar_toggleGroup = function($) {
    $ = this.getGroup($);
    if (!$) return;
    if ($.expanded) this.collapseGroup($);
    else this.expandGroup($)
};
mini_OutlookBar_collapseGroup = function(_) {
    _ = this.getGroup(_);
    if (!_) return;
    var D = _.expanded,
        E = 0;
    if (this.autoCollapse && !this.expandOnLoad && !this.isAutoHeight()) E = this.ooo01();
    var F = false;
    _.expanded = false;
    var $ = this.groups.indexOf(_);
    if ($ == this.activeIndex) {
        this.activeIndex = -1;
        F = true
    }
    var C = this.getGroupBodyEl(_);
    if (this.allowAnim && D) {
        this.O1lll0 = true;
        C.style.display = "block";
        C.style.height = "auto";
        if (this.autoCollapse && !this.expandOnLoad && !this.isAutoHeight()) C.style.height = E + "px";
        var A = {
            height: "1px"
        };
        mini.addClass(C, "mini-outlookbar-overflow");
        mini.removeClass(this.getGroupEl(_), "mini-outlookbar-expand");
        var B = this,
            H = jQuery(C);
        H.animate(A, 180, function() {
            B.O1lll0 = false;
            mini.removeClass(C, "mini-outlookbar-overflow");
            B.doLayout()
        })
    } else this.doLayout();
    var G = {
        group: _,
        index: this.groups.indexOf(_),
        name: _.name
    };
    this.fire("Collapse", G);
    if (F) this.fire("activechanged")
};
mini_OutlookBar_expandGroup = function($) {
    $ = this.getGroup($);
    if (!$) return;
    var H = $.expanded;
    $.expanded = true;
    this.activeIndex = this.groups.indexOf($);
    fire = true;
    if (this.autoCollapse && !this.expandOnLoad)
        for (var D = 0, B = this.groups.length; D < B; D++) {
            var C = this.groups[D];
            if (C.expanded && C != $) this.collapseGroup(C)
        }
    var G = this.getGroupBodyEl($);
    if (this.allowAnim && H == false) {
        this.O1lll0 = true;
        G.style.display = "block";
        if (this.autoCollapse && !this.expandOnLoad && !this.isAutoHeight()) {
            var A = this.ooo01();
            G.style.height = (A) + "px"
        } else G.style.height = "auto";
        var _ = mini.getHeight(G);
        G.style.height = "1px";
        var E = {
                height: _ + "px"
            },
            I = G.style.overflow;
        G.style.overflow = "hidden";
        mini.addClass(G, "mini-outlookbar-overflow");
        mini.addClass(this.getGroupEl($), "mini-outlookbar-expand");
        var F = this,
            K = jQuery(G);
        K.animate(E, 180, function() {
            G.style.overflow = I;
            mini.removeClass(G, "mini-outlookbar-overflow");
            F.O1lll0 = false;
            F.doLayout()
        })
    } else this.doLayout();
    var J = {
        group: $,
        index: this.groups.indexOf($),
        name: $.name
    };
    this.fire("Expand", J);
    if (fire) this.fire("activechanged")
};
mini_OutlookBar_lOOO0l = function($) {
    $ = this.getGroup($);
    if ($.enabled == false) return;
    var _ = {
        group: $,
        groupIndex: this.groups.indexOf($),
        groupName: $.name,
        cancel: false
    };
    if ($.expanded) {
        this.fire("BeforeCollapse", _);
        if (_.cancel == false) this.collapseGroup($)
    } else {
        this.fire("BeforeExpand", _);
        if (_.cancel == false) this.expandGroup($)
    }
};
mini_OutlookBar_llO1Oo = function(B) {
    var _ = oOlO(B.target, "mini-outlookbar-group");
    if (!_) return null;
    var $ = _.id.split("$"),
        A = $[$.length - 1];
    return this.OO01l(A)
};
mini_OutlookBar_Ol1o1 = function(A) {
    if (this.O1lll0) return;
    var _ = oOlO(A.target, "mini-outlookbar-groupHeader");
    if (!_) return;
    var $ = this.llO1Oo(A);
    if (!$) return;
    this.lOOO0l($)
};
mini_OutlookBar_parseGroups = function(D) {
    var A = [];
    for (var $ = 0, C = D.length; $ < C; $++) {
        var B = D[$],
            _ = {};
        A.push(_);
        _.style = B.style.cssText;
        mini._ParseString(B, _, ["name", "title", "cls", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle"]);
        mini._ParseBool(B, _, ["visible", "enabled", "showCollapseButton", "expanded"]);
        _.bodyParent = B
    }
    return A
};
mini_OutlookBar_getAttrs = function($) {
    var A = mini.OutlookBar.superclass.getAttrs.call(this, $);
    mini._ParseString($, A, ["onactivechanged", "oncollapse", "onexpand", "imgPath"]);
    mini._ParseBool($, A, ["autoCollapse", "allowAnim", "expandOnLoad"]);
    mini._ParseInt($, A, ["activeIndex"]);
    var _ = mini.getChildNodes($);
    A.groups = this.parseGroups(_);
    return A
};
mini_ButtonEdit_set = function(A) {
    if (typeof A == "string") return this;
    var $ = A.value;
    delete A.value;
    var _ = A.text;
    delete A.text;
    this.lO10O = !(A.enabled == false || A.allowInput == false || A.readOnly);
    mini.ButtonEdit.superclass.set.call(this, A);
    if (this.lO10O === false) {
        this.lO10O = true;
        this.doUpdate()
    }
    if (!mini.isNull(_)) this.setText(_);
    if (!mini.isNull($)) this.setValue($);
    return this
};
mini_ButtonEdit_setButtons = function(B, _) {
    var E = this;
    E.buttons = B || [];
    var D = "";

    function C($) {
        D += E._createButtonHtml($.name, $.iconCls, $.tooltip)
    }
    for (var A = 0, F = E.buttons.length; A < F; A++) {
        var G = E.buttons[A];
        if (!G.name) G.name = "button" + A;
        C(G)
    }
    if (!_) $(".mini-buttonedit-button", this.el).remove();
    mini.append(E._buttonsEl, D);
    E._doInputLayout(false)
};
mini_ButtonEdit_getButtons = function() {
    return this.buttons || []
};
mini_ButtonEdit_getButtonByName = function(B) {

    var C = this.getButtons();
    for (var _ = 0, A = C.length; _ < A; _++) {
        var $ = C[_];
        if ($.name && $.name == B) return $
    }
    return null
};
mini_ButtonEdit__createButtonHtml = function(B, _, A) {
    B = B || "";
    _ = _ || "";
    A = A || "";
    var $ = "onmouseover=\"mini.addClass(this,'" + this.O1l0 + "');\" " + "onmouseout=\"mini.removeClass(this,'" + this.O1l0 + "');\"";
    return "<span title=\"" + A + "\" name=\"" + B + "\" class=\"mini-buttonedit-button mini-buttonedit-" + B + "\" " + $ + "><span class=\"mini-buttonedit-icon " + _ + "\"></span></span>"
};
mini_ButtonEdit_loOOoOsHTML = function() {
    var $ = "<span class=\"mini-buttonedit-close\" name=\"close\"></span>" + this.loOOoOHtml("trigger", "", this.buttonToolTip);
    return "<span class=\"mini-buttonedit-buttons\">" + $ + "</span>"
};
mini_ButtonEdit_loOOoOHtml = function(A, $, _) {
    return this._createButtonHtml(A, $, _)
};
mini_ButtonEdit__create = function() {
    this.el = document.createElement("span");
    this.el.className = "mini-buttonedit";
    var $ = this.loOOoOsHTML();
    this.el.innerHTML = "<span class=\"mini-buttonedit-border\"><input type=\"text\" class=\"mini-buttonedit-input\" autocomplete=\"off\"/>" + $ + "</span><input name=\"" + this.name + "\" type=\"hidden\"/>";
    this._borderEl = this.el.firstChild;
    this._textEl = this._borderEl.firstChild;
    this.ll10l = this.el.lastChild;
    this._buttonsEl = this._borderEl.lastChild;
    this._buttonEl = this._buttonsEl.lastChild;
    this._closeEl = this._buttonEl.previousSibling;
    this.o1olOo()
};
mini_ButtonEdit_destroy = function($) {
    if (this._textEl) {
        this._textEl.onchange = this._textEl.onfocus = null;
        mini.clearEvent(this._textEl);
        this._textEl = null
    }
    this._borderEl = this._buttonsEl = this._buttonEl = this._closeEl = this.ll10l = null;
    mini.ButtonEdit.superclass.destroy.call(this, $)
};
mini_ButtonEdit__initEvents = function() {
    mini._BindEvents(function() {
        OooO(this.el, "mousedown", this.__OnMouseDown, this);
        OooO(this._textEl, "focus", this.ol00, this);
        OooO(this._textEl, "change", this.O00l10, this);
        var $ = this.text;
        this.text = null;
        if (this.el)
            if (this._deferSetText) this.setText($)
    }, this)
};
mini_ButtonEdit_o0oO = function() {
    if (this.l0l1O1) return;
    this.l0l1O1 = true;
    mini.on(this.el, "click", this.__OnClick, this);
    mini.on(this._textEl, "blur", this.Ol0O1, this);
    mini.on(this._textEl, "keydown", this.O10l1, this);
    mini.on(this._textEl, "keyup", this.OoOlO1, this);
    mini.on(this._textEl, "keypress", this.o1oO, this)
};
mini_ButtonEdit__doInputLayout = function(B) {
    this._buttonEl.style.display = this.showButton ? "inline-block" : "none";
    this._buttonEl.title = this.buttonToolTip;
    if (this._closeEl) {
        this._closeEl.style.display = this.showClose ? "inline-block" : "none";
        this._closeEl.title = this.closeToolTip
    }
    if (mini.isNull(mini.ButtonEdit._paddingOffset)) {
        var A = mini.getPaddings(this._borderEl);
        mini.ButtonEdit._paddingOffset = A.left
    }
    var _ = this._buttonsEl.offsetWidth,
        $ = _ + (_ > 0 ? 0 : mini.ButtonEdit._paddingOffset);
    if ($ == 2) this._noLayout = true;
    else this._noLayout = false;
    this._borderEl.style["paddingRight"] = $ + "px";
    if (B !== false) this.doLayout()
};
mini_ButtonEdit_doLayout = function() {

    if (this._noLayout) this._doInputLayout(false);
    if (this._doLabelLayout) this._labelLayout()
};
mini_ButtonEdit_setHeight = function($) {

    if (parseInt($) == $) $ += "px";
    this.height = $
};
mini_ButtonEdit_focus = function() {

    try {
        this._textEl.focus();
        var $ = this;
        setTimeout(function() {
            if ($.OO0Ol) $._textEl.focus()
        }, 10)
    } catch (_) {}
};
mini_ButtonEdit_blur = function() {

    try {
        this._textEl.blur()
    } catch ($) {}
};
mini_ButtonEdit_selectText = function() {

    this._textEl.select()
};
mini_ButtonEdit_getTextEl = function() {
    return this._textEl
};
mini_ButtonEdit_setName = function($) {
    this.name = $;
    if (this.ll10l) mini.setAttr(this.ll10l, "name", this.name)
};
mini_ButtonEdit_setText = function($) {
    if ($ === null || $ === undefined) $ = "";
    var _ = this.text !== $;
    this.text = $;
    this._textEl.value = $;
    this.o1olOo()
};
mini_ButtonEdit_getText = function() {
    var $ = this._textEl.value;
    return $
};
mini_ButtonEdit_setValue = function($) {
    if ($ === null || $ === undefined) $ = "";
    var _ = this.value !== $;
    this.value = $;
    this.ll10l.value = this.getFormValue()
};
mini_ButtonEdit_getValue = function() {
    return this.value
};
mini_ButtonEdit_getFormValue = function() {
    var $ = this.value;
    if ($ === null || $ === undefined) $ = "";
    return String($)
};
mini_ButtonEdit_o1olOo = function() {
    this._textEl.placeholder = this.emptyText;
    if (this.emptyText) O011(this._textEl)
};
mini_ButtonEdit_setEmptyText = function($) {
    if (this.emptyText != $) {
        this.emptyText = $;
        this.o1olOo()
    }
};
mini_ButtonEdit_getEmptyText = function() {
    return this.emptyText
};
mini_ButtonEdit_setMaxLength = function($) {
    $ = parseInt($);
    if (isNaN($)) return;
    this.maxLength = $;
    this._textEl.maxLength = $
};
mini_ButtonEdit_getMaxLength = function() {
    return this.maxLength
};
mini_ButtonEdit_setMinLength = function($) {
    $ = parseInt($);
    if (isNaN($)) return;
    this.minLength = $
};
mini_ButtonEdit_getMinLength = function() {


    return this.minLength
};
mini_ButtonEdit_setEnabled = function($) {
    mini.ButtonEdit.superclass.setEnabled.call(this, $)
};
mini_ButtonEdit__doReadOnly = function() {
    var $ = this.isReadOnly();
    if ($ || this.allowInput == false) this._textEl.readOnly = true;
    else this._textEl.readOnly = false;
    if ($) this.addCls(this.OooO01);
    else this.removeCls(this.OooO01);
    if (this.allowInput) this.removeCls(this.oo1o1O);
    else this.addCls(this.oo1o1O);
    if (this.enabled) this._textEl.disabled = false;
    else this._textEl.disabled = true
};
mini_ButtonEdit_setAllowInput = function($) {
    this.allowInput = $;
    this._doReadOnly()
};
mini_ButtonEdit_getAllowInput = function() {
    return this.allowInput
};
mini_ButtonEdit_setInputAsValue = function($) {

    this.inputAsValue = $
};
mini_ButtonEdit_getInputAsValue = function() {
    return this.inputAsValue
};
mini_ButtonEdit_setAutoClear = function($) {
    this.autoClear = $
};
mini_ButtonEdit_getAutoClear = function() {
    return this.autoClear
};
mini_ButtonEdit_setButtonToolTip = function($) {
    this.buttonToolTip = $
};
mini_ButtonEdit_getButtonToolTip = function() {

    return this.buttonToolTip
};
mini_ButtonEdit_getErrorIconEl = function() {

    if (!this.oO1100) this.oO1100 = mini.append(this.el, "<span class=\"mini-errorIcon\"></span>");
    return this.oO1100
};
mini_ButtonEdit_Olll1 = function() {
    if (this.oO1100) {
        var $ = this.oO1100;
        jQuery($).remove()
    }
    this.oO1100 = null
};
mini_ButtonEdit_Ol1o1 = function(_) {
    if (this.enabled == false) return;
    this.fire("click", {
        htmlEvent: _
    });
    if (this.isReadOnly()) return;
    if (!Oolo(this._borderEl, _.target)) return;
    var $ = new Date();
    if (Oolo(this._buttonEl, _.target)) this.lo101(_);
    if (oOlO(_.target, this._closeCls)) {
        if (this.autoClear)
            if ((this.value && this.value !== 0) || this.text !== "") {
                this.setValue("");
                this.setText("");
                this.Ol11o()
            }
        this.fire("closeclick", {
            htmlEvent: _
        })
    }
    this._handlerButtonElClick(_)
};
mini_ButtonEdit__handlerButtonElClick = function(C) {
    var _ = oOlO(C.target, "mini-buttonedit-button");
    if (_ && _ != this._buttonEl && _ != this._closeEl) {
        var A = jQuery(_).attr("name"),
            B = this.getButtonByName(A),
            $ = {
                sender: this,
                button: B,
                htmlEvent: C
            };
        if (B.handler) B.handler($)
    }
};
mini_ButtonEdit_olol = function(C) {
    if (this.isReadOnly() || this.enabled == false) return;
    if (!Oolo(this._borderEl, C.target)) return;
    if (!Oolo(this._textEl, C.target)) {
        this._clickTarget = C.target;
        var $ = this;
        setTimeout(function() {
            $.focus();
            mini.selectRange($._textEl, 1000, 1000)
        }, 1);
        if (Oolo(this._buttonEl, C.target)) {
            var _ = oOlO(C.target, "mini-buttonedit-up"),
                B = oOlO(C.target, "mini-buttonedit-down");
            if (_) {
                mini.addClass(_, this.ll111);
                this.O1Oo1(C, "up")
            } else if (B) {
                mini.addClass(B, this.ll111);
                this.O1Oo1(C, "down")
            } else {
                mini.addClass(this._buttonEl, this.ll111);
                this.O1Oo1(C)
            }
        }
        mini.on(document, "mouseup", this.lo010o, this);
        var A = oOlO(C.target, "mini-buttonedit-button");
        if (A) mini.addClass(A, this.ll111)
    }
};
mini_ButtonEdit_lo010o = function(_) {
    this._clickTarget = null;
    var $ = this;
    setTimeout(function() {
        var A = $._buttonEl.getElementsByTagName("*");
        for (var _ = 0, B = A.length; _ < B; _++) mini.removeClass(A[_], $.ll111);
        mini.removeClass($._buttonEl, $.ll111);
        mini.removeClass($.el, $.oll001);
        jQuery(".mini-buttonedit-button", $._buttonsEl).removeClass($.ll111)
    }, 80);
    mini.un(document, "mouseup", this.lo010o, this)
};
mini_ButtonEdit_ol00 = function($) {
    this.doUpdate();
    this.o0oO();
    if (this.isReadOnly()) return;
    this.OO0Ol = true;
    this.addCls(this.l0l0l1);
    if (this.selectOnFocus) this.selectText();
    this.fire("focus", {
        htmlEvent: $
    })
};
mini_ButtonEdit___doFocusCls = function() {
    if (this.OO0Ol == false) this.removeCls(this.l0l0l1)
};
mini_ButtonEdit___fireBlur = function(A) {
    var $ = this;

    function _() {
        if ($.OO0Ol == false) {
            $.removeCls($.l0l0l1);
            if ($.validateOnLeave && $.isEditable()) $._tryValidate();
            this.fire("blur", {
                htmlEvent: A
            })
        }
    }
    setTimeout(function() {
        _.call($)
    }, 2)
};
mini_ButtonEdit_Ol0O1 = function(_) {

    var $ = this;
    $.OO0Ol = false;
    setTimeout(function() {
        $.__fireBlur(_)
    }, 10)
};
mini_ButtonEdit_O10l1 = function(B) {
    var A = {
        htmlEvent: B
    };
    this.fire("keydown", A);
    if (B.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) return false;
    if (B.keyCode == 27 || B.keyCode == 13 || B.keyCode == 9) {
        var $ = this;
        $.O00l10(null);
        if (B.keyCode == 13) {
            var _ = this;
            _.fire("enter", A)
        }
    }
    if (B.keyCode == 27) B.preventDefault()
};
mini_ButtonEdit_O00l10 = function() {
    var _ = this._textEl.value;
    if (_ == this.text) return;
    var $ = this.getValue();
    this.setText(_);
    if (this.inputAsValue) {
        this.setValue(_);
        if ($ !== this.getFormValue()) this.Ol11o()
    }
};
mini_ButtonEdit_OoOlO1 = function($) {
    this.fire("keyup", {
        htmlEvent: $
    })
};
mini_ButtonEdit_o1oO = function($) {

    this.fire("keypress", {
        htmlEvent: $
    })
};
mini_ButtonEdit_lo101 = function($) {
    var _ = {
        htmlEvent: $,
        cancel: false
    };
    this.fire("beforebuttonclick", _);
    if (_.cancel == true) return;
    this.fire("buttonclick", _)
};
mini_ButtonEdit_O1Oo1 = function(_, $) {
    this.focus();
    this.addCls(this.l0l0l1);
    this.fire("buttonmousedown", {
        htmlEvent: _,
        spinType: $
    })
};
mini_ButtonEdit_onButtonClick = function(_, $) {
    this.on("buttonclick", _, $)
};
mini_ButtonEdit_onButtonMouseDown = function(_, $) {
    this.on("buttonmousedown", _, $)
};
mini_ButtonEdit_onTextChanged = function(_, $) {

    this.on("textchanged", _, $)
};
mini_ButtonEdit_setTextName = function($) {
    this.textName = $;
    if (this._textEl) mini.setAttr(this._textEl, "name", this.textName)
};
mini_ButtonEdit_getTextName = function() {
    return this.textName
};
mini_ButtonEdit_setSelectOnFocus = function($) {
    this.selectOnFocus = $
};
mini_ButtonEdit_getSelectOnFocus = function($) {
    return this.selectOnFocus
};
mini_ButtonEdit_setShowClose = function($) {
    this.showClose = $;
    this._doInputLayout()
};
mini_ButtonEdit_getShowClose = function($) {
    return this.showClose
};
mini_ButtonEdit_setShowButton = function($) {

    this.showButton = $;
    this._doInputLayout()
};
mini_ButtonEdit_getShowButton = function() {

    return this.showButton
};
mini_ButtonEdit_setInputStyle = function($) {
    this.inputStyle = $;
    mini.setStyle(this._textEl, $)
};
mini_ButtonEdit_getAttrs = function(el) {
    var attrs = mini.ButtonEdit.superclass.getAttrs.call(this, el),
        jq = jQuery(el);
    mini._ParseString(el, attrs, ["value", "text", "textName", "emptyText", "inputStyle", "defaultText", "onenter", "onkeydown", "onkeyup", "onkeypress", "onbuttonclick", "onbuttonmousedown", "ontextchanged", "onfocus", "onblur", "oncloseclick", "onclick", "buttons", "buttonToolTip"]);
    mini._ParseBool(el, attrs, ["allowInput", "inputAsValue", "selectOnFocus", "showClose", "showButton", "autoClear"]);
    mini._ParseInt(el, attrs, ["maxLength", "minLength"]);
    var buttons = attrs["buttons"];
    if (buttons) {
        buttons = eval("(" + buttons + ")");
        attrs.buttons = buttons || null
    }
    return attrs
};
mini_FileUpload__create = function() {
    mini.FileUpload.superclass._create.call(this);
    mini.addClass(this.el, "mini-htmlfile");
    this._progressbarEl = mini.append(this._borderEl, "<div id=\"" + this._id + "$progressbar\"  class=\"mini-fileupload-progressbar\"><div id=\"" + this._id + "$complete\" class=\"mini-fileupload-complete\"></div></div>");
    this._completeEl = this._progressbarEl.firstChild;
    this._uploadId = this._id + "$button_placeholder";
    this.llOl1 = mini.append(this.el, "<span id=\"" + this._uploadId + "\"></span>");
    this.uploadEl = this.llOl1;
    mini.on(this._borderEl, "mousemove", this.__mousemove, this)
};

mini_DatePicker_getShowOkButton = function() {
    return this.showOkButton;
};
mini_FileUpload_loOOoOHtml = function() {

    var $ = "onmouseover=\"mini.addClass(this,'" + this.O1l0 + "');\" " + "onmouseout=\"mini.removeClass(this,'" + this.O1l0 + "');\"";
    return "<span class=\"mini-buttonedit-button\" " + $ + ">" + this.buttonText + "</span>"
};
mini_FileUpload_destroy = function($) {

    if (this._innerEl) {
        mini.clearEvent(this._innerEl);
        this._innerEl = null
    }
    if (this.swfUpload) {
        this.swfUpload.destroy();
        this.swfUpload = null
    }
    if (!this.destroyed) mini.clearEvent(this._borderEl);
    mini.FileUpload.superclass.destroy.call(this, $)
};
mini_FileUpload_ol1o0 = function(A) {
    if (this.enabled == false) return;
    var $ = this;
    if (!this.swfUpload) {
        var B = new SWFUpload({
            file_post_name: this.name,
            upload_url: $.uploadUrl,
            flash_url: $.flashUrl,
            file_size_limit: $.limitSize,
            file_types: $.limitType,
            file_types_description: $.typesDescription,
            file_upload_limit: parseInt($.uploadLimit),
            file_queue_limit: $.queueLimit,
            file_queued_handler: mini.createDelegate(this.__on_file_queued, this),
            upload_error_handler: mini.createDelegate(this.__on_upload_error, this),
            upload_success_handler: mini.createDelegate(this.__on_upload_success, this),
            upload_complete_handler: mini.createDelegate(this.__on_upload_complete, this),
            upload_progress_handler: mini.createDelegate(this.__on_upload_progress, this),
            file_queue_error_handler: mini.createDelegate(this.__on_file_queued_error, this),
            button_placeholder_id: this._uploadId,
            button_width: 1000,
            button_height: 50,
            button_window_mode: "transparent",
            button_action: SWFUpload.BUTTON_ACTION.SELECT_FILE,
            debug: false
        });
        B.flashReady();
        this.swfUpload = B;
        var _ = this.swfUpload.movieElement;
        _.style.zIndex = 1000;
        _.style.position = "absolute";
        _.style.left = "0px";
        _.style.top = "0px";
        _.style.width = "100%";
        _.style.height = "50px"
    }
};
mini_FileUpload_addPostParam = function($) {
    mini.copyTo(this.postParam, $)
};
mini_FileUpload_setPostParam = function($) {
    this.addPostParam($)
};
mini_FileUpload_getPostParam = function() {

    return this.postParam
};
mini_FileUpload_setLimitType = function($) {
    this.limitType = $;
    if (this.swfUpload) this.swfUpload.setFileTypes(this.limitType, this.typesDescription)
};
mini_FileUpload_getLimitType = function() {
    return this.limitType
};
mini_FileUpload_setTypesDescription = function($) {
    this.typesDescription = $;
    if (this.swfUpload) this.swfUpload.setFileTypes(this.limitType, this.typesDescription)
};
mini_FileUpload_getTypesDescription = function() {

    return this.typesDescription
};

mini_TreeSelect_getData = function() {
    return this.data;
};
mini_FileUpload_setButtonText = function($) {
    this.buttonText = $;
    this._buttonEl.innerHTML = $
};
mini_FileUpload_getButtonText = function() {
    return this.buttonText
};
mini_FileUpload_setUploadLimit = function($) {
    this.uploadLimit = $
};
mini_FileUpload_setQueueLimit = function($) {
    this.queueLimit = $
};
mini_FileUpload_setFlashUrl = function($) {
    this.flashUrl = $
};
mini_FileUpload_setUploadUrl = function($) {
    if (this.swfUpload) this.swfUpload.setUploadURL($);
    this.uploadUrl = $
};
mini_FileUpload_getUploadUrl = function() {
    return this.uploadUrl
};
mini_FileUpload_setName = function($) {

    this.name = $
};
mini_FileUpload_startUpload = function($) {

    var _ = {
        cancel: false
    };
    this.fire("beforeupload", _);
    if (_.cancel == true) return;
    if (this.swfUpload) {
        this.swfUpload.setPostParams(this.postParam);
        this.swfUpload.startUpload()
    }
};
mini_FileUpload_setShowUploadProgress = function($) {
    this.showUploadProgress = $;
    this._progressbarEl.style.display = $ ? "block" : "none"
};
mini_FileUpload_getShowUploadProgress = function() {
    return this.showUploadProgress
};
mini_FileUpload_clear = function() {
    this.setValue("");
    this.setText("");
    if (this.swfUpload) this.swfUpload.cancelUpload()
};
mini_FileUpload___on_upload_progress = function(A, C, $) {
    if (this.showUploadProgress) {
        var B = mini.getWidth(this._progressbarEl),
            _ = B * C / $;
        mini.setWidth(this._completeEl, _)
    }
    this._progressbarEl.style.display = this.showUploadProgress ? "block" : "none";
    var D = {
        file: A,
        complete: C,
        total: $
    };
    this.fire("uploadprogress", D)
};
mini_FileUpload___on_file_queued_error = function(A, $, _) {
    var B = {
        file: A,
        code: $,
        msg: _
    };
    this.fire("queuederror", B)
};
mini_FileUpload___on_file_queued = function(A) {
    var B = this.swfUpload.getStats();
    if (B) {
        var $ = B.files_queued;
        if ($ > 1)
            for (var _ = 0; _ < $ - 1; _++) this.swfUpload.cancelUpload()
    }
    var C = {
        file: A
    };
    if (this.uploadOnSelect) this.startUpload();
    this.setText(A.name);
    this.setValue(A.name);
    this.validate();
    this.fire("fileselect", C)
};

mini_TreeSelect__getCheckedValue = function() {
    var value = this.tree.getValue();
    this.setValue(value);
};
mini_FileUpload___on_upload_success = function(_, $) {
    var A = {
        file: _,
        serverData: $
    };
    this.fire("uploadsuccess", A);
    this._progressbarEl.style.display = "none"
};
mini_FileUpload___on_upload_error = function(A, $, _) {
    if (_ == "File Cancelled") return;
    this._progressbarEl.style.display = "none";
    var B = {
        file: A,
        code: $,
        message: _
    };
    this.fire("uploaderror", B)
};
mini_FileUpload___on_upload_complete = function($) {
    this._progressbarEl.style.display = "none";
    this.fire("uploadcomplete", $)
};
mini_FileUpload___fileError = function() {};
mini_FileUpload_getAttrs = function($) {
    var _ = mini.FileUpload.superclass.getAttrs.call(this, $);
    mini._ParseString($, _, ["limitType", "limitSize", "flashUrl", "uploadUrl", "uploadLimit", "buttonText", "showUploadProgress", "onuploadsuccess", "onuploaderror", "onuploadcomplete", "onfileselect", "onuploadprogress", "onqueuederror"]);
    mini._ParseBool($, _, ["uploadOnSelect"]);
    return _
};
mini_DatePicker__getCalendar = function() {
    if (!mini.DatePicker._Calendar || mini.DatePicker._Calendar.destroyed) {
        var $ = mini.DatePicker._Calendar = new mini.Calendar();
        $.setStyle("border:0;")
    }
    return mini.DatePicker._Calendar
};
mini_DatePicker_destroy = function($) {
    if (this._destroyPopup);
    this.Ol0Oo = null;
    mini.DatePicker.superclass.destroy.call(this, $)
};
mini_DatePicker__createPopup = function() {
    mini.DatePicker.superclass._createPopup.call(this);
    this.Ol0Oo = this._getCalendar()
};
mini_DatePicker___OnPopupClose = function($) {
    if (this.Ol0Oo) this.Ol0Oo.hideMenu()
};
mini_DatePicker_showPopup = function() {
    var A = {
        cancel: false
    };
    this.fire("beforeshowpopup", A);
    if (A.cancel == true) return;
    this.Ol0Oo = this._getCalendar();
    this.Ol0Oo.beginUpdate();
    this.Ol0Oo._allowLayout = false;
    if (this.Ol0Oo.el.parentNode != this.popup._contentEl) this.Ol0Oo.render(this.popup._contentEl);
    this.Ol0Oo.set({
        monthPicker: this._monthPicker,
        showTime: this.showTime,
        timeFormat: this.timeFormat,
        showClearButton: this.showClearButton,
        showYesterdayButton: this.showYesterdayButton,
        showTodayButton: this.showTodayButton,
        showOkButton: this.showOkButton,
        showWeekNumber: this.showWeekNumber
    });
    this.Ol0Oo.setValue(this.value);
    if (this.value) this.Ol0Oo.setViewDate(this.value);
    else this.Ol0Oo.setViewDate(this.viewDate);

    function $() {
        this.Ol0Oo.hideMenu();
        if (this.Ol0Oo._target) {
            var $ = this.Ol0Oo._target;
            this.Ol0Oo.un("timechanged", $.O0OoO, $);
            this.Ol0Oo.un("dateclick", $.O11o1O, $);
            this.Ol0Oo.un("drawdate", $.Ool1O, $)
        }
        this.Ol0Oo.on("timechanged", this.O0OoO, this);
        this.Ol0Oo.on("dateclick", this.O11o1O, this);
        this.Ol0Oo.on("drawdate", this.Ool1O, this);
        this.Ol0Oo.endUpdate();
        this.Ol0Oo._allowLayout = true;
        this.Ol0Oo.doLayout();
        this.Ol0Oo.focus();
        this.Ol0Oo._target = this
    }
    var _ = this;
    $.call(_);
    mini.DatePicker.superclass.showPopup.call(this)
};
mini_DatePicker_hidePopup = function() {
    mini.DatePicker.superclass.hidePopup.call(this);
    this.Ol0Oo.un("timechanged", this.O0OoO, this);
    this.Ol0Oo.un("dateclick", this.O11o1O, this);
    this.Ol0Oo.un("drawdate", this.Ool1O, this);
    this.Ol0Oo.hideMenu()
};
mini_DatePicker_within = function($) {
    if (Oolo(this.el, $.target)) return true;
    if (this.Ol0Oo.within($)) return true;
    return false
};
mini_DatePicker_O1Ol10 = function($) {
    if ($.keyCode == 13) this.O11o1O();
    if ($.keyCode == 27) {
        this.hidePopup();
        this.focus()
    }
};
mini_DatePicker_O0OO = function(D) {
    if (D.isValid == false) return;
    var B = this.value;
    if (!mini.isDate(B)) return;
    var $ = mini.parseDate(this.maxDate),
        C = mini.parseDate(this.minDate),
        _ = this.maxDateErrorText || mini.VTypes.maxDateErrorText,
        A = this.minDateErrorText || mini.VTypes.minDateErrorText;
    if (mini.isDate($))
        if (B.getTime() > $.getTime()) {
            D.isValid = false;
            D.errorText = String.format(_, mini.formatDate($, this.format))
        }
    if (mini.isDate(C))
        if (B.getTime() < C.getTime()) {
            D.isValid = false;
            D.errorText = String.format(A, mini.formatDate(C, this.format))
        }
};
mini_DatePicker_Ool1O = function(B) {
    var _ = B.date,
        $ = mini.parseDate(this.maxDate),
        A = mini.parseDate(this.minDate);
    if (mini.isDate($))
        if (_.getTime() > $.getTime()) B.allowSelect = false;
    if (mini.isDate(A))
        if (_.getTime() < A.getTime()) B.allowSelect = false;
    this.fire("drawdate", B)
};
mini_DatePicker_O11o1O = function(A) {
    if (!A) return;
    if (this.showOkButton && A.action != "ok") return;
    var _ = this.Ol0Oo.getValue(),
        $ = this.getFormValue("U");
    this.setValue(_);
    if ($ !== this.getFormValue("U")) this.Ol11o();
    this.hidePopup();
    this.focus()
};
mini_DatePicker_O0OoO = function(_) {
    if (this.showOkButton) return;
    var $ = this.Ol0Oo.getValue();
    this.setValue($);
    this.Ol11o()
};
mini_DatePicker_setFormat = function($) {
    if (typeof $ != "string") return;
    if (this.format != $) {
        this.format = $;
        this._textEl.value = this.ll10l.value = this.getFormValue()
    }
};
mini_DatePicker_getFormat = function() {
    return this.format
};
mini_DatePicker_setValueFormat = function($) {
    if (typeof $ != "string") return;
    if (this.valueFormat != $) this.valueFormat = $
};
mini_DatePicker_getValueFormat = function() {
    return this.valueFormat
};
mini_DatePicker_setValue = function($) {


    var _ = this;
    if (_.valueType == "date") $ = mini.parseDate($);
    else if (mini.isDate($)) $ = mini.formatDate($, _.format);
    if (mini.isNull($)) $ = "";
    if (mini.isDate($)) {
        $ = new Date($.getTime());
        if (mini.isDate($) && isNaN($.getTime())) $ = ""
    }
    if (this.value != $) this.value = $;
    this.text = this._textEl.value = this.ll10l.value = this.getFormValue()
};
mini_DatePicker_setNullValue = function($) {
    if ($ == "null") $ = null;
    this.nullValue = $
};
mini_DatePicker_getNullValue = function() {
    return this.nullValue
};
mini_DatePicker_getValue = function() {
    if (this.valueType != "date") return this.value;
    if (!mini.isDate(this.value)) return this.nullValue;
    var $ = this.value;
    if (this.valueFormat) $ = mini.formatDate($, this.valueFormat);
    return $
};
mini_DatePicker_getFormValue = function($) {
    if (this.valueType != "date") return this.value;
    if (!mini.isDate(this.value)) return "";
    $ = $ || this.format;
    return mini.formatDate(this.value, $)
};
mini_DatePicker_setViewDate = function($) {


    $ = mini.parseDate($);
    if (!mini.isDate($)) return;
    this.viewDate = $
};
mini_DatePicker_getViewDate = function() {
    return this.Ol0Oo.getViewDate()
};
mini_DatePicker_setShowTime = function($) {
    if (this.showTime != $) this.showTime = $
};
mini_DatePicker_getShowTime = function() {
    return this.showTime
};
mini_DatePicker_setTimeFormat = function($) {
    if (this.timeFormat != $) this.timeFormat = $
};
mini_DatePicker_getTimeFormat = function() {
    return this.timeFormat
};
mini_DatePicker_setShowYesterdayButton = function($) {
    this.showYesterdayButton = $
};
mini_DatePicker_getShowYesterdayButton = function() {

    return this.showYesterdayButton
};
mini_DatePicker_setShowTodayButton = function($) {

    this.showTodayButton = $
};
mini_DatePicker_O00l10 = function(B) {
    var A = this._textEl.value,
        _ = this.getFormValue("U");
    if (this.valueType == "date") {
        var $ = mini.parseDate(A);
        if (!$ || isNaN($)) $ = null
    }
    this.setValue(A);
    if (_ !== this.getFormValue("U")) this.Ol11o()
};
mini_DatePicker_O10l1 = function(A) {
    var _ = {
        htmlEvent: A
    };
    this.fire("keydown", _);
    if (A.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) return false;
    if (A.keyCode == 9) {
        if (this.isShowPopup()) this.hidePopup();
        return
    }
    if (this.isReadOnly()) return;
    switch (A.keyCode) {
        case 27:
            A.preventDefault();
            if (this.isShowPopup()) A.stopPropagation();
            this.hidePopup();
            break;
        case 9:
        case 13:
            if (this.isShowPopup()) {
                A.preventDefault();
                A.stopPropagation();
                this.hidePopup();
                this.focus()
            } else {
                this.O00l10(null);
                var $ = this;
                setTimeout(function() {
                    $.fire("enter", _)
                }, 10)
            }
            break;
        case 37:
            break;
        case 38:
            A.preventDefault();
            break;
        case 39:
            break;
        case 40:
            if (this.keyNavEnabled) {
                A.preventDefault();
                this.showPopup()
            }
            break;
        default:
            break
    }
};
mini_DatePicker_getAttrs = function($) {
    var _ = mini.DatePicker.superclass.getAttrs.call(this, $);
    mini._ParseString($, _, ["format", "viewDate", "timeFormat", "ondrawdate", "minDate", "maxDate", "valueType", "valueFormat", "nullValue", "minDateErrorText", "maxDateErrorText"]);
    mini._ParseBool($, _, ["showTime", "showTodayButton", "showClearButton", "showOkButton", "showWeekNumber", "showYesterdayButton"]);
    return _
};
mini_TreeSelect_set = function(B) {
    if (typeof B == "string") return this;
    var $ = B.value;
    delete B.value;
    var _ = B.text;
    delete B.text;
    var C = B.url;
    delete B.url;
    var A = B.data;
    delete B.data;
    mini.TreeSelect.superclass.set.call(this, B);
    if (!mini.isNull(A)) this.setData(A);
    if (!mini.isNull(C)) this.setUrl(C);
    if (!mini.isNull($)) this.setValue($);
    if (!mini.isNull(_)) this.setText(_);
    return this
};
mini_TreeSelect__createPopup = function() {
    mini.TreeSelect.superclass._createPopup.call(this);
    this.tree = new mini.Tree();
    this.tree.setShowTreeIcon(true);
    this.tree.setStyle("border:0;width:100%;height:100%;overflow:hidden;");
    this.tree.setResultAsTree(this.resultAsTree);
    this.tree.render(this.popup._contentEl);
    this.tree.setCheckRecursive(this.checkRecursive);
    this.tree.setShowFolderCheckBox(this.showFolderCheckBox);
    this.tree.setShowRadioButton(this.showRadioButton);
    this.tree.setExpandOnNodeClick(this.expandOnNodeClick);
    this.tree.checkOnTextClick = this.checkOnTextClick;
    if (!mini.isNull(this.defaultRowHeight)) this.tree.defaultRowHeight = this.defaultRowHeight;
    this.tree.on("nodeclick", this.nodeclick, this);
    this.tree.on("nodecheck", this.nodecheck, this);
    this.tree.on("expand", this.expand, this);
    this.tree.on("collapse", this.collapse, this);
    this.tree.on("beforenodecheck", this.beforenodecheck, this);
    this.tree.on("beforenodeselect", this.beforenodeselect, this);
    this.tree.on("drawnode", this.drawnode, this);
    this.tree.useAnimation = false;
    var $ = this;
    this.tree.on("beforeload", function(_) {
        $.fire("beforeload", _)
    }, this);
    this.tree.on("load", function(_) {
        $.fire("load", _)
    }, this);
    this.tree.on("loaderror", function(_) {
        $.fire("loaderror", _)
    }, this)
};
mini_TreeSelect_getCheckedNodes = function($) {
    var _ = this.tree.getNodesByValue(this.value);
    if ($ === false) $ = "leaf";
    _ = this.tree._dataSource.doGetCheckedNodes(_, $);
    return _
};
mini_TreeSelect_showPopup = function() {
    var _ = {
        cancel: false
    };
    this.fire("beforeshowpopup", _);
    this._firebeforeshowpopup = false;
    if (_.cancel == true) return;
    var $ = this.popup.el.style.height;
    mini.TreeSelect.superclass.showPopup.call(this);
    this.tree.setValue(this.value, false);
    if (this.expandOnPopup) this.tree.expandPath(this.value);
    this._nohide = false
};
mini_TreeSelect_loadList = function($, A, _) {
    this.tree.loadList($, A, _);
    this.data = this.tree.getData();
    this._getCheckedValue()
};
mini_TreeSelect_setData = function($) {
    if (typeof $ == "string") $ = this._eval($);
    if (!mini.isArray($)) $ = [];
    this.tree.setData($);
    this.data = this.tree.data;
    this._getCheckedValue()
};
mini_TreeSelect_setUrl = function($) {
    this.getPopup();
    this.tree.setUrl($);
    this.url = this.tree.url;
    this.data = this.tree.data;
    this._getCheckedValue()
};
mini_TreeSelect_getUrl = function() {
    return this.url
};
mini_TreeSelect_setVirtualScroll = function($) {
    if (this.tree) this.tree.setVirtualScroll($);
    this.virtualScroll = $
};
mini_TreeSelect_getVirtualScroll = function() {

    return this.virtualScroll
};
mini_TreeSelect_setDefaultRowHeight = function($) {

    if (this.tree) this.tree.defaultRowHeight = $;
    this.defaultRowHeight = $
};
mini_TreeSelect_getDefaultRowHeight = function() {
    return this.defaultRowHeight
};
mini_TreeSelect_setPinyinField = function($) {
    this.pinyinField = $
};
mini_TreeSelect_getPinyinField = function() {
    return this.pinyinField
};
mini_TreeSelect_setTextField = function($) {
    if (this.tree) this.tree.setTextField($);
    this.textField = $
};
mini_TreeSelect_getTextField = function() {
    return this.textField
};
mini_TreeSelect_setNodesField = function($) {

    if (this.tree) this.tree.setNodesField($);
    this.nodesField = $
};
mini_TreeSelect_getNodesField = function() {

    return this.nodesField
};
mini_TreeSelect_setDataField = function($) {
    if (this.tree) this.tree.setDataField($);
    this.dataField = $
};
mini_TreeSelect_getDataField = function() {
    return this.dataField
};
mini_TreeSelect_getValue = function() {


    var $ = mini.TreeSelect.superclass.getValue.call(this);
    if (this.valueFromSelect && $ && this.findItems($).length == 0) return "";
    return $
};
mini_TreeSelect_setValue = function($) {
    var _ = this.tree.ll0l0($);
    if (_[1] == "" && !this.valueFromSelect) {
        _[0] = $;
        _[1] = $
    }
    this.value = $;
    this.ll10l.value = $;
    this.text = this._textEl.value = _[1];
    this.o1olOo()
};
mini_TreeSelect_setMultiSelect = function($) {
    if (this.multiSelect != $) {
        this.multiSelect = $;
        this.tree.setShowCheckBox($);
        this.tree.setAllowSelect(!$);
        this.tree.setEnableHotTrack(!$)
    }
};
mini_TreeSelect_getMultiSelect = function() {
    return this.multiSelect
};
mini_TreeSelect_l1l1 = function(C) {
    if (this.multiSelect) return;
    var A = this.tree.getSelectedNode(),
        _ = this.tree.ll0l0(A),
        B = _[0],
        $ = this.getValue();
    this.setValue(B);
    if ($ != this.getValue()) this.Ol11o();
    if (this._nohide !== true) {
        this.hidePopup();
        this.focus()
    }
    this._nohide = false;
    this.fire("nodeclick", {
        node: C.node
    })
};
mini_TreeSelect_ooOO10 = function(A) {
    if (!this.multiSelect) return;
    var _ = this.tree.getValue(),
        $ = this.getValue();
    this.setValue(_);
    if ($ != this.getValue()) this.Ol11o();
    this.focus()
};
mini_TreeSelect_O10l1 = function(A) {

    var _ = {
        htmlEvent: A
    };
    this.fire("keydown", _);
    if (A.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) return false;
    if (A.keyCode == 9) {
        if (this.isShowPopup()) this.hidePopup();
        return
    }
    if (this.isReadOnly()) return;
    switch (A.keyCode) {
        case 27:
            if (this.isShowPopup()) A.stopPropagation();
            this.hidePopup();
            break;
        case 13:
            var $ = this;
            setTimeout(function() {
                $.fire("enter", _)
            }, 10);
            break;
        case 37:
            break;
        case 38:
            A.preventDefault();
            break;
        case 39:
            break;
        case 40:
            A.preventDefault();
            this.showPopup();
            break;
        default:
            if (this.allowInput == false);
            else {
                $ = this;
                setTimeout(function() {
                    $.l100O()
                }, 10)
            }
            break
    }
};
mini_TreeSelect_l100O = function() {
    if (!this.autoFilter) return;
    if (this.multiSelect) return;
    var A = this.textField,
        _ = this.pinyinField,
        $ = this._textEl.value.toLowerCase();
    this.tree.filter(function(C) {
        var B = String(C[A] ? C[A] : "").toLowerCase(),
            D = String(C[_] ? C[_] : "").toLowerCase();
        if (B.indexOf($) != -1 || D.indexOf($) != -1) return true;
        else return false
    });
    this.tree.expandAll();
    this.showPopup()
};
mini_TreeSelect_setCheckRecursive = function($) {
    this.checkRecursive = $;
    if (this.tree) this.tree.setCheckRecursive($)
};
mini_TreeSelect_getCheckRecursive = function() {
    return this.checkRecursive
};
mini_TreeSelect_setResultAsTree = function($) {

    this.resultAsTree = $;
    if (this.tree) this.tree.setResultAsTree($)
};
mini_TreeSelect_getResultAsTree = function() {
    return this.resultAsTree
};
mini_TreeSelect_setParentField = function($) {
    this.parentField = $;
    if (this.tree) this.tree.setParentField($)
};
mini_TreeSelect_getParentField = function() {
    return this.parentField
};
mini_TreeSelect_setValueField = function($) {
    if (this.tree) this.tree.setIdField($);
    this.valueField = $
};
mini_TreeSelect_getValueField = function() {
    return this.valueField
};
mini_TreeSelect_setShowTreeIcon = function($) {
    this.showTreeIcon = $;
    if (this.tree) this.tree.setShowTreeIcon($)
};

mini_TreeSelect_getExpandOnPopup = function() {
    return this.expandOnPopup;
};
mini_TreeSelect_getShowTreeIcon = function() {
    return this.showTreeIcon
};
mini_TreeSelect_setShowTreeLines = function($) {

    this.showTreeLines = $;
    if (this.tree) this.tree.setShowTreeLines($)
};
mini_TreeSelect_getShowTreeLines = function() {
    return this.showTreeLines
};
mini_TreeSelect_setShowFolderCheckBox = function($) {
    this.showFolderCheckBox = $;
    if (this.tree) this.tree.setShowFolderCheckBox($)
};
mini_TreeSelect_getShowFolderCheckBox = function() {

    return this.showFolderCheckBox
};
mini_TreeSelect_setShowRadioButton = function($) {

    this.showRadioButton = $;
    if (this.tree) this.tree.setShowRadioButton($)
};
mini_TreeSelect_getShowRadioButton = function() {

    return this.showRadioButton
};
mini_TreeSelect_setAutoCheckParent = function($) {
    this.autoCheckParent = $;
    if (this.tree) this.tree.setAutoCheckParent($)
};
mini_TreeSelect_getAutoCheckParent = function() {
    return this.autoCheckParent
};
mini_TreeSelect_setExpandOnLoad = function($) {
    this.expandOnLoad = $;
    if (this.tree) this.tree.setExpandOnLoad($)
};
mini_TreeSelect_getExpandOnLoad = function() {
    return this.expandOnLoad
};
mini_TreeSelect_setValueFromSelect = function($) {

    this.valueFromSelect = $
};
mini_TreeSelect_getValueFromSelect = function() {
    return this.valueFromSelect
};
mini_TreeSelect_setAjaxData = function($) {
    this.ajaxData = $;
    this.tree.setAjaxData($)
};
mini_TreeSelect_setAjaxType = function($) {
    this.ajaxType = $;
    this.tree.setAjaxType($)
};
mini_TreeSelect_setExpandOnNodeClick = function($) {
    this.expandOnNodeClick = $;
    if (this.tree) this.tree.setExpandOnNodeClick($)
};

mini_TreeSelect_oo11o = function(e) {
    this[o0llOo]();
    this.tree.clearFilter();
    this.fire("hidepopup");
};
mini_TreeSelect_getExpandOnNodeClick = function() {
    return this.expandOnNodeClick
};
mini_TreeSelect_setAutoFilter = function($) {
    this.autoFilter = $
};
mini_TreeSelect_getAutoFilter = function() {
    return this.autoFilter
};
mini_TreeSelect_setCheckOnTextClick = function($) {
    if (this.tree) this.tree.checkOnTextClick = $;
    this.checkOnTextClick = $
};
mini_TreeSelect_getCheckOnTextClick = function() {
    return this.checkOnTextClick
};

mini_DatePicker_setMinDate = function(value) {
    this.minDate = value;
};
mini_TreeSelect_getAttrs = function(_) {
    var A = mini.ComboBox.superclass.getAttrs.call(this, _);
    mini._ParseString(_, A, ["url", "data", "textField", "pinyinField", "valueField", "nodesField", "parentField", "onbeforenodecheck", "onbeforenodeselect", "expandOnLoad", "onnodeclick", "onbeforeload", "onload", "onloaderror", "ondrawnode"]);
    mini._ParseBool(_, A, ["expandOnNodeClick", "multiSelect", "resultAsTree", "checkRecursive", "showTreeIcon", "showTreeLines", "showFolderCheckBox", "showRadioButton", "autoCheckParent", "valueFromSelect", "virtualScroll", "expandOnPopup", "autoFilter", "checkOnTextClick"]);
    mini._ParseInt(_, A, ["defaultRowHeight"]);
    if (A.expandOnLoad) {
        var $ = parseInt(A.expandOnLoad);
        if (mini.isNumber($)) A.expandOnLoad = $;
        else A.expandOnLoad = A.expandOnLoad == "true" ? true : false
    }
    return A
};
mini_DataBinding_bindField = function(A, D, C, B, $) {
    A = mini.get(A);
    D = mini.get(D);
    if (!A || !D || !C) return;
    var _ = {
        control: A,
        source: D,
        field: C,
        convert: $,
        mode: B
    };
    this._bindFields.push(_);
    D.on("currentchanged", this.l10oo0, this);
    A.on("valuechanged", this.O01l, this)
};
mini_DataBinding_bindForm = function(B, F, D, A) {

    B = mini.byId(B);
    F = mini.get(F);
    if (!B || !F) return;
    var B = new mini.Form(B),
        $ = B.getFields();
    for (var _ = 0, E = $.length; _ < E; _++) {
        var C = $[_];
        this.bindField(C, F, C.getName(), D, A)
    }
};
mini_DataBinding_l10oo0 = function(H) {
    if (this._doSetting) return;
    this._doSetting = true;
    this._currentRecord = H.record;
    var G = H.sender,
        _ = H.record;
    for (var $ = 0, F = this._bindFields.length; $ < F; $++) {
        var B = this._bindFields[$];
        if (B.source != G) continue;
        var C = B.control,
            D = B.field;
        if (C.setValue)
            if (_) {
                var A = mini._getMap(D, _);
                C.setValue(A)
            } else C.setValue("");
        if (C.setText && C.textName)
            if (_) C.setText(_[C.textName]);
            else C.setText("")
    }
    var E = this;
    setTimeout(function() {
        E._doSetting = false
    }, 10)
};
mini_DataBinding_O01l = function(H) {

    if (this._doSetting) return;
    this._doSetting = true;
    var D = H.sender,
        _ = D.getValue();
    for (var $ = 0, G = this._bindFields.length; $ < G; $++) {
        var C = this._bindFields[$];
        if (C.control != D || C.mode === false) continue;
        var F = C.source,
            B = this._currentRecord;
        if (!B) continue;
        var A = {};
        A[C.field] = _;
        if (D.getText && D.textName) A[D.textName] = D.getText();
        F.updateRow(B, A)
    }
    var E = this;
    setTimeout(function() {
        E._doSetting = false
    }, 10)
};
mini_ListControl_setValueInCheckOrder = function($) {
    this.valueInCheckOrder = $
};
mini_ListControl_getValueInCheckOrder = function() {
    return this.valueInCheckOrder
};

mini_TreeSelect_load = function(data) {
    this.tree[Ooo0ll](data);
    this.data = this.tree.data;
    this._getCheckedValue();
};
mini_ListControl_doLayout = function() {
    if (this._doLabelLayout) this._labelLayout()
};
mini_ListControl_set = function(A) {
    if (typeof A == "string") return this;
    var $ = A.value;
    delete A.value;
    var B = A.url;
    delete A.url;
    var _ = A.data;
    delete A.data;
    mini.ListControl.superclass.set.call(this, A);
    if (!mini.isNull(_)) this.setData(_);
    if (!mini.isNull(B)) this.setUrl(B);
    if (!mini.isNull($)) this.setValue($);
    return this
};
mini_ListControl__create = function() {

};
mini_ListControl__initEvents = function() {

    mini._BindEvents(function() {
        OooO(this.el, "click", this.__OnClick, this);
        OooO(this.el, "dblclick", this.__OnDblClick, this);
        OooO(this.el, "mousedown", this.__OnMouseDown, this);
        OooO(this.el, "mouseup", this.__mouseup, this);
        OooO(this.el, "mousemove", this.__mousemove, this);
        OooO(this.el, "mouseover", this.__OnMouseOver, this);
        OooO(this.el, "mouseout", this.__OnMouseOut, this);
        OooO(this.el, "keydown", this.__keydown, this);
        OooO(this.el, "keyup", this.__keyup, this);
        OooO(this.el, "contextmenu", this.__contextmenu, this)
    }, this)
};
mini_ListControl_destroy = function($) {
    mini.ListControl.superclass.destroy.call(this, $)
};
mini_ListControl_setName = function($) {
    this.name = $;
    if (this.ll10l) mini.setAttr(this.ll10l, "name", this.name)
};
mini_ListControl_o11o1o = function(_) {
    var A = oOlO(_.target, this.l1lO);
    if (A) {
        var $ = parseInt(mini.getAttr(A, "index"));
        return this.data[$]
    }
};
mini_ListControl_addItemCls = function(_, A) {
    var $ = this.getItemEl(_);
    if ($) mini.addClass($, A)
};
mini_ListControl_removeItemCls = function(_, A) {
    var $ = this.getItemEl(_);
    if ($) mini.removeClass($, A)
};
mini_ListControl_getItemEl = function(_) {
    _ = this.getItem(_);
    var $ = this.data.indexOf(_),
        A = this.O0OO01($);
    return document.getElementById(A)
};
mini_ListControl_l1O000 = function(_, $) {
    _ = this.getItem(_);
    if (!_) return;
    var A = this.getItemEl(_);
    if ($ && A) this.scrollIntoView(_);
    if (this.OO0OlItem == _) {
        if (A) mini.addClass(A, this.o1Ol);
        return
    }
    this.o11l();
    this.OO0OlItem = _;
    if (A) mini.addClass(A, this.o1Ol)
};
mini_ListControl_o11l = function() {
    if (!this.OO0OlItem) return;
    var $ = this.getItemEl(this.OO0OlItem);
    if ($) mini.removeClass($, this.o1Ol);
    this.OO0OlItem = null
};
mini_ListControl_getFocusedItem = function() {
    var $ = this.OO0OlItem;
    return this.indexOf($) == -1 ? null : $
};
mini_ListControl_getFocusedIndex = function() {


    return this.data.indexOf(this.OO0OlItem)
};
mini_ListControl_scrollIntoView = function(_) {
    try {
        var $ = this.getItemEl(_),
            A = this.oo11O || this.el;
        mini.scrollIntoView($, A, false)
    } catch (B) {}
};
mini_ListControl_getItem = function($) {
    if (typeof $ == "object") return $;
    if (typeof $ == "number") return this.data[$];
    return this.findItems($)[0]
};
mini_ListControl_getCount = function() {
    return this.data.length
};

mini_ListControl_indexOf = function($) {
    return this.data.indexOf($)
};
mini_ListControl_getAt = function($) {
    return this.data[$]
};
mini_ListControl_updateItem = function($, _) {
    $ = this.getItem($);
    if (!$) return;
    mini.copyTo($, _);
    this.doUpdate()
};
mini_ListControl_load = function($) {
    if (typeof $ == "string") this.setUrl($);
    else this.setData($)
};
mini_ListControl_loadData = function($) {
    this.setData($)
};
mini_ListControl_setData = function(data) {
    if (typeof data == "string") data = eval(data);
    if (!mini.isArray(data)) data = [];
    this.data = data;
    this.doUpdate();
    if (this.value != "") {
        this.deselectAll();
        var records = this.findItems(this.value);
        this.selects(records)
    }
};
mini_ListControl_getData = function() {


    return this.data.clone()
};
mini_ListControl_setUrl = function($) {


    this.url = $;
    this._doLoad({})
};
mini_ListControl_getUrl = function() {
    return this.url
};

mini_TreeSelect_findNodes = function(value) {
    return this.tree.getNodesByValue(value);
};
mini_ListControl__doLoad = function(params) {
    try {
        var url = eval(this.url);
        if (url != undefined) this.url = url
    } catch (e) {}
    var url = this.url,
        ajaxMethod = mini.ListControl.ajaxType;
    if (url)
        if (url.indexOf(".txt") != -1 || url.indexOf(".json") != -1) ajaxMethod = "get";
    var obj = o0ll1(this.ajaxData, this);
    mini.copyTo(params, obj);
    var e = {
        url: this.url,
        async: false,
        type: this.ajaxType ? this.ajaxType : ajaxMethod,
        data: params,
        params: params,
        cache: false,
        cancel: false
    };
    this.fire("beforeload", e);
    if (e.data != e.params && e.params != params) e.data = e.params;
    if (e.cancel == true) return;
    var sf = me = this,
        url = e.url;
    mini.copyTo(e, {
        success: function(A, D, _) {
            delete e.params;
            var $ = {
                    text: A,
                    result: null,
                    sender: me,
                    options: e,
                    xhr: _
                },
                B = null;
            try {
                mini_doload($);
                B = $.result;
                if (!B) B = mini.decode(A)
            } catch (C) {
                if (mini_debugger == true) alert(url + "\njson is error.")
            }
            if (mini.isArray(B)) B = {
                data: B
            };
            if (sf.dataField) B.data = mini._getMap(sf.dataField, B);
            if (!B.data) B.data = [];
            var C = {
                data: B.data,
                cancel: false,
                result: B
            };
            sf.fire("preload", C);
            if (C.cancel == true) return;
            sf.setData(C.data);
            delete C.cancel;
            sf.fire("load", C);
            setTimeout(function() {
                sf.doLayout()
            }, 100)
        },
        error: function($, A, _) {
            var B = {
                xhr: $,
                text: $.responseText,
                textStatus: A,
                errorMsg: $.responseText,
                errorCode: $.status
            };
            if (mini_debugger == true) alert(url + "\n" + B.errorCode + "\n" + B.errorMsg);
            sf.fire("loaderror", B)
        }
    });
    this.o1010O = mini.ajax(e)
};
mini_ListControl_setValue = function($) {
    if (mini.isNull($)) $ = "";
    this.deselectAll();
    this.value = $;
    if (this.ll10l) this.ll10l.value = $;
    var _ = this.findItems(this.value);
    this.selects(_);
    this.setSelected(_[0])
};
mini_ListControl_getValue = function() {
    return this.value
};
mini_ListControl_getFormValue = function() {

    return this.value
};
mini_ListControl_setValueField = function($) {
    this.valueField = $
};
mini_ListControl_getValueField = function() {
    return this.valueField
};
mini_ListControl_setTextField = function($) {
    this.textField = $
};
mini_ListControl_getTextField = function() {
    return this.textField
};
mini_ListControl_getItemValue = function($) {
    return String(mini._getMap(this.valueField, $))
};
mini_ListControl_getItemText = function($) {
    var _ = mini._getMap(this.textField, $);
    return mini.isNull(_) ? "" : String(_)
};
mini_ListControl_ll0l0 = function(A) {
    if (mini.isNull(A)) A = [];
    if (!mini.isArray(A)) A = this.findItems(A);
    if (this.valueInCheckOrder) {
        var C = this.getData();
        mini.sort(A, function(_, B) {
            var $ = C.indexOf(_),
                A = C.indexOf(B);
            if ($ > A) return 1;
            if ($ < A) return -1;
            return 0
        })
    }
    var B = [],
        D = [];
    for (var _ = 0, E = A.length; _ < E; _++) {
        var $ = A[_];
        if ($) {
            B.push(this.getItemValue($));
            D.push(this.getItemText($))
        }
    }
    return [B.join(this.delimiter), D.join(this.delimiter)]
};
mini_ListControl_findItems = function(_) {

    if (mini.isNull(_) || _ === "") return [];
    if (typeof _ == "function") {
        var E = _,
            H = [],
            I = this.data;
        for (var J = 0, A = I.length; J < A; J++) {
            var $ = I[J];
            if (E($, J) === true) H.push($)
        }
        return H
    }
    var C = String(_).split(this.delimiter),
        I = this.data,
        K = {};
    for (J = 0, A = I.length; J < A; J++) {
        var $ = I[J],
            F = mini._getMap(this.valueField, $);
        K[F] = $
    }
    var B = [];
    for (var G = 0, D = C.length; G < D; G++) {
        F = C[G], $ = K[F];
        if ($) B.push($)
    }
    return B
};
mini_ListControl_removeAll = function() {
    var $ = this.getData();
    this.removeItems($)
};
mini_ListControl_addItems = function(_, $) {
    if (!mini.isArray(_)) return;
    if (mini.isNull($)) $ = this.data.length;
    this.data.insertRange($, _);
    this.doUpdate()
};
mini_ListControl_addItem = function(_, $) {

    if (!_) return;
    if (this.data.indexOf(_) != -1) return;
    if (mini.isNull($)) $ = this.data.length;
    this.data.insert($, _);
    this.doUpdate()
};
mini_ListControl_removeItems = function($) {
    if (!mini.isArray($)) return;
    this.data.removeRange($);
    this.lollO0();
    this.doUpdate()
};
mini_ListControl_removeItem = function(_) {


    var $ = this.data.indexOf(_);
    if ($ != -1) {
        this.data.removeAt($);
        this.lollO0();
        this.doUpdate()
    }
};
mini_ListControl_moveItem = function(_, $) {
    if (!_ || !mini.isNumber($)) return;
    if ($ < 0) $ = 0;
    if ($ > this.data.length) $ = this.data.length;
    this.data.remove(_);
    this.data.insert($, _);
    this.doUpdate()
};
mini_ListControl_lollO0 = function() {
    for (var _ = this.Oo1l1o.length - 1; _ >= 0; _--) {
        var $ = this.Oo1l1o[_];
        if (this.data.indexOf($) == -1) this.Oo1l1o.removeAt(_)
    }
    var A = this.ll0l0(this.Oo1l1o);
    this.value = A[0];
    if (this.ll10l) this.ll10l.value = this.value
};
mini_ListControl_setMultiSelect = function($) {
    this.multiSelect = $
};
mini_ListControl_getMultiSelect = function() {
    return this.multiSelect
};
mini_ListControl_isSelected = function($) {
    if (!$) return false;
    return this.Oo1l1o.indexOf($) != -1
};
mini_ListControl_getSelecteds = function() {
    var $ = this.Oo1l1o.clone(),
        _ = this;
    if (this.valueInCheckOrder) mini.sort($, function(A, C) {
        var $ = _.indexOf(A),
            B = _.indexOf(C);
        if ($ > B) return 1;
        if ($ < B) return -1;
        return 0
    });
    return $
};
mini_ListControl_setSelected = function($) {
    if ($) {
        this.O1l0l1 = $;
        this.select($)
    }
};
mini_ListControl_getSelected = function() {

    return this.O1l0l1
};
mini_ListControl_select = function($) {
    $ = this.getItem($);
    if (!$) return;
    if (this.isSelected($)) return;
    this.O1l0l1 = $;
    this.selects([$])
};
mini_ListControl_deselect = function($) {
    $ = this.getItem($);
    if (!$) return;
    if (!this.isSelected($)) return;
    this.deselects([$])
};
mini_ListControl_selectAll = function() {
    var $ = this.data.clone();
    this.selects($)
};
mini_ListControl_deselectAll = function() {
    this.deselects(this.Oo1l1o)
};
mini_ListControl_clearSelect = function() {

    this.deselectAll()
};
mini_ListControl_selects = function(A) {
    if (!A || A.length == 0) return;
    A = A.clone();
    if (this.multiSelect == false && A.length > 1) A.length = 1;
    for (var _ = 0, C = A.length; _ < C; _++) {
        var $ = A[_];
        if (!this.isSelected($)) this.Oo1l1o.push($)
    }
    var B = this;
    B.O0oo0O()
};
mini_ListControl_deselects = function(A) {
    if (!A || A.length == 0) return;
    A = A.clone();
    for (var _ = A.length - 1; _ >= 0; _--) {
        var $ = A[_];
        if (this.isSelected($)) this.Oo1l1o.remove($)
    }
    var B = this;
    B.O0oo0O()
};
mini_ListControl_O0oo0O = function() {

    var C = this.ll0l0(this.Oo1l1o);
    this.value = C[0];
    if (this.ll10l) this.ll10l.value = this.value;
    for (var A = 0, D = this.data.length; A < D; A++) {
        var _ = this.data[A],
            F = this.isSelected(_);
        if (F) this.addItemCls(_, this._llOO1O);
        else this.removeItemCls(_, this._llOO1O);
        var $ = this.data.indexOf(_),
            E = this.lo1ol($),
            B = mini.byId(E, this.el);
        if (B) B.checked = !!F
    }
};
mini_ListControl__OnSelectionChanged = function(_, B) {
    var $ = this.ll0l0(this.Oo1l1o);
    this.value = $[0];
    if (this.ll10l) this.ll10l.value = this.value;
    var A = {
        selecteds: this.getSelecteds(),
        selected: this.getSelected(),
        value: this.getValue()
    };
    this.fire("SelectionChanged", A)
};
mini_ListControl_lo1ol = function($) {
    return this.uid + "$ck$" + $
};
mini_ListControl_O0OO01 = function($) {
    return this.uid + "$" + $
};
mini_ListControl_Ol1o1 = function($) {
    this.o00lol($, "Click")
};

mini_TreeSelect_getChildNodes = function(node) {
    return this.tree.getChildNodes(node);
};
mini_ListControl_o1oo11 = function($) {
    this.o00lol($, "Dblclick")
};
mini_ListControl_olol = function($) {
    this.o00lol($, "MouseDown")
};
mini_ListControl_oOlo0 = function($) {
    this.o00lol($, "MouseUp")
};
mini_ListControl_ol1o0 = function($) {

    this.o00lol($, "MouseMove")
};
mini_ListControl_O1l1lo = function($) {
    this.o00lol($, "MouseOver")
};
mini_ListControl_O11O11 = function($) {
    this.o00lol($, "MouseOut")
};
mini_ListControl_l001l = function($) {
    this.o00lol($, "KeyDown")
};
mini_ListControl_l0o0lO = function($) {

    this.o00lol($, "KeyUp")
};
mini_ListControl_O00O = function($) {
    this.o00lol($, "ContextMenu")
};

mini_TreeSelect__eval = function(_) {
    return eval('(' + _ + ')');
};
mini_ListControl_o00lol = function(C, A) {
    if (!this.enabled) return;
    var $ = this.o11o1o(C);
    if (!$) return;
    var B = this["_OnItem" + A];
    if (B) B.call(this, $, C);
    else {
        var _ = {
            item: $,
            htmlEvent: C
        };
        this.fire("item" + A, _)
    }
};
mini_ListControl__OnItemClick = function($, B) {

    if (this.isReadOnly() || this.enabled == false || $.enabled === false) {
        B.preventDefault();
        return
    }
    var _ = this.getValue(),
        A = {
            item: $,
            htmlEvent: B,
            cancel: false
        };
    this.fire("beforeselect", A);
    if (A.cancel == false) {
        if (this.multiSelect) {
            if (this.isSelected($)) {
                this.deselect($);
                if (this.O1l0l1 == $) this.O1l0l1 = null
            } else {
                this.select($);
                this.O1l0l1 = $
            }
            if ($.__NullItem) {
                this.deselectAll();
                this.O1l0l1 = null
            }
            this._OnSelectionChanged()
        } else if (!this.isSelected($)) {
            this.deselectAll();
            this.select($);
            this.O1l0l1 = $;
            this._OnSelectionChanged()
        }
        if (_ != this.getValue()) this.Ol11o()
    }
    var B = {
        item: $,
        htmlEvent: B
    };
    this.fire("itemclick", B)
};
mini_ListControl__OnItemMouseOut = function($, _) {
    if (!this.enabled) return;
    if (this.l010) this.o11l();
    var _ = {
        item: $,
        htmlEvent: _
    };
    this.fire("itemmouseout", _)
};
mini_ListControl__OnItemMouseMove = function($, _) {
    if (!this.enabled || $.enabled === false) return;
    this.l1O000($);
    var _ = {
        item: $,
        htmlEvent: _
    };
    this.fire("itemmousemove", _)
};
mini_ListControl_onItemClick = function(_, $) {
    this.on("itemclick", _, $)
};
mini_ListControl_onItemMouseDown = function(_, $) {
    this.on("itemmousedown", _, $)
};

mini_TreeSelect_getSelectedNodes = function() {
    return this.tree.getNodesByValue(this.value);
};
mini_ListControl_onBeforeLoad = function(_, $) {
    this.on("beforeload", _, $)
};
mini_ListControl_onLoad = function(_, $) {
    this.on("load", _, $)
};
mini_ListControl_onLoadError = function(_, $) {
    this.on("loaderror", _, $)
};
mini_ListControl_onPreLoad = function(_, $) {
    this.on("preload", _, $)
};
mini_ListControl_getAttrs = function(C) {


    var G = mini.ListControl.superclass.getAttrs.call(this, C);
    mini._ParseString(C, G, ["url", "data", "value", "textField", "valueField", "onitemclick", "onitemmousemove", "onselectionchanged", "onitemdblclick", "onbeforeload", "onload", "onloaderror", "ondataload", "onbeforeselect"]);
    mini._ParseBool(C, G, ["multiSelect", "valueInCheckOrder"]);
    var E = G.valueField || this.valueField,
        B = G.textField || this.textField;
    if (C.nodeName.toLowerCase() == "select") {
        var D = [];
        for (var A = 0, F = C.length; A < F; A++) {
            var _ = C.options[A],
                $ = {};
            $[B] = _.text;
            $[E] = _.value;
            D.push($)
        }
        if (D.length > 0) G.data = D
    }
    return G
};

mini_OutlookTree_set = function(_) {
    if (typeof _ == "string") return this;
    var A = _.url;
    delete _.url;
    var $ = _.activeIndex;
    delete _.activeIndex;
    mini.OutlookTree.superclass.set.call(this, _);
    if (A) this.setUrl(A);
    if (mini.isNumber($)) this.setActiveIndex($);
    return this
};
mini_OutlookTree_destroy = function($) {
    this._destroyTrees($);
    mini.OutlookTree.superclass.destroy.call(this, $)
};
mini_OutlookTree__destroyTrees = function(B) {

    if (this.OO00l) {
        var _ = this.OO00l.clone();
        for (var $ = 0, C = _.length; $ < C; $++) {
            var A = _[$];
            A.destroy(B)
        }
        this.OO00l.length = 0
    }
};
mini_OutlookTree_l111OlFields = function(_) {
    for (var A = 0, B = _.length; A < B; A++) {
        var $ = _[A];
        $.text = $[this.textField];
        $.url = $[this.urlField];
        $.iconCls = $[this.iconField]
    }
};
mini_OutlookTree__doLoad = function() {

    var _ = [];
    try {
        _ = mini._getResult(this.url, null, null, null, null, this.dataField)
    } catch (A) {
        if (mini_debugger == true) alert("outlooktree json is error.")
    }
    if (this.dataField && !mini.isArray(_)) _ = mini._getMap(this.dataField, _);
    if (!_) _ = [];
    if (this.resultAsTree == false) _ = mini.arrayToTree(_, this.nodesField, this.idField, this.parentField);
    var $ = mini.treeToArray(_, this.nodesField, this.idField, this.parentField);
    this.l111OlFields($);
    this.createNavBarTree(_);
    this.fire("load")
};
mini_OutlookTree_loadList = function($, B, _) {
    B = B || this.idField;
    _ = _ || this.parentField;
    this.l111OlFields($);
    var A = mini.arrayToTree($, this.nodesField, B, _);
    this.load(A)
};
mini_OutlookTree_load = function(_) {
    if (typeof _ == "string") this.setUrl(_);
    else {
        var $ = mini.treeToArray(_, this.itemsField, this.idField, this.parentField);
        this.l111OlFields($);
        this.createNavBarTree(_)
    }
};
mini_OutlookTree_setData = function($) {

    this.load($)
};
mini_OutlookTree_getData = function() {

    return this.data
};
mini_OutlookTree_setUrl = function($) {
    this.url = $;
    this._doLoad()
};
mini_OutlookTree_getUrl = function() {
    return this.url
};
mini_OutlookTree_setTextField = function($) {

    this.textField = $
};
mini_OutlookTree_getTextField = function() {
    return this.textField
};
mini_OutlookTree_setIconField = function($) {
    this.iconField = $
};
mini_OutlookTree_getIconField = function() {
    return this.iconField
};
mini_OutlookTree_setUrlField = function($) {
    this.urlField = $
};
mini_OutlookTree_getUrlField = function() {
    return this.urlField
};
mini_OutlookTree_setResultAsTree = function($) {
    this.resultAsTree = $
};
mini_OutlookTree_getResultAsTree = function() {
    return this.resultAsTree
};
mini_OutlookTree_setNodesField = function($) {
    this.nodesField = $
};
mini_OutlookTree_getNodesField = function() {
    return this.nodesField
};
mini_OutlookTree_setIdField = function($) {
    this.idField = $
};
mini_OutlookTree_getIdField = function() {

    return this.idField
};
mini_OutlookTree_setParentField = function($) {


    this.parentField = $
};
mini_OutlookTree_getParentField = function() {

    return this.parentField
};
mini_OutlookTree_getSelected = function() {
    return this.O1l0l1
};

mini_OutlookTree_isSelectedNode = function(_) {
    _ = this.getNode(_);
    if (!_) return false;
    var $ = this._getOwnerTree(_);
    if (!$) return false;
    return $.isSelectedNode(_)
};
mini_OutlookTree_selectNode = function(_) {
    _ = this.getNode(_);
    if (!_) return;
    var $ = this._getOwnerTree(_);
    $.selectNode(_)
};
mini_OutlookTree_expandPath = function(_) {
    _ = this.getNode(_);
    if (!_) return;
    var $ = this._getOwnerTree(_);
    $.expandPath(_);
    this.expandGroup($._ownerGroup)
};
mini_OutlookTree_expandNode = function(_, A) {

    var _ = this.getNode(_);
    if (!_) return;
    var $ = this._getOwnerTree(_);
    $.expandNode(_, A)
};
mini_OutlookTree_collapseNode = function(_, A) {
    var _ = this.getNode(_);
    if (!_) return;
    var $ = this._getOwnerTree(_);
    $.collapseNode(_, A)
};
mini_OutlookTree_findNodes = function(E, B) {
    var D = [];
    B = B || this;
    for (var $ = 0, C = this.OO00l.length; $ < C; $++) {
        var A = this.OO00l[$],
            _ = A.findNodes(E, B);
        D.addRange(_)
    }
    return D
};
mini_OutlookTree_getNode = function(A) {

    for (var $ = 0, C = this.OO00l.length; $ < C; $++) {
        var _ = this.OO00l[$],
            B = _.getNode(A);
        if (B) return B
    }
    return null
};
mini_OutlookTree_getList = function() {
    var $ = [];
    for (var _ = 0, C = this.OO00l.length; _ < C; _++) {
        var A = this.OO00l[_],
            B = A.getList();
        $.addRange(B)
    }
    return $
};
mini_OutlookTree__getOwnerTree = function(A) {
    if (!A) return;
    for (var $ = 0, B = this.OO00l.length; $ < B; $++) {
        var _ = this.OO00l[$];
        if (_.getby_id(A._id)) return _
    }
};
mini_OutlookTree_setExpandOnLoad = function($) {
    this.expandOnLoad = $
};
mini_OutlookTree_getExpandOnLoad = function() {


    return this.expandOnLoad
};
mini_OutlookTree_setShowArrow = function($) {
    this.showArrow = $
};
mini_OutlookTree_getShowArrow = function() {
    return this.showArrow
};
mini_OutlookTree_setShowTreeIcon = function($) {
    this.showTreeIcon = $
};
mini_OutlookTree_getShowTreeIcon = function($) {
    return this.showTreeIcon
};
mini_OutlookTree_setExpandOnNodeClick = function($) {
    this.expandOnNodeClick = $
};
mini_OutlookTree_getExpandOnNodeClick = function() {


    return this.expandOnNodeClick
};
mini_OutlookTree_setExpandNodeOnLoad = function($) {
    this.expandNodeOnLoad = $
};
mini_OutlookTree_getExpandNodeOnLoad = function() {
    return this.expandNodeOnLoad
};
mini_OutlookTree__handlerTree = function(_) {
    _.tree = _.sender;
    _.sender = this;
    var $ = "node" + _.type;
    if (_.type.indexOf("before") == 0) $ = "beforenode" + _.type.replace("before", "");
    this.fire($, _)
};
mini_OutlookTree_getAttrs = function(_) {
    var A = mini.OutlookTree.superclass.getAttrs.call(this, _);
    A.text = _.innerHTML;
    mini._ParseString(_, A, ["url", "textField", "urlField", "idField", "parentField", "nodesField", "iconField", "onnodeclick", "onnodeselect", "onnodemousedown", "ondrawnode", "expandOnLoad", "imgPath", "onbeforenodeexpand", "onnodeexpand", "onbeforenodecollapse", "onnodecollapse", "onload", "onbeforenodeselect"]);
    mini._ParseBool(_, A, ["resultAsTree", "showArrow", "showTreeIcon", "expandOnNodeClick", "expandNodeOnLoad", "showTreeLines"]);
    if (A.expandOnLoad) {
        var $ = parseInt(A.expandOnLoad);
        if (mini.isNumber($)) A.expandOnLoad = $;
        else A.expandOnLoad = A.expandOnLoad == "true" ? true : false
    }
    return A
};
mini_OutlookTree_setImgPath = function($) {
    this.imgPath = $
};
mini_OutlookTree_getImgPath = function() {

    return this.imgPath
};
mini_OutlookTree_createNavBarTree = function(E) {
    this._destroyTrees();
    var A = this;
    if (!mini.isArray(E)) E = [];
    this.data = E;
    var C = [];
    for (var _ = 0, F = this.data.length; _ < F; _++) {
        var $ = this.data[_],
            B = {};
        B.title = $.text;
        B.iconCls = $.iconCls;
        C.push(B);
        B._children = $[this.nodesField]
    }
    this.setGroups(C);
    this.setActiveIndex(this.activeIndex);
    this.OO00l = [];
    for (_ = 0, F = this.groups.length; _ < F; _++) {
        var B = this.groups[_],
            D = this.getGroupBodyEl(B),
            E = new mini.Tree();
        E.set({
            showTreeLines: this.showTreeLines,
            expandOnNodeClick: this.expandOnNodeClick,
            showTreeIcon: this.showTreeIcon,
            showArrow: this.showArrow,
            imgPath: this.imgPath,
            idField: this.idField,
            parentField: this.parentField,
            textField: this.textField,
            expandOnLoad: this.expandNodeOnLoad,
            style: "width:100%;height:auto;border:0;background:none",
            data: B._children,
            onbeforeload: function($) {
                $.url = A.url
            }
        });
        E.render(D);
        E.on("nodeclick", this.nodeclick, this);
        E.on("nodeselect", this.nodeselect, this);
        E.on("nodemousedown", this.__OnNodeMouseDown, this);
        E.on("drawnode", this.drawnode, this);
        E.on("beforeexpand", this._handlerTree, this);
        E.on("beforecollapse", this._handlerTree, this);
        E.on("expand", this._handlerTree, this);
        E.on("collapse", this._handlerTree, this);
        E.on("beforeselect", this._handlerTree, this);
        this.OO00l.push(E);
        delete B._children;
        E._ownerGroup = B
    }
};
mini_OutlookTree___OnNodeMouseDown = function(_) {


    var $ = {
        node: _.node,
        isLeaf: _.sender.isLeaf(_.node),
        htmlEvent: _.htmlEvent
    };
    this.fire("nodemousedown", $)
};
mini_OutlookTree_l1l1 = function(_) {
    var $ = {
        node: _.node,
        isLeaf: _.sender.isLeaf(_.node),
        htmlEvent: _.htmlEvent
    };
    this.fire("nodeclick", $)
};
mini_OutlookTree_O00ll0 = function(C) {
    if (!C.node) return;
    for (var $ = 0, B = this.OO00l.length; $ < B; $++) {
        var A = this.OO00l[$];
        if (A != C.sender) A.selectNode(null)
    }
    var _ = {
        node: C.node,
        isLeaf: C.sender.isLeaf(C.node),
        htmlEvent: C.htmlEvent
    };
    this.O1l0l1 = C.node;
    this.fire("nodeselect", _)
};
mini_OutlookTree__Ol0O1l = function($) {
    this.fire("drawnode", $)
};
mini_TimeSpinner_loOOoOHtml = function() {
    var $ = "onmouseover=\"mini.addClass(this,'" + this.O1l0 + "');\" " + "onmouseout=\"mini.removeClass(this,'" + this.O1l0 + "');\"";
    return "<span class=\"mini-buttonedit-button\" " + $ + "><span class=\"mini-buttonedit-up\"><span></span></span><span class=\"mini-buttonedit-down\"><span></span></span></span>"
};
mini_TimeSpinner__initEvents = function() {
    mini.TimeSpinner.superclass._initEvents.call(this);
    mini._BindEvents(function() {
        this.on("buttonmousedown", this.ll0Ol0, this);
        mini.on(this.el, "mousewheel", this.l1ll1, this);
        mini.on(this._textEl, "keydown", this.__keydown, this)
    }, this)
};
mini_TimeSpinner_setFormat = function($) {

    if (typeof $ != "string") return;
    var _ = ["H:mm:ss", "HH:mm:ss", "H:mm", "HH:mm", "H", "HH", "mm:ss"];
    if (this.format != $) {
        this.format = $;
        this.text = this._textEl.value = this.getFormattedValue()
    }
};
mini_TimeSpinner_getFormat = function() {
    return this.format
};
mini_TimeSpinner_setValue = function($) {
    $ = mini.parseTime($, this.format);
    if (!$) $ = null;
    if (mini.isDate($)) $ = new Date($.getTime());
    this.value = $;
    this.text = this._textEl.value = this.getFormattedValue();
    this.ll10l.value = this.getFormValue()
};
mini_TimeSpinner_getValue = function() {
    return this.value == null ? null : new Date(this.value.getTime())
};
mini_TimeSpinner_getFormValue = function() {
    if (!this.value) return "";
    return mini.formatDate(this.value, this.format)
};
mini_TimeSpinner_getFormattedValue = function() {
    if (!this.value) return "";
    return mini.formatDate(this.value, this.format)
};
mini_TimeSpinner_oo11ll = function(D, C) {

    var $ = this.getValue();
    if ($) switch (C) {
        case "hours":
            var A = $.getHours() + D;
            if (A > 23) A = 23;
            if (A < 0) A = 0;
            $.setHours(A);
            break;
        case "minutes":
            var B = $.getMinutes() + D;
            if (B > 59) B = 59;
            if (B < 0) B = 0;
            $.setMinutes(B);
            break;
        case "seconds":
            var _ = $.getSeconds() + D;
            if (_ > 59) _ = 59;
            if (_ < 0) _ = 0;
            $.setSeconds(_);
            break
    } else $ = "00:00:00";
    this.setValue($)
};
mini_TimeSpinner_O0l11 = function(D, B, C) {
    this.oooO();
    this.oo11ll(D, this.O00l0l);
    var A = this,
        _ = C,
        $ = new Date();
    this.ol0lo1 = setInterval(function() {
        A.oo11ll(D, A.O00l0l);
        C--;
        if (C == 0 && B > 50) A.O0l11(D, B - 100, _ + 3);
        var E = new Date();
        if (E - $ > 500) A.oooO();
        $ = E
    }, B);
    mini.on(document, "mouseup", this.O1ol01, this)
};
mini_TimeSpinner_oooO = function() {
    clearInterval(this.ol0lo1);
    this.ol0lo1 = null
};
mini_TimeSpinner_ll0Ol0 = function($) {
    this._DownValue = this.getFormValue();
    this.O00l0l = "hours";
    if ($.spinType == "up") this.O0l11(1, 230, 2);
    else this.O0l11(-1, 230, 2)
};
mini_TimeSpinner_O1ol01 = function($) {
    this.oooO();
    mini.un(document, "mouseup", this.O1ol01, this);
    if (this._DownValue != this.getFormValue()) this.Ol11o()
};
mini_TimeSpinner_O00l10 = function(_) {
    var $ = this.getFormValue();
    this.setValue(this._textEl.value);
    if ($ != this.getFormValue()) this.Ol11o()
};
mini_TimeSpinner_getAttrs = function($) {
    var _ = mini.TimeSpinner.superclass.getAttrs.call(this, $);
    mini._ParseString($, _, ["format"]);
    return _
};
mini_OutlookMenu_set = function(_) {

    if (typeof _ == "string") return this;
    var A = _.url;
    delete _.url;
    var $ = _.activeIndex;
    delete _.activeIndex;
    if (mini.isNumber($)) this.activeIndex = $;
    mini.OutlookMenu.superclass.set.call(this, _);
    if (A) this.setUrl(A);
    if (mini.isNumber($)) this.setActiveIndex($);
    return this
};
mini_OutlookMenu_destroy = function($) {
    this._destroyTrees();
    mini.OutlookMenu.superclass.destroy.call(this, $)
};
mini_OutlookMenu__destroyTrees = function() {
    if (this.OollO1) {
        var _ = this.OollO1.clone();
        for (var $ = 0, B = _.length; $ < B; $++) {
            var A = _[$];
            A.destroy()
        }
        this.OollO1.length = 0
    }
};
mini_OutlookMenu_l111OlFields = function(_) {
    for (var A = 0, B = _.length; A < B; A++) {
        var $ = _[A];
        $.text = $[this.textField];
        $.url = $[this.urlField];
        $.iconCls = $[this.iconField]
    }
};
mini_OutlookMenu__doLoad = function() {

    var B = {
        cancel: false
    };
    this.fire("beforeload", B);
    if (B.cancel === true) return;
    var _ = [];
    try {
        _ = mini._getResult(this.url, null, null, null, null, this.dataField)
    } catch (A) {
        if (mini_debugger == true) alert("outlooktree json is error.")
    }
    if (this.dataField && !mini.isArray(_)) _ = mini._getMap(this.dataField, _);
    if (!_) _ = [];
    if (this.resultAsTree == false) _ = mini.arrayToTree(_, this.itemsField, this.idField, this.parentField);
    var $ = mini.treeToArray(_, this.itemsField, this.idField, this.parentField);
    this.l111OlFields($);
    this.createNavBarMenu(_);
    this.fire("load")
};
mini_OutlookMenu_loadList = function($, B, _) {
    B = B || this.idField;
    _ = _ || this.parentField;
    this.l111OlFields($);
    var A = mini.arrayToTree($, this.nodesField, B, _);
    this.load(A)
};
mini_OutlookMenu_load = function(_) {
    if (typeof _ == "string") this.setUrl(_);
    else {
        var $ = mini.treeToArray(_, this.itemsField, this.idField, this.parentField);
        this.l111OlFields($);
        this.createNavBarMenu(_)
    }
};
mini_OutlookMenu_setData = function($) {
    this.load($)
};
mini_OutlookMenu_setUrl = function($) {
    this.url = $;
    this._doLoad()
};
mini_OutlookMenu_getUrl = function() {

    return this.url
};
mini_OutlookMenu_setTextField = function($) {

    this.textField = $
};
mini_OutlookMenu_getTextField = function() {
    return this.textField
};
mini_OutlookMenu_setIconField = function($) {
    this.iconField = $
};
mini_OutlookMenu_getIconField = function() {
    return this.iconField
};
mini_OutlookMenu_setUrlField = function($) {
    this.urlField = $
};
mini_OutlookMenu_getUrlField = function() {
    return this.urlField
};
mini_OutlookMenu_setResultAsTree = function($) {
    this.resultAsTree = $
};
mini_OutlookMenu_getResultAsTree = function() {


    return this.resultAsTree
};
mini_OutlookMenu_setNodesField = function($) {
    this.nodesField = $
};
mini_OutlookMenu_getNodesField = function() {
    return this.nodesField
};
mini_OutlookMenu_setIdField = function($) {
    this.idField = $
};
mini_OutlookMenu_getIdField = function() {
    return this.idField
};
mini_OutlookMenu_setParentField = function($) {
    this.parentField = $
};
mini_OutlookMenu_getParentField = function() {
    return this.parentField
};
mini_OutlookMenu_getSelected = function() {
    return this.O1l0l1
};
mini_OutlookMenu_selectNode = function($) {

    $ = this.getNode($);
    if (!$) {
        if (this.O1l0l1) {
            var _ = this._getOwnerMenu(this.O1l0l1);
            if (_) _.setSelectedItem(null)
        }
        return
    }
    _ = this._getOwnerMenu($);
    if (!_) return;
    this.expandGroup(_._ownerGroup);
    setTimeout(function() {
        try {
            _.setSelectedItem($)
        } catch (A) {}
    }, 100)
};

mini_DatePicker_getShowTodayButton = function() {
    return this.showTodayButton;
};
mini_OutlookMenu_findNodes = function(H, D) {
    var G = [];
    D = D || this;
    for (var _ = 0, F = this.OollO1.length; _ < F; _++) {
        var B = this.OollO1[_].getItems(),
            C = [];
        for (var E = 0, A = B.length; E < A; E++) {
            var $ = B[E];
            if (H && H.call(D, $) === true) C.push($)
        }
        G.addRange(C)
    }
    return G
};
mini_OutlookMenu_getNode = function(_) {
    for (var $ = 0, B = this.OollO1.length; $ < B; $++) {
        var C = this.OollO1[$],
            A = C.getItem(_);
        if (A) return A
    }
    return null
};
mini_OutlookMenu_getList = function() {
    var $ = [];
    for (var _ = 0, B = this.OollO1.length; _ < B; _++) {
        var C = this.OollO1[_],
            A = C.getItems();
        $.addRange(A)
    }
    return $
};
mini_OutlookMenu__getOwnerMenu = function(_) {

    if (!_) return;
    for (var $ = 0, B = this.OollO1.length; $ < B; $++) {
        var C = this.OollO1[$],
            A = C.getItem(_);
        if (A) return C
    }
};
mini_OutlookMenu_getAttrs = function($) {
    var _ = mini.OutlookMenu.superclass.getAttrs.call(this, $);
    _.text = $.innerHTML;
    mini._ParseString($, _, ["url", "textField", "urlField", "idField", "parentField", "itemsField", "iconField", "onitemclick", "onitemselect", "ondrawnode", "imgPath", "onload", "onbeforeload"]);
    mini._ParseBool($, _, ["resultAsTree", "expandOnLoad"]);
    return _
};
mini_OutlookMenu_setImgPath = function($) {
    this.imgPath = $
};
mini_OutlookMenu_getImgPath = function() {

    return this.imgPath
};
mini_OutlookMenu_createNavBarMenu = function(D) {
    this._destroyTrees();
    if (!mini.isArray(D)) D = [];
    this.data = D;
    var B = [];
    for (var _ = 0, E = this.data.length; _ < E; _++) {
        var $ = this.data[_],
            A = {};
        A.title = $.text;
        A.iconCls = $.iconCls;
        B.push(A);
        A.img = $.img;
        A._children = $[this.itemsField]
    }
    this.setGroups(B);
    if (!this.expandOnLoad) this.setActiveIndex(this.activeIndex);
    this.OollO1 = [];
    for (_ = 0, E = this.groups.length; _ < E; _++) {
        var A = this.groups[_],
            C = this.getGroupBodyEl(A),
            F = new mini.Menu();
        F._ownerGroup = A;
        F.set({
            expanded: false,
            imgPath: this.imgPath,
            showNavArrow: false,
            style: "width:100%;height:100%;border:0;",
            borderStyle: "border:0",
            allowSelectItem: true,
            items: A._children
        });
        F.render(C);
        F.on("itemclick", this.olloo, this);
        F.on("itemselect", this.o011o, this);
        this._onDrawNodes(F.getItems());
        this.OollO1.push(F);
        delete A._children
    }
};
mini_OutlookMenu__onDrawNodes = function(A) {
    if (!A) return;
    for (var _ = 0, B = A.length; _ < B; _++) {
        var $ = A[_],
            C = {
                node: $,
                img: $.img,
                nodeHtml: ""
            };
        this.fire("drawnode", C);
        if (C.img != $.img && $.setImg) $.setImg(C.img);
        if (C.nodeHtml != "") $.setText(C.nodeHtml)
    }
};
mini_OutlookMenu_olloo = function(_) {
    var $ = {
        item: _.item,
        htmlEvent: _.htmlEvent
    };
    this.fire("itemclick", $)
};
mini_OutlookMenu_o011o = function(C) {
    if (!C.item) return;
    for (var $ = 0, A = this.OollO1.length; $ < A; $++) {
        var B = this.OollO1[$];
        if (B != C.sender) B.setSelectedItem(null)
    }
    var _ = {
        item: C.item,
        htmlEvent: C.htmlEvent
    };
    this.O1l0l1 = C.item;
    this.fire("itemselect", _)
};
mini_TextBoxList_setTextName = function($) {
    this.textName = $
};
mini_TextBoxList_getTextName = function() {
    return this.textName
};
mini_TextBoxList_getData = function() {
    return this.data
};
mini_TextBoxList_setData = function($) {
    this.data = $
};
mini_TextBoxList_getRemote = function() {

    return this.remote
};
mini_TextBoxList_setRemote = function($) {
    this.remote = $
};
mini_TextBoxList__create = function() {

    var A = "<table class=\"mini-textboxlist\" cellpadding=\"0\" cellspacing=\"0\"><tr ><td class=\"mini-textboxlist-border\"><ul></ul><a href=\"#\"></a><input type=\"hidden\"/></td></tr></table>",
        _ = document.createElement("div");
    _.innerHTML = A;
    this.el = _.firstChild;
    var $ = this.el.getElementsByTagName("td")[0];
    this.ulEl = $.firstChild;
    this.ll10l = $.lastChild;
    this.focusEl = $.childNodes[1]
};
mini_TextBoxList_destroy = function($) {
    if (this.isShowPopup) this.hidePopup();
    if (this.o0ll0o) {
        mini.clearEvent(this.o0ll0o);
        this.o0ll0o.onkeyup = null;
        this.o0ll0o.onfocus = null;
        this.o0ll0o.onblur = null
    }
    mini.un(document, "mousedown", this.oll01, this);
    mini.TextBoxList.superclass.destroy.call(this, $)
};
mini_TextBoxList__initEvents = function() {
    mini.TextBoxList.superclass._initEvents.call(this);
    mini.on(this.el, "mousemove", this.__mousemove, this);
    mini.on(this.el, "mouseout", this.__OnMouseOut, this);
    mini.on(this.el, "mousedown", this.__OnMouseDown, this);
    mini.on(this.el, "click", this.__OnClick, this);
    mini.on(this.el, "keydown", this.__keydown, this);
    mini.on(document, "mousedown", this.oll01, this)
};
mini_TextBoxList_oll01 = function(_) {
    if (this.isReadOnly()) return;
    if (this.isShowPopup)
        if (!Oolo(this.popup.el, _.target)) this.hidePopup();
    var $ = this;
    if (this.OO0Ol)
        if (this.within(_) == false) {
            clearInterval(this.o1lo0l);
            this.select(null, false);
            setTimeout(function() {
                $.showInput(false)
            }, 100);
            this.removeCls(this.l0l0l1);
            this.OO0Ol = false
        }
};
mini_TextBoxList_getErrorIconEl = function() {
    if (!this.oO1100) {
        var _ = this.el.rows[0],
            $ = _.insertCell(1);
        $.style.cssText = "width:18px;vertical-align:top;";
        $.innerHTML = "<div class=\"mini-errorIcon\"></div>";
        this.oO1100 = $.firstChild
    }
    return this.oO1100
};
mini_TextBoxList_Olll1 = function() {

    if (this.oO1100) jQuery(this.oO1100.parentNode).remove();
    this.oO1100 = null
};
mini_TextBoxList_doLayout = function() {
    if (this.canLayout() == false) return;
    mini.TextBoxList.superclass.doLayout.call(this);
    this.doReadOnly()
};
mini_TextBoxList_doReadOnly = function() {
    if (this.isReadOnly() || this.allowInput == false) this.o0ll0o.readOnly = true;
    else this.o0ll0o.readOnly = false
};
mini_TextBoxList_doUpdate = function() {
    if (this.o1lo0l) clearInterval(this.o1lo0l);
    if (this.o0ll0o) mini.un(this.o0ll0o, "keydown", this.O10l1, this);
    var G = [],
        F = this.uid;
    for (var A = 0, E = this.selecteds.length; A < E; A++) {
        var _ = this.selecteds[A],
            C = F + "$text$" + A,
            B = mini._getMap(this.textField, _);
        if (mini.isNull(B)) B = "";
        G[G.length] = "<li id=\"" + C + "\" class=\"mini-textboxlist-item\">";
        G[G.length] = B;
        G[G.length] = "<span class=\"mini-textboxlist-close\"></span></li>"
    }
    var $ = F + "$input";
    G[G.length] = "<li id=\"" + $ + "\" class=\"mini-textboxlist-inputLi\"><input class=\"mini-textboxlist-input\" type=\"text\" autocomplete=\"off\"></li>";
    this.ulEl.innerHTML = G.join("");
    this.editIndex = this.selecteds.length;
    if (this.editIndex < 0) this.editIndex = 0;
    this.inputLi = this.ulEl.lastChild;
    this.o0ll0o = this.inputLi.firstChild;
    mini.on(this.o0ll0o, "keydown", this.O10l1, this);
    var D = this;
    this.o0ll0o.onkeyup = function() {
        D.O1oO()
    };
    D.o1lo0l = null;
    D.lO1o = D.o0ll0o.value;
    this.o0ll0o.onfocus = function() {
        D.lO1o = D.o0ll0o.value;
        D.o1lo0l = setInterval(function() {
            if (!D.OO0Ol) {
                clearInterval(D.o1lo0l);
                D.o1lo0l = null;
                return
            }
            if (D.lO1o != D.o0ll0o.value) {
                D.oO0Olo();
                D.lO1o = D.o0ll0o.value
            }
        }, 10);
        D.addCls(D.l0l0l1);
        D.OO0Ol = true;
        D.fire("focus")
    };
    this.o0ll0o.onblur = function() {
        clearInterval(D.o1lo0l);
        D.o1lo0l = null;
        D.fire("blur");
        if (D.validateOnLeave && D.isEditable()) D._tryValidate()
    };
    this.doReadOnly()
};
mini_TextBoxList_o11o1o = function(_) {
    var A = oOlO(_.target, "mini-textboxlist-item");
    if (A) {
        var $ = A.id.split("$"),
            B = $[$.length - 1];
        return this.selecteds[B]
    }
};
mini_TreeSelect_getSelectedNode = function() {
    return this.getSelectedNodes()[0];
};
mini_TextBoxList_getItem = function($) {
    if (typeof $ == "number") return this.selecteds[$];
    if (typeof $ == "object") return $
};
mini_TextBoxList_getItemEl = function(_) {
    var $ = this.selecteds.indexOf(_),
        A = this.uid + "$text$" + $;
    return document.getElementById(A)
};
mini_TextBoxList_hoverItem = function($, A) {

    if (this.isReadOnly() || this.enabled == false) return;
    this.blurItem();
    var _ = this.getItemEl($);
    mini.addClass(_, this.OOOll);
    if (A && o00ol(A.target, "mini-textboxlist-close")) mini.addClass(A.target, this.l10OOl)
};
mini_TextBoxList_blurItem = function() {
    var _ = this.selecteds.length;
    for (var A = 0, C = _; A < C; A++) {
        var $ = this.selecteds[A],
            B = this.getItemEl($);
        if (B) {
            mini.removeClass(B, this.OOOll);
            mini.removeClass(B.lastChild, this.l10OOl)
        }
    }
};
mini_TextBoxList_showInput = function(A) {
    this.select(null);
    if (mini.isNumber(A)) this.editIndex = A;
    else this.editIndex = this.selecteds.length;
    if (this.editIndex < 0) this.editIndex = 0;
    if (this.editIndex > this.selecteds.length) this.editIndex = this.selecteds.length;
    var B = this.inputLi;
    B.style.display = "block";
    if (mini.isNumber(A) && A < this.selecteds.length) {
        var _ = this.selecteds[A],
            $ = this.getItemEl(_);
        jQuery($).before(B)
    } else this.ulEl.appendChild(B);
    if (A !== false) setTimeout(function() {
        try {
            B.firstChild.focus();
            mini.selectRange(B.firstChild, 100)
        } catch ($) {}
    }, 10);
    else {
        this.lastInputText = "";
        this.o0ll0o.value = ""
    }
    return B
};
mini_TextBoxList_select = function(_) {
    _ = this.getItem(_);
    if (this.O1l0l1) {
        var $ = this.getItemEl(this.O1l0l1);
        mini.removeClass($, this.oOoo)
    }
    this.O1l0l1 = _;
    if (this.O1l0l1) {
        $ = this.getItemEl(this.O1l0l1);
        mini.addClass($, this.oOoo)
    }
    var A = this;
    if (this.O1l0l1) {
        this.focusEl.focus();
        var B = this;
        setTimeout(function() {
            try {
                B.focusEl.focus()
            } catch ($) {}
        }, 50)
    }
    if (this.O1l0l1) {
        A.addCls(A.l0l0l1);
        A.OO0Ol = true
    }
};
mini_TextBoxList__doInsertInputValue = function() {
    var A = this.getInputText(),
        _ = {};
    _[this.textField] = A;
    _[this.valueField] = A;
    var $ = this.editIndex;
    this.insertItem($, _)
};
mini_TextBoxList_loo10 = function() {
    if (this.loo01.getData().length == 0) return;
    var _ = this.loo01.getSelected(),
        $ = this.editIndex;
    if (_) {
        _ = mini.clone(_);
        this.insertItem($, _)
    }
};
mini_TextBoxList_insertItem = function(_, $) {
    this.selecteds.insert(_, $);
    var B = this.getText(),
        A = this.getValue();
    this.setValue(A, false);
    this.setText(B, false);
    this._createSelecteds();
    this.doUpdate();
    this.showInput(_ + 1);
    this.Ol11o()
};
mini_TextBoxList_removeItem = function(_) {
    if (!_) return;
    var $ = this.getItemEl(_);
    mini.removeNode($);
    this.selecteds.remove(_);
    var B = this.getText(),
        A = this.getValue();
    this.setValue(A, false);
    this.setText(B, false);
    this.Ol11o()
};
mini_TextBoxList__createSelecteds = function() {
    var E = (this.text ? this.text : "").split(","),
        D = (this.value ? this.value : "").split(",");
    if (D[0] == "") D = [];
    var _ = D.length;
    this.selecteds.length = _;
    for (var A = 0, F = _; A < F; A++) {
        var $ = this.selecteds[A];
        if (!$) {
            $ = {};
            this.selecteds[A] = $
        }
        var C = !mini.isNull(E[A]) ? E[A] : "",
            B = !mini.isNull(D[A]) ? D[A] : "";
        mini._setMap(this.textField, C, $);
        mini._setMap(this.valueField, B, $)
    }
    this.value = this.getValue();
    this.text = this.getText()
};
mini_TextBoxList_getInputText = function() {

    return this.o0ll0o ? this.o0ll0o.value : ""
};
mini_TextBoxList_getText = function() {
    var C = [];
    for (var _ = 0, A = this.selecteds.length; _ < A; _++) {
        var $ = this.selecteds[_],
            B = mini._getMap(this.textField, $);
        if (mini.isNull(B)) B = "";
        B = B.replace(",", "\uff0c");
        C.push(B)
    }
    return C.join(",")
};
mini_TextBoxList_getValue = function() {
    var B = [];
    for (var _ = 0, A = this.selecteds.length; _ < A; _++) {
        var $ = this.selecteds[_],
            C = mini._getMap(this.valueField, $);
        B.push(C)
    }
    return B.join(",")
};
mini_TextBoxList_getFormValue = function() {
    var $ = this.value;
    if ($ === null || $ === undefined) $ = "";
    return String($)
};
mini_TextBoxList_setName = function($) {


    if (this.name != $) {
        this.name = $;
        this.ll10l.name = $
    }
};
mini_TextBoxList_setValue = function($) {
    if (mini.isNull($)) $ = "";
    if (this.value != $) {
        this.value = $;
        this.ll10l.value = $;
        this._createSelecteds();
        this.doUpdate()
    }
};
mini_TextBoxList_setText = function($) {
    if (mini.isNull($)) $ = "";
    if (this.text !== $) {
        this.text = $;
        this._createSelecteds();
        this.doUpdate()
    }
};
mini_TextBoxList_setValueField = function($) {
    this.valueField = $;
    this._createSelecteds()
};
mini_TextBoxList_getValueField = function() {
    return this.valueField
};
mini_TextBoxList_setTextField = function($) {
    this.textField = $;
    this._createSelecteds()
};
mini_TextBoxList_getTextField = function() {
    return this.textField
};
mini_TextBoxList_setAllowInput = function($) {
    this.allowInput = $;
    this.doLayout()
};
mini_TextBoxList_getAllowInput = function() {

    return this.allowInput
};
mini_TextBoxList_setUrl = function($) {
    this.url = $
};
mini_TextBoxList_getUrl = function() {

    return this.url
};
mini_TextBoxList_setPopupHeight = function($) {
    this.popupHeight = $
};
mini_TextBoxList_getPopupHeight = function() {

    return this.popupHeight
};
mini_TextBoxList_setPopupMinHeight = function($) {
    this.popupMinHeight = $
};
mini_TextBoxList_getPopupMinHeight = function() {
    return this.popupMinHeight
};
mini_TextBoxList_setPopupMaxHeight = function($) {
    this.popupMaxHeight = $
};
mini_TextBoxList_getPopupMaxHeight = function() {
    return this.popupMaxHeight
};
mini_TextBoxList_setValueFromSelect = function($) {
    this.valueFromSelect = $
};
mini_TextBoxList_getValueFromSelect = function() {
    return this.valueFromSelect
};
mini_TextBoxList_doQuery = function() {
    this.oO0Olo(true)
};
mini_TextBoxList_O1oO = function() {
    if (this.isDisplay() == false) return;
    var _ = this.getInputText(),
        B = mini.measureText(this.o0ll0o, _),
        $ = B.width > 20 ? B.width + 4 : 20,
        A = mini.getWidth(this.el, true);
    if ($ > A - 15) $ = A - 15;
    this.o0ll0o.style.width = $ + "px"
};
mini_TextBoxList_oO0Olo = function(_) {
    var $ = this;
    setTimeout(function() {
        $.O1oO()
    }, 1);
    this.showPopup("loading");
    this.O0loo();
    this._loading = true;
    this.delayTimer = setTimeout(function() {
        var _ = $.o0ll0o.value;
        $.l100O()
    }, this.delay)
};
mini_TextBoxList__getSelectedMap = function() {
    var A = {};
    for (var _ = 0, B = this.selecteds.length; _ < B; _++) {
        var $ = this.selecteds[_];
        A[$[this.valueField]] = $[this.textField]
    }
    return A
};
mini_TextBoxList__getFilterLocalData = function(_) {
    var C = this,
        D = [],
        E = this._getSelectedMap();
    _ = (_ || "").toLowerCase();
    for (var A = 0, F = C.data.length; A < F; A++) {
        var $ = C.data[A],
            G = $[this.valueField];
        if (!E[G]) {
            var B = $[this.textField];
            if (!_ || String(B).toLowerCase().indexOf(_) != -1) D.push($)
        }
    }
    return D
};
mini_TextBoxList_l100O = function() {

    if (this.isDisplay() == false) return;
    var _ = this.getInputText(),
        A = this;
    if (!A.remote) {
        var C = this._getFilterLocalData(_);
        A.loo01.setData(C);
        A.showPopup();
        A.loo01.l1O000(0, true);
        A._loading = false;
        return
    }
    var $ = this.loo01.getData(),
        B = {
            value: this.getValue(),
            text: this.getText()
        };
    B[this.searchField] = _;
    var D = this.url,
        H = typeof D == "function" ? D : window[D];
    if (typeof H == "function") D = H(this);
    if (!D) return;
    var G = "post";
    if (D)
        if (D.indexOf(".txt") != -1 || D.indexOf(".json") != -1) G = "get";
    var F = {
        url: D,
        async: true,
        params: B,
        data: B,
        type: this.ajaxType ? this.ajaxType : G,
        cache: false,
        cancel: false
    };
    this.fire("beforeload", F);
    if (F.cancel) return;
    var E = this;
    mini.copyTo(F, {
        success: function(B, G, _) {
            delete F.params;
            var $ = {
                    text: B,
                    result: null,
                    sender: E,
                    options: F,
                    xhr: _
                },
                C = null;
            try {
                mini_doload($);
                C = $.result;
                if (!C) C = mini.decode(B)
            } catch (D) {
                if (mini_debugger == true) throw new Error("textboxlist json is error")
            }
            if (mini.isArray(C)) C = {
                data: C
            };
            if (E.dataField) C.data = mini._getMap(E.dataField, C);
            if (!C.data) C.data = [];
            A.loo01.setData(C.data);
            A.showPopup();
            A.loo01.l1O000(0, true);
            A.fire("load", {
                data: C.data,
                result: C
            });
            A._loading = false;
            if (A._selectOnLoad) {
                A.__doSelectValue();
                A._selectOnLoad = null
            }
        },
        error: function($, B, _) {
            A.showPopup("error")
        }
    });
    A.o1010O = mini.ajax(F)
};
mini_TextBoxList_O0loo = function() {
    if (this.delayTimer) {
        clearTimeout(this.delayTimer);
        this.delayTimer = null
    }
    if (this.o1010O) this.o1010O.abort();
    this._loading = false
};
mini_TextBoxList_within = function($) {

    if (Oolo(this.el, $.target)) return true;
    if (this.showPopup && this.popup && this.popup.within($)) return true;
    return false
};
mini_TextBoxList_setEmptyText = function($) {
    this.popupEmptyText = "<span class='mini-textboxlist-popup-noresult'>" + $ + "</span>";
    this.emptyText = $
};
mini_TextBoxList_getEmptyText = function($) {
    return this.emptyText
};
mini_TextBoxList_setEmptyText = function($) {
    this.popupLoadingText = "<span class='mini-textboxlist-popup-noresult'>" + $ + "</span>";
    this.loadingText = $
};
mini_TextBoxList_getEmptyText = function($) {
    return this.loadingText
};
mini_TextBoxList_setEmptyText = function($) {
    this.popupEmptyText = "<span class='mini-textboxlist-popup-noresult'>" + $ + "</span>";
    this.errorText = $
};
mini_TextBoxList_getEmptyText = function($) {
    return this.errorText
};
mini_TextBoxList__createPopup = function() {
    if (!this.popup) {
        this.popup = new mini.ListBox();
        this.popup.addCls("mini-textboxlist-popup");
        this.popup.setStyle("position:absolute;left:0;top:0;");
        this.popup.showEmpty = true;
        this.popup.setValueField(this.valueField);
        this.popup.setTextField(this.textField);
        this.popup.render(document.body);
        this.popup.on("itemclick", function($) {
            this.hidePopup();
            this.loo10()
        }, this)
    }
    this.loo01 = this.popup;
    return this.popup
};
mini_TextBoxList_showPopup = function($) {
    if (this.isDisplay() == false) return;
    this.isShowPopup = true;
    var _ = this._createPopup();
    _.el.style.zIndex = mini.getMaxZIndex();
    var B = this.loo01;
    B.emptyText = this.popupEmptyText;
    if ($ == "loading") {
        B.emptyText = this.popupLoadingText;
        this.loo01.setData([])
    } else if ($ == "error") {
        B.emptyText = this.popupLoadingText;
        this.loo01.setData([])
    }
    this.loo01.doUpdate();
    var A = this.getBox(),
        D = A.x,
        C = A.y + A.height;
    this.popup.el.style.display = "block";
    mini.setXY(_.el, -1000, -1000);
    this.popup.setWidth(A.width);
    this.popup.setHeight(this.popupHeight);
    if (this.popup.getHeight() < this.popupMinHeight) this.popup.setHeight(this.popupMinHeight);
    if (this.popup.getHeight() > this.popupMaxHeight) this.popup.setHeight(this.popupMaxHeight);
    mini.setXY(_.el, D, C)
};

mini_DatePicker_setShowClearButton = function(value) {
    this.showClearButton = value;
};
mini_TextBoxList_hidePopup = function() {
    this.isShowPopup = false;
    if (this.popup) this.popup.el.style.display = "none"
};
mini_TextBoxList_ol1o0 = function(_) {

    if (this.enabled == false) return;
    var $ = this.o11o1o(_);
    if (!$) {
        this.blurItem();
        return
    }
    this.hoverItem($, _)
};
mini_TextBoxList_O11O11 = function($) {
    this.blurItem()
};
mini_TextBoxList_Ol1o1 = function(_) {

    if (this.isReadOnly() || this.enabled == false) return;
    if (this.enabled == false) return;
    var $ = this.o11o1o(_);
    if (!$) {
        if (oOlO(_.target, "mini-textboxlist-input"));
        else this.showInput();
        return
    }
    this.focusEl.focus();
    this.select($);
    if (_ && mini.hasClass(_.target, "mini-textboxlist-close")) this.removeItem($)
};
mini_TextBoxList_l001l = function(B) {
    if (this.isReadOnly() || this.allowInput == false) return false;
    var $ = this.selecteds.indexOf(this.O1l0l1),
        _ = this;

    function A() {
        var A = _.selecteds[$];
        _.removeItem(A);
        A = _.selecteds[$];
        if (!A) A = _.selecteds[$ - 1];
        _.select(A);
        if (!A) _.showInput()
    }
    switch (B.keyCode) {
        case 8:
            B.preventDefault();
            A();
            break;
        case 37:
        case 38:
            this.select(null);
            this.showInput($);
            break;
        case 39:
        case 40:
            $ += 1;
            this.select(null);
            this.showInput($);
            break;
        case 46:
            A();
            break
    }
};
mini_TextBoxList___doSelectValue = function() {
    var $ = this.loo01.getFocusedItem();
    if ($) {
        this.loo01.setSelected($);
        this.lastInputText = this.text;
        this.hidePopup();
        this.loo10()
    } else if (!this.valueFromSelect) {
        var _ = this.getInputText().trim();
        if (_) this._doInsertInputValue()
    }
};
mini_TextBoxList_O10l1 = function(G) {
    this._selectOnLoad = null;
    if (this.isReadOnly() || this.allowInput == false) return false;
    G.stopPropagation();
    if (this.isReadOnly() || this.allowInput == false) return;
    var E = mini.getSelectRange(this.o0ll0o),
        B = E[0],
        D = E[1],
        F = this.o0ll0o.value.length,
        C = B == D && B == 0,
        A = B == D && D == F;
    if (this.isReadOnly() || this.allowInput == false) G.preventDefault();
    if (G.keyCode == 9) {
        this.hidePopup();
        return
    }
    if (G.keyCode == 16 || G.keyCode == 17 || G.keyCode == 18) return;
    switch (G.keyCode) {
        case 13:
            if (this.isShowPopup) {
                G.preventDefault();
                if (this._loading) {
                    this._selectOnLoad = true;
                    return
                }
                var _ = this.loo01.getFocusedItem();
                if (_ && _.enabled === false) return;
                this.__doSelectValue()
            }
            break;
        case 27:
            G.preventDefault();
            this.hidePopup();
            break;
        case 8:
            if (C) G.preventDefault();
        case 37:
            if (C)
                if (this.isShowPopup) this.hidePopup();
                else if (this.editIndex > 0) {
                var $ = this.editIndex - 1;
                if ($ < 0) $ = 0;
                if ($ >= this.selecteds.length) $ = this.selecteds.length - 1;
                this.showInput(false);
                this.select($)
            }
            break;
        case 39:
            if (A)
                if (this.isShowPopup) this.hidePopup();
                else if (this.editIndex <= this.selecteds.length - 1) {
                $ = this.editIndex;
                this.showInput(false);
                this.select($)
            }
            break;
        case 38:
            G.preventDefault();
            if (this.isShowPopup) {
                $ = -1, _ = this.loo01.getFocusedItem();
                if (_) $ = this.loo01.indexOf(_);
                $--;
                if ($ < 0) $ = 0;
                this.loo01.l1O000($, true)
            }
            break;
        case 40:
            G.preventDefault();
            if (this.isShowPopup) {
                $ = -1, _ = this.loo01.getFocusedItem();
                if (_) $ = this.loo01.indexOf(_);
                $++;
                if ($ < 0) $ = 0;
                if ($ >= this.loo01.getCount()) $ = this.loo01.getCount() - 1;
                this.loo01.l1O000($, true)
            } else this.oO0Olo(true);
            break;
        default:
            break
    }
};
mini_TextBoxList_focus = function() {
    try {
        this.o0ll0o.focus()
    } catch ($) {}
};
mini_TextBoxList_blur = function() {
    try {
        this.o0ll0o.blur()
    } catch ($) {}
};
mini_TextBoxList_setSearchField = function($) {
    this.searchField = $
};
mini_TextBoxList_getSearchField = function() {
    return this.searchField
};
mini_TextBoxList_getAttrs = function($) {

    var A = mini.TextBox.superclass.getAttrs.call(this, $),
        _ = jQuery($);
    mini._ParseString($, A, ["value", "text", "valueField", "textField", "url", "popupHeight", "textName", "onfocus", "onbeforeload", "onload", "searchField", "emptyText", "loadingText", "errorText", "onblur"]);
    mini._ParseBool($, A, ["allowInput", "valueFromSelect", "remote"]);
    mini._ParseInt($, A, ["popupMinHeight", "popupMaxHeight"]);
    return A
};
mini_AutoComplete__initInput = function() {
    var $ = this;
    if (isFirefox) this._textEl.oninput = function() {
        if (!$.enterQuery) $.l0111l()
    }
};
mini_AutoComplete_getRemote = function() {
    return this.remote
};

mini_TreeSelect__Ol0O1l = function(e) {
    this.fire("drawnode", e);
};
mini_AutoComplete_setRemote = function($) {
    this.remote = $
};
mini_AutoComplete_setUrl = function($) {
    this.url = $;
    if (!this.remote) mini.AutoComplete.superclass.setUrl.call(this, $)
};
mini_AutoComplete_setValue = function($) {

    if (mini.isNull($)) $ = "";
    if (this.value != $) {
        this.value = $;
        this.ll10l.value = this.value
    }
    this.__oldText = ""
};
mini_AutoComplete_setText = function($) {

    if (mini.isNull($)) $ = "";
    if (this.text != $) {
        this.text = $;
        this.lO1o = $
    }
    this._textEl.value = this.text
};
mini_AutoComplete_setMinChars = function($) {
    this.minChars = $
};
mini_AutoComplete_getMinChars = function() {
    return this.minChars
};
mini_AutoComplete_setSearchField = function($) {
    this.searchField = $
};
mini_AutoComplete_getSearchField = function() {
    return this.searchField
};
mini_AutoComplete_setPopupEmptyText = function($) {
    this.popupEmptyText = $
};
mini_AutoComplete_getPopupEmptyText = function($) {
    return this.popupEmptyText
};
mini_AutoComplete_setLoadingText = function($) {
    this.loadingText = $
};
mini_AutoComplete_getLoadingText = function($) {
    return this.loadingText
};
mini_AutoComplete_setErrorText = function($) {
    this.errorText = $
};
mini_AutoComplete_getErrorText = function($) {
    return this.errorText
};
mini_AutoComplete_getPopupEmptyHtml = function() {
    return "<span class='mini-textboxlist-popup-noresult'>" + this.popupEmptyText + "</span>"
};
mini_AutoComplete_getPopupLoadingHtml = function() {

    return "<span class='mini-textboxlist-popup-loading'>" + this.loadingText + "</span>"
};
mini_AutoComplete_getPopupErrorHtml = function() {
    return "<span class='mini-textboxlist-popup-error'>" + this.errorText + "</span>"
};
mini_AutoComplete_showPopup = function($) {
    var _ = this.getPopup(),
        A = this.loo01;
    A.showEmpty = true;
    A.emptyText = this.getPopupEmptyHtml();
    if ($ == "loading") {
        A.emptyText = this.getPopupLoadingHtml();
        this.loo01.setData([])
    } else if ($ == "error") {
        A.emptyText = this.getPopupErrorHtml();
        this.loo01.setData([])
    }
    this.loo01.doUpdate();
    mini.AutoComplete.superclass.showPopup.call(this)
};
mini_AutoComplete_O10l1 = function(D) {

    var C = {
        htmlEvent: D
    };
    this.fire("keydown", C);
    if (D.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) return false;
    if (D.keyCode == 9) {
        this.hidePopup();
        return
    }
    if (D.keyCode == 16 || D.keyCode == 17 || D.keyCode == 18) return;
    if (this.isReadOnly()) return;
    switch (D.keyCode) {
        case 27:
            if (this.isShowPopup()) D.stopPropagation();
            this.hidePopup();
            break;
        case 13:
            if (!this.isShowPopup() || this.loo01.getData().length == 0)
                if (this.enterQuery) this.l0111l(this._textEl.value);
            if (this.isShowPopup()) {
                D.preventDefault();
                D.stopPropagation();
                var _ = this.loo01.getFocusedIndex();
                if (_ != -1) {
                    var $ = this.loo01.getAt(_),
                        B = this.loo01.ll0l0([$]),
                        A = B[0];
                    this.setText(B[1]);
                    this.setValue(A);
                    this.Ol11o()
                }
            } else this.fire("enter", C);
            this.hidePopup();
            this.focus();
            break;
        case 37:
            break;
        case 38:
            _ = this.loo01.getFocusedIndex();
            if (_ == -1) {
                _ = 0;
                if (!this.multiSelect) {
                    $ = this.loo01.findItems(this.value)[0];
                    if ($) _ = this.loo01.indexOf($)
                }
            }
            if (this.isShowPopup())
                if (!this.multiSelect) {
                    _ -= 1;
                    if (_ < 0) _ = 0;
                    this.loo01.l1O000(_, true)
                }
            break;
        case 39:
            break;
        case 40:
            _ = this.loo01.getFocusedIndex();
            if (this.isShowPopup()) {
                if (!this.multiSelect) {
                    _ += 1;
                    if (_ > this.loo01.getCount() - 1) _ = this.loo01.getCount() - 1;
                    this.loo01.l1O000(_, true)
                }
            } else this.l0111l(this._textEl.value);
            break;
        default:
            if (this.enterQuery == true) {
                this.hidePopup();
                this.focus()
            } else this._keydownQuery();
            break
    }
};
mini_AutoComplete__keydownQuery = function() {
    var $ = this;
    if ($._keydownTimer) {
        clearTimeout($._keydownTimer);
        $._keydownTimer = null
    }
    $._keydownTimer = setTimeout(function() {
        var _ = $._textEl.value;
        if (_ != $.__oldText) {
            $.l0111l(_);
            $.__oldText = _
        }
    }, 20)
};
mini_AutoComplete_doQuery = function() {

    this.l0111l()
};
mini_AutoComplete_l0111l = function(_) {

    var $ = this;
    if (this._queryTimer) {
        clearTimeout(this._queryTimer);
        this._queryTimer = null
    }
    this._queryTimer = setTimeout(function() {
        var _ = $._textEl.value;
        $.l100O(_)
    }, this.delay);
    this.showPopup("loading")
};
mini_AutoComplete_l100O = function(_) {
    if (!this.remote) {
        mini.AutoComplete.superclass.l100O.apply(this, arguments);
        return
    }
    if (this.o1010O) this.o1010O.abort();
    var C = this.url,
        F = "post";
    if (C)
        if (C.indexOf(".txt") != -1 || C.indexOf(".json") != -1) F = "get";
    var A = {};
    A[this.searchField] = _;
    var E = {
        url: C,
        async: true,
        params: A,
        data: A,
        type: this.ajaxType ? this.ajaxType : F,
        cache: false,
        cancel: false
    };
    this.fire("beforeload", E);
    var D = this;

    function $(_, $) {
        D.loo01.setData(_);
        D.showPopup();
        D.loo01.l1O000(0, true);
        D.data = _;
        D.fire("load", {
            data: _,
            result: $
        })
    }
    if (E.cancel) {
        var B = E.result || [];
        $(B, B);
        return
    }
    mini.copyTo(E, {
        success: function(B, G, A) {
            delete E.params;
            var _ = {
                    text: B,
                    result: null,
                    sender: D,
                    options: E,
                    xhr: A
                },
                C = null;
            try {
                mini_doload(_);
                C = _.result;
                if (!C) C = mini.decode(B)
            } catch (F) {
                if (mini_debugger == true) throw new Error("autocomplete json is error")
            }
            if (mini.isArray(C)) C = {
                data: C
            };
            if (D.dataField) C.data = mini._getMap(D.dataField, C);
            if (!C.data) C.data = [];
            $(C.data, C)
        },
        error: function($, A, _) {}
    });
    this.o1010O = mini.ajax(E)
};
mini_AutoComplete_setEnterQuery = function($) {
    this.enterQuery = $
};
mini_AutoComplete_getEnterQuery = function() {
    return this.enterQuery
};
mini_AutoComplete_getAttrs = function($) {
    var _ = mini.AutoComplete.superclass.getAttrs.call(this, $);
    mini._ParseString($, _, ["searchField", "popupEmptyText", "loadingText", "errorText"]);
    mini._ParseBool($, _, ["enterQuery", "remote"]);
    return _
};
mini_CheckBoxList__create = function() {
    var $ = this.el = document.createElement("div");
    this.el.className = this.uiCls;
    this.el.innerHTML = "<table cellpadding=\"0\" border=\"0\" cellspacing=\"0\" style=\"display:table;\"><tr><td><div class=\"mini-list-inner\"></div><div class=\"mini-errorIcon\"></div><input type=\"hidden\" /></td></tr></table>";
    this.cellEl = $.getElementsByTagName("td")[0];
    this._innerEl = this.cellEl.firstChild;
    this.ll10l = this.cellEl.lastChild;
    this.oO1100 = this.cellEl.childNodes[1];
    this._borderEl = this.el.firstChild
};
mini_CheckBoxList_O10OO1 = function() {
    var B = [];
    if (this.repeatItems > 0) {
        if (this.repeatDirection == "horizontal") {
            var D = [];
            for (var C = 0, E = this.data.length; C < E; C++) {
                var A = this.data[C];
                if (D.length == this.repeatItems) {
                    B.push(D);
                    D = []
                }
                D.push(A)
            }
            B.push(D)
        } else {
            var _ = this.repeatItems > this.data.length ? this.data.length : this.repeatItems;
            for (C = 0, E = _; C < E; C++) B.push([]);
            for (C = 0, E = this.data.length; C < E; C++) {
                var A = this.data[C],
                    $ = C % this.repeatItems;
                B[$].push(A)
            }
        }
    } else B = [this.data.clone()];
    return B
};
mini_CheckBoxList_doUpdate = function() {
    var D = this.data,
        G = "";
    for (var A = 0, F = D.length; A < F; A++) {
        var _ = D[A];
        _._i = A
    }
    if (this.repeatLayout == "flow") {
        var $ = this.O10OO1();
        for (A = 0, F = $.length; A < F; A++) {
            var C = $[A];
            for (var E = 0, B = C.length; E < B; E++) {
                _ = C[E];
                G += this.olOO1O(_, _._i)
            }
            if (A != F - 1) G += "<br/>"
        }
    } else if (this.repeatLayout == "table") {
        $ = this.O10OO1();
        G += "<table class=\"" + this.ool1O + "\" cellpadding=\"0\" cellspacing=\"1\">";
        for (A = 0, F = $.length; A < F; A++) {
            C = $[A];
            G += "<tr>";
            for (E = 0, B = C.length; E < B; E++) {
                _ = C[E];
                G += "<td class=\"" + this.OO0lO + "\">";
                G += this.olOO1O(_, _._i);
                G += "</td>"
            }
            G += "</tr>"
        }
        G += "</table>"
    } else
        for (A = 0, F = D.length; A < F; A++) {
            _ = D[A];
            G += this.olOO1O(_, A)
        }
    this._innerEl.innerHTML = G;
    for (A = 0, F = D.length; A < F; A++) {
        _ = D[A];
        delete _._i
    }
};
mini_CheckBoxList_olOO1O = function(_, $) {
    var G = this.o1OO(_, $),
        F = this.O0OO01($),
        A = this.lo1ol($),
        D = this.getItemValue(_),
        B = "",
        E = "<div id=\"" + F + "\" index=\"" + $ + "\" class=\"" + this.l1lO + " ";
    if (_.enabled === false) {
        E += " mini-disabled ";
        B = "disabled"
    }
    var C = "onclick=\"return false\"";
    C = "onmousedown=\"this._checked = this.checked;\" onclick=\"this.checked = this._checked\"";
    E += G.itemCls + "\" style=\"" + G.itemStyle + "\"><span class=\"mini-list-icon\"></span><input style=\"display:none;\" " + C + " " + B + " value=\"" + D + "\" id=\"" + A + "\" type=\"" + this.OloO0O + "\" /><label for=\"" + A + "\" onclick=\"return false;\">";
    E += G.itemHtml + "</label></div>";
    return E
};
mini_CheckBoxList_o1OO = function(_, $) {
    var A = this.getItemText(_),
        B = {
            index: $,
            item: _,
            itemHtml: A,
            itemCls: "",
            itemStyle: ""
        };
    this.fire("drawitem", B);
    if (B.itemHtml === null || B.itemHtml === undefined) B.itemHtml = "";
    return B
};
mini_CheckBoxList_setRepeatItems = function($) {
    $ = parseInt($);
    if (isNaN($)) $ = 0;
    if (this.repeatItems != $) {
        this.repeatItems = $;
        this.doUpdate()
    }
};
mini_CheckBoxList_getRepeatItems = function() {
    return this.repeatItems
};
mini_CheckBoxList_setRepeatLayout = function($) {
    if ($ != "flow" && $ != "table") $ = "none";
    if (this.repeatLayout != $) {
        this.repeatLayout = $;
        this.doUpdate()
    }
};
mini_CheckBoxList_getRepeatLayout = function() {
    return this.repeatLayout
};
mini_CheckBoxList_setRepeatDirection = function($) {
    if ($ != "vertical") $ = "horizontal";
    if (this.repeatDirection != $) {
        this.repeatDirection = $;
        this.doUpdate()
    }
};
mini_CheckBoxList_getRepeatDirection = function() {
    return this.repeatDirection
};
mini_CheckBoxList_getAttrs = function(_) {
    var D = mini.CheckBoxList.superclass.getAttrs.call(this, _),
        C = jQuery(_);
    mini._ParseString(_, D, ["ondrawitem"]);
    var $ = parseInt(C.attr("repeatItems"));
    if (!isNaN($)) D.repeatItems = $;
    var B = C.attr("repeatLayout");
    if (B) D.repeatLayout = B;
    var A = C.attr("repeatDirection");
    if (A) D.repeatDirection = A;
    return D
};
mini_ValidatorBase_setKeyNavEnabled = function($) {

    this.keyNavEnabled = $
};
mini_ValidatorBase_getKeyNavEnabled = function() {
    return this.keyNavEnabled
};
mini_ValidatorBase_setIndentSpace = function($) {


    if ($) this.addCls(this._indentCls);
    else this.removeCls(this._indentCls);
    this.indentSpace = $
};
mini_ValidatorBase_getIndentSpace = function() {

    return this.indentSpace
};
mini_ValidatorBase_isEditable = function() {
    if (this.readOnly || !this.allowInput || !this.enabled) return false;
    return true
};
mini_ValidatorBase__tryValidate = function() {
    if (this._tryValidateTimer) clearTimeout(this._tryValidateTimer);
    var $ = this;
    this._tryValidateTimer = setTimeout(function() {
        $.validate()
    }, 30)
};
mini_ValidatorBase_validate = function() {
    var $ = {
        value: this.getValue(),
        errorText: "",
        isValid: true
    };
    if (this.required)
        if (mini.isNull($.value) || String($.value).trim() === "") {
            $.isValid = false;
            $.errorText = this.requiredErrorText
        }
    this.fire("validation", $);
    this.errorText = $.errorText;
    this.setIsValid($.isValid);
    return this.isValid()
};
mini_ValidatorBase_isValid = function() {

    return this.Ooolll
};
mini_ValidatorBase_setIsValid = function($) {
    this.Ooolll = $;
    this.Ooo00O()
};
mini_ValidatorBase_getIsValid = function() {

    return this.Ooolll
};
mini_ValidatorBase_setValidateOnChanged = function($) {
    this.validateOnChanged = $
};
mini_ValidatorBase_getValidateOnChanged = function($) {
    return this.validateOnChanged
};
mini_ValidatorBase_setValidateOnLeave = function($) {
    this.validateOnLeave = $
};
mini_ValidatorBase_getValidateOnLeave = function($) {
    return this.validateOnLeave
};
mini_ValidatorBase_setErrorMode = function($) {

    if (!$) $ = "none";
    this.errorMode = $.toLowerCase();
    if (this.Ooolll == false) this.Ooo00O()
};
mini_ValidatorBase_getErrorMode = function() {
    return this.errorMode
};
mini_ValidatorBase_setErrorText = function($) {
    this.errorText = $;
    if (this.Ooolll == false) this.Ooo00O()
};
mini_ValidatorBase_getErrorText = function() {

    return this.errorText
};
mini_ValidatorBase_setRequired = function($) {
    this.required = $;
    if (this.required) this.addCls(this.o11o);
    else this.removeCls(this.o11o)
};
mini_ValidatorBase_getRequired = function() {
    return this.required
};
mini_ValidatorBase_setRequiredErrorText = function($) {
    this.requiredErrorText = $
};
mini_ValidatorBase_getRequiredErrorText = function() {
    return this.requiredErrorText
};
mini_ValidatorBase_getErrorIconEl = function() {
    return this.oO1100
};
mini_ValidatorBase_Olll1 = function() {};
mini_ValidatorBase_Ooo00O = function() {
    var $ = this;
    $.o1lo()
};
mini_ValidatorBase_o1lo = function() {
    if (!this.el) return;
    this.removeCls(this.lllOlo);
    this.removeCls(this.lO10ol);
    if (this.errorMode == "border") this.el.title = "";
    if (this.Ooolll == false) switch (this.errorMode) {
        case "icon":
            this.addCls(this.lllOlo);
            var $ = this.getErrorIconEl();
            if ($) {
                $.title = this.errorText;
                jQuery($).attr("data-placement", this.errorTooltipPlacement)
            }
            break;
        case "border":
            this.addCls(this.lO10ol);
            this.el.title = this.errorText;
        default:
            this.Olll1();
            break
    } else this.Olll1();
    this.doLayout()
};
mini_ValidatorBase_doValueChanged = function() {
    this.Ol11o()
};
mini_ValidatorBase_Ol11o = function() {
    if (this.validateOnChanged) this._tryValidate();
    this.fire("valuechanged", {
        value: this.getValue()
    })
};
mini_ValidatorBase_onValueChanged = function(_, $) {
    this.on("valuechanged", _, $)
};
mini_ValidatorBase_onValidation = function(_, $) {
    this.on("validation", _, $)
};
mini_ValidatorBase_getAttrs = function(A) {
    var B = mini.ValidatorBase.superclass.getAttrs.call(this, A);
    mini._ParseString(A, B, ["onvaluechanged", "onvalidation", "label", "labelStyle", "requiredErrorText", "errorMode", "errorTooltipPlacement"]);
    mini._ParseBool(A, B, ["validateOnChanged", "validateOnLeave", "labelField", "indentSpace", "keyNavEnabled"]);
    var _ = A.getAttribute("required");
    if (!_) _ = A.required;
    if (!_) {
        var $ = A.attributes["required"];
        if ($) _ = $.value == "null" ? null : "true"
    }
    if (_) B.required = _ != "false" ? true : false;
    return B
};
mini_ValidatorBase__labelLayout = function() {
    var _ = this._borderEl;
    if (!_) return;
    this._labelLayouted = true;
    if (this.labelField) {
        var $ = this.lo1ooO.offsetWidth;
        _.style["marginLeft"] = $ + "px";
        this._doLabelLayout = $ === 0
    } else _.style["marginLeft"] = 0
};
mini_ValidatorBase_setLabelField = function($) {
    if (this.labelField != $) {
        this.labelField = $;
        if (!this._borderEl) return;
        if (!this.lo1ooO) {
            this.lo1ooO = mini.append(this.el, "<label class=\"mini-labelfield-label\"></label>");
            this.lo1ooO.innerHTML = this.label;
            mini.setStyle(this.lo1ooO, this.labelStyle)
        }
        this.lo1ooO.style.display = $ ? "block" : "none";
        if ($) mini.addClass(this.el, this._labelFieldCls);
        else mini.removeClass(this.el, this._labelFieldCls);
        this._labelLayout()
    }
};
mini_ValidatorBase_getLabelField = function() {
    this.labelField
};
mini_ValidatorBase_setLabel = function($) {
    if (this.label != $) {
        this.label = $;
        if (this.lo1ooO) this.lo1ooO.innerHTML = $;
        this._labelLayout()
    }
};
mini_ValidatorBase_getLabel = function() {
    this.label
};
mini_ValidatorBase_setLabelStyle = function($) {
    if (this.labelStyle != $) {
        this.labelStyle = $;
        if (this.lo1ooO) mini.setStyle(this.lo1ooO, $);
        this._labelLayout()
    }
};
mini_ValidatorBase_getLabelStyle = function() {
    this.labelStyle
};
mini = {
    /*
     * @description 以KEY-VALUE形式存储标签ID 与 组件实例
     * @default {} 空对象
     */
    components: {},
    /*
     * @description 以KEY-VALUE形式存储uid 与 组件实例  。uiid是创建组件实例时动态创建的唯一标识。
     * @default {} 空对象
     */
    uids: {}, //存储组件实例，根据动态分配的uid找到组件。
    /*
     * 源代码中未使用过的属性
     * @default {} 空对象
     */
    ux: {},
    doc: document,
    window: window,
    /*
     * @description mini UI框架加载是否已经准备完成。
     * @default false
     */
    isReady: false,
    createTime: new Date(),
    /*
     * @description 根据给定的样式类名匹配 HTML元素。
     * @param {String} cls 给定的样式类名
     * @param {String|DOMObject|jquery Object} el 设置范围匹配范围，可以接受 ID字符串，或者DOM对象
     * @return 匹配的第一个DOM对象。如果没有找到则返回undefined
     * @requires jQuery
     */
    byClass: function (cls, el) {
        if (typeof el == "string") {
            el = mini.byId(el);
        }
        return jQuery("." + cls, el)[0];
    },
    /*
     * @description 取得已经实例化的组件实例数组。
     * @return 已经实例化的组件数组，如果没有实例化的组件则返回一个空数组
     */
    getComponents: function () {
        var cs = [];
        for (var id in mini.components) {
            var c = mini.components[id];
            if (c.isControl)
                cs.push(c)
        }
        return cs;
    },
    /*
     * <p>取得指定的组件实例，可接三种合法的参数:
     * <ul><li>1，组件实例对象，</li><li>2，标签id和 uid，</li><li>3，组件DOM对象。</li><ul>
     * </p>
     * @param {String|Object} id 获取组件的条件
     * @returns 组件实例对象，未找到匹配的组件实例则返回null
     */
    get: function (id) {
        if (!id) {
            return null;
        }
        if (mini.isControl(id)) {
            return id
        }
        ;
        if (typeof id == "string") {
            if (id.charAt(0) == "#") {
                id = id.substr(1);
            }
        }
        if (typeof id == "string") {
            return mini.components[id];
        } else {
            var control = mini.uids[id.uid];
            if (control && control.el == id) {
                return control;
            }
        }
        return null;
    },
    /*
     * 根据动态分配的uid找到对应组件实例
     * @param {String} uid 创建组件式动态分配的唯一标识
     * @returns 返回组件实例，如果未找到 则返回undefined。
     */
    getbyUID: function (uid) {
        return mini.uids[uid];
    },
    /*
     * 通过给定判断函数和函数作用域，判断每个组件是否符合fn规则，如果符合则被添加到返回数组中。
     * @param {Function} fn 过滤规则函数,函数传入组件实例作为参数，方法返回true 或 1代表通过过滤规则
     * @param scope 过滤函数执行的上下文对象。
     * @returns {Array} 返回符合过滤条件的组件实例数组
     */
    findControls: function (fn, scope) {
        if (!fn) {
            return [];
        }
        scope = scope || mini;
        var controls = [],
                uids = mini.uids;
        for (var uid in uids) {
            var control = uids[uid],
                    ret = fn.call(scope, control);
            if (ret === true || ret === 1) {
                controls.push(control);
                if (ret === 1) {
                    break;
                }
            }
        }
        return controls;
    },
    /*
     * 取得给定祖先组件的子孙组件实例对象数组。
     * @param {Object} parent 包含子孙组件的组件实例。
     * @param {Array} 返回给定组件实例的子孙组件实例数组。
     */
    getChildControls: function (parent) {
        var pel = parent.el ? parent.el : parent,
                controls = mini.findControls(function (control) {
                    if (!control.el || parent == control)
                        return false;
                    if (Oolo(pel, control.el) && control.within)
                        return true;
                    return false;
                });
        return controls;
    },
    emptyFn: function () {},
    /*
     * 将给定组件的子孙组件实例作为其属性，属性名是组件的name属性值，如果有多个同name子孙组件，则最后只保留最后一个。
     * @param obj 指定的包含子孙组件的组件实例。
     * @param {String|Boolean} pre 参数等于true时子孙组件作为属性的属性名为子孙组件的name属性的首字母大写。
     * @returns 无
     */
    createNameControls: function (obj, pre) {
        if (!obj || !obj.el)
            return;
        if (!pre)
            pre = "_";
        var el = obj.el;
        var controls = mini.findControls(function (control) {
            if (!control.el || !control.name)
                return false;
            if (Oolo(el, control.el))
                return true;
            return false;
        });
        for (var i = 0, l = controls.length; i < l; i++) {
            var c = controls[i];
            var name = pre + c.name;
            if (pre === true) {
                name = c.name[0].toUpperCase() + c.name.substring(1, c.name.length);
            }
            obj[name] = c;
        }
    },
    /*
     * 取得给定名字，给定祖先节点的子组件实例，如果存在多个同名子组件，则选择第一个。
     * @param {String} name 匹配子组件name属性的值
     * @param {Object} parentNode 子集范围
     * @returns 符合条件的组件实例，如果未找到则返回undefined。
     */
    getsbyName: function (name, parentNode) {
        var isControl = mini.isControl(parentNode),
                parentControl = parentNode;
        if (parentNode && isControl)
            parentNode = parentNode.el;
        parentNode = mini.byId(parentNode);
        parentNode = parentNode || document.body;
        var controls = mini.findControls(function (control) {
            if (!control.el)
                return false;
            if (control.name == name && Oolo(parentNode, control.el))
                return true;
            return false;
        }, this);
        if (isControl && controls.length == 0 && parentControl && parentControl.getbyName) {
            var control = parentControl.getbyName(name);
            if (control) {
                controls.push(control);
            }
        }
        return controls;
    },
    /*
     * 取得给定名字，给定祖先节点的子组件实例，如果存在多个同名子组件，则选择第一个。
     * @param {String} name 匹配子组件name属性的值
     * @param {Object} parentNode 子集范围
     * @returns 符合条件的组件实例，如果未找到则返回undefined。
     */
    getbyName: function (name, parentNode) {
        return mini.getsbyName(name, parentNode)[0];
    },
    /*
     * 获取给URL地址附带的数据。
     * 例如：www.xxx.com?a=1&b=2 -> {a:1,b:2}
     * @param url 待解析地址字符窜
     * @returns {Object} json对象
     */
    getParams: function (url) {
        if (!url)
            url = location.href;
        url = url.split("?")[1];
        var params = {};
        if (url) {
            var us = url.split("&");
            for (var i = 0, l = us.length; i < l; i++) {
                var ps = us[i].split("=");
                try {
                    params[ps[0]] = decodeURIComponent(unescape(ps[1]));
                } catch (ex) {

                }
            }
        }
        return params;
    },
    /*
     * 将组件实例注册到组件实例缓冲区中。也就是在mini.components和mini.uids中各保存一个引用。
     * @param {Object} cmp 待注册组件实例
     * @returns 无
     */
    reg: function (cmp) {
        this.components[cmp.id] = cmp;	//通过组件既有id属性找到对应的组件实例
        this.uids[cmp.uid] = cmp;		//通过动态分配的uid属性找到对应的组件实例

    },
    /*
     * 从组件实例缓冲区中删除组件实例注册信息，也就是从mini.components和mini.uids中删除组件实例引用。
     * @param {Object} cmp 待注销组件实例
     * @returns 无
     */
    unreg: function (cmp) {
        delete mini.components[cmp.id];
        delete mini.uids[cmp.uid];
    },
    /*
     * 组件类名与组件类的键值关系保存组件类引用。例如：button -> Button
     */
    classes: {},
    /*
     * 样式类名与组件类的键值关系保存组件类引用。例如：mini-button -> Button
     */
    uiClasses: {},
    /*
     * 通过组件类名获取组件类。
     * @param className 组件类名
     * @return 组件类引用。
     */
    getClass: function (className) {
        if (!className)
            return null;
        return this.classes[className.toLowerCase()];
    },
    /*
     * 根据样式类名获取对应的组件类。
     * @param uiCls 组件样式类名
     * return 组件类引用。
     */
    getClassByUICls: function (uiCls) {
        return this.uiClasses[uiCls.toLowerCase()];
    },
    /*
     * mini UI动态生成id的默认前缀
     * @default "mini-"
     */
    idPre: "mini-",
    /*
     * mini UI动态生成id的递进增长数。
     * @default 1
     */
    idIndex: 1,
    /*
     * 根据给定前缀创建一个新的唯一id。如果未指定前缀则使用mini.idPre作为默认设置。
     * @param {String} idPre 生成id的前缀
     * @returns 生成的id字符串
     */
    newId: function (idPre) {
        return (idPre || this.idPre) + this.idIndex++;
    },
    /*
     * 浅拷贝，从源对象中将属性复制并替换到目标对象中。
     * @param to 拷贝目标对象
     * @param from 拷贝源对象
     * @returns 拷贝目标对象
     */
    copyTo: function (to, from) {
        if (to && from) {
            for (var p in from) {
                to[p] = from[p];
            }
        }
        return to;
    },
    /*
     * 浅拷贝，从源对象中将属性复制到目标对象中。不覆盖目标对象中的值。
     * @param to 拷贝目标对象
     * @param from 拷贝源对象
     * @returns 拷贝目标对象
     */
    copyIf: function (to, from) {
        if (to && from) {
            for (var p in from) {
                if (mini.isNull(to[p])) {
                    to[p] = from[p];
                }
            }
        }
        return to;
    },
    /*
     * 创建一个函数，这个函数用于将给定函数的上下文对象设置为给定对象。
     * @param {Function} fn 源函数
     * @param scope 上下文对象
     * @returns {Function} 绑定在给定上下文对象上的可执行函数。
     */
    createDelegate: function (fn, scope) {
        if (!fn)
            return function () {};
        return function () {
            return fn.apply(scope, arguments);
        };
    },
    /*
     * 判断一个实例是否是组件实例
     * @param obj 待判断对象
     * @returns {Boolean} true/false
     */
    isControl: function (obj) {
        return !!(obj && obj.isControl);
    },
    /*
     * 使用DOM元素是否拥有appendChild方法判断参数是否是一个合法的DOM对象。
     * @param obj 待判断对象
     * @returns {Boolean} true/false
     */
    isElement: function (obj) {
        return obj && obj.appendChild;
    },
    /*
     * 判断参数是否是Date实例
     * @param obj 待判断对象
     * @returns {Boolean} true/false
     */
    isDate: function (value) {
        return !!(value && value.getFullYear);
    },
    /*
     * 判断参数是否是Array实例
     * @param obj 待判断对象
     * @returns {Boolean} true/false
     *该判断是否数组的方法太过简单，附上比较“高级”的判断方法:
     *if(myVal && typeof myVal === 'object' && typeof myVal.length === 'number' 
     *  && !(myVal.propertyIsEnumerable('length'))){
     * //myVal确实是一个数组（前提propertyIsEnumerable不被覆盖），arguments满足此条件
     * //可通过增加条件typeof myVal.slice==='function'来区分，因为arguments不拥有数组的任何方法
     *  }
     */
    isArray: function (value) {
        return !!(value && !!value.unshift);
    },
    /*
     * 判断参数是否为空，这里null 和undefined 都返回true
     * @param obj 待判断对象
     * @returns {Boolean} true/false
     */
    isNull: function (value) {
        return value === null || value === undefined;
    },
    /*
     * 判断参数是否是数值。
     * @param obj 待判断对象
     * @returns {Boolean} true/false
     */
    isNumber: function (value) {
        return !isNaN(value) && typeof value == "number";
    },
    /*
     * 比较有意思的比较规则，1 "",null,undefined被认为是相等的。
     * 时间，getTime()相等被认为是相等的。
     * Object === 被认为是相等的。
     * String(a) === String(b)被认为是相等的。。。
     * @param a 待判断对象
     * @param b 待判断对象
     * @returns {Boolean} true/false
     */
    isEquals: function (a, b) {

        if (a !== 0 && b !== 0) {
            if ((mini.isNull(a) || a == "") && (mini.isNull(b) || b == ""))
                return true;
        }

        if (a && b && a.getFullYear && b.getFullYear)
            return a.getTime() === b.getTime();
        if (typeof a == 'object' && typeof b == 'object') {
            return a === b;
        }
        return String(a) === String(b);
    },
    /*
     * 数组循环方法。
     * @param {Array} array数组对象
     * @param {Function} method 循环执行的函数，函数会传入三个参数依次是值，下标，源数组对象。
     * @param scope 循环函数执行的作用域。
     * @returns 无
     */
    forEach: function (array, method, scope) {
        var list = array.clone();
        for (var i = 0, l = list.length; i < l; i++) {
            var o = list[i];
            if (method.call(scope, o, i, array) === false)
                break;
        }
    },
    /*
     * 数组排序方法。此方法没有什么优秀的设计之处。第三个参数在方法内并没有用到。
     * @param array 数组对象
     * @param 排序算法函数,内部实现还是使用了Array.prototype.sort()方法
     * @param scope 没有用到的参数
     * @returns 无
     */
    sort: function (array, fn, scope) {
        scope = scope || array;

        function $(array, fn) {
            var i = 0,
                    l = array.length,
                    j, $;
            for (; i < l; i++)
                for (j = i; j < l; j++) {
                    var a = array[i],
                            b = array[j],
                            c = fn(a, b);
                    if (c > 0) {
                        array.removeAt(j);
                        array.insert(i, b);
                    }
                }
            return array;
        }
        $(array, fn);
    },
    elWarp: document.createElement("div")
};


if (typeof mini_debugger == "undefined") mini_debugger = true;
if (typeof mini_useShims == "undefined") mini_useShims = false;
if (typeof mini_ajaxAsyncInvoke == "undefined") mini_ajaxAsyncInvoke = true;
mini_regClass = function(A, _) {
    _ = _.toLowerCase();
    if (!mini.classes[_]) {
        mini.classes[_] = A;
        A.prototype.type = _
    }
    var $ = A.prototype.uiCls;
    if (!mini.isNull($) && !mini.uiClasses[$]) mini.uiClasses[$] = A
};
mini_extend = function(E, A, $) {
    if (typeof A != "function") return this;
    var D = E,
        C = D.prototype,
        _ = A.prototype;
    if (D.superclass == _) return;
    D.superclass = _;
    D.superclass.constructor = A;
    for (var B in _) C[B] = _[B];
    if ($)
        for (B in $) C[B] = $[B];
    return D
};
mini.copyTo(mini, {
    extend: mini_extend,
    regClass: mini_regClass,
    debug: false
});
mini.namespace = function(A) {
    if (typeof A != "string") return;
    A = A.split(".");
    var D = window;
    for (var $ = 0, B = A.length; $ < B; $++) {
        var C = A[$],
            _ = D[C];
        if (!_) _ = D[C] = {};
        D = _
    }
};
l1oo = [];
mini._BindEvents = function(_, $) {
    l1oo.push([_, $]);
    if (!mini._EventTimer) mini._EventTimer = setTimeout(function() {
        lolloo()
    }, 50)
};
lolloo = function() {
    for (var $ = 0, _ = l1oo.length; $ < _; $++) {
        var A = l1oo[$];
        A[0].call(A[1])
    }
    l1oo = [];
    mini._EventTimer = null
};
mini._getFunctoin = function(C) {
    if (typeof C != "string") return null;
    var _ = C.split("."),
        D = null;
    for (var $ = 0, A = _.length; $ < A; $++) {
        var B = _[$];
        if (!D) D = window[B];
        else D = D[B];
        if (!D) break
    }
    return D
};
mini._getMap = function(name, obj) {
    if (!name) return null;
    var index = name.indexOf(".");
    if (index == -1 && name.indexOf("[") == -1) return obj[name];
    if (index == (name.length - 1)) return obj[name];
    var s = "obj." + name;
    try {
        var v = eval(s)
    } catch (e) {
        return null
    }
    return v
};
mini._setMap = function(H, A, B) {
    if (!B) return;
    if (typeof H != "string") return;
    var E = H.split(".");

    function F(A, E, $, B) {
        var C = A[E];
        if (!C) C = A[E] = [];
        for (var _ = 0; _ <= $; _++) {
            var D = C[_];
            if (!D)
                if (B === null || B === undefined) D = C[_] = {};
                else D = C[_] = B
        }
        return A[E][$]
    }
    var $ = null;
    for (var _ = 0, G = E.length; _ <= G - 1; _++) {
        var H = E[_];
        if (_ == G - 1) {
            if (H.indexOf("]") == -1) B[H] = A;
            else {
                var C = H.split("["),
                    D = C[0],
                    I = parseInt(C[1]);
                F(B, D, I, "");
                B[D][I] = A
            }
            break
        }
        if (H.indexOf("]") == -1) {
            $ = B[H];
            if (_ <= G - 2 && $ == null) B[H] = $ = {};
            B = $
        } else {
            C = H.split("["), D = C[0], I = parseInt(C[1]);
            B = F(B, D, I)
        }
    }
    return A
};
mini.getAndCreate = function($) {
    if (!$) return null;
    if (typeof $ == "string") return mini.components[$];
    if (typeof $ == "object")
        if (mini.isControl($)) return $;
        else if (mini.isElement($)) return mini.uids[$.uid];
    else return mini.create($);
    return null
};
mini.create = function($) {
    if (!$) return null;
    if (mini.get($.id) === $) return $;
    var _ = this.getClass($.type);
    if (!_) return null;
    var A = new _();
    A.set($);
    return A
};

mini.Component = function() {
    this._events = {};
    this.uid = mini.newId(this.o0ooo);
    this._id = this.uid;
    if (!this.id) this.id = this.uid;
    mini.reg(this)
};
mini.Component.prototype = {
    isControl: true,
    id: null,
    o0ooo: "mini-",
    l00O0: false,
    _canFire: true
};
mini_Component = mini.Component.prototype;
mini_Component.destroy = mini_Component_destroy;
mini_Component.getId = mini_Component_getId;
mini_Component.setId = mini_Component_setId;
mini_Component.findListener = mini_Component_findListener;
mini_Component.un = mini_Component_un;
mini_Component.on = mini_Component_on;
mini_Component.fire = mini_Component_fire;
mini_Component.set = mini_Component_set;
mini.Control = function($) {
    mini.Control.superclass.constructor.apply(this, arguments);
    this._create();
    this.el.uid = this.uid;
    this._initEvents();
    if (this._clearBorder) this.el.style.borderWidth = "0";
    this.addCls(this.uiCls);
    this.setWidth(this.width);
    this.setHeight(this.height);
    this.el.style.display = this.visible ? this.l10O0 : "none";
    if ($) mini.applyTo.call(this, $)
};
mini.extend(mini.Control, mini.Component, {
    jsName: null,
    width: "",
    height: "",
    visible: true,
    readOnly: false,
    enabled: true,
    tooltip: "",
    OooO01: "mini-readonly",
    o0010: "mini-disabled",
    name: "",
    _clearBorder: true,
    l10O0: "",
    lO10O: true,
    allowAnim: true,
    Oo00: "mini-mask-loading",
    loadingMsg: "Loading...",
    contextMenu: null,
    ajaxData: null,
    ajaxType: "",
    dataField: "",
    tabIndex: 0
});
mini_Control = mini.Control.prototype;
mini_Control.getAttrs = mini_Control_getAttrs;
mini_Control.getTabIndex = mini_Control_getTabIndex;
mini_Control.setTabIndex = mini_Control_setTabIndex;
mini_Control.getDataField = mini_Control_getDataField;
mini_Control.setDataField = mini_Control_setDataField;
mini_Control.o1o1 = mini_Control_o1o1;
mini_Control.getAjaxType = mini_Control_getAjaxType;
mini_Control.setAjaxType = mini_Control_setAjaxType;
mini_Control.getAjaxData = mini_Control_getAjaxData;
mini_Control.setAjaxData = mini_Control_setAjaxData;
mini_Control.getValue = mini_Control_getValue;
mini_Control.setValue = mini_Control_setValue;
mini_Control.getDefaultValue = mini_Control_getDefaultValue;
mini_Control.setDefaultValue = mini_Control_setDefaultValue;
mini_Control.getContextMenu = mini_Control_getContextMenu;
mini_Control.setContextMenu = mini_Control_setContextMenu;
mini_Control.Ol0l10 = mini_Control_Ol0l10;
mini_Control.o000Oo = mini_Control_o000Oo;
mini_Control.getLoadingMsg = mini_Control_getLoadingMsg;
mini_Control.setLoadingMsg = mini_Control_setLoadingMsg;
mini_Control.loading = mini_Control_loading;
mini_Control.unmask = mini_Control_unmask;
mini_Control.mask = mini_Control_mask;
mini_Control.oOlolO = mini_Control_oOlolO;
mini_Control.getAllowAnim = mini_Control_getAllowAnim;
mini_Control.setAllowAnim = mini_Control_setAllowAnim;
mini_Control.blur = mini_Control_blur;
mini_Control.focus = mini_Control_focus;
mini_Control.destroy = mini_Control_destroy;
mini_Control._destroyChildren = mini_Control__destroyChildren;
mini_Control.layoutChanged = mini_Control_layoutChanged;
mini_Control.doLayout = mini_Control_doLayout;
mini_Control.canLayout = mini_Control_canLayout;
mini_Control.doUpdate = mini_Control_doUpdate;
mini_Control.endUpdate = mini_Control_endUpdate;
mini_Control.beginUpdate = mini_Control_beginUpdate;
mini_Control.isDisplay = mini_Control_isDisplay;
mini_Control.hide = mini_Control_hide;
mini_Control.show = mini_Control_show;
mini_Control.getVisible = mini_Control_getVisible;
mini_Control.setVisible = mini_Control_setVisible;
mini_Control.disable = mini_Control_disable;
mini_Control.enable = mini_Control_enable;
mini_Control.getEnabled = mini_Control_getEnabled;
mini_Control.setEnabled = mini_Control_setEnabled;
mini_Control.isReadOnly = mini_Control_isReadOnly;
mini_Control.getParent = mini_Control_getParent;
mini_Control.getReadOnly = mini_Control_getReadOnly;
mini_Control.setReadOnly = mini_Control_setReadOnly;
mini_Control._doReadOnly = mini_Control__doReadOnly;
mini_Control.removeCls = mini_Control_removeCls;
mini_Control.addCls = mini_Control_addCls;
mini_Control.getCls = mini_Control_getCls;
mini_Control.setCls = mini_Control_setCls;
mini_Control.getStyle = mini_Control_getStyle;
mini_Control.setStyle = mini_Control_setStyle;
mini_Control.getBorderStyle = mini_Control_getBorderStyle;
mini_Control.setBorderStyle = mini_Control_setBorderStyle;
mini_Control.getBox = mini_Control_getBox;
mini_Control.getHeight = mini_Control_getHeight;
mini_Control.setHeight = mini_Control_setHeight;
mini_Control.getWidth = mini_Control_getWidth;
mini_Control.setWidth = mini_Control_setWidth;
mini_Control._sizeChanged = mini_Control__sizeChanged;
mini_Control.getTooltip = mini_Control_getTooltip;
mini_Control.setTooltip = mini_Control_setTooltip;
mini_Control.getJsName = mini_Control_getJsName;
mini_Control.setJsName = mini_Control_setJsName;
mini_Control.getEl = mini_Control_getEl;
mini_Control.render = mini_Control_render;
mini_Control.isRender = mini_Control_isRender;
mini_Control.isFixedSize = mini_Control_isFixedSize;
mini_Control.isAutoWidth = mini_Control_isAutoWidth;
mini_Control.isAutoHeight = mini_Control_isAutoHeight;
mini_Control.getName = mini_Control_getName;
mini_Control.setName = mini_Control_setName;
mini_Control.within = mini_Control_within;
mini_Control._initEvents = mini_Control__initEvents;
mini_Control._create = mini_Control__create;
mini._attrs = null;
mini.regHtmlAttr = function(_, $) {
    if (!_) return;
    if (!$) $ = "string";
    if (!mini._attrs) mini._attrs = [];
    mini._attrs.push([_, $])
};
__mini_setControls = function($, B, C) {
    B = B || this._contentEl;
    C = C || this;
    if (!$) $ = [];
    if (!mini.isArray($)) $ = [$];
    for (var _ = 0, D = $.length; _ < D; _++) {
        var A = $[_];
        if (typeof A == "string") {
            if (A.indexOf("#") == 0) A = mini.byId(A)
        } else if (mini.isElement(A));
        else {
            A = mini.getAndCreate(A);
            A = A.el
        }
        if (!A) continue;
        mini.append(B, A)
    }
    mini.parse(B);
    C.doLayout();
    return C
};
mini.Container = function() {
    mini.Container.superclass.constructor.apply(this, arguments);
    if (!this._contentEl) this._contentEl = this.el
};
mini.extend(mini.Container, mini.Control, {
    setControls: __mini_setControls,
    getContentEl: function() {
        return this._contentEl
    },
    getBodyEl: function() {
        return this._contentEl
    },
    within: function(C) {
        if (Oolo(this.el, C.target)) return true;
        var $ = mini.getChildControls(this);
        for (var _ = 0, B = $.length; _ < B; _++) {
            var A = $[_];
            if (A.within(C)) return true
        }
        return false
    }
});
mini.ValidatorBase = function() {
    mini.ValidatorBase.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.ValidatorBase, mini.Control, {
    required: false,
    requiredErrorText: "This field is required.",
    o11o: "mini-required",
    errorText: "",
    lllOlo: "mini-error",
    lO10ol: "mini-invalid",
    errorMode: "icon",
    validateOnChanged: true,
    validateOnLeave: true,
    Ooolll: true,
    keyNavEnabled: true,
    indentSpace: false,
    _indentCls: "mini-indent",
    errorIconEl: null,
    errorTooltipPlacement: "right",
    _labelFieldCls: "mini-labelfield",
    labelField: false,
    label: "",
    labelStyle: ""
});
mini_ValidatorBase = mini.ValidatorBase.prototype;
mini_ValidatorBase.getLabelStyle = mini_ValidatorBase_getLabelStyle;
mini_ValidatorBase.setLabelStyle = mini_ValidatorBase_setLabelStyle;
mini_ValidatorBase.getLabel = mini_ValidatorBase_getLabel;
mini_ValidatorBase.setLabel = mini_ValidatorBase_setLabel;
mini_ValidatorBase.getLabelField = mini_ValidatorBase_getLabelField;
mini_ValidatorBase.setLabelField = mini_ValidatorBase_setLabelField;
mini_ValidatorBase._labelLayout = mini_ValidatorBase__labelLayout;
mini_ValidatorBase.getAttrs = mini_ValidatorBase_getAttrs;
mini_ValidatorBase.onValidation = mini_ValidatorBase_onValidation;
mini_ValidatorBase.onValueChanged = mini_ValidatorBase_onValueChanged;
mini_ValidatorBase.Ol11o = mini_ValidatorBase_Ol11o;
mini_ValidatorBase.doValueChanged = mini_ValidatorBase_doValueChanged;
mini_ValidatorBase.o1lo = mini_ValidatorBase_o1lo;
mini_ValidatorBase.Ooo00O = mini_ValidatorBase_Ooo00O;
mini_ValidatorBase.Olll1 = mini_ValidatorBase_Olll1;
mini_ValidatorBase.getErrorIconEl = mini_ValidatorBase_getErrorIconEl;
mini_ValidatorBase.getRequiredErrorText = mini_ValidatorBase_getRequiredErrorText;
mini_ValidatorBase.setRequiredErrorText = mini_ValidatorBase_setRequiredErrorText;
mini_ValidatorBase.getRequired = mini_ValidatorBase_getRequired;
mini_ValidatorBase.setRequired = mini_ValidatorBase_setRequired;
mini_ValidatorBase.getErrorText = mini_ValidatorBase_getErrorText;
mini_ValidatorBase.setErrorText = mini_ValidatorBase_setErrorText;
mini_ValidatorBase.getErrorMode = mini_ValidatorBase_getErrorMode;
mini_ValidatorBase.setErrorMode = mini_ValidatorBase_setErrorMode;
mini_ValidatorBase.getValidateOnLeave = mini_ValidatorBase_getValidateOnLeave;
mini_ValidatorBase.setValidateOnLeave = mini_ValidatorBase_setValidateOnLeave;
mini_ValidatorBase.getValidateOnChanged = mini_ValidatorBase_getValidateOnChanged;
mini_ValidatorBase.setValidateOnChanged = mini_ValidatorBase_setValidateOnChanged;
mini_ValidatorBase.getIsValid = mini_ValidatorBase_getIsValid;
mini_ValidatorBase.setIsValid = mini_ValidatorBase_setIsValid;
mini_ValidatorBase.isValid = mini_ValidatorBase_isValid;
mini_ValidatorBase.validate = mini_ValidatorBase_validate;
mini_ValidatorBase._tryValidate = mini_ValidatorBase__tryValidate;
mini_ValidatorBase.isEditable = mini_ValidatorBase_isEditable;
mini_ValidatorBase.getIndentSpace = mini_ValidatorBase_getIndentSpace;
mini_ValidatorBase.setIndentSpace = mini_ValidatorBase_setIndentSpace;
mini_ValidatorBase.getKeyNavEnabled = mini_ValidatorBase_getKeyNavEnabled;
mini_ValidatorBase.setKeyNavEnabled = mini_ValidatorBase_setKeyNavEnabled;
mini.ListControl = function($) {
    this.data = [];
    this.Oo1l1o = [];
    mini.ListControl.superclass.constructor.call(this, null);
    this.doUpdate();
    if ($) mini.applyTo.call(this, $)
};
mini.ListControl.ajaxType = "get";
mini.extend(mini.ListControl, mini.ValidatorBase, {
    defaultValue: "",
    value: "",
    valueField: "id",
    textField: "text",
    dataField: "",
    delimiter: ",",
    data: null,
    url: "",
    valueInCheckOrder: true,
    l1lO: "mini-list-item",
    o1Ol: "mini-list-item-hover",
    _llOO1O: "mini-list-item-selected",
    uiCls: "mini-list",
    name: "",
    oo11O: null,
    ajaxData: null,
    O1l0l1: null,
    Oo1l1o: [],
    multiSelect: false,
    l010: true
});
mini_ListControl = mini.ListControl.prototype;
mini_ListControl.getAttrs = mini_ListControl_getAttrs;
mini_ListControl.onPreLoad = mini_ListControl_onPreLoad;
mini_ListControl.onLoadError = mini_ListControl_onLoadError;
mini_ListControl.onLoad = mini_ListControl_onLoad;
mini_ListControl.onBeforeLoad = mini_ListControl_onBeforeLoad;
mini_ListControl.onItemMouseDown = mini_ListControl_onItemMouseDown;
mini_ListControl.onItemClick = mini_ListControl_onItemClick;
mini_ListControl._OnItemMouseMove = mini_ListControl__OnItemMouseMove;
mini_ListControl._OnItemMouseOut = mini_ListControl__OnItemMouseOut;
mini_ListControl._OnItemClick = mini_ListControl__OnItemClick;
mini_ListControl.o00lol = mini_ListControl_o00lol;
mini_ListControl.__contextmenu = mini_ListControl_O00O;
mini_ListControl.__keyup = mini_ListControl_l0o0lO;
mini_ListControl.__keydown = mini_ListControl_l001l;
mini_ListControl.__OnMouseOut = mini_ListControl_O11O11;
mini_ListControl.__OnMouseOver = mini_ListControl_O1l1lo;
mini_ListControl.__mousemove = mini_ListControl_ol1o0;
mini_ListControl.__mouseup = mini_ListControl_oOlo0;
mini_ListControl.__OnMouseDown = mini_ListControl_olol;
mini_ListControl.__OnDblClick = mini_ListControl_o1oo11;
mini_ListControl.__OnClick = mini_ListControl_Ol1o1;
mini_ListControl.O0OO01 = mini_ListControl_O0OO01;
mini_ListControl.lo1ol = mini_ListControl_lo1ol;
mini_ListControl._OnSelectionChanged = mini_ListControl__OnSelectionChanged;
mini_ListControl.O0oo0O = mini_ListControl_O0oo0O;
mini_ListControl.deselects = mini_ListControl_deselects;
mini_ListControl.selects = mini_ListControl_selects;
mini_ListControl.clearSelect = mini_ListControl_clearSelect;
mini_ListControl.deselectAll = mini_ListControl_deselectAll;
mini_ListControl.selectAll = mini_ListControl_selectAll;
mini_ListControl.deselect = mini_ListControl_deselect;
mini_ListControl.select = mini_ListControl_select;
mini_ListControl.getSelected = mini_ListControl_getSelected;
mini_ListControl.setSelected = mini_ListControl_setSelected;
mini_ListControl.getSelecteds = mini_ListControl_getSelecteds;
mini_ListControl.isSelected = mini_ListControl_isSelected;
mini_ListControl.getMultiSelect = mini_ListControl_getMultiSelect;
mini_ListControl.setMultiSelect = mini_ListControl_setMultiSelect;
mini_ListControl.lollO0 = mini_ListControl_lollO0;
mini_ListControl.moveItem = mini_ListControl_moveItem;
mini_ListControl.removeItem = mini_ListControl_removeItem;
mini_ListControl.removeItems = mini_ListControl_removeItems;
mini_ListControl.addItem = mini_ListControl_addItem;
mini_ListControl.addItems = mini_ListControl_addItems;
mini_ListControl.removeAll = mini_ListControl_removeAll;
mini_ListControl.findItems = mini_ListControl_findItems;
mini_ListControl.ll0l0 = mini_ListControl_ll0l0;
mini_ListControl.getItemText = mini_ListControl_getItemText;
mini_ListControl.getItemValue = mini_ListControl_getItemValue;
mini_ListControl.getTextField = mini_ListControl_getTextField;
mini_ListControl.setTextField = mini_ListControl_setTextField;
mini_ListControl.getValueField = mini_ListControl_getValueField;
mini_ListControl.setValueField = mini_ListControl_setValueField;
mini_ListControl.getFormValue = mini_ListControl_getFormValue;
mini_ListControl.getValue = mini_ListControl_getValue;
mini_ListControl.setValue = mini_ListControl_setValue;
mini_ListControl._doLoad = mini_ListControl__doLoad;
mini_ListControl.getUrl = mini_ListControl_getUrl;
mini_ListControl.setUrl = mini_ListControl_setUrl;
mini_ListControl.getData = mini_ListControl_getData;
mini_ListControl.setData = mini_ListControl_setData;
mini_ListControl.loadData = mini_ListControl_loadData;
mini_ListControl.load = mini_ListControl_load;
mini_ListControl.updateItem = mini_ListControl_updateItem;
mini_ListControl.getAt = mini_ListControl_getAt;
mini_ListControl.indexOf = mini_ListControl_indexOf;
mini_ListControl.getCount = mini_ListControl_getCount;
mini_ListControl.getItem = mini_ListControl_getItem;
mini_ListControl.scrollIntoView = mini_ListControl_scrollIntoView;
mini_ListControl.getFocusedIndex = mini_ListControl_getFocusedIndex;
mini_ListControl.getFocusedItem = mini_ListControl_getFocusedItem;
mini_ListControl.o11l = mini_ListControl_o11l;
mini_ListControl.l1O000 = mini_ListControl_l1O000;
mini_ListControl.getItemEl = mini_ListControl_getItemEl;
mini_ListControl.removeItemCls = mini_ListControl_removeItemCls;
mini_ListControl.addItemCls = mini_ListControl_addItemCls;
mini_ListControl.o11o1o = mini_ListControl_o11o1o;
mini_ListControl.setName = mini_ListControl_setName;
mini_ListControl.destroy = mini_ListControl_destroy;
mini_ListControl._initEvents = mini_ListControl__initEvents;
mini_ListControl._create = mini_ListControl__create;
mini_ListControl.set = mini_ListControl_set;
mini_ListControl.doLayout = mini_ListControl_doLayout;
mini_ListControl.getValueInCheckOrder = mini_ListControl_getValueInCheckOrder;
mini_ListControl.setValueInCheckOrder = mini_ListControl_setValueInCheckOrder;
mini._Layouts = {};
mini.layout = function($, _) {
    if (!mini.enableLayout) return;
    if (!document.body) return;

    function A(C) {
        if (!C) return;
        var D = mini.get(C);
        if (D) {
            if (D.doLayout)
                if (!mini._Layouts[D.uid]) {
                    mini._Layouts[D.uid] = D;
                    if (_ !== false || D.isFixedSize() == false) D.doLayout(false);
                    delete mini._Layouts[D.uid]
                }
        } else {
            var E = C.childNodes;
            if (E)
                for (var $ = 0, F = E.length; $ < F; $++) {
                    var B = E[$];
                    try {
                        B.toString()
                    } catch (G) {
                        continue
                    }
                    A(B)
                }
        }
    }
    if (!$) $ = document.body;
    A($);
    if ($ == document.body) mini.layoutIFrames()
};
mini.applyTo = function(_) {
    _ = mini.byId(_);
    if (!_) return this;
    if (mini.get(_)) throw new Error("not applyTo a mini control");
    var $ = this.getAttrs(_);
    delete $._applyTo;
    if (mini.isNull($.defaultValue) && !mini.isNull($.value)) $.defaultValue = $.value;
    if (mini.isNull($.defaultText) && !mini.isNull($.text)) $.defaultText = $.text;
    var A = _.parentNode;
    if (A && this.el != _) A.replaceChild(this.el, _);
    if (window._mini_set) _mini_set($, this);
    this.set($);
    this.o1o1(_);
    return this
};
mini.l111Ol = function(G) {
    if (!G) return;
    var F = G.nodeName.toLowerCase();
    if (!F) return;
    var B = String(G.className);
    if (B) {
        var $ = mini.get(G);
        if (!$) {
            var H = B.split(" ");
            for (var E = 0, C = H.length; E < C; E++) {
                var A = H[E],
                    I = mini.getClassByUICls(A);
                if (I) {
                    mini.removeClass(G, A);
                    var D = new I();
                    mini.applyTo.call(D, G);
                    G = D.el;
                    break
                }
            }
        }
    }
    if (F == "select" || mini.hasClass(G, "mini-menu") || mini.hasClass(G, "mini-datagrid") || mini.hasClass(G, "mini-treegrid") || mini.hasClass(G, "mini-tree") || mini.hasClass(G, "mini-button") || mini.hasClass(G, "mini-textbox") || mini.hasClass(G, "mini-buttonedit")) return;
    var J = mini.getChildNodes(G, true);
    for (E = 0, C = J.length; E < C; E++) {
        var _ = J[E];
        if (_.nodeType == 1)
            if (_.parentNode == G) mini.l111Ol(_)
    }
};
mini._Removes = [];
mini._firstParse = true;
mini.parse = function(D, C) {
    mini.parsed = true;
    if (mini._firstParse) {
        mini._firstParse = false;
        var H = document.getElementsByTagName("iframe"),
            B = [];
        for (var A = 0, G = H.length; A < G; A++) {
            var _ = H[A];
            B.push(_)
        }
        for (A = 0, G = B.length; A < G; A++) {
            var _ = B[A],
                F = jQuery(_).attr("src");
            if (!F) continue;
            _.loaded = false;
            _._onload = _.onload;
            _._src = F;
            _.onload = function() {};
            _.src = ""
        }
        setTimeout(function() {
            for (var _ = 0, A = B.length; _ < A; _++) {
                var $ = B[_];
                if ($._src && jQuery($).attr("src") == "") {
                    $.loaded = true;
                    $.onload = $._onload;
                    $.src = $._src;
                    $._src = $._onload = null
                }
            }
        }, 20);
        setTimeout(function() {
            for (var A = 0, D = B.length; A < D; A++) {
                var _ = B[A],
                    C = $(_).attr("data-src");
                if (C) _.src = C
            }
        }, 30)
    }
    if (typeof D == "string") {
        var I = D;
        D = mini.byId(I);
        if (!D) D = document.body
    }
    if (D && !mini.isElement(D)) D = D.el;
    if (!D) D = document.body;
    var E = o101O1;
    if (isIE) o101O1 = false;
    mini.l111Ol(D);
    o101O1 = E;
    if (C !== false) mini.layout(D)
};
mini._ParseString = function(B, A, E) {
    for (var i = 0, l = E.length; i < l; i++) {
        var C = E[i],
            _ = mini.getAttr(B, C);
        if (_) A[C] = _
    }
};
mini._ParseBool = function(B, A, E) {
    for (var $ = 0, D = E.length; $ < D; $++) {
        var C = E[$],
            _ = mini.getAttr(B, C);
        if (_) A[C] = _ == "true" ? true : false
    }
};
mini._ParseInt = function(B, A, E) {
    for (var $ = 0, D = E.length; $ < D; $++) {
        var C = E[$],
            _ = parseInt(mini.getAttr(B, C));
        if (!isNaN(_)) A[C] = _
    }
};
mini.oolo = function(el) {
    var columns = [],
        cs = mini.getChildNodes(el);
    for (var i = 0, l = cs.length; i < l; i++) {
        var node = cs[i],
            jq = jQuery(node),
            column = {},
            editor = null,
            filter = null,
            subCs = mini.getChildNodes(node);
        if (subCs)
            for (var ii = 0, li = subCs.length; ii < li; ii++) {
                var subNode = subCs[ii],
                    property = jQuery(subNode).attr("property");
                if (!property) continue;
                property = property.toLowerCase();
                if (property == "columns") {
                    column.columns = mini.oolo(subNode);
                    jQuery(subNode).remove()
                }
                if (property == "editor" || property == "filter") {
                    var className = subNode.className,
                        classes = className.split(" ");
                    for (var i3 = 0, l3 = classes.length; i3 < l3; i3++) {
                        var cls = classes[i3],
                            clazz = mini.getClassByUICls(cls);
                        if (clazz) {
                            var ui = new clazz();
                            if (property == "filter") {
                                filter = ui.getAttrs(subNode);
                                filter.type = ui.type
                            } else {
                                editor = ui.getAttrs(subNode);
                                editor.type = ui.type
                            }
                            break
                        }
                    }
                    jQuery(subNode).remove()
                }
            }
        column.header = node.innerHTML;
        mini._ParseString(node, column, ["name", "header", "field", "editor", "filter", "renderer", "width", "type", "renderer", "headerAlign", "align", "headerCls", "cellCls", "headerStyle", "cellStyle", "displayField", "dateFormat", "listFormat", "mapFormat", "numberFormat", "trueValue", "falseValue", "dataType", "vtype", "currencyUnit", "summaryType", "summaryRenderer", "groupSummaryType", "groupSummaryRenderer", "defaultValue", "defaultText", "decimalPlaces", "data-options", "sortField", "sortType"]);
        mini._ParseBool(node, column, ["visible", "readOnly", "allowSort", "allowResize", "allowMove", "allowDrag", "autoShowPopup", "unique", "autoEscape", "enabled", "hideable", "showCellTip", "valueFromSelect"]);
        if (editor) column.editor = editor;
        if (filter) column.filter = filter;
        if (typeof(column.editor) == "string") {
            try {
                column.editor = eval("(" + column.editor + ")")
            } catch (e) {}
        }
        if (column.dataType) column.dataType = column.dataType.toLowerCase();
        if (column.defaultValue === "true") column.defaultValue = true;
        if (column.defaultValue === "false") column.defaultValue = false;
        columns.push(column);
        var options = column["data-options"];
        if (options) {
            options = eval("(" + options + ")");
            if (options) mini.copyTo(column, options)
        }
    }
    return columns
};
mini.o11O1 = {};
mini._getColumn = function($) {
    var _ = mini.o11O1[$.toLowerCase()];
    if (!_) return {};
    return _()
};
mini.IndexColumn = function($) {
    return mini.copyTo({
        width: 30,
        cellCls: "",
        align: "center",
        draggable: false,
        allowDrag: true,
        hideable: true,
        init: function($) {
            $.on("addrow", this.__OnIndexChanged, this);
            $.on("removerow", this.__OnIndexChanged, this);
            $.on("moverow", this.__OnIndexChanged, this);
            if ($.isTree) {
                $.on("addnode", this.__OnIndexChanged, this);
                $.on("removenode", this.__OnIndexChanged, this);
                $.on("movenode", this.__OnIndexChanged, this);
                $.on("loadnode", this.__OnIndexChanged, this);
                this._gridUID = $.uid;
                this._rowIdField = "_id"
            }
        },
        getNumberId: function($) {
            return this._gridUID + "$number$" + $[this._rowIdField]
        },
        createNumber: function($, _) {
            if (mini.isNull($.pageIndex)) return _ + 1;
            else return ($.pageIndex * $.pageSize) + _ + 1
        },
        renderer: function(A) {
            var $ = A.sender;
            if (this.draggable) {
                if (!A.cellStyle) A.cellStyle = "";
                A.cellStyle += ";cursor:move;"
            }
            var _ = "<div id=\"" + this.getNumberId(A.record) + "\">";
            if (mini.isNull($.getPageIndex)) _ += A.rowIndex + 1;
            else _ += ($.getPageIndex() * $.getPageSize()) + A.rowIndex + 1;
            _ += "</div>";
            return _
        },
        __OnIndexChanged: function(F) {
            var $ = F.sender,
                C = $.getDataView();
            for (var A = 0, D = C.length; A < D; A++) {
                var _ = C[A],
                    E = this.getNumberId(_),
                    B = document.getElementById(E);
                if (B) B.innerHTML = this.createNumber($, A)
            }
        }
    }, $)
};
mini.o11O1["indexcolumn"] = mini.IndexColumn;
mini.CheckColumn = function(_) {
    return mini.copyTo({
        width: 30,
        cellCls: "mini-checkcolumn",
        headerCls: "mini-checkcolumn",
        hideable: true,
        _multiRowSelect: true,
        header: function($) {
            var B = this.uid + "checkall",
                _ = $._checkedAll ? "mini-grid-checkbox-checked" : "",
                A = "<span class=\"mini-grid-checkbox " + _ + "\" id=\"" + B + "\"></span>";
            if (this.multiSelect == false) A = "";
            return A
        },
        getCheckId: function($, _) {
            return this._gridUID + "$checkcolumn$" + $[this._rowIdField] + "$" + _._id
        },
        init: function($) {
            $.on("_selectchange", this.__OnSelectionChanged, this);
            $.on("HeaderCellClick", this.O100, this);
            var _ = this;
            $.on("removerow", function() {
                if ($.data && $.data.length == 0) _._doCheckState($)
            });
            _ = this;
            $.on("load", function() {
                var A = $.uid + "checkall";
                _._doCheckState($)
            }, this)
        },
        renderer: function(D) {
            var C = this.getCheckId(D.record, D.column),
                _ = D.sender.isSelected ? D.sender.isSelected(D.record) : false,
                B = "checkbox",
                $ = D.sender,
                A = "<span class=\"mini-grid-" + ($.getMultiSelect() ? "checkbox" : "radio") + "\" id=\"" + C + "\"></span>";
            return A
        },
        O100: function(E) {
            var _ = E.sender;
            if (E.column != this) return;
            var D = _.uid + "checkall",
                A = document.getElementById(D);
            if (A) {
                var B = "mini-grid-checkbox-checked",
                    C = !mini.hasClass(A, B);
                this._checkedAll = C;
                if (_.getMultiSelect()) {
                    if (C) {
                        var $ = _.getDataView();
                        _.selects($);
                        mini.addClass(A, B)
                    } else {
                        $ = _.getDataView();
                        _.deselects($);
                        mini.removeClass(A, B)
                    }
                } else {
                    _.deselectAll();
                    if (C) {
                        _.select(0);
                        mini.addClass(A, B)
                    }
                }
                _.fire("checkall")
            }
        },
        __OnSelectionChanged: function(L) {
            var F = L.sender,
                A = F.toArray(),
                D = this,
                G = F.isVirtualScroll(),
                C = F._viewRegion,
                _ = (G && C) ? C.start : -1,
                B = C ? C.end : -1,
                K = {};
            if (_ != -1) {
                var J = F.getVisibleRows();
                for (var H = _, E = B; H < E; H++) {
                    var I = J[H];
                    if (I) K[I._id] = true
                }
            }
            for (H = 0, E = A.length; H < E; H++) {
                var $ = A[H];
                if (_ != -1)
                    if (!K[$._id]) continue
            }
            if (!this._timer) this._timer = setTimeout(function() {
                D._doCheckState(F);
                D._timer = null
            }, 10)
        },
        _doCheckState: function(A) {
            var D = A.uid + "checkall",
                C = document.getElementById(D);
            if (C) {
                var B = A.getSelecteds(),
                    _ = A.isTree ? A.getList().length : A.getData().length;
                if (B.length == _ && _ != 0) $(C).addClass("mini-grid-checkbox-checked");
                else $(C).removeClass("mini-grid-checkbox-checked")
            }
        }
    }, _)
};
mini.o11O1["checkcolumn"] = mini.CheckColumn;
mini.ExpandColumn = function($) {
    return mini.copyTo({
        width: 30,
        headerAlign: "center",
        align: "center",
        draggable: false,
        cellStyle: "padding:0",
        cellCls: "mini-grid-expandCell",
        hideable: true,
        renderer: function($) {
            return "<a class=\"mini-grid-ecIcon\" href=\"javascript:#\" onclick=\"return false\"></a>"
        },
        init: function($) {
            $.on("cellclick", this.OolOl, this)
        },
        OolOl: function(A) {
            var $ = A.sender;
            if (A.column == this && $.isShowRowDetail)
                if (oOlO(A.htmlEvent.target, "mini-grid-ecIcon")) {
                    var _ = $.isShowRowDetail(A.record);
                    if (!_) {
                        A.cancel = false;
                        $.fire("beforeshowrowdetail", A);
                        if (A.cancel === true) return
                    } else {
                        A.cancel = false;
                        $.fire("beforehiderowdetail", A);
                        if (A.cancel === true) return
                    }
                    if ($.autoHideRowDetail) $.hideAllRowDetail();
                    if (_) $.hideRowDetail(A.record);
                    else $.showRowDetail(A.record)
                }
        }
    }, $)
};
mini.o11O1["expandcolumn"] = mini.ExpandColumn;
l010OoColumn = function(_) {
    return mini.copyTo({
        _type: "checkboxcolumn",
        editMode: "inline",
        header: "",
        headerAlign: "center",
        trueValue: true,
        falseValue: false,
        readOnly: false,
        getCheckId: function($, _) {
            return this._gridUID + "$checkbox$" + $[this._rowIdField] + "$" + _._id
        },
        getCheckBoxEl: function($, _) {
            return document.getElementById(this.getCheckId($, _))
        },
        isChecked: function(_, B) {
            var A = this.getCheckBoxEl(_, B);
            return $(A).hasClass("mini-grid-checkbox-checked")
        },
        renderer: function(B) {
            var _ = this.getCheckId(B.record, B.column),
                A = mini._getMap(B.field, B.record),
                $ = A == this.trueValue ? true : false;
            return "<span  id=\"" + _ + "\" class=\"mini-grid-checkbox " + ($ ? "mini-grid-checkbox-checked" : "") + "\"></span>"
        },
        init: function(_) {
            this.grid = _;

            function A(B) {
                if (_.isReadOnly() || this.readOnly) return;
                B.value = mini._getMap(B.field, B.record);
                _.fire("cellbeginedit", B);
                if (B.cancel !== true) {
                    var A = mini._getMap(B.column.field, B.record),
                        $ = A == this.trueValue ? this.falseValue : this.trueValue;
                    if (_.oo0l) {
                        _.oo0l(B.record, B.column, $);
                        _.lo1Oo1(B.record, B.column)
                    }
                }
            }

            function B(D) {
                if (D.column == this) {
                    var C = this.getCheckId(D.record, D.column),
                        B = D.htmlEvent.target;
                    if (B.id == C)
                        if (_.allowCellEdit) {
                            D.cancel = false;
                            A.call(this, D)
                        } else {
                            if (this.readOnly) return;
                            D.value = mini._getMap(D.column.field, D.record);
                            _.fire("cellbeginedit", D);
                            if (D.cancel == true) return;
                            if (_.isEditingRow && _.isEditingRow(D.record)) setTimeout(function() {
                                $(B).toggleClass("mini-grid-checkbox-checked")
                            }, 1)
                        }
                }
            }
            _.on("cellclick", B, this);
            mini.on(this.grid.el, "keydown", function(C) {
                if (C.keyCode == 32 && _.allowCellEdit) {
                    var $ = _.getCurrentCell();
                    if (!$) return;
                    if ($[1] != this) return;
                    var B = {
                        record: $[0],
                        column: $[1]
                    };
                    B.field = B.column.field;
                    A.call(this, B);
                    C.preventDefault()
                }
            }, this);
            var C = parseInt(this.trueValue),
                D = parseInt(this.falseValue);
            if (!isNaN(C)) this.trueValue = C;
            if (!isNaN(D)) this.falseValue = D
        }
    }, _)
};
mini.o11O1["checkboxcolumn"] = l010OoColumn;
mini.RadioButtonColumn = function($) {
    return mini.copyTo({
        _type: "radiobuttoncolumn",
        editMode: "inline",
        header: "",
        headerAlign: "center",
        trueValue: true,
        falseValue: false,
        readOnly: false,
        getCheckId: function($, _) {
            return this._gridUID + "$radio$" + $[this._rowIdField] + "$" + _._id
        },
        getCheckBoxEl: function($, _) {
            return document.getElementById(this.getCheckId($, _))
        },
        renderer: function(F) {
            var $ = F.sender,
                D = this.getCheckId(F.record, F.column),
                E = mini._getMap(F.field, F.record),
                B = E == this.trueValue ? true : false,
                _ = "radio",
                C = $._id + F.column.field,
                A = "";
            return "<span id=\"" + D + "\" class=\"mini-grid-radio " + (B ? "mini-grid-radio-checked" : "") + "\"></span>"
        },
        init: function($) {
            this.grid = $;

            function _(F) {
                if ($.isReadOnly() || this.readOnly) return;
                F.value = mini._getMap(F.field, F.record);
                $.fire("cellbeginedit", F);
                if (F.cancel !== true) {
                    var E = mini._getMap(F.column.field, F.record);
                    if (E == this.trueValue) return;
                    var A = E == this.trueValue ? this.falseValue : this.trueValue,
                        C = $.getData();
                    for (var _ = 0, D = C.length; _ < D; _++) {
                        var B = C[_];
                        if (B == F.record) continue;
                        E = mini._getMap(F.column.field, B);
                        if (E != this.falseValue) $.updateRow(B, F.column.field, this.falseValue)
                    }
                    if ($.oo0l) {
                        $.oo0l(F.record, F.column, A);
                        $.lo1Oo1(F.record, F.column)
                    }
                }
            }

            function A(D) {
                if (D.column == this) {
                    var C = this.getCheckId(D.record, D.column),
                        B = D.htmlEvent.target;
                    if (B.id == C)
                        if ($.allowCellEdit) {
                            D.cancel = false;
                            _.call(this, D)
                        } else if ($.isEditingRow && $.isEditingRow(D.record)) {
                        var A = this;
                        setTimeout(function() {
                            B.checked = true;
                            var F = $.getData();
                            for (var C = 0, H = F.length; C < H; C++) {
                                var E = F[C];
                                if (E == D.record) continue;
                                var G = D.column.field,
                                    I = mini._getMap(G, E);
                                if (I != A.falseValue)
                                    if (E != D.record)
                                        if ($._dataSource) {
                                            mini._setMap(D.column.field, A.falseValue, E);
                                            $._dataSource._setModified(E, G, I)
                                        } else {
                                            var _ = {};
                                            mini._setMap(G, A.falseValue, _);
                                            $.l1111O(E, _)
                                        }
                            }
                        }, 1)
                    }
                }
            }
            $.on("cellclick", A, this);
            mini.on(this.grid.el, "keydown", function(C) {
                if (C.keyCode == 32 && $.allowCellEdit) {
                    var A = $.getCurrentCell();
                    if (!A) return;
                    if (A[1] != this) return;
                    var B = {
                        record: A[0],
                        column: A[1]
                    };
                    B.field = B.column.field;
                    _.call(this, B);
                    C.preventDefault()
                }
            }, this);
            var B = parseInt(this.trueValue),
                C = parseInt(this.falseValue);
            if (!isNaN(B)) this.trueValue = B;
            if (!isNaN(C)) this.falseValue = C
        }
    }, $)
};
mini.o11O1["radiobuttoncolumn"] = mini.RadioButtonColumn;

function listColumnRenderer(O) {
    var C = O.column,
        A = !mini.isNull(O.value) ? String(O.value) : "",
        D = A.split(","),
        E = "id",
        K = "text",
        B = {},
        H = C.editor,
        N = C.__editor;
    if (H) {
        if (!N && (H.type == "combobox" || H.type == "treeselect")) {
            if (mini.isControl(H)) N = H;
            else {
                H = mini.clone(H);
                N = mini.create(H)
            }
            O.column.__editor = N
        }
        E = N.getValueField();
        K = N.getTextField();
        var L = N.getData();
        B = C._valueMaps;
        if (!B || L !== C._data) {
            var _ = N.getList ? N.getList() : L;
            B = {};
            for (var I = 0, F = _.length; I < F; I++) {
                var $ = _[I];
                B[$[E]] = $
            }
            C._valueMaps = B;
            C._data = L
        }
    }
    var M = [];
    for (I = 0, F = D.length; I < F; I++) {
        var G = D[I],
            $ = B[G];
        if ($) {
            var J = $[K];
            if (J === null || J === undefined) J = "";
            M.push(J)
        }
    }
    if (M.length == 0 && C.valueFromSelect === false) return A;
    return M.join(",")
}
OoO1OOColumn = function($) {
    return mini.copyTo({
        renderer: listColumnRenderer
    }, $)
};
mini.o11O1["comboboxcolumn"] = OoO1OOColumn;
lo0lo1Column = function($) {
    return mini.copyTo({
        renderer: listColumnRenderer
    }, $)
};
mini.o11O1["treeselectcolumn"] = lo0lo1Column;
l1l0oo = function($) {
    this.owner = $;
    mini.on(this.owner.el, "mousedown", this.__OnMouseDown, this)
};
l1l0oo.prototype = {
    __OnMouseDown: function(A) {
        var $ = mini.hasClass(A.target, "mini-resizer-trigger");
        if ($ && this.owner.allowResize) {
            var _ = this.l11O();
            _.start(A)
        }
    },
    l11O: function() {
        if (!this._resizeDragger) this._resizeDragger = new mini.Drag({
            capture: true,
            onStart: mini.createDelegate(this.O0oo, this),
            onMove: mini.createDelegate(this.l1olo, this),
            onStop: mini.createDelegate(this.lO1011, this)
        });
        return this._resizeDragger
    },
    O0oo: function($) {
        this.mask = mini.append(document.body, "<div class=\"mini-resizer-mask mini-fixed\"></div>");
        this.proxy = mini.append(document.body, "<div class=\"mini-resizer-proxy\"></div>");
        this.proxy.style.cursor = "se-resize";
        var _ = this.owner.el;
        _.offsetWidth;
        this.elBox = mini.getBox(_);
        mini.setBox(this.proxy, this.elBox)
    },
    l1olo: function(B) {
        var $ = this.owner,
            D = B.now[0] - B.init[0],
            _ = B.now[1] - B.init[1],
            A = this.elBox.width + D,
            C = this.elBox.height + _;
        if (A < $.minWidth) A = $.minWidth;
        if (C < $.minHeight) C = $.minHeight;
        if (A > $.maxWidth) A = $.maxWidth;
        if (C > $.maxHeight) C = $.maxHeight;
        mini.setSize(this.proxy, A, C)
    },
    lO1011: function($, A) {
        if (!this.proxy) return;
        var _ = mini.getBox(this.proxy);
        jQuery(this.mask).remove();
        jQuery(this.proxy).remove();
        this.proxy = null;
        this.elBox = null;
        if (A) {
            this.owner.setWidth(_.width);
            this.owner.setHeight(_.height);
            this.owner.fire("resize")
        }
    }
};
mini._topWindow = null;
mini._getTopWindow = function(_) {
    if (mini._topWindow) return mini._topWindow;
    var $ = [];

    function A(_) {
        try {
            _["___try"] = 1;
            if (_["___try"] == 1) $.push(_)
        } catch (B) {}
        if (_.parent && _.parent != _) A(_.parent)
    }
    A(window);
    mini._topWindow = $[$.length - 1];
    return mini._topWindow
};
var __ps = mini.getParams();
if (__ps._winid) {
    try {
        window.Owner = mini._getTopWindow()[__ps._winid]
    } catch (ex) {}
}
mini._WindowID = "w" + Math.floor(Math.random() * 10000);
mini._getTopWindow()[mini._WindowID] = window;
mini.createIFrame = function(O, F, I, P, L) {
    if (!O) O = "";
    var M = O.split("#");
    O = M[0];
    var N = "";
    if (I !== true) {
        N = "_t=" + Math.floor(Math.random() * 1000000);
        if (O.indexOf("?") == -1) O += "?" + N;
        else O += "&" + N
    }
    if (O && O.indexOf("_winid") == -1) {
        N = "_winid=" + mini._WindowID;
        if (O.indexOf("?") == -1) O += "?" + N;
        else O += "&" + N
    }
    if (M[1]) O = O + "#" + M[1];
    var J = O.indexOf(".mht") != -1,
        E = J ? O : "",
        G = mini.newId("mini-iframe-"),
        Q = "<iframe name=\"" + G + "\" src=\"" + (P == "post" ? "" : E) + "\" style=\"width:100%;height:100%;\"  frameborder=\"0\"></iframe>",
        K = document.createElement("div"),
        D = mini.append(K, Q),
        R = false;
    if (J) R = true;
    else setTimeout(function() {
        if (D) {
            if (P != "post") D.src = O;
            R = true
        }
    }, 5);
    if (D.attachEvent) D.attachEvent("onload", B);
    else D.onload = B;
    var _ = false,
        C = true;

    function B() {
        if (R == false || _) return;
        setTimeout(function() {
            if (F) F(D, C);
            C = false
        }, 1)
    }
    D._ondestroy = function() {
        _ = true;
        D.src = "";
        if (mini.isIE) {
            try {
                D.contentWindow.document.write("");
                D.contentWindow.document.close()
            } catch ($) {}
        }
        D._ondestroy = null;
        D = null
    };
    var A;
    if (P == "post") {
        function H() {
            return $("<form />").attr({
                method: "post",
                action: O,
                enctype: "multipart/form-data",
                target: D.name
            }).hide().appendTo("body")
        }
        A = H();
        setTimeout(function() {
            A.submit()
        }, 10)
    }
    return D
};
mini._doOpen = function(F) {
    if (typeof F == "string") F = {
        url: F
    };
    F = mini.copyTo({
        width: 700,
        height: 400,
        allowResize: true,
        allowModal: true,
        closeAction: "destroy",
        title: "",
        titleIcon: "",
        iconCls: "",
        iconStyle: "",
        bodyStyle: "padding:0",
        url: "",
        showCloseButton: true,
        showFooter: false
    }, F);
    F.closeAction = "destroy";
    var B = F.onload;
    delete F.onload;
    var E = F.ondestroy;
    delete F.ondestroy;
    var C = F.url;
    delete F.url;
    var A = mini.getViewportBox();
    if (F.width && String(F.width).indexOf("%") != -1) {
        var $ = parseInt(F.width);
        F.width = parseInt(A.width * ($ / 100))
    }
    if (F.height && String(F.height).indexOf("%") != -1) {
        var _ = parseInt(F.height);
        F.height = parseInt(A.height * (_ / 100))
    }
    var D = new mini.Window();
    D.set(F);
    D.load(C, B, E);
    D.show();
    if (mini.isIE) setTimeout(function() {
        fixIEFocus()
    }, 100);
    return D
};

function fixIEFocus() {
    var _ = mini.getViewportBox(),
        $ = document.createElement("input");
    $.style.cssText = "position:absolute;left:" + _.left + "px;top:" + _.top + "px;";
    document.body.appendChild($);
    $.focus();
    $.parentNode.removeChild($)
}
mini.open = function(E) {
    if (!E) return;
    var C = E.url;
    if (!C) C = "";
    var B = C.split("#"),
        C = B[0];
    if (C && C.indexOf("_winid") == -1) {
        var A = "_winid=" + mini._WindowID;
        if (C.indexOf("?") == -1) C += "?" + A;
        else C += "&" + A;
        if (B[1]) C = C + "#" + B[1]
    }
    E.url = C;
    E.Owner = window;
    var $ = [];

    function _(A) {
        try {
            if (A.mini) $.push(A);
            if (A.parent && A.parent != A) _(A.parent)
        } catch (B) {}
    }
    _(window);
    var D = $[$.length - 1];
    return D["mini"]._doOpen(E)
};
mini.openTop = mini.open;
mini._getResult = function(F, C, I, H, B, E) {
    var A = null,
        _ = mini.getText(F, C, function(_, $) {
            A = $;
            if (I)
                if (I) I(_, $)
        }, H, B),
        $ = {
            text: _,
            result: null,
            sender: {
                type: ""
            },
            options: {
                url: F,
                data: C,
                type: B
            },
            xhr: A
        },
        D = null;
    try {
        mini_doload($);
        D = $.result;
        if (!D) D = mini.decode(_)
    } catch (G) {
        if (mini_debugger == true) alert(F + "\njson is error")
    }
    if (!mini.isArray(D) && E) D = mini._getMap(E, D);
    if (mini.isArray(D)) D = {
        data: D
    };
    return D ? D.data : null
};
mini.getData = function(C, A, E, D, _) {
    var $ = mini.getText(C, A, E, D, _),
        B = mini.decode($);
    return B
};
mini.getText = function(B, A, D, C, _) {
    var $ = null;
    mini.ajax({
        url: B,
        data: A,
        async: false,
        type: _ ? _ : "get",
        cache: false,
        dataType: "text",
        success: function(A, B, _) {
            $ = A;
            if (D) D(A, _)
        },
        error: C
    });
    return $
};
if (!window.mini_RootPath) mini_RootPath = "/";
o0O0o = function(B) {
    var A = document.getElementsByTagName("script"),
        D = "";
    for (var $ = 0, E = A.length; $ < E; $++) {
        var C = A[$].src;
        if (C.indexOf(B) != -1) {
            var F = C.split(B);
            D = F[0];
            break
        }
    }
    var _ = location.href;
    _ = _.split("#")[0];
    _ = _.split("?")[0];
    F = _.split("/");
    F.length = F.length - 1;
    _ = F.join("/");
    if (D.indexOf("http:") == -1 && D.indexOf("file:") == -1) D = _ + "/" + D;
    return D
};
if (!window.mini_JSPath) mini_JSPath = o0O0o("miniui.js");
mini.update = function(A, _) {
    if (typeof A == "string") A = {
        url: A
    };
    if (_) A.el = _;
    var $ = mini.loadText(A.url);
    mini.innerHTML(A.el, $);
    mini.parse(A.el)
};
mini.createSingle = function($) {
    if (typeof $ == "string") $ = mini.getClass($);
    if (typeof $ != "function") return;
    var _ = $.single;
    if (!_) _ = $.single = new $();
    return _
};
mini.createTopSingle = function($) {
    if (typeof $ != "function") return;
    var _ = $.prototype.type;
    if (top && top != window && top.mini && top.mini.getClass(_)) return top.mini.createSingle(_);
    else return mini.createSingle($)
};
mini.sortTypes = {
    "string": function($) {
        return String($).toUpperCase()
    },
    "date": function($) {
        if (!$) return 0;
        if (mini.isDate($)) return $.getTime();
        return mini.parseDate(String($))
    },
    "float": function(_) {
        var $ = parseFloat(String(_).replace(/,/g, ""));
        return isNaN($) ? 0 : $
    },
    "int": function(_) {
        var $ = parseInt(String(_).replace(/,/g, ""), 10);
        return isNaN($) ? 0 : $
    },
    "currency": function(_) {
        var $ = parseFloat(String(_).replace(/,/g, ""));
        return isNaN($) ? 0 : $
    }
};
mini.Oool = function(G, $, K, H) {
    var F = G.split(";");
    for (var E = 0, C = F.length; E < C; E++) {
        var G = F[E].trim(),
            J = G.split(":"),
            A = J[0],
            _ = G.substr(A.length + 1, 1000);
        if (_) _ = _.split(",");
        else _ = [];
        var D = mini.VTypes[A];
        if (D) {
            var I = D($, _);
            if (I !== true) {
                K.isValid = false;
                var B = J[0] + "ErrorText";
                K.errorText = H[B] || mini.VTypes[B] || "";
                K.errorText = String.format(K.errorText, _[0], _[1], _[2], _[3], _[4]);
                break
            }
        }
    }
};
mini.ol1l = function($, _) {
    if ($ && $[_]) return $[_];
    else return mini.VTypes[_]
};
mini.VTypes = {
    minDateErrorText: "Date can not be less than {0}",
    maxDateErrorText: "Date can not be greater than {0}",
    uniqueErrorText: "This field is unique.",
    requiredErrorText: "This field is required.",
    emailErrorText: "Please enter a valid email address.",
    urlErrorText: "Please enter a valid URL.",
    floatErrorText: "Please enter a valid number.",
    intErrorText: "Please enter only digits",
    dateErrorText: "Please enter a valid date. Date format is {0}",
    maxLengthErrorText: "Please enter no more than {0} characters.",
    minLengthErrorText: "Please enter at least {0} characters.",
    maxErrorText: "Please enter a value less than or equal to {0}.",
    minErrorText: "Please enter a value greater than or equal to {0}.",
    rangeLengthErrorText: "Please enter a value between {0} and {1} characters long.",
    rangeCharErrorText: "Please enter a value between {0} and {1} characters long.",
    rangeErrorText: "Please enter a value between {0} and {1}.",
    required: function(_, $) {
        if (mini.isNull(_) || _ === "") return false;
        return true
    },
    email: function(_, $) {
        if (mini.isNull(_) || _ === "") return true;
        if (_.search(/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/) != -1) return true;
        else return false
    },
    url: function(A, $) {
        if (mini.isNull(A) || A === "") return true;

        function _(_) {
            _ = _.toLowerCase().split("?")[0];
            var $ = "^((https|http|ftp|rtsp|mms)?://)?" + "(([0-9]{1,3}.){3}[0-9]{1,3}" + "|" + "([0-9a-z_!~*'()-]+.)*" + "([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]." + "[a-z]{2,6})" + "(:[0-9]{1,5})?" + "((/?)|" + "(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$",
                A = new RegExp($);
            if (A.test(_)) return (true);
            else return (false)
        }
        return _(A)
    },
    "int": function(A, _) {
        if (mini.isNull(A) || A === "") return true;

        function $(_) {
            if (_ < 0) _ = -_;
            var $ = String(_);
            return $.length > 0 && !(/[^0-9]/).test($)
        }
        return $(A)
    },
    "float": function(A, _) {
        if (mini.isNull(A) || A === "") return true;

        function $(_) {
            if (_ < 0) _ = -_;
            var $ = String(_);
            if ($.split(".").length > 2) return false;
            return $.length > 0 && !(/[^0-9.]/).test($) && !($.charAt($.length - 1) == ".")
        }
        return $(A)
    },
    "date": function(B, _) {
        if (mini.isNull(B) || B === "") return true;
        if (!B) return false;
        var $ = null,
            A = _[0];
        if (A) {
            $ = mini.parseDate(B, A);
            if ($ && $.getFullYear)
                if (mini.formatDate($, A) == B) return true
        } else {
            $ = mini.parseDate(B, "yyyy-MM-dd");
            if (!$) $ = mini.parseDate(B, "yyyy/MM/dd");
            if (!$) $ = mini.parseDate(B, "MM/dd/yyyy");
            if ($ && $.getFullYear) return true
        }
        return false
    },
    maxLength: function(A, $) {
        if (mini.isNull(A) || A === "") return true;
        var _ = parseInt($);
        if (!A || isNaN(_)) return true;
        if (A.length <= _) return true;
        else return false
    },
    minLength: function(A, $) {
        if (mini.isNull(A) || A === "") return true;
        var _ = parseInt($);
        if (isNaN(_)) return true;
        if (A.length >= _) return true;
        else return false
    },
    rangeLength: function(B, _) {
        if (mini.isNull(B) || B === "") return true;
        if (!B) return false;
        var $ = parseFloat(_[0]),
            A = parseFloat(_[1]);
        if (isNaN($) || isNaN(A)) return true;
        if ($ <= B.length && B.length <= A) return true;
        return false
    },
    rangeChar: function(G, B) {
        if (mini.isNull(G) || G === "") return true;
        var A = parseFloat(B[0]),
            E = parseFloat(B[1]);
        if (isNaN(A) || isNaN(E)) return true;

        function C(_) {
            var $ = new RegExp("^[\u4e00-\u9fa5]+$");
            if ($.test(_)) return true;
            return false
        }
        var $ = 0,
            F = String(G).split("");
        for (var _ = 0, D = F.length; _ < D; _++)
            if (C(F[_])) $ += 2;
            else $ += 1;
        if (A <= $ && $ <= E) return true;
        return false
    },
    range: function(B, _) {
        if (mini.VTypes["float"](B, _) == false) return false;
        if (mini.isNull(B) || B === "") return true;
        B = parseFloat(B);
        if (isNaN(B)) return false;
        var $ = parseFloat(_[0]),
            A = parseFloat(_[1]);
        if (isNaN($) || isNaN(A)) return true;
        if ($ <= B && B <= A) return true;
        return false
    },
    min: function(A, _) {
        if (mini.VTypes["float"](A, _) == false) return false;
        if (mini.isNull(A) || A === "") return true;
        A = parseFloat(A);
        if (isNaN(A)) return false;
        var $ = parseFloat(_[0]);
        if (isNaN($)) return true;
        if ($ <= A) return true;
        return false
    },
    max: function(A, $) {
        if (mini.VTypes["float"](A, $) == false) return false;
        if (mini.isNull(A) || A === "") return true;
        A = parseFloat(A);
        if (isNaN(A)) return false;
        var _ = parseFloat($[0]);
        if (isNaN(_)) return true;
        if (A <= _) return true;
        return false
    }
};
mini.summaryTypes = {
    "count": function($) {
        if (!$) $ = [];
        return $.length
    },
    "max": function(B, C) {
        if (!B) B = [];
        var E = null;
        for (var _ = 0, D = B.length; _ < D; _++) {
            var $ = B[_],
                A = parseFloat(mini._getMap(C, $));
            if (A === null || A === undefined || isNaN(A)) continue;
            if (E == null || E < A) E = A
        }
        return E
    },
    "min": function(C, D) {
        if (!C) C = [];
        var B = null;
        for (var _ = 0, E = C.length; _ < E; _++) {
            var $ = C[_],
                A = parseFloat(mini._getMap(D, $));
            if (A === null || A === undefined || isNaN(A)) continue;
            if (B == null || B > A) B = A
        }
        return B
    },
    "avg": function(C, D) {
        if (!C) C = [];
        if (C.length == 0) return 0;
        var B = 0;
        for (var _ = 0, E = C.length; _ < E; _++) {
            var $ = C[_],
                A = parseFloat(mini._getMap(D, $));
            if (A === null || A === undefined || isNaN(A)) continue;
            B += A
        }
        var F = B / C.length;
        return F
    },
    "sum": function(C, D) {
        if (!C) C = [];
        var B = 0;
        for (var _ = 0, E = C.length; _ < E; _++) {
            var $ = C[_],
                A = parseFloat(mini._getMap(D, $));
            if (A === null || A === undefined || isNaN(A)) continue;
            B += A
        }
        return B
    }
};
mini.formatCurrency = function($, A) {
    if ($ === null || $ === undefined) null == "";
    $ = String($).replace(/\$|\,/g, "");
    if (isNaN($)) $ = "0";
    sign = ($ == ($ = Math.abs($)));
    $ = Math.floor($ * 100 + 0.50000000001);
    cents = $ % 100;
    $ = Math.floor($ / 100).toString();
    if (cents < 10) cents = "0" + cents;
    for (var _ = 0; _ < Math.floor(($.length - (1 + _)) / 3); _++) $ = $.substring(0, $.length - (4 * _ + 3)) + "," + $.substring($.length - (4 * _ + 3));
    A = A || "";
    return A + (((sign) ? "" : "-") + $ + "." + cents)
};
mini.emptyFn = function() {};
mini.Drag = function($) {
    mini.copyTo(this, $)
};
mini.Drag.prototype = {
    onStart: mini.emptyFn,
    onMove: mini.emptyFn,
    onStop: mini.emptyFn,
    capture: false,
    fps: 20,
    event: null,
    delay: 80,
    start: function(_) {
        _.preventDefault();
        if (_) this.event = _;
        this.now = this.init = [this.event.pageX, this.event.pageY];
        var $ = document;
        mini.on($, "mousemove", this.move, this);
        mini.on($, "mouseup", this.stop, this);
        mini.on($, "contextmenu", this.contextmenu, this);
        if (this.context) mini.on(this.context, "contextmenu", this.contextmenu, this);
        this.trigger = _.target;
        mini.selectable(this.trigger, false);
        mini.selectable($.body, false);
        if (this.capture)
            if (isIE) this.trigger.setCapture(true);
            else if (document.captureEvents) document.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP | Event.MOUSEDOWN);
        this.started = false;
        this.startTime = new Date()
    },
    contextmenu: function($) {
        if (this.context) mini.un(this.context, "contextmenu", this.contextmenu, this);
        mini.un(document, "contextmenu", this.contextmenu, this);
        $.preventDefault();
        $.stopPropagation()
    },
    move: function(_) {
        if (this.delay)
            if (new Date() - this.startTime < this.delay) return;
        var $ = this;
        if (!this.timer) this.timer = setTimeout(function() {
            if (!$.started) {
                $.started = true;
                $.onStart($)
            }
            $.now = [_.pageX, _.pageY];
            $.event = _;
            $.onMove($);
            $.timer = null
        }, 5)
    },
    stop: function(B) {
        this.now = [B.pageX, B.pageY];
        this.event = B;
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null
        }
        var A = document;
        mini.selectable(this.trigger, true);
        mini.selectable(A.body, true);
        if (isIE) {
            this.trigger.setCapture(false);
            this.trigger.releaseCapture()
        }
        var _ = mini.MouseButton.Right != B.button;
        if (_ == false) B.preventDefault();
        mini.un(A, "mousemove", this.move, this);
        mini.un(A, "mouseup", this.stop, this);
        var $ = this;
        setTimeout(function() {
            mini.un(document, "contextmenu", $.contextmenu, $);
            if ($.context) mini.un($.context, "contextmenu", $.contextmenu, $)
        }, 1);
        if (this.started) this.onStop(this, _)
    }
};
mini.JSON = new(function() {
    var sb = [],
        _dateFormat = null,
        useHasOwn = !!{}.hasOwnProperty,
        replaceString = function($, A) {
            var _ = m[A];
            if (_) return _;
            _ = A.charCodeAt();
            return "\\u00" + Math.floor(_ / 16).toString(16) + (_ % 16).toString(16)
        },
        doEncode = function($, B) {
            if ($ === null) {
                sb[sb.length] = "null";
                return
            }
            var A = typeof $;
            if (A == "undefined") {
                sb[sb.length] = "null";
                return
            } else if ($.push) {
                sb[sb.length] = "[";
                var E, _, D = $.length,
                    F;
                for (_ = 0; _ < D; _ += 1) {
                    F = $[_];
                    A = typeof F;
                    if (A == "undefined" || A == "function" || A == "unknown");
                    else {
                        if (E) sb[sb.length] = ",";
                        doEncode(F);
                        E = true
                    }
                }
                sb[sb.length] = "]";
                return
            } else if ($.getFullYear) {
                if (_dateFormat) {
                    sb[sb.length] = "\"";
                    if (typeof _dateFormat == "function") sb[sb.length] = _dateFormat($, B);
                    else sb[sb.length] = mini.formatDate($, _dateFormat);
                    sb[sb.length] = "\""
                } else {
                    var C;
                    sb[sb.length] = "\"";
                    sb[sb.length] = $.getFullYear();
                    sb[sb.length] = "-";
                    C = $.getMonth() + 1;
                    sb[sb.length] = C < 10 ? "0" + C : C;
                    sb[sb.length] = "-";
                    C = $.getDate();
                    sb[sb.length] = C < 10 ? "0" + C : C;
                    sb[sb.length] = "T";
                    C = $.getHours();
                    sb[sb.length] = C < 10 ? "0" + C : C;
                    sb[sb.length] = ":";
                    C = $.getMinutes();
                    sb[sb.length] = C < 10 ? "0" + C : C;
                    sb[sb.length] = ":";
                    C = $.getSeconds();
                    sb[sb.length] = C < 10 ? "0" + C : C;
                    sb[sb.length] = "\""
                }
                return
            } else if (A == "string") {
                if (strReg1.test($)) {
                    sb[sb.length] = "\"";
                    sb[sb.length] = $.replace(strReg2, replaceString);
                    sb[sb.length] = "\"";
                    return
                }
                sb[sb.length] = "\"" + $ + "\"";
                return
            } else if (A == "number") {
                sb[sb.length] = $;
                return
            } else if (A == "boolean") {
                sb[sb.length] = String($);
                return
            } else {
                sb[sb.length] = "{";
                E, _, F;
                for (_ in $)
                    if (!useHasOwn || Object.prototype.hasOwnProperty.call($, _)) {
                        F = $[_];
                        A = typeof F;
                        if (A == "undefined" || A == "function" || A == "unknown");
                        else {
                            if (E) sb[sb.length] = ",";
                            doEncode(_);
                            sb[sb.length] = ":";
                            doEncode(F, _);
                            E = true
                        }
                    }
                sb[sb.length] = "}";
                return
            }
        },
        m = {
            "\b": "\\b",
            "\t": "\\t",
            "\n": "\\n",
            "\f": "\\f",
            "\r": "\\r",
            "\"": "\\\"",
            "\\": "\\\\"
        },
        strReg1 = /["\\\x00-\x1f]/,
        strReg2 = /([\x00-\x1f\\"])/g;
    this.encode = function() {
        var $;
        return function($, _) {
            sb = [];
            _dateFormat = _;
            doEncode($);
            _dateFormat = null;
            return sb.join("")
        }
    }();
    this.decode = function() {
        var dateRe1 = /^(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2}(?:\.*\d*)?)Z*$/,
            dateRe2 = new RegExp("^/+Date\\((-?[0-9]+).*\\)/+$", "g"),
            re = /[\"\'](\d{4})-(\d{1,2})-(\d{1,2})[T ](\d{1,2}):(\d{1,2}):(\d{1,2})(\.*\d*)[\"\']/g;
        return function(json, parseDate) {
            if (json === "" || json === null || json === undefined) return json;
            if (typeof json == "object") json = this.encode(json);

            function evalParse(json) {
                if (parseDate !== false) {
                    json = json.replace(__js_dateRegEx, "$1new Date($2)");
                    json = json.replace(re, "new Date($1,$2-1,$3,$4,$5,$6)");
                    json = json.replace(__js_dateRegEx2, "new Date($1)")
                }
                return eval("(" + json + ")")
            }
            var data = null;
            if (window.JSON && window.JSON.parse) {
                var dateReviver = function($, _) {
                    if (typeof _ === "string" && parseDate !== false) {
                        dateRe1.lastIndex = 0;
                        var A = dateRe1.exec(_);
                        if (A) {
                            _ = new Date(A[1], A[2] - 1, A[3], A[4], A[5], A[6]);
                            return _
                        }
                        dateRe2.lastIndex = 0;
                        A = dateRe2.exec(_);
                        if (A) {
                            _ = new Date(parseInt(A[1]));
                            return _
                        }
                    }
                    return _
                };
                try {
                    var json2 = json.replace(__js_dateRegEx, "$1\"/Date($2)/\"");
                    data = window.JSON.parse(json2, dateReviver)
                } catch (ex) {
                    data = evalParse(json)
                }
            } else data = evalParse(json);
            return data
        }
    }()
})();
__js_dateRegEx = new RegExp("(^|[^\\\\])\\\"\\\\/Date\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\+|-)[0-9]{4})?\\)\\\\/\\\"", "g");
__js_dateRegEx2 = new RegExp("[\"']/Date\\(([0-9]+)\\)/[\"']", "g");
mini.encode = mini.JSON.encode;
mini.decode = mini.JSON.decode;
mini.clone = function($, A) {
    if ($ === null || $ === undefined) return $;
    var B = mini.encode($),
        _ = mini.decode(B);

    function C(A) {
        for (var _ = 0, D = A.length; _ < D; _++) {
            var $ = A[_];
            delete $._state;
            delete $._id;
            delete $._pid;
            delete $._uid;
            for (var B in $) {
                var E = $[B];
                if (E instanceof Array) C(E)
            }
        }
    }
    if (A !== false) C(_ instanceof Array ? _ : [_]);
    return _
};
var DAY_MS = 86400000,
    HOUR_MS = 3600000,
    MINUTE_MS = 60000;
mini.copyTo(mini, {
    clearTime: function($) {
        if (!$) return null;
        return new Date($.getFullYear(), $.getMonth(), $.getDate())
    },
    maxTime: function($) {
        if (!$) return null;
        return new Date($.getFullYear(), $.getMonth(), $.getDate(), 23, 59, 59)
    },
    cloneDate: function($) {
        if (!$) return null;
        return new Date($.getTime())
    },
    addDate: function(A, $, _) {
        if (!_) _ = "D";
        A = new Date(A.getTime());
        switch (_.toUpperCase()) {
            case "Y":
                A.setFullYear(A.getFullYear() + $);
                break;
            case "MO":
                A.setMonth(A.getMonth() + $);
                break;
            case "D":
                A.setDate(A.getDate() + $);
                break;
            case "H":
                A.setHours(A.getHours() + $);
                break;
            case "M":
                A.setMinutes(A.getMinutes() + $);
                break;
            case "S":
                A.setSeconds(A.getSeconds() + $);
                break;
            case "MS":
                A.setMilliseconds(A.getMilliseconds() + $);
                break
        }
        return A
    },
    getWeek: function(D, $, _) {
        var E = Math.floor((14 - ($)) / 12),
            G = D + 4800 - E,
            A = ($) + (12 * E) - 3,
            C = _ + Math.floor(((153 * A) + 2) / 5) + (365 * G) + Math.floor(G / 4) - Math.floor(G / 100) + Math.floor(G / 400) - 32045,
            F = (C + 31741 - (C % 7)) % 146097 % 36524 % 1461,
            H = Math.floor(F / 1460),
            B = ((F - H) % 365) + H;
        NumberOfWeek = Math.floor(B / 7) + 1;
        return NumberOfWeek
    },
    getWeekStartDate: function(C, B) {
        if (!B) B = 0;
        if (B > 6 || B < 0) throw new Error("out of weekday");
        var A = C.getDay(),
            _ = B - A;
        if (A < B) _ -= 7;
        var $ = new Date(C.getFullYear(), C.getMonth(), C.getDate() + _);
        return $
    },
    getShortWeek: function(_) {
        var $ = this.dateInfo.daysShort;
        return $[_]
    },
    getLongWeek: function(_) {
        var $ = this.dateInfo.daysLong;
        return $[_]
    },
    getShortMonth: function($) {
        var _ = this.dateInfo.monthsShort;
        return _[$]
    },
    getLongMonth: function($) {
        var _ = this.dateInfo.monthsLong;
        return _[$]
    },
    dateInfo: {
        monthsLong: ["January", "Febraury", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        daysLong: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        daysShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
        quarterLong: ["Q1", "Q2", "Q3", "Q4"],
        quarterShort: ["Q1", "Q2", "Q3", "Q4"],
        halfYearLong: ["first half", "second half"],
        patterns: {
            "d": "M/d/yyyy",
            "D": "dddd,MMMM dd,yyyy",
            "f": "dddd,MMMM dd,yyyy H:mm tt",
            "F": "dddd,MMMM dd,yyyy H:mm:ss tt",
            "g": "M/d/yyyy H:mm tt",
            "G": "M/d/yyyy H:mm:ss tt",
            "m": "MMMM dd",
            "o": "yyyy-MM-ddTHH:mm:ss.fff",
            "s": "yyyy-MM-ddTHH:mm:ss",
            "t": "H:mm tt",
            "T": "H:mm:ss tt",
            "U": "dddd,MMMM dd,yyyy HH:mm:ss tt",
            "y": "MMM,yyyy"
        },
        tt: {
            "AM": "AM",
            "PM": "PM"
        },
        ten: {
            "Early": "Early",
            "Mid": "Mid",
            "Late": "Late"
        },
        today: "Today",
        clockType: 24
    }
});
Date.prototype.getHalfYear = function() {
    if (!this.getMonth) return null;
    var $ = this.getMonth();
    if ($ < 6) return 0;
    return 1
};
Date.prototype.getQuarter = function() {
    if (!this.getMonth) return null;
    var $ = this.getMonth();
    if ($ < 3) return 0;
    if ($ < 6) return 1;
    if ($ < 9) return 2;
    return 3
};
mini.formatDate = function(C, O, F) {
    if (!C || !C.getFullYear || isNaN(C)) return "";
    var G = C.toString(),
        B = mini.dateInfo;
    if (!B) B = mini.dateInfo;
    if (typeof(B) !== "undefined") {
        var M = typeof(B.patterns[O]) !== "undefined" ? B.patterns[O] : O,
            J = C.getFullYear(),
            $ = C.getMonth(),
            _ = C.getDate();
        if (O == "yyyy-MM-dd") {
            $ = $ + 1 < 10 ? "0" + ($ + 1) : $ + 1;
            _ = _ < 10 ? "0" + _ : _;
            return J + "-" + $ + "-" + _
        }
        if (O == "MM/dd/yyyy") {
            $ = $ + 1 < 10 ? "0" + ($ + 1) : $ + 1;
            _ = _ < 10 ? "0" + _ : _;
            return $ + "/" + _ + "/" + J
        }
        G = M.replace(/yyyy/g, J);
        G = G.replace(/yy/g, (J + "").substring(2));
        var L = C.getHalfYear();
        G = G.replace(/hy/g, B.halfYearLong[L]);
        var I = C.getQuarter();
        G = G.replace(/Q/g, B.quarterLong[I]);
        G = G.replace(/q/g, B.quarterShort[I]);
        G = G.replace(/MMMM/g, B.monthsLong[$].escapeDateTimeTokens());
        G = G.replace(/MMM/g, B.monthsShort[$].escapeDateTimeTokens());
        G = G.replace(/MM/g, $ + 1 < 10 ? "0" + ($ + 1) : $ + 1);
        G = G.replace(/(\\)?M/g, function(A, _) {
            return _ ? A : $ + 1
        });
        var N = C.getDay();
        G = G.replace(/dddd/g, B.daysLong[N].escapeDateTimeTokens());
        G = G.replace(/ddd/g, B.daysShort[N].escapeDateTimeTokens());
        G = G.replace(/dd/g, _ < 10 ? "0" + _ : _);
        G = G.replace(/(\\)?d/g, function(A, $) {
            return $ ? A : _
        });
        var H = C.getHours(),
            A = H > 12 ? H - 12 : H;
        if (B.clockType == 12)
            if (H > 12) H -= 12;
        G = G.replace(/HH/g, H < 10 ? "0" + H : H);
        G = G.replace(/(\\)?H/g, function(_, $) {
            return $ ? _ : H
        });
        G = G.replace(/hh/g, A < 10 ? "0" + A : A);
        G = G.replace(/(\\)?h/g, function(_, $) {
            return $ ? _ : A
        });
        var D = C.getMinutes();
        G = G.replace(/mm/g, D < 10 ? "0" + D : D);
        G = G.replace(/(\\)?m/g, function(_, $) {
            return $ ? _ : D
        });
        var K = C.getSeconds();
        G = G.replace(/ss/g, K < 10 ? "0" + K : K);
        G = G.replace(/(\\)?s/g, function(_, $) {
            return $ ? _ : K
        });
        G = G.replace(/fff/g, C.getMilliseconds());
        G = G.replace(/tt/g, C.getHours() > 12 || C.getHours() == 0 ? B.tt["PM"] : B.tt["AM"]);
        var C = C.getDate(),
            E = "";
        if (C <= 10) E = B.ten["Early"];
        else if (C <= 20) E = B.ten["Mid"];
        else E = B.ten["Late"];
        G = G.replace(/ten/g, E)
    }
    return G.replace(/\\/g, "")
};
String.prototype.escapeDateTimeTokens = function() {
    return this.replace(/([dMyHmsft])/g, "\\$1")
};
mini.fixDate = function($, _) {
    if (+$)
        while ($.getDate() != _.getDate()) $.setTime(+$ + ($ < _ ? 1 : -1) * HOUR_MS)
};
mini.parseDate = function(s, ignoreTimezone) {
    try {
        var d = eval(s);
        if (d && d.getFullYear) return d
    } catch (ex) {}
    if (typeof s == "object") return isNaN(s) ? null : s;
    if (typeof s == "number") {
        d = new Date(s * 1000);
        if (d.getTime() != s) return null;
        return isNaN(d) ? null : d
    }
    if (typeof s == "string") {
        m = s.match(/^([0-9]{4})([0-9]{2})([0-9]{0,2})$/);
        if (m) {
            var date = new Date(parseInt(m[1], 10), parseInt(m[2], 10) - 1);
            if (m[3]) date.setDate(m[3]);
            return date
        }
        m = s.match(/^([0-9]{4}).([0-9]*)$/);
        if (m) {
            date = new Date(m[1], m[2] - 1);
            return date
        }
        if (s.match(/^\d+(\.\d+)?$/)) {
            d = new Date(parseFloat(s) * 1000);
            if (d.getTime() != s) return null;
            else return d
        }
        if (ignoreTimezone === undefined) ignoreTimezone = true;
        d = mini.parseISO8601(s, ignoreTimezone) || (s ? new Date(s) : null);
        return isNaN(d) ? null : d
    }
    return null
};
mini.parseISO8601 = function(D, $) {
    var _ = D.match(/^([0-9]{4})([-\/]([0-9]{1,2})([-\/]([0-9]{1,2})([T ]([0-9]{1,2}):([0-9]{1,2})(:([0-9]{1,2})(\.([0-9]+))?)?(Z|(([-+])([0-9]{2})(:?([0-9]{2}))?))?)?)?)?$/);
    if (!_) {
        _ = D.match(/^([0-9]{4})[-\/]([0-9]{2})[-\/]([0-9]{2})[T ]([0-9]{1,2})/);
        if (_) {
            var A = new Date(_[1], _[2] - 1, _[3], _[4]);
            return A
        }
        _ = D.match(/^([0-9]{4}).([0-9]*)$/);
        if (_) {
            A = new Date(_[1], _[2] - 1);
            return A
        }
        _ = D.match(/^([0-9]{4}).([0-9]*).([0-9]*)/);
        if (_) {
            A = new Date(_[1], _[2] - 1, _[3]);
            return A
        }
        _ = D.match(/^([0-9]{2})-([0-9]{2})-([0-9]{4})$/);
        if (!_) return null;
        else {
            A = new Date(_[3], _[1] - 1, _[2]);
            return A
        }
    }
    A = new Date(_[1], 0, 1);
    if ($ || !_[14]) {
        var C = new Date(_[1], 0, 1, 9, 0);
        if (_[3]) {
            A.setMonth(_[3] - 1);
            C.setMonth(_[3] - 1)
        }
        if (_[5]) {
            A.setDate(_[5]);
            C.setDate(_[5])
        }
        mini.fixDate(A, C);
        if (_[7]) A.setHours(_[7]);
        if (_[8]) A.setMinutes(_[8]);
        if (_[10]) A.setSeconds(_[10]);
        if (_[12]) A.setMilliseconds(Number("0." + _[12]) * 1000);
        mini.fixDate(A, C)
    } else {
        A.setUTCFullYear(_[1], _[3] ? _[3] - 1 : 0, _[5] || 1);
        A.setUTCHours(_[7] || 0, _[8] || 0, _[10] || 0, _[12] ? Number("0." + _[12]) * 1000 : 0);
        var B = Number(_[16]) * 60 + (_[18] ? Number(_[18]) : 0);
        B *= _[15] == "-" ? 1 : -1;
        A = new Date(+A + (B * 60 * 1000))
    }
    return A
};
mini.parseTime = function(F, G) {
    if (!F) return null;
    var C = parseInt(F);
    if (C == F && G) {
        $ = new Date(0);
        var _ = G.charAt(0);
        if (_ == "H") $.setHours(C);
        else if (_ == "m") $.setMinutes(C);
        else if (_ == "s") $.setSeconds(C);
        if (isNaN($)) $ = null;
        return $
    }
    var $ = mini.parseDate(F);
    if (!$) {
        var E = F.split(":"),
            A = parseInt(parseFloat(E[0])),
            D = parseInt(parseFloat(E[1])),
            B = parseInt(parseFloat(E[2]));
        if (!isNaN(A) && !isNaN(D) && !isNaN(B)) {
            $ = new Date(0);
            $.setHours(A);
            $.setMinutes(D);
            $.setSeconds(B)
        }
        if (!isNaN(A) && (G == "H" || G == "HH")) {
            $ = new Date(0);
            $.setHours(A)
        } else if (!isNaN(A) && !isNaN(D) && (G == "H:mm" || G == "HH:mm")) {
            $ = new Date(0);
            $.setHours(A);
            $.setMinutes(D)
        } else if (!isNaN(A) && !isNaN(D) && G == "mm:ss") {
            $ = new Date(0);
            $.setMinutes(A);
            $.setSeconds(D)
        }
    }
    return $
};
mini.dateInfo = {
    monthsLong: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
    monthsShort: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
    daysLong: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
    daysShort: ["日", "一", "二", "三", "四", "五", "六"],
    quarterLong: ['一季度', '二季度', '三季度', '四季度'],
    quarterShort: ['Q1', 'Q2', 'Q2', 'Q4'],
    halfYearLong: ['上半年', '下半年'],
    patterns: {
        "d": "yyyy-M-d",
        "D": "yyyy年M月d日",
        "f": "yyyy年M月d日 H:mm",
        "F": "yyyy年M月d日 H:mm:ss",
        "g": "yyyy-M-d H:mm",
        "G": "yyyy-M-d H:mm:ss",
        "m": "MMMd日",
        "o": "yyyy-MM-ddTHH:mm:ss.fff",
        "s": "yyyy-MM-ddTHH:mm:ss",
        "t": "H:mm",
        "T": "H:mm:ss",
        "U": "yyyy年M月d日 HH:mm:ss",
        "y": "yyyy年MM月"
    },
    tt: {
        "AM": "上午",
        "PM": "下午"
    },
    ten: {
        "Early": "上旬",
        "Mid": "中旬",
        "Late": "下旬"
    },
    today: '今天',
    clockType: 24
};
(function(Q) {
    var P = Q.mini;
    if (!P) P = Q.mini = {};
    var R = P.cultures = {},
        $ = "en";
    P.cultures[$] = {
        name: $,
        numberFormat: {
            number: {
                pattern: ["n", "-n"],
                decimals: 2,
                decimalsSeparator: ".",
                groupSeparator: ",",
                groupSize: [3]
            },
            percent: {
                pattern: ["n %", "-n %"],
                decimals: 2,
                decimalsSeparator: ".",
                groupSeparator: ",",
                groupSize: [3],
                symbol: "%"
            },
            currency: {
                pattern: ["$n", "($n)"],
                decimals: 2,
                decimalsSeparator: ".",
                groupSeparator: ",",
                groupSize: [3],
                symbol: "$"
            }
        }
    };

    function M($) {
        return P.cultures[$]
    }

    function C($) {
        if ($ && $.name) return $;
        return M($) || P.cultures.current
    }
    P.getCulture = C;
    P.culture = function($) {
        if ($ !== undefined) P.cultures.current = M($);
        else return R.current
    };
    P.culture($);
    var H = "string",
        E = "number",
        S = function($) {
            return $ && !!$.unshift
        },
        F = {
            2: /^\d{1,2}/,
            4: /^\d{4}/
        };

    function K(D, $, _) {
        D = D + "";
        $ = typeof $ == E ? $ : 2;
        var C = $ - D.length;
        if (C > 0) {
            var B = A(C, "0");
            return _ ? D + B : B + D
        }
        return D
    }

    function A(_, $) {
        var A = "";
        while (_) {
            _ -= 1;
            A += $
        }
        return A
    }
    var O = /^(n|c|p)(\d*)$/i,
        G = /^(e)(\d*)$/i,
        B = /[^0#]/g,
        I = /[eE][\-+]?[0-9]+/;

    function N(P, Q, J) {
        P = Math.abs(P);
        var C = Q.indexOf(",") != -1,
            G = Q.split("."),
            H = (G[0] || "").replace(B, ""),
            F = (G[1] || "").replace(B, ""),
            _ = "",
            N = J.groupSize[0],
            D = J.decimalsSeparator,
            I = J.groupSeparator,
            $ = H.indexOf("0");
        H = $ == -1 ? "0" : (H.substr($) || "0");
        var A = F.length,
            M = F.substr(0, F.lastIndexOf("0") + 1).length;

        function O(number, fractionDigits) {
            with(Math) {
                return round(number * pow(10, fractionDigits)) / pow(10, fractionDigits)
            }
        }
        P = O(P, A);
        var E = String(P).split(".");
        value0 = E[0];
        value1 = E[1] || "";
        if (value0) {
            value0 = K(value0, H.length);
            if (C)
                for (var L = 0; L < Math.floor((value0.length - (1 + L)) / 3); L++) value0 = value0.substring(0, value0.length - (4 * L + 3)) + I + value0.substring(value0.length - (4 * L + 3));
            _ += value0
        }
        if (A > 0) {
            _ += D;
            _ += K(value1.substr(0, A), M, true)
        }
        return _
    }

    function _(I, B, _, G) {
        var H = _.numberFormat.number,
            E = O.exec(I);
        if (E != null) {
            var D = E[1],
                $ = E[2];
            if (D == "p") H = _.numberFormat.percent;
            else if (D == "c") H = _.numberFormat.currency;
            var C = $ ? parseInt($) : H.decimals,
                F = H.pattern[B < 0 ? 1 : 0];
            F = F.replace("n", "#,#" + (C > 0 ? "." + A(C, "0") : ""));
            I = I.replace(D + $, F).replace("$", _.numberFormat.currency.symbol).replace("%", _.numberFormat.percent.symbol)
        } else if (L(I))
            if (B < 0 && !G[1]) I = "-" + I;
        return I
    }

    function L($) {
        return $.indexOf("0") != -1 || $.indexOf("#") != -1
    }

    function D(C) {
        if (!C) return null;

        function $(C) {
            var B = C.indexOf("0"),
                A = C.indexOf("#");
            if (B == -1 || (A != -1 && A < B)) B = A;
            var $ = C.lastIndexOf("0"),
                _ = C.lastIndexOf("#");
            if ($ == -1 || (_ != -1 && _ > $)) $ = _;
            return [B, $]
        }
        var _ = $(C),
            B = _[0],
            A = _[1];
        return B > -1 ? {
            begin: B,
            end: A,
            format: C.substring(B, A + 1)
        } : null
    }

    function J(T, U, O) {
        if (typeof T != E) return "";
        if (!U) return String(T);
        var J = U.split(";");
        U = J[0];
        if (T < 0 && J.length >= 2) U = J[1];
        if (T == 0 && J.length >= 3) U = J[2];
        var O = C(O),
            B = O.numberFormat.number,
            P = O.numberFormat.percent,
            R = O.numberFormat.currency,
            U = _(U, T, O, J),
            K = U.indexOf(R.symbol) != -1,
            Q = U.indexOf(P.symbol) != -1,
            S = U.indexOf(".") != -1,
            H = L(U),
            M = K ? R : (Q ? R : B),
            T = Q ? T * 100 : T,
            $ = G.exec(U);
        if ($) {
            var F = parseInt($[2]);
            return isNaN(F) ? T.toExponential() : T.toExponential(F)
        }
        if (!H) return U;
        var A = "",
            I = D(U);
        if (I != null) {
            A = N(T, I.format, M);
            A = U.substr(0, I.begin) + A + U.substr(I.end + 1)
        } else A = U;
        return A
    }
    P.parseInt = function(_, $, B) {
        var A = P.parseFloat(_, $, B);
        if (A) A = A | 0;
        return A
    };
    P.parseFloat = function(_, O, T) {
        if (!_ && _ !== 0) return null;
        if (typeof _ === E) return _;
        if (T && T.split(";")[2] == _) return 0;
        if (I.test(_)) {
            _ = parseFloat(_);
            if (isNaN(_)) _ = null;
            return _
        }
        _ = _.toString();
        O = P.getCulture(O);
        var B = O.numberFormat,
            U = B.number,
            H = B.percent,
            J = B.currency,
            Q = _.indexOf(H.symbol) != -1,
            M = _.indexOf(J.symbol) != -1,
            U = M ? J : (Q ? H : U),
            S = U.pattern[1],
            C = U.decimals,
            G = U.decimalsSeparator,
            N = U.groupSeparator,
            R = _.indexOf("-") > -1;

        function F(_, E, B) {
            var C = D(E);
            if (C) {
                var A = E.substr(0, C.begin),
                    $ = E.substr(C.end + 1);
                if (_.indexOf(A) == 0 && _.indexOf($) > -1) {
                    _ = _.replace(A, "").replace($, "");
                    R = B
                }
            }
            return _
        }
        if (!T) {
            if (R == false) {
                T = S.replace("n", "#,#" + (C > 0 ? "." + A(C, "0") : "")).replace("$", J.symbol).replace("%", H.symbol);
                _ = F(_, T, true)
            }
        } else {
            var K = T.split(";");
            if (K[1]) {
                T = K[1];
                _ = F(_, T, true)
            } else {
                T = K[0];
                var L = _;
                _ = F(L, T, false);
                if (L == _) _ = F(L, "-" + T, true)
            }
        }
        _ = _.split(N).join("").replace(G, ".");
        var $ = _.match(/([0-9,.]+)/g);
        if ($ == null) return null;
        _ = $[0];
        _ = parseFloat(_);
        if (isNaN(_)) _ = null;
        else if (R) _ *= -1;
        if (_ && Q) _ /= 100;
        return _
    };
    P.formatNumber = J
})(this);
mini.Keyboard = {
    Left: 37,
    Top: 38,
    Right: 39,
    Bottom: 40,
    PageUp: 33,
    PageDown: 34,
    End: 35,
    Home: 36,
    Enter: 13,
    ESC: 27,
    Space: 32,
    Tab: 9,
    Del: 46,
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123
};
var ua = navigator.userAgent.toLowerCase(),
    check = function($) {
        return $.test(ua)
    },
    DOC = document,
    isStrict = document.compatMode == "CSS1Compat",
    version = function(_, A) {
        var $;
        return (_ && ($ = A.exec(ua))) ? parseFloat($[1]) : 0
    },
    docMode = document.documentMode,
    isOpera = check(/opera/),
    isOpera10_5 = isOpera && check(/version\/10\.5/),
    isChrome = check(/\bchrome\b/),
    isWebKit = check(/webkit/),
    isSafari = !isChrome && check(/safari/),
    isSafari2 = isSafari && check(/applewebkit\/4/),
    isSafari3 = isSafari && check(/version\/3/),
    isSafari4 = isSafari && check(/version\/4/),
    isSafari5_0 = isSafari && check(/version\/5\.0/),
    isSafari5 = isSafari && check(/version\/5/),
    isIE = !isOpera && check(/msie/),
    isIE7 = isIE && ((check(/msie 7/) && docMode != 8 && docMode != 9 && docMode != 10) || docMode == 7),
    isIE8 = isIE && ((check(/msie 8/) && docMode != 7 && docMode != 9 && docMode != 10) || docMode == 8),
    isIE9 = isIE && ((check(/msie 9/) && docMode != 7 && docMode != 8 && docMode != 10) || docMode == 9),
    isIE10 = isIE && ((check(/msie 10/) && docMode != 7 && docMode != 8 && docMode != 9) || docMode == 10),
    isIE6 = isIE && !isIE7 && !isIE8 && !isIE9 && !isIE10,
    isIE11 = (ua.indexOf("trident") > -1 && ua.indexOf("rv") > -1),
    isIE = isIE || isIE11,
    isFirefox = navigator.userAgent.indexOf("Firefox") > 0,
    isGecko = !isWebKit && check(/gecko/),
    isGecko3 = isGecko && check(/rv:1\.9/),
    isGecko4 = isGecko && check(/rv:2\.0/),
    isGecko5 = isGecko && check(/rv:5\./),
    isGecko10 = isGecko && check(/rv:10\./),
    isFF3_0 = isGecko3 && check(/rv:1\.9\.0/),
    isFF3_5 = isGecko3 && check(/rv:1\.9\.1/),
    isFF3_6 = isGecko3 && check(/rv:1\.9\.2/),
    isWindows = check(/windows|win32/),
    isMac = check(/macintosh|mac os x/),
    isAir = check(/adobeair/),
    isLinux = check(/linux/),
    scrollbarSize = null,
    chromeVersion = version(true, /\bchrome\/(\d+\.\d+)/),
    firefoxVersion = version(true, /\bfirefox\/(\d+\.\d+)/),
    ieVersion = version(isIE, /msie (\d+\.\d+)/),
    IE_V = isIE ? parseInt(ieVersion) : -1,
    operaVersion = version(isOpera, /version\/(\d+\.\d+)/),
    safariVersion = version(isSafari, /version\/(\d+\.\d+)/),
    webKitVersion = version(isWebKit, /webkit\/(\d+\.\d+)/),
    isSecure = /^https/i.test(window.location.protocol),
    isBorderBox = isIE && !isStrict;
if (isIE6) {
    try {
        DOC.execCommand("BackgroundImageCache", false, true)
    } catch (e) {}
}
mini.boxModel = !isBorderBox;
mini.isIE = isIE;
mini.isIE6 = isIE6;
mini.isIE7 = isIE7;
mini.isIE8 = isIE8;
mini.isIE9 = isIE9;
mini.isIE10 = isIE10;
mini.isIE11 = isIE11;
mini.IE_V = IE_V;
mini.isFirefox = isFirefox;
mini.isOpera = isOpera;
mini.isSafari = isSafari;
mini.isChrome = isChrome;
if (jQuery) jQuery.boxModel = mini.boxModel;
mini.noBorderBox = false;
if (jQuery.boxModel == false && isIE && isIE9 == false) mini.noBorderBox = true;
mini.MouseButton = {
    Left: 0,
    Middle: 1,
    Right: 2
};
if (isIE && !isIE9 && !isIE10) mini.MouseButton = {
    Left: 1,
    Middle: 4,
    Right: 2
};
mini.append = function(_, A) {
    _ = mini.byId(_);
    if (!A || !_) return;
    if (typeof A == "string") {
        if (A.charAt(0) == "#") {
            A = mini.byId(A);
            if (!A) return;
            _.appendChild(A);
            return A
        } else {
            if (A.indexOf("<tr") == 0) {
                return jQuery(_).append(A)[0].lastChild;
                return
            }
            var $ = document.createElement("div");
            $.innerHTML = A;
            A = $.firstChild;
            while ($.firstChild) _.appendChild($.firstChild);
            return A
        }
    } else {
        _.appendChild(A);
        return A
    }
};
mini.prepend = function(_, A) {
    if (typeof A == "string")
        if (A.charAt(0) == "#") A = mini.byId(A);
        else {
            var $ = document.createElement("div");
            $.innerHTML = A;
            A = $.firstChild
        }
    return jQuery(_).prepend(A)[0].firstChild
};
mini.after = function(_, A) {
    if (typeof A == "string")
        if (A.charAt(0) == "#") A = mini.byId(A);
        else {
            var $ = document.createElement("div");
            $.innerHTML = A;
            A = $.firstChild
        }
    if (!A || !_) return;
    _.nextSibling ? _.parentNode.insertBefore(A, _.nextSibling) : _.parentNode.appendChild(A);
    return A
};
mini.before = function(_, A) {
    if (typeof A == "string")
        if (A.charAt(0) == "#") A = mini.byId(A);
        else {
            var $ = document.createElement("div");
            $.innerHTML = A;
            A = $.firstChild
        }
    if (!A || !_) return;
    _.parentNode.insertBefore(A, _);
    return A
};
mini.__wrap = document.createElement("div");
mini.createElements = function($) {
    mini.removeChilds(mini.__wrap);
    var _ = $.indexOf("<tr") == 0;
    if (_) $ = "<table>" + $ + "</table>";
    mini.__wrap.innerHTML = $;
    return _ ? mini.__wrap.firstChild.rows : mini.__wrap.childNodes
};
mini_byId = function(D, A) {
    if (typeof D == "string") {
        if (D.charAt(0) == "#") D = D.substr(1);
        var _ = document.getElementById(D);
        if (_) return _;
        if (A && !Oolo(document.body, A)) {
            var B = A.getElementsByTagName("*");
            for (var $ = 0, C = B.length; $ < C; $++) {
                _ = B[$];
                if (_.id == D) return _
            }
            _ = null
        }
        return _
    } else return D
};
mini_hasClass = function($, _) {
    $ = mini.byId($);
    if (!$) return;
    if (!$.className) return false;
    var A = String($.className).split(" ");
    return A.indexOf(_) != -1
};
mini_addClass = function($, _) {
    if (!_) return;
    if (mini.hasClass($, _) == false) jQuery($).addClass(_)
};
mini_removeClass = function($, _) {
    if (!_) return;
    jQuery($).removeClass(_)
};
mini_getMargins = function($) {
    $ = mini.byId($);
    var _ = jQuery($);
    return {
        top: parseInt(_.css("margin-top"), 10) || 0,
        left: parseInt(_.css("margin-left"), 10) || 0,
        bottom: parseInt(_.css("margin-bottom"), 10) || 0,
        right: parseInt(_.css("margin-right"), 10) || 0
    }
};
mini_getBorders = function($) {
    $ = mini.byId($);
    var _ = jQuery($);
    return {
        top: parseInt(_.css("border-top-width"), 10) || 0,
        left: parseInt(_.css("border-left-width"), 10) || 0,
        bottom: parseInt(_.css("border-bottom-width"), 10) || 0,
        right: parseInt(_.css("border-right-width"), 10) || 0
    }
};
mini_getPaddings = function($) {
    $ = mini.byId($);
    var _ = jQuery($);
    return {
        top: parseInt(_.css("padding-top"), 10) || 0,
        left: parseInt(_.css("padding-left"), 10) || 0,
        bottom: parseInt(_.css("padding-bottom"), 10) || 0,
        right: parseInt(_.css("padding-right"), 10) || 0
    }
};
mini_setWidth = function(_, $) {
    _ = mini.byId(_);
    $ = parseInt($);
    if (isNaN($) || !_) return;
    if (jQuery.boxModel) {
        var A = mini.getPaddings(_),
            B = mini.getBorders(_);
        $ = $ - A.left - A.right - B.left - B.right
    }
    if ($ < 0) $ = 0;
    _.style.width = $ + "px"
};
mini_setHeight = function(_, $) {
    _ = mini.byId(_);
    $ = parseInt($);
    if (isNaN($) || !_) return;
    if (jQuery.boxModel) {
        var A = mini.getPaddings(_),
            B = mini.getBorders(_);
        $ = $ - A.top - A.bottom - B.top - B.bottom
    }
    if ($ < 0) $ = 0;
    _.style.height = $ + "px"
};
mini_getWidth = function($, _) {
    $ = mini.byId($);
    if ($.style.display == "none" || $.type == "text/javascript") return 0;
    return _ ? jQuery($).width() : jQuery($).outerWidth()
};
mini_getHeight = function($, _) {
    $ = mini.byId($);
    if ($.style.display == "none" || $.type == "text/javascript") return 0;
    return _ ? jQuery($).height() : jQuery($).outerHeight()
};
mini_setBox = function(A, C, B, $, _) {
    if (B === undefined) {
        B = C.y;
        $ = C.width;
        _ = C.height;
        C = C.x
    }
    mini.setXY(A, C, B);
    mini.setWidth(A, $);
    mini.setHeight(A, _)
};
mini_getBox = function(A) {
    var $ = mini.getXY(A),
        _ = {
            x: $[0],
            y: $[1],
            width: mini.getWidth(A),
            height: mini.getHeight(A)
        };
    _.left = _.x;
    _.top = _.y;
    _.right = _.x + _.width;
    _.bottom = _.y + _.height;
    return _
};
mini_setStyle = function(B, C) {
    B = mini.byId(B);
    if (!B || typeof C != "string") return;
    var H = jQuery(B),
        _ = C.toLowerCase().split(";");
    for (var $ = 0, E = _.length; $ < E; $++) {
        var G = _[$],
            F = G.split(":");
        if (F.length > 1)
            if (F.length > 2) {
                var D = F[0].trim();
                F.removeAt(0);
                var A = F.join(":").trim();
                H.css(D, A)
            } else H.css(F[0].trim(), F[1].trim())
    }
};
mini_getStyle = function() {
    var $ = document.defaultView;
    return new Function("el", "style", ["style.indexOf('-')>-1 && (style=style.replace(/-(\\w)/g,function(m,a){return a.toUpperCase()}));", "style=='float' && (style='", $ ? "cssFloat" : "styleFloat", "');return el.style[style] || ", $ ? "window.getComputedStyle(el,null)[style]" : "el.currentStyle[style]", " || null;"].join(""))
}();
Oolo = function(A, $) {
    var _ = false;
    A = mini.byId(A);
    $ = mini.byId($);
    if (A === $) return true;
    if (A && $)
        if (A.contains) {
            try {
                return A.contains($)
            } catch (B) {
                return false
            }
        } else if (A.compareDocumentPosition) return !!(A.compareDocumentPosition($) & 16);
    else
        while ($ = $.parentNode) _ = $ == A || _;
    return _
};
oOlO = function(B, A, $) {
    B = mini.byId(B);
    var C = document.body,
        _ = 0,
        D;
    $ = $ || 50;
    if (typeof $ != "number") {
        D = mini.byId($);
        $ = 10
    }
    while (B && B.nodeType == 1 && _ < $ && B != C && B != D) {
        if (mini.hasClass(B, A)) return B;
        _++;
        B = B.parentNode
    }
    return null
};
mini.copyTo(mini, {
    byId: mini_byId,
    hasClass: mini_hasClass,
    addClass: mini_addClass,
    removeClass: mini_removeClass,
    getMargins: mini_getMargins,
    getBorders: mini_getBorders,
    getPaddings: mini_getPaddings,
    setWidth: mini_setWidth,
    setHeight: mini_setHeight,
    getWidth: mini_getWidth,
    getHeight: mini_getHeight,
    setBox: mini_setBox,
    getBox: mini_getBox,
    setStyle: mini_setStyle,
    getStyle: mini_getStyle,
    repaint: function($) {
        if (!$) $ = document.body;
        mini.addClass($, "mini-repaint");
        setTimeout(function() {
            mini.removeClass($, "mini-repaint")
        }, 1)
    },
    getSize: function($, _) {
        return {
            width: mini.getWidth($, _),
            height: mini.getHeight($, _)
        }
    },
    setSize: function(A, $, _) {
        mini.setWidth(A, $);
        mini.setHeight(A, _)
    },
    setX: function(_, B) {
        B = parseInt(B);
        var $ = jQuery(_).offset(),
            A = parseInt($.top);
        if (A === undefined) A = $[1];
        mini.setXY(_, B, A)
    },
    setY: function(_, A) {
        A = parseInt(A);
        var $ = jQuery(_).offset(),
            B = parseInt($.left);
        if (B === undefined) B = $[0];
        mini.setXY(_, B, A)
    },
    setXY: function(_, B, A) {
        var $ = {
            left: parseInt(B),
            top: parseInt(A)
        };
        jQuery(_).offset($);
        if (jQuery.fn.jquery && jQuery.fn.jquery.indexOf("1.4") != -1) jQuery(_).offset($)
    },
    getXY: function(_) {
        var $ = jQuery(_).offset();
        return [parseInt($.left), parseInt($.top)]
    },
    getViewportBox: function() {
        var $ = jQuery(window).width(),
            _ = jQuery(window).height(),
            B = jQuery(document).scrollLeft(),
            A = jQuery(document.body).scrollTop();
        if (A == 0 && document.documentElement) A = document.documentElement.scrollTop;
        return {
            x: B,
            y: A,
            top: A,
            left: B,
            width: $,
            height: _,
            right: B + $,
            bottom: A + _
        }
    },
    showAt: function(E) {
        var $ = jQuery;
        E = jQuery.extend({
            el: null,
            x: "center",
            y: "center",
            offset: [0, 0],
            fixed: false,
            zindex: mini.getMaxZIndex(),
            timeout: 0,
            timeoutHandler: null,
            animation: false
        }, E);
        var F = jQuery(E.el)[0],
            I = E.x,
            G = E.y,
            C = E.offset[0],
            _ = E.offset[1],
            B = E.zindex,
            A = E.fixed,
            D = E.animation;
        if (!F) return;
        if (E.timeout) setTimeout(function() {
            if (E.timeoutHandler) E.timeoutHandler()
        }, E.timeout);
        var J = ";position:absolute;display:block;left:auto;top:auto;right:auto;bottom:auto;margin:0;z-index:" + B + ";";
        mini.setStyle(F, J);
        J = "";
        if (E && mini.isNumber(E.x) && mini.isNumber(E.y)) {
            if (E.fixed && !mini.isIE6) J += ";position:fixed;";
            mini.setStyle(F, J);
            mini.setXY(E.el, E.x, E.y);
            return
        }
        if (I == "left") J += "left:" + C + "px;";
        else if (I == "right") J += "right:" + C + "px;";
        else {
            var H = mini.getSize(F);
            J += "left:50%;margin-left:" + (-H.width * 0.5) + "px;"
        }
        if (G == "top") J += "top:" + _ + "px;";
        else if (G == "bottom") J += "bottom:" + _ + "px;";
        else {
            H = mini.getSize(F);
            J += "top:50%;margin-top:" + (-H.height * 0.5) + "px;"
        }
        if (A && !mini.isIE6) J += "position:fixed";
        mini.setStyle(F, J)
    },
    getChildNodes: function(A, C) {
        A = mini.byId(A);
        if (!A) return;
        var E = A.childNodes,
            B = [];
        for (var $ = 0, D = E.length; $ < D; $++) {
            var _ = E[$];
            if (_.nodeType == 1 || C === true) B.push(_)
        }
        return B
    },
    removeNode: isIE ? function() {
        var $;
        return function(_) {
            if (_ && _.tagName != "BODY") {
                $ = $ || document.createElement("div");
                $.appendChild(_);
                $.innerHTML = ""
            }
        }
    }() : function($) {
        if ($ && $.parentNode && $.tagName != "BODY") $.parentNode.removeChild($)
    },
    removeChilds: function(B, _) {
        B = mini.byId(B);
        if (!B) return;
        var C = mini.getChildNodes(B, true);
        for (var $ = 0, D = C.length; $ < D; $++) {
            var A = C[$];
            if (_ && A == _);
            else B.removeChild(C[$])
        }
    },
    isAncestor: Oolo,
    findParent: oOlO,
    findChild: function(_, A) {
        _ = mini.byId(_);
        var B = _.getElementsByTagName("*");
        for (var $ = 0, C = B.length; $ < C; $++) {
            var _ = B[$];
            if (mini.hasClass(_, A)) return _
        }
    },
    isAncestor: function(A, $) {
        var _ = false;
        A = mini.byId(A);
        $ = mini.byId($);
        if (A === $) return true;
        if (A && $)
            if (A.contains) {
                try {
                    return A.contains($)
                } catch (B) {
                    return false
                }
            } else if (A.compareDocumentPosition) return !!(A.compareDocumentPosition($) & 16);
        else
            while ($ = $.parentNode) _ = $ == A || _;
        return _
    },
    getOffsetsTo: function(_, A) {
        var $ = this.getXY(_),
            B = this.getXY(A);
        return [$[0] - B[0], $[1] - B[1]]
    },
    scrollIntoView: function(I, H, F) {
        var B = mini.byId(H) || document.body,
            $ = this.getOffsetsTo(I, B),
            C = $[0] + B.scrollLeft,
            J = $[1] + B.scrollTop,
            D = J + I.offsetHeight,
            A = C + I.offsetWidth,
            G = B.clientHeight,
            K = parseInt(B.scrollTop, 10),
            _ = parseInt(B.scrollLeft, 10),
            L = K + G,
            E = _ + B.clientWidth;
        if (I.offsetHeight > G || J < K) B.scrollTop = J;
        else if (D > L) B.scrollTop = D - G;
        B.scrollTop = B.scrollTop;
        if (F !== false) {
            if (I.offsetWidth > B.clientWidth || C < _) B.scrollLeft = C;
            else if (A > E) B.scrollLeft = A - B.clientWidth;
            B.scrollLeft = B.scrollLeft
        }
        return this
    },
    getScrollOffset: function() {
        if (!mini._scrollOffset) {
            var $ = document.createElement("div");
            $.style.cssText = "width:100px;background:#eee;height:50px;overflow:scroll;padding:1px;position:absolute;left:-1000px;top:0;box-sizing:content-box;-moz-box-sizing:content-box;";
            document.body.appendChild($);
            mini._scrollOffset = $.offsetWidth - $.clientWidth;
            $.parentNode.removeChild($)
        }
        return mini._scrollOffset
    },
    setOpacity: function(_, $) {
        jQuery(_).css({
            "opacity": $
        })
    },
    selectable: function(_, $) {
        _ = mini.byId(_);
        if (!!$) {
            jQuery(_).removeClass("mini-unselectable");
            if (isIE) _.unselectable = "off";
            else {
                _.style.MozUserSelect = "";
                _.style.KhtmlUserSelect = "";
                _.style.UserSelect = ""
            }
        } else {
            jQuery(_).addClass("mini-unselectable");
            if (isIE) _.unselectable = "on";
            else {
                _.style.MozUserSelect = "none";
                _.style.UserSelect = "none";
                _.style.KhtmlUserSelect = "none"
            }
        }
    },
    selectRange: function(B, A, _) {
        if (B.createTextRange) {
            var $ = B.createTextRange();
            $.moveStart("character", A);
            $.moveEnd("character", _ - B.value.length);
            $.select()
        } else if (B.setSelectionRange) B.setSelectionRange(A, _);
        try {
            B.focus()
        } catch (C) {}
    },
    getSelectRange: function(A) {
        A = mini.byId(A);
        if (!A) return;
        try {
            A.focus()
        } catch (C) {}
        var $ = 0,
            B = 0;
        if (A.createTextRange && document.selection) {
            var _ = document.selection.createRange().duplicate();
            _.moveEnd("character", A.value.length);
            if (_.text === "") $ = A.value.length;
            else $ = A.value.lastIndexOf(_.text);
            _ = document.selection.createRange().duplicate();
            _.moveStart("character", -A.value.length);
            B = _.text.length
        } else {
            $ = A.selectionStart;
            B = A.selectionEnd
        }
        return [$, B]
    }
});
(function() {
    var _ = {
            tabindex: "tabIndex",
            readonly: "readOnly",
            "for": "htmlFor",
            "class": "className",
            maxlength: "maxLength",
            cellspacing: "cellSpacing",
            cellpadding: "cellPadding",
            rowspan: "rowSpan",
            colspan: "colSpan",
            usemap: "useMap",
            frameborder: "frameBorder",
            contenteditable: "contentEditable"
        },
        A = document.createElement("div");
    A.setAttribute("class", "t");
    var B = A.className === "t";
    mini.setAttr = function(A, C, $) {
        A.setAttribute(B ? C : (_[C] || C), $)
    };
    mini.getAttr = function(D, F) {
        if (F == "height") return $(D).attr("height");
        if (F == "value" && (isIE6 || isIE7)) {
            var C = D.attributes[F];
            return C ? C.value : null
        }
        var G = D.getAttribute(B ? F : (_[F] || F));
        if (typeof G == "function" || F == "maxLength") {
            var A = D.attributes[F];
            if (A) G = A.value
        }
        if (!G && F == "onload") {
            var E = D.getAttributeNode ? D.getAttributeNode(F) : null;
            if (E) G = E.nodeValue
        }
        return G
    }
})();
mini_preventDefault = function() {
    if (window.event) window.event.returnValue = false
};
mini_stopPropogation = function() {
    if (window.event) window.event.cancelBubble = true
};
OooO = function(_, $, C, A) {
    if (!_) return;
    var B = "on" + $.toLowerCase();
    _[B] = function(_) {
        _ = _ || window.event;
        if (!_.target) _.target = _.srcElement;
        if (!_.preventDefault) _.preventDefault = mini_preventDefault;
        if (!_.stopPropogation) _.stopPropogation = mini_stopPropogation;
        var $ = C.call(A, _);
        if ($ === false) return false
    }
};
mini_on = function(_, $, D, A) {
    _ = mini.byId(_);
    A = A || _;
    if (!_ || !$ || !D || !A) return false;
    var B = mini.findListener(_, $, D, A);
    if (B) return false;
    var C = mini.createDelegate(D, A);
    mini.listeners.push([_, $, D, A, C]);
    if (mini.isFirefox && $ == "mousewheel") $ = "DOMMouseScroll";
    jQuery(_).bind($, C)
};
mini_un = function(_, $, C, A) {
    _ = mini.byId(_);
    A = A || _;
    if (!_ || !$ || !C || !A) return false;
    var B = mini.findListener(_, $, C, A);
    if (!B) return false;
    if (!mini._destroying) mini.listeners.remove(B);
    if (mini.isFirefox && $ == "mousewheel") $ = "DOMMouseScroll";
    jQuery(_).unbind($, B[4])
};
mini.copyTo(mini, {
    listeners: [],
    on: mini_on,
    un: mini_un,
    _getListeners: function() {
        var $ = mini.listeners;
        return $
    },
    findListener: function(A, _, F, B) {
        A = mini.byId(A);
        B = B || A;
        if (!A || !_ || !F || !B) return false;
        var D = mini._getListeners();
        for (var $ = D.length - 1; $ >= 0; $--) {
            var C = D[$];
            try {
                if (C[0] == A && C[1] == _ && C[2] == F && C[3] == B) return C
            } catch (E) {}
        }
    },
    clearEvent: function(A, _) {
        A = mini.byId(A);
        if (!A) return false;
        if (mini._destroying) {
            jQuery(A).unbind();
            return
        }
        var C = mini._getListeners();
        for (var $ = C.length - 1; $ >= 0; $--) {
            var B = C[$];
            if (B[0] == A)
                if (!_ || _ == B[1]) mini.un(A, B[1], B[2], B[3])
        }
        A.onmouseover = A.onmousedown = null
    }
});
mini.__windowResizes = [];
mini.onWindowResize = function(_, $) {
    mini.__windowResizes.push([_, $])
};
mini.on(window, "resize", function(C) {
    var _ = mini.__windowResizes;
    for (var $ = 0, B = _.length; $ < B; $++) {
        var A = _[$];
        A[0].call(A[1], C)
    }
});
mini.htmlEncode = function(_) {
    if (typeof _ !== "string") return _;
    var $ = "";
    if (_.length == 0) return "";
    $ = _;
    $ = $.replace(/&/g, "&amp;");
    $ = $.replace(/</g, "&lt;");
    $ = $.replace(/>/g, "&gt;");
    $ = $.replace(/ /g, "&nbsp;");
    $ = $.replace(/\'/g, "&#39;");
    $ = $.replace(/\"/g, "&quot;");
    return $
};
mini.htmlDecode = function(_) {
    if (typeof _ !== "string") return _;
    var $ = "";
    if (_.length == 0) return "";
    $ = _.replace(/&gt;/g, "&");
    $ = $.replace(/&lt;/g, "<");
    $ = $.replace(/&gt;/g, ">");
    $ = $.replace(/&nbsp;/g, " ");
    $ = $.replace(/&#39;/g, "'");
    $ = $.replace(/&quot;/g, "\"");
    return $
};
mini.copyTo(Array.prototype, {
    add: Array.prototype.enqueue = function($) {
        this[this.length] = $;
        return this
    },
    getRange: function(A, B) {
        var C = [];
        for (var _ = A; _ <= B; _++) {
            var $ = this[_];
            if ($) C[C.length] = $
        }
        return C
    },
    addRange: function(A) {
        for (var $ = 0, _ = A.length; $ < _; $++) this[this.length] = A[$];
        return this
    },
    clear: function() {
        this.length = 0;
        return this
    },
    clone: function() {
        if (this.length === 1) return [this[0]];
        else return Array.apply(null, this)
    },
    contains: function($) {
        return (this.indexOf($) >= 0)
    },
    indexOf: function(_, B) {
        var $ = this.length;
        for (var A = (B < 0) ? Math.max(0, $ + B) : B || 0; A < $; A++)
            if (this[A] === _) return A;
        return -1
    },
    dequeue: function() {
        return this.shift()
    },
    insert: function(_, $) {
        this.splice(_, 0, $);
        return this
    },
    insertRange: function(_, B) {
        for (var A = B.length - 1; A >= 0; A--) {
            var $ = B[A];
            this.splice(_, 0, $)
        }
        return this
    },
    remove: function(_) {
        var $ = this.indexOf(_);
        if ($ >= 0) this.splice($, 1);
        return ($ >= 0)
    },
    removeAt: function($) {
        var _ = this[$];
        this.splice($, 1);
        return _
    },
    removeRange: function(_) {
        _ = _.clone();
        for (var $ = 0, A = _.length; $ < A; $++) this.remove(_[$])
    }
});
mini._MaskID = 1;
mini._MaskObjects = {};
mini.mask = function(C) {
    var _ = mini.byId(C);
    if (mini.isElement(_)) C = {
        el: _
    };
    else if (typeof C == "string") C = {
        html: C
    };
    C = mini.copyTo({
        html: "",
        cls: "",
        style: "",
        backStyle: ""
    }, C);
    C.el = mini.byId(C.el);
    if (!C.el) C.el = document.body;
    _ = C.el;
    mini["unmask"](C.el);
    _._maskid = mini._MaskID++;
    mini._MaskObjects[_._maskid] = C;
    var $ = mini.append(_, "<div class=\"mini-mask\">" + "<div class=\"mini-mask-background\" style=\"" + C.backStyle + "\"></div>" + "<div class=\"mini-mask-msg " + C.cls + "\" style=\"" + C.style + "\">" + C.html + "</div>" + "</div>");
    if (_ == document.body) mini.addClass($, "mini-fixed");
    C.maskEl = $;
    if (!mini.isNull(C.opacity)) mini.setOpacity($.firstChild, C.opacity);

    function A() {
        B.style.display = "block";
        var $ = mini.getSize(B);
        B.style.marginLeft = -$.width / 2 + "px";
        B.style.marginTop = -$.height / 2 + "px";
        B.style.zIndex = mini.getMaxZIndex()
    }
    var B = $.lastChild;
    B.style.display = "none";
    setTimeout(function() {
        A()
    }, 0)
};
mini["unmask"] = function(_) {
    _ = mini.byId(_);
    if (!_) _ = document.body;
    var A = mini._MaskObjects[_._maskid];
    if (!A) return;
    delete mini._MaskObjects[_._maskid];
    var $ = A.maskEl;
    A.maskEl = null;
    if ($ && $.parentNode) $.parentNode.removeChild($)
};
mini.showMaskLoading = function(_) {
    _ = $.extend({
        el: document.body,
        cls: "mini-mask-loading",
        html: mini.Control.prototype.loadingMsg || "Loading..."
    }, _);
    return mini.mask(_)
};
mini.Cookie = {
    get: function(D) {
        var A = document.cookie.split("; "),
            B = null;
        for (var $ = 0; $ < A.length; $++) {
            var _ = A[$].split("=");
            if (D == _[0]) B = _
        }
        if (B) {
            var C = B[1];
            if (C === undefined) return C;
            return unescape(C)
        }
        return null
    },
    set: function(C, $, B, A) {
        var _ = new Date();
        if (B != null) _ = new Date(_.getTime() + (B * 1000 * 3600 * 24));
        document.cookie = C + "=" + escape($) + ((B == null) ? "" : ("; expires=" + _.toGMTString())) + ";path=/" + (A ? "; domain=" + A : "")
    },
    del: function(_, $) {
        this.set(_, null, -100, $)
    }
};
mini.copyTo(mini, {
    treeToArray: function(C, I, J, A, $) {
        if (!I) I = "children";
        var F = [];
        for (var H = 0, D = C.length; H < D; H++) {
            var B = C[H];
            F[F.length] = B;
            if (A) B[A] = $;
            var _ = B[I];
            if (_ && _.length > 0) {
                var E = B[J],
                    G = this.treeToArray(_, I, J, A, E);
                F.addRange(G)
            }
        }
        return F
    },
    arrayToTree: function(I, H, J, _) {
        if (!H) H = "children";
        J = J || "_id";
        _ = _ || "_pid";
        var B = [],
            C = {};
        for (var G = 0, D = I.length; G < D; G++) {
            var $ = I[G];
            if (!$) continue;
            var F = mini._getMap(J, $);
            if (F !== null && F !== undefined) C[F] = $;
            delete $[H]
        }
        for (G = 0, D = I.length; G < D; G++) {
            var $ = I[G],
                E = mini._getMap(_, $),
                A = C[E];
            if (!A) {
                B.push($);
                continue
            }
            if (!A[H]) A[H] = [];
            A[H].push($)
        }
        return B
    }
});
mini.treeToList = mini.treeToArray;
mini.listToTree = mini.arrayToTree;

function UUID() {
    var A = [],
        _ = "0123456789ABCDEF".split("");
    for (var $ = 0; $ < 36; $++) A[$] = Math.floor(Math.random() * 16);
    A[14] = 4;
    A[19] = (A[19] & 3) | 8;
    for ($ = 0; $ < 36; $++) A[$] = _[A[$]];
    A[8] = A[13] = A[18] = A[23] = "-";
    return A.join("")
}
String.format = function(_) {
    var $ = Array.prototype.slice.call(arguments, 1);
    _ = _ || "";
    return _.replace(/\{(\d+)\}/g, function(A, _) {
        return $[_]
    })
};
String.prototype.trim = function() {
    var $ = /^\s+|\s+$/g;
    return function() {
        return this.replace($, "")
    }
}();
mini.copyTo(mini, {
    measureText: function(B, _, C) {
        if (!this.measureEl) this.measureEl = mini.append(document.body, "<div></div>");
        this.measureEl.style.cssText = "position:absolute;left:-1000px;top:-1000px;visibility:hidden;";
        if (typeof B == "string") this.measureEl.className = B;
        else {
            this.measureEl.className = "";
            var G = jQuery(B),
                A = jQuery(this.measureEl),
                F = ["font-size", "font-style", "font-weight", "font-family", "line-height", "text-transform", "letter-spacing"];
            for (var $ = 0, E = F.length; $ < E; $++) {
                var D = F[$];
                A.css(D, G.css(D))
            }
        }
        if (C) mini.setStyle(this.measureEl, C);
        this.measureEl.innerHTML = _;
        return mini.getSize(this.measureEl)
    }
});
if (typeof mini_layoutOnParse == "undefined") mini_layoutOnParse = true;
mini.enableLayout = true;
jQuery(function() {
    mini.updateDevice();
    setTimeout(function() {
        var $ = document.documentElement;
        if ((isIE6 || isIE7) && (mini.getStyle(document.body, "overflow") == "hidden" || ($ && mini.getStyle($, "overflow") == "hidden"))) {
            jQuery(document.body).css("overflow", "visible");
            if ($) jQuery($).css("overflow", "visible")
        }
        mini.__LastWindowWidth = document.documentElement.clientWidth;
        mini.__LastWindowHeight = document.documentElement.clientHeight;
        var _ = new Date();
        mini.isReady = true;
        mini.parse(null, mini_layoutOnParse);
        lolloo()
    }, 1)
});
mini_onload = function($) {
    mini.on(window, "resize", mini_onresize)
};
mini.on(window, "load", mini_onload);
mini.__LastWindowWidth = document.documentElement.clientWidth;
mini.__LastWindowHeight = document.documentElement.clientHeight;
mini.doWindowResizeTimer = null;
mini.allowLayout = true;
mini_onresize = function(A) {
    mini.updateDevice();
    if (mini.doWindowResizeTimer) clearTimeout(mini.doWindowResizeTimer);
    o101O1 = mini.isWindowDisplay();
    if (o101O1 == false || mini.allowLayout == false) return;
    if (typeof Ext != "undefined") mini.doWindowResizeTimer = setTimeout(function() {
        var _ = document.documentElement.clientWidth,
            $ = document.documentElement.clientHeight;
        if (mini.__LastWindowWidth == _ && mini.__LastWindowHeight == $);
        else {
            mini.__LastWindowWidth = _;
            mini.__LastWindowHeight = $;
            mini.layout(null, false)
        }
        mini.doWindowResizeTimer = null
    }, 300);
    else {
        var $ = 100;
        try {
            if (parent && parent != window && parent.mini) $ = 0
        } catch (_) {}
        mini.doWindowResizeTimer = setTimeout(function() {
            var _ = document.documentElement.clientWidth,
                $ = document.documentElement.clientHeight;
            if (mini.__LastWindowWidth == _ && mini.__LastWindowHeight == $);
            else {
                mini.__LastWindowWidth = _;
                mini.__LastWindowHeight = $;
                mini.layout(null, false)
            }
            mini.doWindowResizeTimer = null
        }, $)
    }
};
mini.isDisplay = function(_, A) {
    var $ = A || document.body;
    while (1) {
        if (_ == null || !_.style) return false;
        if (_ && _.style && _.style.display == "none") return false;
        if (_ == $) return true;
        _ = _.parentNode
    }
    return true
};
mini.isWindowDisplay = function() {
    try {
        var _ = window.parent,
            E = _ != window;
        if (E) {
            var C = _.document.getElementsByTagName("iframe"),
                H = _.document.getElementsByTagName("frame"),
                G = [];
            for (var $ = 0, D = C.length; $ < D; $++) G.push(C[$]);
            for ($ = 0, D = H.length; $ < D; $++) G.push(H[$]);
            var B = null;
            for ($ = 0, D = G.length; $ < D; $++) {
                var A = G[$];
                if (A.contentWindow == window) {
                    B = A;
                    break
                }
            }
            if (!B) return false;
            return mini.isDisplay(B, _.document.body)
        } else return true
    } catch (F) {
        return true
    }
};
o101O1 = mini.isWindowDisplay();
mini.layoutIFrames = function($) {
    if (!document.body) return;
    if (!$) $ = document.body;
    var _ = $.getElementsByTagName("iframe");
    setTimeout(function() {
        for (var A = 0, C = _.length; A < C; A++) {
            var B = _[A];
            try {
                if (mini.isDisplay(B) && Oolo($, B)) {
                    if (B.contentWindow.mini)
                        if (B.contentWindow.o101O1 == false) {
                            B.contentWindow.o101O1 = B.contentWindow.mini.isWindowDisplay();
                            B.contentWindow.mini.layout()
                        } else B.contentWindow.mini.layout(null, false);
                    B.contentWindow.mini.layoutIFrames()
                }
            } catch (D) {}
        }
    }, 30)
};
jQuery.ajaxSetup({
    cache: false
});
if (isIE) setInterval(function() {}, 20000);
mini_unload = function(H) {
    try {
        var E = mini._getTopWindow();
        E[mini._WindowID] = "";
        delete E[mini._WindowID]
    } catch (D) {}
    var G = document.body.getElementsByTagName("iframe");
    if (G.length > 0) {
        var F = [];
        for (var $ = 0, C = G.length; $ < C; $++) F.push(G[$]);
        for ($ = 0, C = F.length; $ < C; $++) {
            try {
                var B = F[$];
                B._ondestroy = null;
                B.onload = function() {};
                jQuery(B).unbind("load");
                B.src = "";
                if (mini.isIE) {
                    try {
                        B.contentWindow.document.write("");
                        B.contentWindow.document.close()
                    } catch (D) {}
                }
                if (B.parentNode) B.parentNode.removeChild(B)
            } catch (H) {}
        }
    }
    mini._destroying = true;
    var A = mini.getComponents().clone();
    for ($ = 0, C = A.length; $ < C; $++) {
        var _ = A[$];
        if (_.destroyed !== true) _.destroy(false)
    }
    A.length = 0;
    A = null;
    mini.clearEvent(window);
    mini.clearEvent(document);
    mini.un(window, "unload", mini_unload);
    mini.un(window, "load", mini_onload);
    mini.un(window, "resize", mini_onresize);
    mini.components = {};
    mini.classes = {};
    mini.uiClasses = {};
    mini.uids = {};
    mini.listeners.length = 0;
    mini._topWindow = null;
    window.mini = null;
    window.Owner = null;
    window.CloseOwnerWindow = null
};
mini.on(window, "unload", mini_unload);

function _l1o0ol() {}
mini.zIndex = 1000;
mini.zindex = mini.getMaxZIndex = function() {
    return mini.zIndex++
};

function js_isTouchDevice() {
    try {
        document.createEvent("TouchEvent");
        return true
    } catch ($) {
        return false
    }
}

function l1l11(A) {
    if (js_isTouchDevice()) {
        var _ = typeof A == "string" ? document.getElementById(A) : A,
            $ = 0;
        _.addEventListener("touchstart", function(_) {
            $ = this.scrollTop + _.touches[0].pageY;
            _.preventDefault()
        }, false);
        _.addEventListener("touchmove", function(_) {
            this.scrollTop = $ - _.touches[0].pageY;
            _.preventDefault()
        }, false)
    }
}
O011 = function(A) {
    A = mini.byId(A);
    if (!A || !isIE || isIE10 || isIE11) return;

    function $() {
        var _ = A._placeholder_label;
        if (!_) return;
        var $ = A.getAttribute("placeholder");
        if (!$) $ = A.placeholder;
        if (!A.value && !A.disabled) {
            _.innerHTML = $;
            _.style.display = ""
        } else _.style.display = "none"
    }
    if (A._placeholder) {
        $();
        return
    }
    A._placeholder = true;
    var _ = document.createElement("label");
    _.className = "mini-placeholder-label";
    A.parentNode.appendChild(_);
    A._placeholder_label = _;
    _.onmousedown = function() {
        try {
            A.focus()
        } catch ($) {}
    };
    A.onpropertychange = function(_) {
        _ = _ || window.event;
        if (_.propertyName == "value") $()
    };
    $();
    mini.on(A, "focus", function($) {
        if (!A.readOnly) _.style.display = "none"
    });
    mini.on(A, "blur", function(_) {
        $()
    })
};
mini.ajax = function($) {
    if (!$.dataType) $.dataType = "text";
    return window.jQuery.ajax($)
};
o0ll1 = function(ajaxData, scope) {
    var obj = ajaxData,
        t = typeof ajaxData;
    if (t == "string") {
        obj = eval("(" + ajaxData + ")");
        if (typeof obj == "function") obj = obj.call(scope)
    }
    return obj
};
if (!jQuery.fn.on) jQuery.fn.on = function(_, $, A, B) {
    return this.delegate($, _, A, B)
};
mini._lastDevice;
mini.updateDevice = function() {
    var B = "mini-xs",
        _ = $(window).width(),
        A = "xs";
    if (_ > 768) {
        B += " mini-sm";
        A = "sm"
    }
    if (_ > 992) {
        B += " mini-md";
        A = "md"
    }
    if (_ > 1200) {
        B += " mini-lg";
        A = "lg"
    }
    B += " mini-" + A + "-active";
    jQuery(document.documentElement).removeClass("mini-xs mini-sm mini-md mini-lg mini-xs-active mini-sm-active mini-md-active mini-lg-active ").addClass(B);
    if (mini._lastDevice != A) $(window).triggerHandler("devicechange", A);
    mini._lastDevice = A
};
mini.getClipboard = function(_) {
    var $ = "";
    if (window.clipboardData) $ = window.clipboardData.getData("Text");
    else if (_) $ = _.clipboardData.getData("text/plain");
    return $
};
mini.setClipboard = function(_) {
    if (window.clipboardData) window.clipboardData.setData("Text", _);
    else {
        var A = $("<textarea style=\"position:absolute;left:0;top:-1000px;width:100px;z-index:1000;\"></textarea>").appendTo("body").val(_)[0];
        A.select();
        A.focus();
        document.execCommand("copy")
    }
};
if (typeof window.rootpath == "undefined") rootpath = "/";
mini.loadJS = function(_, $) {
    if (!_) return;
    if (typeof $ == "function") return loadJS._async(_, $);
    else return loadJS._sync(_)
};
mini.loadJS._js = {};
mini.loadJS._async = function(D, _) {
    var C = mini.loadJS._js[D];
    if (!C) C = mini.loadJS._js[D] = {
        create: false,
        loaded: false,
        callbacks: []
    };
    if (C.loaded) {
        setTimeout(function() {
            _()
        }, 1);
        return
    } else {
        C.callbacks.push(_);
        if (C.create) return
    }
    C.create = true;
    var B = document.getElementsByTagName("head")[0],
        A = document.createElement("script");
    A.src = D;
    A.type = "text/javascript";

    function $() {
        for (var $ = 0; $ < C.callbacks.length; $++) {
            var _ = C.callbacks[$];
            if (_) _()
        }
        C.callbacks.length = 0
    }
    setTimeout(function() {
        if (document.all) A.onreadystatechange = function() {
            if (A.readyState == "loaded" || A.readyState == "complete") {
                $();
                C.loaded = true
            }
        };
        else A.onload = function() {
            $();
            C.loaded = true
        };
        B.appendChild(A)
    }, 1);
    return A
};
mini.loadJS._sync = function(A) {
    if (loadJS._js[A]) return;
    loadJS._js[A] = {
        create: true,
        loaded: true,
        callbacks: []
    };
    var _ = document.getElementsByTagName("head")[0],
        $ = document.createElement("script");
    $.type = "text/javascript";
    $.text = loadText(A);
    _.appendChild($);
    return $
};
mini.loadText = function(C) {
    var B = "",
        D = document.all && location.protocol == "file:",
        A = null;
    if (D) A = new ActiveXObject("Microsoft.XMLHTTP");
    else if (window.XMLHttpRequest) A = new XMLHttpRequest();
    else if (window.ActiveXObject) A = new ActiveXObject("Microsoft.XMLHTTP");
    A.onreadystatechange = $;
    var _ = "_t=" + new Date().getTime();
    if (C.indexOf("?") == -1) _ = "?" + _;
    else _ = "&" + _;
    C += _;
    A.open("GET", C, false);
    A.send(null);

    function $() {
        if (A.readyState == 4) {
            var $ = D ? 0 : 200;
            if (A.status == $) B = A.responseText
        }
    }
    return B
};
mini.loadJSON = function(url) {
    var text = loadText(url),
        o = eval("(" + text + ")");
    return o
};
mini.loadCSS = function(A, B) {
    if (!A) return;
    if (loadCSS._css[A]) return;
    var $ = document.getElementsByTagName("head")[0],
        _ = document.createElement("link");
    if (B) _.id = B;
    _.href = A;
    _.rel = "stylesheet";
    _.type = "text/css";
    $.appendChild(_);
    return _
};
mini.loadCSS._css = {};
mini.innerHTML = function(A, _) {
    if (typeof A == "string") A = document.getElementById(A);
    if (!A) return;
    _ = "<div style=\"display:none\">&nbsp;</div>" + _;
    A.innerHTML = _;
    mini.__executeScripts(A);
    var $ = A.firstChild
};
mini.__executeScripts = function($) {
    var A = $.getElementsByTagName("script");
    for (var _ = 0, E = A.length; _ < E; _++) {
        var B = A[_],
            D = B.src;
        if (D) mini.loadJS(D);
        else {
            var C = document.createElement("script");
            C.type = "text/javascript";
            C.text = B.text;
            $.appendChild(C)
        }
    }
    for (_ = A.length - 1; _ >= 0; _--) {
        B = A[_];
        B.parentNode.removeChild(B)
    }
};
mini.Hidden = function() {
    mini.Hidden.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.Hidden, mini.Control, {
    _clearBorder: false,
    formField: true,
    value: "",
    uiCls: "mini-hidden"
});
mini_Hidden = mini.Hidden.prototype;
mini_Hidden.getFormValue = mini_Hidden_getFormValue;
mini_Hidden.getValue = mini_Hidden_getValue;
mini_Hidden.setValue = mini_Hidden_setValue;
mini_Hidden.setName = mini_Hidden_setName;
mini_Hidden._create = mini_Hidden__create;
mini.regClass(mini.Hidden, "hidden");
mini.Popup = function() {
    mini.Popup.superclass.constructor.apply(this, arguments);
    this.setVisible(false);
    this.setAllowDrag(this.allowDrag);
    this.setAllowResize(this.allowResize)
};
mini.extend(mini.Popup, mini.Container, {
    _clearBorder: false,
    uiCls: "mini-popup"
});
mini_Popup = mini.Popup.prototype;
mini_Popup.getAttrs = mini_Popup_getAttrs;
mini_Popup.setBody = mini_Popup_setBody;
mini_Popup.setHeight = mini_Popup_setHeight;
mini_Popup.setWidth = mini_Popup_setWidth;
mini_Popup.destroy = mini_Popup_destroy;
mini_Popup.doLayout = mini_Popup_doLayout;
mini_Popup._initEvents = mini_Popup__initEvents;
mini_Popup._create = mini_Popup__create;
mini.regClass(mini.Popup, "popup");
OOooo1_prototype = {
    isPopup: false,
    popupEl: null,
    popupCls: "",
    showAction: "mouseover",
    hideAction: "outerclick",
    showDelay: 300,
    hideDelay: 500,
    xAlign: "left",
    yAlign: "below",
    xOffset: 0,
    yOffset: 0,
    minWidth: 50,
    minHeight: 25,
    maxWidth: 2000,
    maxHeight: 2000,
    showModal: false,
    showShadow: true,
    modalStyle: "opacity:0.2",
    OO00oO: "mini-popup-drag",
    Ol1OlO: "mini-popup-resize",
    allowDrag: false,
    allowResize: false,
    Ol0l: function() {
        if (!this.popupEl) return;
        mini.un(this.popupEl, "click", this.Ol0110, this);
        mini.un(this.popupEl, "contextmenu", this.llo1, this);
        mini.un(this.popupEl, "mouseover", this.__OnMouseOver, this)
    },
    O01lo: function() {
        if (!this.popupEl) return;
        mini.on(this.popupEl, "click", this.Ol0110, this);
        mini.on(this.popupEl, "contextmenu", this.llo1, this);
        mini.on(this.popupEl, "mouseover", this.__OnMouseOver, this)
    },
    doShow: function(A) {
        var $ = {
            popupEl: this.popupEl,
            htmlEvent: A,
            cancel: false
        };
        this.fire("BeforeOpen", $);
        if ($.cancel == true) return;
        this.fire("opening", $);
        if ($.cancel == true) return;
        if (!this.popupEl) this.show();
        else {
            var _ = {};
            if (A) _.xy = [A.pageX, A.pageY];
            this.showAtEl(this.popupEl, _)
        }
    },
    doHide: function(_) {
        var $ = {
            popupEl: this.popupEl,
            htmlEvent: _,
            cancel: false
        };
        this.fire("BeforeClose", $);
        if ($.cancel == true) return;
        this.close()
    },
    show: function(_, $) {
        this.showAtPos(_, $)
    },
    showAtPos: function(B, A) {
        this.render(document.body);
        if (!B) B = "center";
        if (!A) A = "middle";
        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";
        this.O0oOoo();
        var _ = mini.getViewportBox(),
            $ = mini.getBox(this.el);
        if (B == "left") B = 0;
        if (B == "center") B = _.width / 2 - $.width / 2;
        if (B == "right") B = _.width - $.width;
        if (A == "top") A = 0;
        if (A == "middle") A = _.y + _.height / 2 - $.height / 2;
        if (A == "bottom") A = _.height - $.height;
        if (B + $.width > _.right) B = _.right - $.width;
        if (A + $.height > _.bottom) A = _.bottom - $.height - 20;
        this.O0ll(B, A)
    },
    oll01l: function() {
        jQuery(this.Ooo1).remove();
        if (!this.showModal) return;
        if (this.visible == false) return;
        var $ = document.documentElement,
            A = parseInt(Math.max(document.body.scrollWidth, $ ? $.scrollWidth : 0)),
            D = parseInt(Math.max(document.body.scrollHeight, $ ? $.scrollHeight : 0)),
            C = mini.getViewportBox(),
            B = C.height;
        if (B < D) B = D;
        var _ = C.width;
        if (_ < A) _ = A;
        this.Ooo1 = mini.append(document.body, "<div class=\"mini-modal\"></div>");
        this.Ooo1.style.height = B + "px";
        this.Ooo1.style.width = _ + "px";
        this.Ooo1.style.zIndex = mini.getStyle(this.el, "zIndex") - 1;
        mini.setStyle(this.Ooo1, this.modalStyle)
    },
    _doShim: function() {
        if (!mini.isIE || !mini_useShims) return;
        if (!this._shimEl) {
            var $ = "<iframe frameborder='0' style='position:absolute; z-index:-1; width:0; height:0; top:0;left:0;scrolling:no;'></iframe>";
            this._shimEl = mini.append(document.body, $)
        }

        function A() {
            this._shimEl.style.display = "";
            var $ = mini.getBox(this.el),
                A = this._shimEl.style;
            A.width = $.width + "px";
            A.height = $.height + "px";
            A.left = $.x + "px";
            A.top = $.y + "px";
            var _ = mini.getStyle(this.el, "zIndex");
            if (!isNaN(_)) this._shimEl.style.zIndex = _ - 3
        }
        this._shimEl.style.display = "none";
        if (this._doShimTimer) {
            clearTimeout(this._doShimTimer);
            this._doShimTimer = null
        }
        var _ = this;
        this._doShimTimer = setTimeout(function() {
            _._doShimTimer = null;
            A.call(_)
        }, 20)
    },
    Olol0: function() {
        if (!this.shadowEl) this.shadowEl = mini.append(document.body, "<div class=\"mini-shadow\"></div>");
        this.shadowEl.style.display = this.showShadow ? "" : "none";
        if (this.showShadow) {
            function $() {
                this.shadowEl.style.display = "";
                var $ = mini.getBox(this.el),
                    A = this.shadowEl.style;
                A.width = $.width + "px";
                A.height = $.height + "px";
                A.left = $.x + "px";
                A.top = $.y + "px";
                var _ = mini.getStyle(this.el, "zIndex");
                if (!isNaN(_)) this.shadowEl.style.zIndex = _ - 2
            }
            this.shadowEl.style.display = "none";
            if (this.Olol0Timer) {
                clearTimeout(this.Olol0Timer);
                this.Olol0Timer = null
            }
            var _ = this;
            this.Olol0Timer = setTimeout(function() {
                _.Olol0Timer = null;
                $.call(_)
            }, 20)
        }
    },
    O0oOoo: function() {
        this.el.style.display = "";
        var $ = mini.getBox(this.el);
        if ($.width > this.maxWidth) {
            mini.setWidth(this.el, this.maxWidth);
            $ = mini.getBox(this.el)
        }
        if ($.height > this.maxHeight) {
            mini.setHeight(this.el, this.maxHeight);
            $ = mini.getBox(this.el)
        }
        if ($.width < this.minWidth) {
            mini.setWidth(this.el, this.minWidth);
            $ = mini.getBox(this.el)
        }
        if ($.height < this.minHeight) {
            mini.setHeight(this.el, this.minHeight);
            $ = mini.getBox(this.el)
        }
    },
    _getWindowOffset: function($) {
        return [0, 0]
    },
    showAtEl: function(I, E) {
        I = mini.byId(I);
        if (!I) return;
        if (!this.isRender() || this.el.parentNode != document.body) this.render(document.body);
        var B = {
            atEl: I,
            popupEl: this.el,
            xAlign: this.xAlign,
            yAlign: this.yAlign,
            xOffset: this.xOffset,
            yOffset: this.yOffset,
            popupCls: this.popupCls
        };
        mini.copyTo(B, E);
        mini.addClass(I, B.popupCls);
        I.popupCls = B.popupCls;
        this._popupEl = I;
        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";
        this.doLayout();
        this.O0oOoo();
        var K = mini.getViewportBox(),
            C = mini.getBox(this.el),
            M = mini.getBox(I),
            G = B.xy,
            D = B.xAlign,
            F = B.yAlign,
            N = K.width / 2 - C.width / 2,
            L = 0;
        if (G) {
            N = G[0];
            L = G[1]
        }
        switch (B.xAlign) {
            case "outleft":
                N = M.x - C.width;
                break;
            case "left":
                N = M.x;
                break;
            case "center":
                N = M.x + M.width / 2 - C.width / 2;
                break;
            case "right":
                N = M.right - C.width;
                break;
            case "outright":
                N = M.right;
                break;
            default:
                break
        }
        switch (B.yAlign) {
            case "above":
                L = M.y - C.height;
                break;
            case "top":
                L = M.y;
                break;
            case "middle":
                L = M.y + M.height / 2 - C.height / 2;
                break;
            case "bottom":
                L = M.bottom - C.height;
                break;
            case "below":
                L = M.bottom;
                break;
            default:
                break
        }
        N = parseInt(N);
        L = parseInt(L);
        var A = this._getWindowOffset(E);
        if (B.outYAlign || B.outXAlign) {
            if (B.outYAlign == "above")
                if (L + C.height > K.bottom) {
                    var _ = M.y - K.y,
                        J = K.bottom - M.bottom;
                    if (_ > J) L = M.y - C.height
                }
            if (B.outYAlign == "below")
                if (L + C.height > K.bottom) {
                    _ = M.y - K.y, J = K.bottom - M.bottom;
                    if (_ > J) L = M.y - C.height
                }
            if (B.outXAlign == "outleft")
                if (N + C.width > K.right) {
                    var H = M.x - K.x,
                        $ = K.right - M.right;
                    if (H > $) N = M.x - C.width
                }
            if (B.outXAlign == "right")
                if (N + C.width > K.right) N = M.right - C.width;
            if (B.alwaysView) {
                if (L < 0) L = 0;
                if (L + C.height > K.bottom) L = K.bottom - C.height
            }
            this.O0ll(N + A[0], L + A[1])
        } else this.showAtPos(N + B.xOffset + A[0], L + B.yOffset + A[1])
    },
    O0ll: function(A, _) {
        this.el.style.display = "";
        this.el.style.zIndex = mini.getMaxZIndex();
        mini.setX(this.el, A);
        mini.setY(this.el, _);
        this.setVisible(true);
        if (this.hideAction == "mouseout") mini.on(document, "mousemove", this.oOolll, this);
        var $ = this;
        this.Olol0();
        this.oll01l();
        this._doShim();
        mini.layoutIFrames(this.el);
        this.isPopup = true;
        mini.on(document, "mousedown", this.lO00Oo, this);
        mini.on(window, "resize", this.l10Ol, this);
        this.fire("Open")
    },
    open: function() {
        this.show()
    },
    close: function() {
        this.hide()
    },
    hide: function() {
        if (!this.el) return;
        if (this.popupEl) mini.removeClass(this.popupEl, this.popupEl.popupCls);
        if (this._popupEl) mini.removeClass(this._popupEl, this._popupEl.popupCls);
        this._popupEl = null;
        jQuery(this.Ooo1).remove();
        if (this.shadowEl) this.shadowEl.style.display = "none";
        if (this._shimEl) this._shimEl.style.display = "none";
        mini.un(document, "mousemove", this.oOolll, this);
        mini.un(document, "mousedown", this.lO00Oo, this);
        mini.un(window, "resize", this.l10Ol, this);
        this.setVisible(false);
        this.isPopup = false;
        this.fire("Close")
    },
    setPopupEl: function($) {
        $ = mini.byId($);
        if (!$) return;
        this.Ol0l();
        this.popupEl = $;
        this.O01lo()
    },
    setPopupCls: function($) {
        this.popupCls = $
    },
    setShowAction: function($) {
        this.showAction = $
    },
    setHideAction: function($) {
        this.hideAction = $
    },
    setShowDelay: function($) {
        this.showDelay = $
    },
    setHideDelay: function($) {
        this.hideDelay = $
    },
    setXAlign: function($) {
        this.xAlign = $
    },
    setYAlign: function($) {
        this.yAlign = $
    },
    setxOffset: function($) {
        $ = parseInt($);
        if (isNaN($)) $ = 0;
        this.xOffset = $
    },
    setyOffset: function($) {
        $ = parseInt($);
        if (isNaN($)) $ = 0;
        this.yOffset = $
    },
    setShowModal: function($) {
        this.showModal = $
    },
    setShowShadow: function($) {
        this.showShadow = $
    },
    setMinWidth: function($) {
        if (isNaN($)) return;
        this.minWidth = $
    },
    setMinHeight: function($) {
        if (isNaN($)) return;
        this.minHeight = $
    },
    setMaxWidth: function($) {
        if (isNaN($)) return;
        this.maxWidth = $
    },
    setMaxHeight: function($) {
        if (isNaN($)) return;
        this.maxHeight = $
    },
    setAllowDrag: function($) {
        this.allowDrag = $;
        mini.removeClass(this.el, this.OO00oO);
        if ($) mini.addClass(this.el, this.OO00oO)
    },
    setAllowResize: function($) {
        this.allowResize = $;
        mini.removeClass(this.el, this.Ol1OlO);
        if ($) mini.addClass(this.el, this.Ol1OlO)
    },
    Ol0110: function(_) {
        if (this.O1lll0) return;
        if (this.showAction != "leftclick") return;
        var $ = jQuery(this.popupEl).attr("allowPopup");
        if (String($) == "false") return;
        this.doShow(_)
    },
    llo1: function(_) {
        if (this.O1lll0) return;
        if (this.showAction != "rightclick") return;
        var $ = jQuery(this.popupEl).attr("allowPopup");
        if (String($) == "false") return;
        _.preventDefault();
        this.doShow(_)
    },
    __OnMouseOver: function(A) {
        if (this.O1lll0) return;
        if (this.showAction != "mouseover") return;
        var _ = jQuery(this.popupEl).attr("allowPopup");
        if (String(_) == "false") return;
        clearTimeout(this._hideTimer);
        this._hideTimer = null;
        if (this.isPopup) return;
        var $ = this;
        this._showTimer = setTimeout(function() {
            $.doShow(A)
        }, this.showDelay)
    },
    oOolll: function($) {
        if (this.hideAction != "mouseout") return;
        this.lOo0Ol($)
    },
    lO00Oo: function($) {
        if (this.hideAction != "outerclick") return;
        if (!this.isPopup) return;
        if (this.within($) || (this.popupEl && Oolo(this.popupEl, $.target)));
        else this.doHide($)
    },
    lOo0Ol: function(_) {
        if (Oolo(this.el, _.target) || (this.popupEl && Oolo(this.popupEl, _.target)));
        else {
            clearTimeout(this._showTimer);
            this._showTimer = null;
            if (this._hideTimer) return;
            var $ = this;
            this._hideTimer = setTimeout(function() {
                $.doHide(_)
            }, this.hideDelay)
        }
    },
    l10Ol: function($) {
        if (this.isDisplay() && !mini.isIE6) this.oll01l()
    },
    within: function(C) {
        if (Oolo(this.el, C.target)) return true;
        var $ = mini.getChildControls(this);
        for (var _ = 0, B = $.length; _ < B; _++) {
            var A = $[_];
            if (A.within(C)) return true
        }
        return false
    }
};
mini.copyTo(mini.Popup.prototype, OOooo1_prototype);
mini.Button = function() {
    mini.Button.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.Button, mini.Control, {
    text: "",
    iconCls: "",
    iconStyle: "",
    plain: false,
    checkOnClick: false,
    checked: false,
    groupName: "",
    img: "",
    llOOoO: "mini-button-plain",
    _hoverCls: "mini-button-hover",
    oll001: "mini-button-pressed",
    ll0O1o: "mini-button-checked",
    o0010: "mini-button-disabled",
    allowCls: "",
    _clearBorder: false,
    uiCls: "mini-button",
    href: "",
    target: ""
});
mini_Button = mini.Button.prototype;
mini_Button.getAttrs = mini_Button_getAttrs;
mini_Button.onClick = mini_Button_onClick;
mini_Button.lo010o = mini_Button_lo010o;
mini_Button.__OnMouseDown = mini_Button_olol;
mini_Button.__OnClick = mini_Button_Ol1o1;
mini_Button.doClick = mini_Button_doClick;
mini_Button.getChecked = mini_Button_getChecked;
mini_Button.setChecked = mini_Button_setChecked;
mini_Button.getCheckOnClick = mini_Button_getCheckOnClick;
mini_Button.setCheckOnClick = mini_Button_setCheckOnClick;
mini_Button.getGroupName = mini_Button_getGroupName;
mini_Button.setGroupName = mini_Button_setGroupName;
mini_Button.getPlain = mini_Button_getPlain;
mini_Button.setPlain = mini_Button_setPlain;
mini_Button.getIconPosition = mini_Button_getIconPosition;
mini_Button.setIconPosition = mini_Button_setIconPosition;
mini_Button.getImg = mini_Button_getImg;
mini_Button.setImg = mini_Button_setImg;
mini_Button.getIconStyle = mini_Button_getIconStyle;
mini_Button.setIconStyle = mini_Button_setIconStyle;
mini_Button.getIconCls = mini_Button_getIconCls;
mini_Button.setIconCls = mini_Button_setIconCls;
mini_Button.getText = mini_Button_getText;
mini_Button.setText = mini_Button_setText;
mini_Button.getTarget = mini_Button_getTarget;
mini_Button.setTarget = mini_Button_setTarget;
mini_Button.getHref = mini_Button_getHref;
mini_Button.setHref = mini_Button_setHref;
mini_Button.doUpdate = mini_Button_doUpdate;
mini_Button.destroy = mini_Button_destroy;
mini_Button._initEvents = mini_Button__initEvents;
mini_Button._create = mini_Button__create;
mini_Button.set = mini_Button_set;
mini.regClass(mini.Button, "button");
mini.MenuButton = function() {
    mini.MenuButton.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.MenuButton, mini.Button, {
    uiCls: "mini-menubutton",
    allowCls: "mini-button-menu"
});
mini_MenuButton = mini.MenuButton.prototype;
mini_MenuButton.setEnabled = mini_MenuButton_setEnabled;
mini_MenuButton.setMenu = mini_MenuButton_setMenu;
mini.regClass(mini.MenuButton, "menubutton");
mini.SplitButton = function() {
    mini.SplitButton.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.SplitButton, mini.MenuButton, {
    uiCls: "mini-splitbutton",
    allowCls: "mini-button-split"
});
mini.regClass(mini.SplitButton, "splitbutton");
mini.CheckBox = function() {
    mini.CheckBox.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.CheckBox, mini.Control, {
    formField: true,
    _clearText: false,
    text: "",
    checked: false,
    defaultValue: false,
    trueValue: true,
    falseValue: false,
    checkedCls: "mini-checkbox-checked",
    uiCls: "mini-checkbox"
});
mini_CheckBox = mini.CheckBox.prototype;
mini_CheckBox.getAttrs = mini_CheckBox_getAttrs;
mini_CheckBox.oollO = mini_CheckBox_oollO;
mini_CheckBox.getFalseValue = mini_CheckBox_getFalseValue;
mini_CheckBox.setFalseValue = mini_CheckBox_setFalseValue;
mini_CheckBox.getTrueValue = mini_CheckBox_getTrueValue;
mini_CheckBox.setTrueValue = mini_CheckBox_setTrueValue;
mini_CheckBox.getFormValue = mini_CheckBox_getFormValue;
mini_CheckBox.getValue = mini_CheckBox_getValue;
mini_CheckBox.setValue = mini_CheckBox_setValue;
mini_CheckBox.getChecked = mini_CheckBox_getChecked;
mini_CheckBox.setChecked = mini_CheckBox_setChecked;
mini_CheckBox.getText = mini_CheckBox_getText;
mini_CheckBox.setText = mini_CheckBox_setText;
mini_CheckBox.setName = mini_CheckBox_setName;
mini_CheckBox._initEvents = mini_CheckBox__initEvents;
mini_CheckBox.destroy = mini_CheckBox_destroy;
mini_CheckBox._create = mini_CheckBox__create;
mini_CheckBox.set = mini_CheckBox_set;
mini.regClass(mini.CheckBox, "checkbox");
mini.TextBox = function() {
    mini.TextBox.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.TextBox, mini.ValidatorBase, {
    name: "",
    formField: true,
    selectOnFocus: false,
    allowInput: true,
    minWidth: 10,
    minHeight: 15,
    maxLength: 5000,
    emptyText: "",
    text: "",
    value: "",
    defaultValue: "",
    height: 21,
    l11oo: "mini-textbox-empty",
    l0l0l1: "mini-textbox-focus",
    o0010: "mini-textbox-disabled",
    uiCls: "mini-textbox",
    O000l: "text",
    l0l1O1: false,
    _placeholdered: false,
    oO1100: null,
    inputStyle: "",
    vtype: ""
});
mini_TextBox = mini.TextBox.prototype;
mini_TextBox.getRangeErrorText = mini_TextBox_getRangeErrorText;
mini_TextBox.setRangeErrorText = mini_TextBox_setRangeErrorText;
mini_TextBox.getRangeCharErrorText = mini_TextBox_getRangeCharErrorText;
mini_TextBox.setRangeCharErrorText = mini_TextBox_setRangeCharErrorText;
mini_TextBox.getRangeLengthErrorText = mini_TextBox_getRangeLengthErrorText;
mini_TextBox.setRangeLengthErrorText = mini_TextBox_setRangeLengthErrorText;
mini_TextBox.getMinErrorText = mini_TextBox_getMinErrorText;
mini_TextBox.setMinErrorText = mini_TextBox_setMinErrorText;
mini_TextBox.getMaxErrorText = mini_TextBox_getMaxErrorText;
mini_TextBox.setMaxErrorText = mini_TextBox_setMaxErrorText;
mini_TextBox.getMinLengthErrorText = mini_TextBox_getMinLengthErrorText;
mini_TextBox.setMinLengthErrorText = mini_TextBox_setMinLengthErrorText;
mini_TextBox.getMaxLengthErrorText = mini_TextBox_getMaxLengthErrorText;
mini_TextBox.setMaxLengthErrorText = mini_TextBox_setMaxLengthErrorText;
mini_TextBox.getDateErrorText = mini_TextBox_getDateErrorText;
mini_TextBox.setDateErrorText = mini_TextBox_setDateErrorText;
mini_TextBox.getIntErrorText = mini_TextBox_getIntErrorText;
mini_TextBox.setIntErrorText = mini_TextBox_setIntErrorText;
mini_TextBox.getFloatErrorText = mini_TextBox_getFloatErrorText;
mini_TextBox.setFloatErrorText = mini_TextBox_setFloatErrorText;
mini_TextBox.getUrlErrorText = mini_TextBox_getUrlErrorText;
mini_TextBox.setUrlErrorText = mini_TextBox_setUrlErrorText;
mini_TextBox.getEmailErrorText = mini_TextBox_getEmailErrorText;
mini_TextBox.setEmailErrorText = mini_TextBox_setEmailErrorText;
mini_TextBox.O0OO = mini_TextBox_O0OO;
mini_TextBox.getVtype = mini_TextBox_getVtype;
mini_TextBox.setVtype = mini_TextBox_setVtype;
mini_TextBox.getAttrs = mini_TextBox_getAttrs;
mini_TextBox.setInputStyle = mini_TextBox_setInputStyle;
mini_TextBox.Ol0O1 = mini_TextBox_Ol0O1;
mini_TextBox.ol00 = mini_TextBox_ol00;
mini_TextBox.o1oO = mini_TextBox_o1oO;
mini_TextBox.OoOlO1 = mini_TextBox_OoOlO1;
mini_TextBox.O10l1 = mini_TextBox_O10l1;
mini_TextBox.lOOo = mini_TextBox_lOOo;
mini_TextBox.O00l10 = mini_TextBox_O00l10;
mini_TextBox.__OnMouseDown = mini_TextBox_olol;
mini_TextBox.__OnClick = mini_TextBox_Ol1o1;
mini_TextBox.Olll1 = mini_TextBox_Olll1;
mini_TextBox.getErrorIconEl = mini_TextBox_getErrorIconEl;
mini_TextBox.getSelectOnFocus = mini_TextBox_getSelectOnFocus;
mini_TextBox.setSelectOnFocus = mini_TextBox_setSelectOnFocus;
mini_TextBox.getInputText = mini_TextBox_getInputText;
mini_TextBox.getTextEl = mini_TextBox_getTextEl;
mini_TextBox.selectText = mini_TextBox_selectText;
mini_TextBox.blur = mini_TextBox_blur;
mini_TextBox.focus = mini_TextBox_focus;
mini_TextBox.doUpdate = mini_TextBox_doUpdate;
mini_TextBox.setEnabled = mini_TextBox_setEnabled;
mini_TextBox.setReadOnly = mini_TextBox_setReadOnly;
mini_TextBox.getMaxLength = mini_TextBox_getMaxLength;
mini_TextBox.l00O1l = mini_TextBox_l00O1l;
mini_TextBox.__OnPaste = mini_TextBox___OnPaste;
mini_TextBox.setMaxLength = mini_TextBox_setMaxLength;
mini_TextBox.getEmptyText = mini_TextBox_getEmptyText;
mini_TextBox.setEmptyText = mini_TextBox_setEmptyText;
mini_TextBox.o1olOo = mini_TextBox_o1olOo;
mini_TextBox.getAllowInput = mini_TextBox_getAllowInput;
mini_TextBox.setAllowInput = mini_TextBox_setAllowInput;
mini_TextBox.getFormValue = mini_TextBox_getFormValue;
mini_TextBox.getValue = mini_TextBox_getValue;
mini_TextBox.setValue = mini_TextBox_setValue;
mini_TextBox.setName = mini_TextBox_setName;
mini_TextBox.setHeight = mini_TextBox_setHeight;
mini_TextBox.doLayout = mini_TextBox_doLayout;
mini_TextBox.destroy = mini_TextBox_destroy;
mini_TextBox.o0oO = mini_TextBox_o0oO;
mini_TextBox._initEvents = mini_TextBox__initEvents;
mini_TextBox._create = mini_TextBox__create;
mini.regClass(mini.TextBox, "textbox");
mini.Password = function() {
    mini.Password.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.Password, mini.TextBox, {
    uiCls: "mini-password",
    O000l: "password"
});
mini_Password = mini.Password.prototype;
mini_Password.getValue = mini_Password_getValue;
mini.regClass(mini.Password, "password");
mini.TextArea = function() {
    mini.TextArea.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.TextArea, mini.TextBox, {
    maxLength: 10000000,
    height: "",
    minHeight: 50,
    O000l: "textarea",
    uiCls: "mini-textarea"
});
mini_TextArea = mini.TextArea.prototype;
mini_TextArea.doLayout = mini_TextArea_doLayout;
mini.regClass(mini.TextArea, "textarea");
mini.ButtonEdit = function() {
    mini.ButtonEdit.superclass.constructor.apply(this, arguments);
    var $ = this.isReadOnly();
    if ($ || this.allowInput == false) this._textEl.readOnly = true;
    if (this.enabled == false) this.addCls(this.o0010);
    if ($) this.addCls(this.OooO01);
    if (this.required) this.addCls(this.o11o)
};
mini.extend(mini.ButtonEdit, mini.ValidatorBase, {
    name: "",
    formField: true,
    selectOnFocus: false,
    showButton: true,
    buttonToolTip: "",
    closeToolTip: "",
    showClose: false,
    emptyText: "",
    defaultValue: "",
    defaultText: "",
    value: "",
    text: "",
    maxLength: 1000,
    minLength: 0,
    height: 21,
    inputAsValue: true,
    allowInput: true,
    oo1o1O: "mini-buttonedit-noInput",
    OooO01: "mini-buttonedit-readOnly",
    o0010: "mini-buttonedit-disabled",
    l11oo: "mini-buttonedit-empty",
    l0l0l1: "mini-buttonedit-focus",
    Ol11O1: "mini-buttonedit-button",
    O1l0: "mini-buttonedit-button-hover",
    ll111: "mini-buttonedit-button-pressed",
    _closeCls: "mini-buttonedit-close",
    uiCls: "mini-buttonedit",
    _deferSetText: true,
    l0l1O1: false,
    _buttonWidth: 20,
    _closeWidth: 20,
    autoClear: false,
    oO1100: null,
    textName: "",
    inputStyle: ""
});
mini_ButtonEdit = mini.ButtonEdit.prototype;
mini_ButtonEdit.getAttrs = mini_ButtonEdit_getAttrs;
mini_ButtonEdit.setInputStyle = mini_ButtonEdit_setInputStyle;
mini_ButtonEdit.getShowButton = mini_ButtonEdit_getShowButton;
mini_ButtonEdit.setShowButton = mini_ButtonEdit_setShowButton;
mini_ButtonEdit.getShowClose = mini_ButtonEdit_getShowClose;
mini_ButtonEdit.setShowClose = mini_ButtonEdit_setShowClose;
mini_ButtonEdit.getSelectOnFocus = mini_ButtonEdit_getSelectOnFocus;
mini_ButtonEdit.setSelectOnFocus = mini_ButtonEdit_setSelectOnFocus;
mini_ButtonEdit.getTextName = mini_ButtonEdit_getTextName;
mini_ButtonEdit.setTextName = mini_ButtonEdit_setTextName;
mini_ButtonEdit.onTextChanged = mini_ButtonEdit_onTextChanged;
mini_ButtonEdit.onButtonMouseDown = mini_ButtonEdit_onButtonMouseDown;
mini_ButtonEdit.onButtonClick = mini_ButtonEdit_onButtonClick;
mini_ButtonEdit.O1Oo1 = mini_ButtonEdit_O1Oo1;
mini_ButtonEdit.lo101 = mini_ButtonEdit_lo101;
mini_ButtonEdit.o1oO = mini_ButtonEdit_o1oO;
mini_ButtonEdit.OoOlO1 = mini_ButtonEdit_OoOlO1;
mini_ButtonEdit.O00l10 = mini_ButtonEdit_O00l10;
mini_ButtonEdit.O10l1 = mini_ButtonEdit_O10l1;
mini_ButtonEdit.Ol0O1 = mini_ButtonEdit_Ol0O1;
mini_ButtonEdit.__fireBlur = mini_ButtonEdit___fireBlur;
mini_ButtonEdit.__doFocusCls = mini_ButtonEdit___doFocusCls;
mini_ButtonEdit.ol00 = mini_ButtonEdit_ol00;
mini_ButtonEdit.lo010o = mini_ButtonEdit_lo010o;
mini_ButtonEdit.__OnMouseDown = mini_ButtonEdit_olol;
mini_ButtonEdit._handlerButtonElClick = mini_ButtonEdit__handlerButtonElClick;
mini_ButtonEdit.__OnClick = mini_ButtonEdit_Ol1o1;
mini_ButtonEdit.Olll1 = mini_ButtonEdit_Olll1;
mini_ButtonEdit.getErrorIconEl = mini_ButtonEdit_getErrorIconEl;
mini_ButtonEdit.getButtonToolTip = mini_ButtonEdit_getButtonToolTip;
mini_ButtonEdit.setButtonToolTip = mini_ButtonEdit_setButtonToolTip;
mini_ButtonEdit.getAutoClear = mini_ButtonEdit_getAutoClear;
mini_ButtonEdit.setAutoClear = mini_ButtonEdit_setAutoClear;
mini_ButtonEdit.getInputAsValue = mini_ButtonEdit_getInputAsValue;
mini_ButtonEdit.setInputAsValue = mini_ButtonEdit_setInputAsValue;
mini_ButtonEdit.getAllowInput = mini_ButtonEdit_getAllowInput;
mini_ButtonEdit.setAllowInput = mini_ButtonEdit_setAllowInput;
mini_ButtonEdit._doReadOnly = mini_ButtonEdit__doReadOnly;
mini_ButtonEdit.setEnabled = mini_ButtonEdit_setEnabled;
mini_ButtonEdit.getMinLength = mini_ButtonEdit_getMinLength;
mini_ButtonEdit.setMinLength = mini_ButtonEdit_setMinLength;
mini_ButtonEdit.getMaxLength = mini_ButtonEdit_getMaxLength;
mini_ButtonEdit.setMaxLength = mini_ButtonEdit_setMaxLength;
mini_ButtonEdit.getEmptyText = mini_ButtonEdit_getEmptyText;
mini_ButtonEdit.setEmptyText = mini_ButtonEdit_setEmptyText;
mini_ButtonEdit.o1olOo = mini_ButtonEdit_o1olOo;
mini_ButtonEdit.getFormValue = mini_ButtonEdit_getFormValue;
mini_ButtonEdit.getValue = mini_ButtonEdit_getValue;
mini_ButtonEdit.setValue = mini_ButtonEdit_setValue;
mini_ButtonEdit.getText = mini_ButtonEdit_getText;
mini_ButtonEdit.setText = mini_ButtonEdit_setText;
mini_ButtonEdit.setName = mini_ButtonEdit_setName;
mini_ButtonEdit.getTextEl = mini_ButtonEdit_getTextEl;
mini_ButtonEdit.selectText = mini_ButtonEdit_selectText;
mini_ButtonEdit.blur = mini_ButtonEdit_blur;
mini_ButtonEdit.focus = mini_ButtonEdit_focus;
mini_ButtonEdit.setHeight = mini_ButtonEdit_setHeight;
mini_ButtonEdit.doLayout = mini_ButtonEdit_doLayout;
mini_ButtonEdit._doInputLayout = mini_ButtonEdit__doInputLayout;
mini_ButtonEdit.o0oO = mini_ButtonEdit_o0oO;
mini_ButtonEdit._initEvents = mini_ButtonEdit__initEvents;
mini_ButtonEdit.destroy = mini_ButtonEdit_destroy;
mini_ButtonEdit._create = mini_ButtonEdit__create;
mini_ButtonEdit.loOOoOHtml = mini_ButtonEdit_loOOoOHtml;
mini_ButtonEdit.loOOoOsHTML = mini_ButtonEdit_loOOoOsHTML;
mini_ButtonEdit._createButtonHtml = mini_ButtonEdit__createButtonHtml;
mini_ButtonEdit.getButtonByName = mini_ButtonEdit_getButtonByName;
mini_ButtonEdit.getButtons = mini_ButtonEdit_getButtons;
mini_ButtonEdit.setButtons = mini_ButtonEdit_setButtons;
mini_ButtonEdit.set = mini_ButtonEdit_set;
mini.regClass(mini.ButtonEdit, "buttonedit");
mini.PopupEdit = function() {
    mini.PopupEdit.superclass.constructor.apply(this, arguments);
    this._createPopup();
    this.el.className += " mini-popupedit"
};
mini.extend(mini.PopupEdit, mini.ButtonEdit, {
    uiCls: "mini-popupedit",
    popup: null,
    popupCls: "mini-buttonedit-popup",
    _hoverCls: "mini-buttonedit-hover",
    oll001: "mini-buttonedit-pressed",
    _destroyPopup: true,
    popupWidth: "100%",
    popupMinWidth: 50,
    popupMaxWidth: 2000,
    popupHeight: "",
    popupMinHeight: 30,
    popupMaxHeight: 2000,
    showPopupOnClick: false,
    alwaysView: false
});
mini_PopupEdit = mini.PopupEdit.prototype;
mini_PopupEdit.getAttrs = mini_PopupEdit_getAttrs;
mini_PopupEdit.l1OO1O = mini_PopupEdit_l1OO1O;
mini_PopupEdit.__OnClick = mini_PopupEdit_Ol1o1;
mini_PopupEdit.getShowPopupOnClick = mini_PopupEdit_getShowPopupOnClick;
mini_PopupEdit.setShowPopupOnClick = mini_PopupEdit_setShowPopupOnClick;
mini_PopupEdit.getPopupMinHeight = mini_PopupEdit_getPopupMinHeight;
mini_PopupEdit.getPopupMaxHeight = mini_PopupEdit_getPopupMaxHeight;
mini_PopupEdit.getPopupHeight = mini_PopupEdit_getPopupHeight;
mini_PopupEdit.setPopupMinHeight = mini_PopupEdit_setPopupMinHeight;
mini_PopupEdit.setPopupMaxHeight = mini_PopupEdit_setPopupMaxHeight;
mini_PopupEdit.setPopupHeight = mini_PopupEdit_setPopupHeight;
mini_PopupEdit.getPopupMinWidth = mini_PopupEdit_getPopupMinWidth;
mini_PopupEdit.getPopupMaxWidth = mini_PopupEdit_getPopupMaxWidth;
mini_PopupEdit.getPopupWidth = mini_PopupEdit_getPopupWidth;
mini_PopupEdit.setPopupMinWidth = mini_PopupEdit_setPopupMinWidth;
mini_PopupEdit.setPopupMaxWidth = mini_PopupEdit_setPopupMaxWidth;
mini_PopupEdit.setPopupWidth = mini_PopupEdit_setPopupWidth;
mini_PopupEdit.getAlwaysView = mini_PopupEdit_getAlwaysView;
mini_PopupEdit.setAlwaysView = mini_PopupEdit_setAlwaysView;
mini_PopupEdit.isShowPopup = mini_PopupEdit_isShowPopup;
mini_PopupEdit.hidePopup = mini_PopupEdit_hidePopup;
mini_PopupEdit.hidepopup = mini_PopupEdit_oo11o;
mini_PopupEdit.Oo1O11AtEl = mini_PopupEdit_Oo1O11AtEl;
mini_PopupEdit._syncShowPopup = mini_PopupEdit__syncShowPopup;
mini_PopupEdit.__OnDocumentMousewheel = mini_PopupEdit___OnDocumentMousewheel;
mini_PopupEdit._onDocumentMousewheel = mini_PopupEdit__onDocumentMousewheel;
mini_PopupEdit._unDocumentMousewheel = mini_PopupEdit__unDocumentMousewheel;
mini_PopupEdit.showPopup = mini_PopupEdit_showPopup;
mini_PopupEdit.O1Ol10 = mini_PopupEdit_O1Ol10;
mini_PopupEdit.loOo = mini_PopupEdit_loOo;
mini_PopupEdit.__OnPopupClose = mini_PopupEdit___OnPopupClose;
mini_PopupEdit._createPopup = mini_PopupEdit__createPopup;
mini_PopupEdit.getPopup = mini_PopupEdit_getPopup;
mini_PopupEdit.setPopup = mini_PopupEdit_setPopup;
mini_PopupEdit.within = mini_PopupEdit_within;
mini_PopupEdit.O10l1 = mini_PopupEdit_O10l1;
mini_PopupEdit.__OnMouseDown = mini_PopupEdit_olol;
mini_PopupEdit.__OnMouseOut = mini_PopupEdit_O11O11;
mini_PopupEdit.__OnMouseOver = mini_PopupEdit_O1l1lo;
mini_PopupEdit.Ol0O1 = mini_PopupEdit_Ol0O1;
mini_PopupEdit._initEvents = mini_PopupEdit__initEvents;
mini_PopupEdit.destroy = mini_PopupEdit_destroy;
mini.regClass(mini.PopupEdit, "popupedit");
mini.ComboBox = function() {
    this.data = [];
    this.columns = [];
    mini.ComboBox.superclass.constructor.apply(this, arguments);
    this._initInput()
};
mini.extend(mini.ComboBox, mini.PopupEdit, {
    text: "",
    value: "",
    valueField: "id",
    textField: "text",
    dataField: "",
    delimiter: ",",
    multiSelect: false,
    data: [],
    url: "",
    valueInCheckOrder: true,
    columns: [],
    allowInput: false,
    valueFromSelect: false,
    popupMaxHeight: 200,
    uiCls: "mini-combobox",
    changeOnSelectMethod: false,
    clearOnLoad: true,
    pinyinField: "tag",
    showNullItem: false,
    autoFilter: true
});
mini_ComboBox = mini.ComboBox.prototype;
mini_ComboBox.getAttrs = mini_ComboBox_getAttrs;
mini_ComboBox.getAutoFilter = mini_ComboBox_getAutoFilter;
mini_ComboBox.setAutoFilter = mini_ComboBox_setAutoFilter;
mini_ComboBox.setAjaxType = mini_ComboBox_setAjaxType;
mini_ComboBox.setAjaxData = mini_ComboBox_setAjaxData;
mini_ComboBox.O00l10 = mini_ComboBox_O00l10;
mini_ComboBox.findItems = mini_ComboBox_findItems;
mini_ComboBox.hidepopup = mini_ComboBox_oo11o;
mini_ComboBox.l100O = mini_ComboBox_l100O;
mini_ComboBox.l0111l = mini_ComboBox_l0111l;
mini_ComboBox.o1oO = mini_ComboBox_o1oO;
mini_ComboBox.OoOlO1 = mini_ComboBox_OoOlO1;
mini_ComboBox.O10l1 = mini_ComboBox_O10l1;
mini_ComboBox.olloo = mini_ComboBox_olloo;
mini_ComboBox.__OnItemDrawCell = mini_ComboBox___OnItemDrawCell;
mini_ComboBox.getSelected = mini_ComboBox_getSelected;
mini_ComboBox.getSelecteds = mini_ComboBox_getSelecteds;
mini_ComboBox.Ol11o = mini_ComboBox_Ol11o;
mini_ComboBox.getValueFromSelect = mini_ComboBox_getValueFromSelect;
mini_ComboBox.setValueFromSelect = mini_ComboBox_setValueFromSelect;
mini_ComboBox.getNullItemText = mini_ComboBox_getNullItemText;
mini_ComboBox.setNullItemText = mini_ComboBox_setNullItemText;
mini_ComboBox.getShowNullItem = mini_ComboBox_getShowNullItem;
mini_ComboBox.setShowNullItem = mini_ComboBox_setShowNullItem;
mini_ComboBox.getColumns = mini_ComboBox_getColumns;
mini_ComboBox.setColumns = mini_ComboBox_setColumns;
mini_ComboBox.getMultiSelect = mini_ComboBox_getMultiSelect;
mini_ComboBox.setMultiSelect = mini_ComboBox_setMultiSelect;
mini_ComboBox.setValue = mini_ComboBox_setValue;
mini_ComboBox.getValueInCheckOrder = mini_ComboBox_getValueInCheckOrder;
mini_ComboBox.setValueInCheckOrder = mini_ComboBox_setValueInCheckOrder;
mini_ComboBox.getDataField = mini_ComboBox_getDataField;
mini_ComboBox.setDataField = mini_ComboBox_setDataField;
mini_ComboBox.setDisplayField = mini_ComboBox_setDisplayField;
mini_ComboBox.getPinyinField = mini_ComboBox_getPinyinField;
mini_ComboBox.setPinyinField = mini_ComboBox_setPinyinField;
mini_ComboBox.getTextField = mini_ComboBox_getTextField;
mini_ComboBox.setTextField = mini_ComboBox_setTextField;
mini_ComboBox.getValueField = mini_ComboBox_getValueField;
mini_ComboBox.setValueField = mini_ComboBox_setValueField;
mini_ComboBox.getUrl = mini_ComboBox_getUrl;
mini_ComboBox.setUrl = mini_ComboBox_setUrl;
mini_ComboBox.doDataChange = mini_ComboBox_doDataChange;
mini_ComboBox.getClearOnLoad = mini_ComboBox_getClearOnLoad;
mini_ComboBox.setClearOnLoad = mini_ComboBox_setClearOnLoad;
mini_ComboBox.getData = mini_ComboBox_getData;
mini_ComboBox.setData = mini_ComboBox_setData;
mini_ComboBox._eval = mini_ComboBox__eval;
mini_ComboBox.load = mini_ComboBox_load;
mini_ComboBox.getAt = mini_ComboBox_getAt;
mini_ComboBox.indexOf = mini_ComboBox_indexOf;
mini_ComboBox.getItem = mini_ComboBox_getItem;
mini_ComboBox.selects = mini_ComboBox_selects;
mini_ComboBox.select = mini_ComboBox_select;
mini_ComboBox.deselect = mini_ComboBox_deselect;
mini_ComboBox.showPopup = mini_ComboBox_showPopup;
mini_ComboBox._createPopup = mini_ComboBox__createPopup;
mini_ComboBox.set = mini_ComboBox_set;
mini_ComboBox._initInput = mini_ComboBox__initInput;
mini.regClass(mini.ComboBox, "combobox");
mini.DatePicker = function() {
    mini.DatePicker.superclass.constructor.apply(this, arguments);
    mini.addClass(this.el, "mini-datepicker");
    this.on("validation", this.O0OO, this)
};
mini.extend(mini.DatePicker, mini.PopupEdit, {
    valueFormat: "",
    format: "yyyy-MM-dd",
    maxDate: null,
    minDate: null,
    popupWidth: "",
    viewDate: new Date(),
    showTime: false,
    timeFormat: "H:mm",
    showYesterdayButton: false,
    showTodayButton: true,
    showClearButton: true,
    showOkButton: false,
    valueType: "date",
    uiCls: "mini-datepicker",
    _monthPicker: false,
    minDateErrorText: "",
    maxDateErrorText: "",
    nullValue: ""
});
mini_DatePicker = mini.DatePicker.prototype;
mini_DatePicker.getAttrs = mini_DatePicker_getAttrs;
mini_DatePicker.O10l1 = mini_DatePicker_O10l1;
mini_DatePicker.O00l10 = mini_DatePicker_O00l10;
mini_DatePicker.getMinDateErrorText = mini_DatePicker_getMinDateErrorText;
mini_DatePicker.setMinDateErrorText = mini_DatePicker_setMinDateErrorText;
mini_DatePicker.getMaxDateErrorText = mini_DatePicker_getMaxDateErrorText;
mini_DatePicker.setMaxDateErrorText = mini_DatePicker_setMaxDateErrorText;
mini_DatePicker.getMinDate = mini_DatePicker_getMinDate;
mini_DatePicker.setMinDate = mini_DatePicker_setMinDate;
mini_DatePicker.getMaxDate = mini_DatePicker_getMaxDate;
mini_DatePicker.setMaxDate = mini_DatePicker_setMaxDate;
mini_DatePicker.getShowWeekNumber = mini_DatePicker_getShowWeekNumber;
mini_DatePicker.setShowWeekNumber = mini_DatePicker_setShowWeekNumber;
mini_DatePicker.getShowOkButton = mini_DatePicker_getShowOkButton;
mini_DatePicker.setShowOkButton = mini_DatePicker_setShowOkButton;
mini_DatePicker.getShowClearButton = mini_DatePicker_getShowClearButton;
mini_DatePicker.setShowClearButton = mini_DatePicker_setShowClearButton;
mini_DatePicker.getShowTodayButton = mini_DatePicker_getShowTodayButton;
mini_DatePicker.setShowTodayButton = mini_DatePicker_setShowTodayButton;
mini_DatePicker.getShowYesterdayButton = mini_DatePicker_getShowYesterdayButton;
mini_DatePicker.setShowYesterdayButton = mini_DatePicker_setShowYesterdayButton;
mini_DatePicker.getTimeFormat = mini_DatePicker_getTimeFormat;
mini_DatePicker.setTimeFormat = mini_DatePicker_setTimeFormat;
mini_DatePicker.getShowTime = mini_DatePicker_getShowTime;
mini_DatePicker.setShowTime = mini_DatePicker_setShowTime;
mini_DatePicker.getViewDate = mini_DatePicker_getViewDate;
mini_DatePicker.setViewDate = mini_DatePicker_setViewDate;
mini_DatePicker.getFormValue = mini_DatePicker_getFormValue;
mini_DatePicker.getValue = mini_DatePicker_getValue;
mini_DatePicker.getNullValue = mini_DatePicker_getNullValue;
mini_DatePicker.setNullValue = mini_DatePicker_setNullValue;
mini_DatePicker.setValue = mini_DatePicker_setValue;
mini_DatePicker.getValueFormat = mini_DatePicker_getValueFormat;
mini_DatePicker.setValueFormat = mini_DatePicker_setValueFormat;
mini_DatePicker.getFormat = mini_DatePicker_getFormat;
mini_DatePicker.setFormat = mini_DatePicker_setFormat;
mini_DatePicker.O0OoO = mini_DatePicker_O0OoO;
mini_DatePicker.O11o1O = mini_DatePicker_O11o1O;
mini_DatePicker.Ool1O = mini_DatePicker_Ool1O;
mini_DatePicker.O0OO = mini_DatePicker_O0OO;
mini_DatePicker.O1Ol10 = mini_DatePicker_O1Ol10;
mini_DatePicker.within = mini_DatePicker_within;
mini_DatePicker.hidePopup = mini_DatePicker_hidePopup;
mini_DatePicker.showPopup = mini_DatePicker_showPopup;
mini_DatePicker.__OnPopupClose = mini_DatePicker___OnPopupClose;
mini_DatePicker._createPopup = mini_DatePicker__createPopup;
mini_DatePicker.destroy = mini_DatePicker_destroy;
mini_DatePicker._getCalendar = mini_DatePicker__getCalendar;
mini.regClass(mini.DatePicker, "datepicker");
mini.MonthPicker = function() {
    mini.MonthPicker.superclass.constructor.apply(this, arguments);
};
mini.extend(mini.MonthPicker, mini.DatePicker, {
    uiCls: "mini-monthpicker",
    valueFormat: "",
    format: "yyyy-MM",
    _monthPicker: true
});
mini.regClass(mini.MonthPicker, "monthpicker");
mini.Calendar = function() {
    this.viewDate = new Date();
    this.O1Ol0O = [];
    mini.Calendar.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.Calendar, mini.Control, {
    width: 220,
    height: 160,
    monthPicker: false,
    _clearBorder: false,
    viewDate: null,
    Ol00O: "",
    O1Ol0O: [],
    multiSelect: false,
    firstDayOfWeek: 0,
    yesterdayText: "Yesterday",
    todayText: "Today",
    clearText: "Clear",
    okText: "OK",
    cancelText: "Cancel",
    daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    format: "MMM,yyyy",
    timeFormat: "H:mm",
    showTime: false,
    currentTime: true,
    rows: 1,
    columns: 1,
    headerCls: "",
    bodyCls: "",
    footerCls: "",
    l1Oo0: "mini-calendar-today",
    llO1O: "mini-calendar-weekend",
    lOO1l: "mini-calendar-othermonth",
    l0Oo: "mini-calendar-selected",
    showHeader: true,
    showFooter: true,
    showWeekNumber: false,
    showDaysHeader: true,
    showMonthButtons: true,
    showYearButtons: true,
    showTodayButton: true,
    showClearButton: true,
    showOkButton: false,
    showYesterdayButton: false,
    uiCls: "mini-calendar",
    menuEl: null,
    menuYear: null,
    menuSelectMonth: null,
    menuSelectYear: null
});
mini_Calendar = mini.Calendar.prototype;
mini_Calendar.getAttrs = mini_Calendar_getAttrs;
mini_Calendar.Ol11o = mini_Calendar_Ol11o;
mini_Calendar.__keydown = mini_Calendar_l001l;
mini_Calendar.O0OoO = mini_Calendar_O0OoO;
mini_Calendar.__OnMouseDown = mini_Calendar_olol;
mini_Calendar.__OnClick = mini_Calendar_Ol1o1;
mini_Calendar.Ooo0lO = mini_Calendar_Ooo0lO;
mini_Calendar.__getMonthYear = mini_Calendar___getMonthYear;
mini_Calendar.__OnMenuDblClick = mini_Calendar___OnMenuDblClick;
mini_Calendar.l00oo0 = mini_Calendar_l00oo0;
mini_Calendar.updateMenu = mini_Calendar_updateMenu;
mini_Calendar.hideMenu = mini_Calendar_hideMenu;
mini_Calendar.showMenu = mini_Calendar_showMenu;
mini_Calendar._tryShowMenu = mini_Calendar__tryShowMenu;
mini_Calendar.olOol0 = mini_Calendar_olOol0;
mini_Calendar.oOl0ll = mini_Calendar_oOl0ll;
mini_Calendar.oO11Oo = mini_Calendar_oO11Oo;
mini_Calendar.doUpdate = mini_Calendar_doUpdate;
mini_Calendar.doLayout = mini_Calendar_doLayout;
mini_Calendar.getTimeFormat = mini_Calendar_getTimeFormat;
mini_Calendar.setTimeFormat = mini_Calendar_setTimeFormat;
mini_Calendar.getShowTime = mini_Calendar_getShowTime;
mini_Calendar.setShowTime = mini_Calendar_setShowTime;
mini_Calendar.getColumns = mini_Calendar_getColumns;
mini_Calendar.setColumns = mini_Calendar_setColumns;
mini_Calendar.getRows = mini_Calendar_getRows;
mini_Calendar.setRows = mini_Calendar_setRows;
mini_Calendar.getMultiSelect = mini_Calendar_getMultiSelect;
mini_Calendar.setMultiSelect = mini_Calendar_setMultiSelect;
mini_Calendar.isSelectedDate = mini_Calendar_isSelectedDate;
mini_Calendar.getFormValue = mini_Calendar_getFormValue;
mini_Calendar.getValue = mini_Calendar_getValue;
mini_Calendar.setValue = mini_Calendar_setValue;
mini_Calendar.getTime = mini_Calendar_getTime;
mini_Calendar.setTime = mini_Calendar_setTime;
mini_Calendar.getSelectedDate = mini_Calendar_getSelectedDate;
mini_Calendar.setSelectedDates = mini_Calendar_setSelectedDates;
mini_Calendar.setSelectedDate = mini_Calendar_setSelectedDate;
mini_Calendar.getViewDate = mini_Calendar_getViewDate;
mini_Calendar.setViewDate = mini_Calendar_setViewDate;
mini_Calendar.getShowOkButton = mini_Calendar_getShowOkButton;
mini_Calendar.setShowOkButton = mini_Calendar_setShowOkButton;
mini_Calendar.getShowClearButton = mini_Calendar_getShowClearButton;
mini_Calendar.setShowClearButton = mini_Calendar_setShowClearButton;
mini_Calendar.getShowYesterdayButton = mini_Calendar_getShowYesterdayButton;
mini_Calendar.setShowYesterdayButton = mini_Calendar_setShowYesterdayButton;
mini_Calendar.getShowTodayButton = mini_Calendar_getShowTodayButton;
mini_Calendar.setShowTodayButton = mini_Calendar_setShowTodayButton;
mini_Calendar.getShowYearButtons = mini_Calendar_getShowYearButtons;
mini_Calendar.setShowYearButtons = mini_Calendar_setShowYearButtons;
mini_Calendar.getShowMonthButtons = mini_Calendar_getShowMonthButtons;
mini_Calendar.setShowMonthButtons = mini_Calendar_setShowMonthButtons;
mini_Calendar.getShowDaysHeader = mini_Calendar_getShowDaysHeader;
mini_Calendar.setShowDaysHeader = mini_Calendar_setShowDaysHeader;
mini_Calendar.getShowWeekNumber = mini_Calendar_getShowWeekNumber;
mini_Calendar.setShowWeekNumber = mini_Calendar_setShowWeekNumber;
mini_Calendar.getShowFooter = mini_Calendar_getShowFooter;
mini_Calendar.setShowFooter = mini_Calendar_setShowFooter;
mini_Calendar.getShowHeader = mini_Calendar_getShowHeader;
mini_Calendar.setShowHeader = mini_Calendar_setShowHeader;
mini_Calendar.within = mini_Calendar_within;
mini_Calendar.getDateEl = mini_Calendar_getDateEl;
mini_Calendar._initEvents = mini_Calendar__initEvents;
mini_Calendar.destroy = mini_Calendar_destroy;
mini_Calendar.focus = mini_Calendar_focus;
mini_Calendar._create = mini_Calendar__create;
mini_Calendar.getShortWeek = mini_Calendar_getShortWeek;
mini_Calendar.getFirstDateOfMonth = mini_Calendar_getFirstDateOfMonth;
mini_Calendar.isWeekend = mini_Calendar_isWeekend;
mini.regClass(mini.Calendar, "calendar");
mini.ListBox = function() {
    mini.ListBox.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.ListBox, mini.ListControl, {
    formField: true,
    columns: null,
    columnWidth: 80,
    showNullItem: false,
    nullItemText: "",
    showEmpty: false,
    emptyText: "",
    showCheckBox: false,
    showAllCheckBox: true,
    multiSelect: false,
    l1lO: "mini-listbox-item",
    o1Ol: "mini-listbox-item-hover",
    _llOO1O: "mini-listbox-item-selected",
    uiCls: "mini-listbox"
});
mini_ListBox = mini.ListBox.prototype;
mini_ListBox.getAttrs = mini_ListBox_getAttrs;
mini_ListBox.Ol11o = mini_ListBox_Ol11o;
mini_ListBox._doCheckState = mini_ListBox__doCheckState;
mini_ListBox.setValue = mini_ListBox_setValue;
mini_ListBox.__OnClick = mini_ListBox_Ol1o1;
mini_ListBox.l0ol1 = mini_ListBox_l0ol1;
mini_ListBox._OnDrawCell = mini_ListBox__OnDrawCell;
mini_ListBox.Oo01o0 = mini_ListBox_Oo01o0;
mini_ListBox.getNullItemText = mini_ListBox_getNullItemText;
mini_ListBox.setNullItemText = mini_ListBox_setNullItemText;
mini_ListBox.getShowNullItem = mini_ListBox_getShowNullItem;
mini_ListBox.setShowNullItem = mini_ListBox_setShowNullItem;
mini_ListBox.getShowAllCheckBox = mini_ListBox_getShowAllCheckBox;
mini_ListBox.setShowAllCheckBox = mini_ListBox_setShowAllCheckBox;
mini_ListBox.getShowCheckBox = mini_ListBox_getShowCheckBox;
mini_ListBox.setShowCheckBox = mini_ListBox_setShowCheckBox;
mini_ListBox.doLayout = mini_ListBox_doLayout;
mini_ListBox.doUpdate = mini_ListBox_doUpdate;
mini_ListBox.getColumns = mini_ListBox_getColumns;
mini_ListBox.setColumns = mini_ListBox_setColumns;
mini_ListBox.destroy = mini_ListBox_destroy;
mini_ListBox._initEvents = mini_ListBox__initEvents;
mini_ListBox._create = mini_ListBox__create;
mini.regClass(mini.ListBox, "listbox");
mini.CheckBoxList = function() {
    mini.CheckBoxList.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.CheckBoxList, mini.ListControl, {
    formField: true,
    _labelFieldCls: "mini-labelfield-checkboxlist",
    multiSelect: true,
    repeatItems: 0,
    repeatLayout: "none",
    repeatDirection: "horizontal",
    l1lO: "mini-checkboxlist-item",
    o1Ol: "mini-checkboxlist-item-hover",
    _llOO1O: "mini-checkboxlist-item-selected",
    ool1O: "mini-checkboxlist-table",
    OO0lO: "mini-checkboxlist-td",
    OloO0O: "checkbox",
    uiCls: "mini-checkboxlist"
});
mini_CheckBoxList = mini.CheckBoxList.prototype;
mini_CheckBoxList.getAttrs = mini_CheckBoxList_getAttrs;
mini_CheckBoxList.getRepeatDirection = mini_CheckBoxList_getRepeatDirection;
mini_CheckBoxList.setRepeatDirection = mini_CheckBoxList_setRepeatDirection;
mini_CheckBoxList.getRepeatLayout = mini_CheckBoxList_getRepeatLayout;
mini_CheckBoxList.setRepeatLayout = mini_CheckBoxList_setRepeatLayout;
mini_CheckBoxList.getRepeatItems = mini_CheckBoxList_getRepeatItems;
mini_CheckBoxList.setRepeatItems = mini_CheckBoxList_setRepeatItems;
mini_CheckBoxList.o1OO = mini_CheckBoxList_o1OO;
mini_CheckBoxList.olOO1O = mini_CheckBoxList_olOO1O;
mini_CheckBoxList.doUpdate = mini_CheckBoxList_doUpdate;
mini_CheckBoxList.O10OO1 = mini_CheckBoxList_O10OO1;
mini_CheckBoxList._create = mini_CheckBoxList__create;
mini.regClass(mini.CheckBoxList, "checkboxlist");
mini.RadioButtonList = function() {
    mini.RadioButtonList.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.RadioButtonList, mini.CheckBoxList, {
    multiSelect: false,
    l1lO: "mini-radiobuttonlist-item",
    o1Ol: "mini-radiobuttonlist-item-hover",
    _llOO1O: "mini-radiobuttonlist-item-selected",
    ool1O: "mini-radiobuttonlist-table",
    OO0lO: "mini-radiobuttonlist-td",
    OloO0O: "radio",
    uiCls: "mini-radiobuttonlist"
});
mini_RadioButtonList = mini.RadioButtonList.prototype;
mini.regClass(mini.RadioButtonList, "radiobuttonlist");
mini.TreeSelect = function() {
    this.data = [];
    mini.TreeSelect.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.TreeSelect, mini.PopupEdit, {
    valueFromSelect: false,
    text: "",
    value: "",
    autoCheckParent: false,
    expandOnLoad: false,
    valueField: "id",
    textField: "text",
    nodesField: "children",
    dataField: "",
    delimiter: ",",
    multiSelect: false,
    data: [],
    url: "",
    allowInput: false,
    showTreeIcon: false,
    showTreeLines: true,
    resultAsTree: false,
    parentField: "pid",
    checkRecursive: false,
    showFolderCheckBox: false,
    showRadioButton: false,
    popupHeight: 200,
    popupWidth: "100%",
    popupMaxHeight: 250,
    popupMinWidth: 100,
    uiCls: "mini-treeselect",
    expandOnPopup: false,
    virtualScroll: false,
    defaultRowHeight: 23,
    pinyinField: "tag",
    expandOnNodeClick: false,
    autoFilter: true,
    checkOnTextClick: false
});
mini_TreeSelect = mini.TreeSelect.prototype;
mini_TreeSelect.getAttrs = mini_TreeSelect_getAttrs;
mini_TreeSelect.getCheckOnTextClick = mini_TreeSelect_getCheckOnTextClick;
mini_TreeSelect.setCheckOnTextClick = mini_TreeSelect_setCheckOnTextClick;
mini_TreeSelect.getAutoFilter = mini_TreeSelect_getAutoFilter;
mini_TreeSelect.setAutoFilter = mini_TreeSelect_setAutoFilter;
mini_TreeSelect.getExpandOnNodeClick = mini_TreeSelect_getExpandOnNodeClick;
mini_TreeSelect.setExpandOnNodeClick = mini_TreeSelect_setExpandOnNodeClick;
mini_TreeSelect.setAjaxType = mini_TreeSelect_setAjaxType;
mini_TreeSelect.setAjaxData = mini_TreeSelect_setAjaxData;
mini_TreeSelect.getValueFromSelect = mini_TreeSelect_getValueFromSelect;
mini_TreeSelect.setValueFromSelect = mini_TreeSelect_setValueFromSelect;
mini_TreeSelect.getExpandOnLoad = mini_TreeSelect_getExpandOnLoad;
mini_TreeSelect.setExpandOnLoad = mini_TreeSelect_setExpandOnLoad;
mini_TreeSelect.getAutoCheckParent = mini_TreeSelect_getAutoCheckParent;
mini_TreeSelect.setAutoCheckParent = mini_TreeSelect_setAutoCheckParent;
mini_TreeSelect.getShowRadioButton = mini_TreeSelect_getShowRadioButton;
mini_TreeSelect.setShowRadioButton = mini_TreeSelect_setShowRadioButton;
mini_TreeSelect.getShowFolderCheckBox = mini_TreeSelect_getShowFolderCheckBox;
mini_TreeSelect.setShowFolderCheckBox = mini_TreeSelect_setShowFolderCheckBox;
mini_TreeSelect.getShowTreeLines = mini_TreeSelect_getShowTreeLines;
mini_TreeSelect.setShowTreeLines = mini_TreeSelect_setShowTreeLines;
mini_TreeSelect.getShowTreeIcon = mini_TreeSelect_getShowTreeIcon;
mini_TreeSelect.setShowTreeIcon = mini_TreeSelect_setShowTreeIcon;
mini_TreeSelect.getValueField = mini_TreeSelect_getValueField;
mini_TreeSelect.setValueField = mini_TreeSelect_setValueField;
mini_TreeSelect.getParentField = mini_TreeSelect_getParentField;
mini_TreeSelect.setParentField = mini_TreeSelect_setParentField;
mini_TreeSelect.getResultAsTree = mini_TreeSelect_getResultAsTree;
mini_TreeSelect.setResultAsTree = mini_TreeSelect_setResultAsTree;
mini_TreeSelect.getCheckRecursive = mini_TreeSelect_getCheckRecursive;
mini_TreeSelect.setCheckRecursive = mini_TreeSelect_setCheckRecursive;
mini_TreeSelect.l100O = mini_TreeSelect_l100O;
mini_TreeSelect.O10l1 = mini_TreeSelect_O10l1;
mini_TreeSelect.nodecheck = mini_TreeSelect_ooOO10;
mini_TreeSelect.nodeclick = mini_TreeSelect_l1l1;
mini_TreeSelect.getMultiSelect = mini_TreeSelect_getMultiSelect;
mini_TreeSelect.setMultiSelect = mini_TreeSelect_setMultiSelect;
mini_TreeSelect.setValue = mini_TreeSelect_setValue;
mini_TreeSelect.getValue = mini_TreeSelect_getValue;
mini_TreeSelect.getDataField = mini_TreeSelect_getDataField;
mini_TreeSelect.setDataField = mini_TreeSelect_setDataField;
mini_TreeSelect.getNodesField = mini_TreeSelect_getNodesField;
mini_TreeSelect.setNodesField = mini_TreeSelect_setNodesField;
mini_TreeSelect.getTextField = mini_TreeSelect_getTextField;
mini_TreeSelect.setTextField = mini_TreeSelect_setTextField;
mini_TreeSelect.getPinyinField = mini_TreeSelect_getPinyinField;
mini_TreeSelect.setPinyinField = mini_TreeSelect_setPinyinField;
mini_TreeSelect.getDefaultRowHeight = mini_TreeSelect_getDefaultRowHeight;
mini_TreeSelect.setDefaultRowHeight = mini_TreeSelect_setDefaultRowHeight;
mini_TreeSelect.getVirtualScroll = mini_TreeSelect_getVirtualScroll;
mini_TreeSelect.setVirtualScroll = mini_TreeSelect_setVirtualScroll;
mini_TreeSelect.getUrl = mini_TreeSelect_getUrl;
mini_TreeSelect.setUrl = mini_TreeSelect_setUrl;
mini_TreeSelect._getCheckedValue = mini_TreeSelect__getCheckedValue;
mini_TreeSelect.getData = mini_TreeSelect_getData;
mini_TreeSelect.setData = mini_TreeSelect_setData;
mini_TreeSelect._eval = mini_TreeSelect__eval;
mini_TreeSelect.load = mini_TreeSelect_load;
mini_TreeSelect.getList = mini_TreeSelect_getList;
mini_TreeSelect.loadList = mini_TreeSelect_loadList;
mini_TreeSelect.getAt = mini_TreeSelect_getAt;
mini_TreeSelect.indexOf = mini_TreeSelect_indexOf;
mini_TreeSelect.getItem = mini_TreeSelect_getItem;
mini_TreeSelect.hidepopup = mini_TreeSelect_oo11o;
mini_TreeSelect.getExpandOnPopup = mini_TreeSelect_getExpandOnPopup;
mini_TreeSelect.setExpandOnPopup = mini_TreeSelect_setExpandOnPopup;
mini_TreeSelect.showPopup = mini_TreeSelect_showPopup;
mini_TreeSelect.getChildNodes = mini_TreeSelect_getChildNodes;
mini_TreeSelect.getParentNode = mini_TreeSelect_getParentNode;
mini_TreeSelect.getSelectedNodes = mini_TreeSelect_getSelectedNodes;
mini_TreeSelect.getCheckedNodes = mini_TreeSelect_getCheckedNodes;
mini_TreeSelect.getSelectedNode = mini_TreeSelect_getSelectedNode;
mini_TreeSelect.findNodes = mini_TreeSelect_findNodes;
mini_TreeSelect.findItems = mini_TreeSelect_findItems;
mini_TreeSelect.collapse = mini_TreeSelect_l0Ooll;
mini_TreeSelect.expand = mini_TreeSelect_oo00ll;
mini_TreeSelect.beforenodeselect = mini_TreeSelect_beforenodeselect;
mini_TreeSelect.beforenodecheck = mini_TreeSelect_beforenodecheck;
mini_TreeSelect.drawnode = mini_TreeSelect__Ol0O1l;
mini_TreeSelect._createPopup = mini_TreeSelect__createPopup;
mini_TreeSelect.set = mini_TreeSelect_set;
mini.regClass(mini.TreeSelect, "TreeSelect");
mini.Spinner = function() {
    mini.Spinner.superclass.constructor.apply(this, arguments);
    this.setValue(this.minValue)
};
mini.extend(mini.Spinner, mini.ButtonEdit, {
    value: 0,
    minValue: 0,
    maxValue: 100,
    increment: 1,
    decimalPlaces: -1,
    changeOnMousewheel: true,
    allowLimitValue: true,
    allowLoopValue: false,
    allowNull: false,
    uiCls: "mini-spinner",
    format: "",
    ol0lo1: null
});
mini_Spinner = mini.Spinner.prototype;
mini_Spinner.getAttrs = mini_Spinner_getAttrs;
mini_Spinner.O00l10 = mini_Spinner_O00l10;
mini_Spinner.O1ol01 = mini_Spinner_O1ol01;
mini_Spinner.l1ll1 = mini_Spinner_l1ll1;
mini_Spinner.O10l1 = mini_Spinner_O10l1;
mini_Spinner.ll0Ol0 = mini_Spinner_ll0Ol0;
mini_Spinner.oooO = mini_Spinner_oooO;
mini_Spinner.O0l11 = mini_Spinner_O0l11;
mini_Spinner.getAllowLoopValue = mini_Spinner_getAllowLoopValue;
mini_Spinner.setAllowLoopValue = mini_Spinner_setAllowLoopValue;
mini_Spinner.getFormatValue = mini_Spinner_getFormatValue;
mini_Spinner.getFormat = mini_Spinner_getFormat;
mini_Spinner.setFormat = mini_Spinner_setFormat;
mini_Spinner.getAllowNull = mini_Spinner_getAllowNull;
mini_Spinner.setAllowNull = mini_Spinner_setAllowNull;
mini_Spinner.getAllowLimitValue = mini_Spinner_getAllowLimitValue;
mini_Spinner.setAllowLimitValue = mini_Spinner_setAllowLimitValue;
mini_Spinner.getChangeOnMousewheel = mini_Spinner_getChangeOnMousewheel;
mini_Spinner.setChangeOnMousewheel = mini_Spinner_setChangeOnMousewheel;
mini_Spinner.getDecimalPlaces = mini_Spinner_getDecimalPlaces;
mini_Spinner.setDecimalPlaces = mini_Spinner_setDecimalPlaces;
mini_Spinner.getIncrement = mini_Spinner_getIncrement;
mini_Spinner.setIncrement = mini_Spinner_setIncrement;
mini_Spinner.getMinValue = mini_Spinner_getMinValue;
mini_Spinner.setMinValue = mini_Spinner_setMinValue;
mini_Spinner.getMaxValue = mini_Spinner_getMaxValue;
mini_Spinner.setMaxValue = mini_Spinner_setMaxValue;
mini_Spinner.setValue = mini_Spinner_setValue;
mini_Spinner.getFormValue = mini_Spinner_getFormValue;
mini_Spinner.o10O0 = mini_Spinner_o10O0;
mini_Spinner._initEvents = mini_Spinner__initEvents;
mini_Spinner.loOOoOHtml = mini_Spinner_loOOoOHtml;
mini_Spinner.set = mini_Spinner_set;
mini.regClass(mini.Spinner, "spinner");
mini.TimeSpinner = function() {
    mini.TimeSpinner.superclass.constructor.apply(this, arguments);
    this.setValue("00:00:00")
};
mini.extend(mini.TimeSpinner, mini.ButtonEdit, {
    value: null,
    format: "H:mm:ss",
    uiCls: "mini-timespinner",
    ol0lo1: null
});
mini_TimeSpinner = mini.TimeSpinner.prototype;
mini_TimeSpinner.getAttrs = mini_TimeSpinner_getAttrs;
mini_TimeSpinner.O00l10 = mini_TimeSpinner_O00l10;
mini_TimeSpinner.O1ol01 = mini_TimeSpinner_O1ol01;
mini_TimeSpinner.ll0Ol0 = mini_TimeSpinner_ll0Ol0;
mini_TimeSpinner.oooO = mini_TimeSpinner_oooO;
mini_TimeSpinner.O0l11 = mini_TimeSpinner_O0l11;
mini_TimeSpinner.oo11ll = mini_TimeSpinner_oo11ll;
mini_TimeSpinner.getFormattedValue = mini_TimeSpinner_getFormattedValue;
mini_TimeSpinner.getFormValue = mini_TimeSpinner_getFormValue;
mini_TimeSpinner.getValue = mini_TimeSpinner_getValue;
mini_TimeSpinner.setValue = mini_TimeSpinner_setValue;
mini_TimeSpinner.getFormat = mini_TimeSpinner_getFormat;
mini_TimeSpinner.setFormat = mini_TimeSpinner_setFormat;
mini_TimeSpinner._initEvents = mini_TimeSpinner__initEvents;
mini_TimeSpinner.loOOoOHtml = mini_TimeSpinner_loOOoOHtml;
mini.regClass(mini.TimeSpinner, "timespinner");
mini.HtmlFile = function() {
    mini.HtmlFile.superclass.constructor.apply(this, arguments);
    this.on("validation", this.O0OO, this)
};
mini.extend(mini.HtmlFile, mini.ButtonEdit, {
    buttonText: "\u6d4f\u89c8...",
    _buttonWidth: 56,
    limitType: "",
    limitTypeErrorText: "\u4e0a\u4f20\u6587\u4ef6\u683c\u5f0f\u4e3a\uff1a",
    allowInput: false,
    readOnly: true,
    oolO1: 0,
    uiCls: "mini-htmlfile"
});
mini_HtmlFile = mini.HtmlFile.prototype;
mini_HtmlFile.getAttrs = mini_HtmlFile_getAttrs;
mini_HtmlFile.getLimitType = mini_HtmlFile_getLimitType;
mini_HtmlFile.setLimitType = mini_HtmlFile_setLimitType;
mini_HtmlFile.getButtonText = mini_HtmlFile_getButtonText;
mini_HtmlFile.setButtonText = mini_HtmlFile_setButtonText;
mini_HtmlFile.clear = mini_HtmlFile_clear;
mini_HtmlFile.getValue = mini_HtmlFile_getValue;
mini_HtmlFile.setName = mini_HtmlFile_setName;
mini_HtmlFile.O0OO = mini_HtmlFile_O0OO;
mini_HtmlFile.__mousemove = mini_HtmlFile_ol1o0;
mini_HtmlFile.o11lO = mini_HtmlFile_o11lO;
mini_HtmlFile.loOOoOHtml = mini_HtmlFile_loOOoOHtml;
mini_HtmlFile.destroy = mini_HtmlFile_destroy;
mini_HtmlFile._create = mini_HtmlFile__create;
mini.regClass(mini.HtmlFile, "htmlfile");
mini.FilterEdit = function() {
    mini.FilterEdit.superclass.constructor.apply(this, arguments);
    this.on("buttonclick", this.ooOl, this);
    this.on("closeclick", this.__OnCloseClick, this)
};
mini.extend(mini.FilterEdit, mini.ButtonEdit, {
    uiCls: "mini-filteredit",
    _deferSetText: false,
    value: "",
    filterValue: "",
    filterData: null,
    _getMenu: function() {
        var $ = this;
        if (!this.menu) {
            this.menu = new mini.Menu();
            this.menu.on("itemclick", function(_) {
                $.setFilterValue(_.item.value);
                $.Ol11o()
            })
        }
        return this.menu
    },
    ooOl: function(B) {
        var A = this._getMenu(),
            _ = (this.filterData || []).clone();
        A.setItems(_);
        var $ = this.findItem(this.filterValue);
        A.setSelectedItem($);
        A.showAtEl(this._buttonsEl, {})
    },
    __OnCloseClick: function($) {
        this.setText("");
        this.setValue("");
        this.setFilterValue("");
        this.Ol11o()
    },
    findItem: function(A) {
        var D = this._getMenu(),
            B = D.getItems();
        for (var _ = 0, C = B.length; _ < C; _++) {
            var $ = B[_];
            if ($.value == A) return $
        }
        return null
    },
    setValue: function($) {
        if ($ === null || $ === undefined) $ = "";
        $ = String($);
        this.value = $;
        this.ll10l.value = this._textEl.value = $
    },
    getFilterData: function() {
        return this.filterData || []
    },
    setFilterData: function($) {
        if (!mini.isArray($)) $ = [];
        this.filterData = $
    },
    getFilterValue: function() {
        return this.filterValue || ""
    },
    setFilterValue: function($) {
        if ($ === null || $ === undefined) $ = "";
        this.filterValue = $
    },
    getAttrs: function(el) {
        var attrs = mini.FilterEdit.superclass.getAttrs.call(this, el),
            jq = jQuery(el);
        mini._ParseString(el, attrs, ["value", "text", "filterValue", "filterData"]);
        if (typeof attrs.filterData == "string") {
            try {
                attrs.filterData = eval("(" + attrs.filterData + ")")
            } catch (e) {
                attrs.filterData = mini._getMap(attrs.filterData, window)
            }
        }
        return attrs
    }
});
mini.regClass(mini.FilterEdit, "filteredit");
mini.Lookup = function() {
    this.data = [];
    mini.Lookup.superclass.constructor.apply(this, arguments);
    mini.on(this._textEl, "mouseup", this.__mouseup, this);
    this.on("showpopup", this.__OnShowPopup, this)
};
mini.extend(mini.Lookup, mini.PopupEdit, {
    allowInput: true,
    valueField: "id",
    textField: "text",
    delimiter: ",",
    multiSelect: false,
    data: [],
    grid: null,
    _destroyPopup: false,
    uiCls: "mini-lookup"
});
mini_Lookup = mini.Lookup.prototype;
mini_Lookup.getAttrs = mini_Lookup_getAttrs;
mini_Lookup.ll01 = mini_Lookup_ll01;
mini_Lookup.__mouseup = mini_Lookup_oOlo0;
mini_Lookup.O10l1 = mini_Lookup_O10l1;
mini_Lookup.doUpdate = mini_Lookup_doUpdate;
mini_Lookup.__OnShowPopup = mini_Lookup___OnShowPopup;
mini_Lookup.o0OO = mini_Lookup_o0OO;
mini_Lookup.__OnGridRowClickChanged = mini_Lookup___OnGridRowClickChanged;
mini_Lookup.setText = mini_Lookup_setText;
mini_Lookup.setValue = mini_Lookup_setValue;
mini_Lookup.o01lo = mini_Lookup_o01lo;
mini_Lookup.OllooO = mini_Lookup_OllooO;
mini_Lookup.ll0l0 = mini_Lookup_ll0l0;
mini_Lookup.getItemText = mini_Lookup_getItemText;
mini_Lookup.getItemValue = mini_Lookup_getItemValue;
mini_Lookup.deselectAll = mini_Lookup_deselectAll;
mini_Lookup.getTextField = mini_Lookup_getTextField;
mini_Lookup.setTextField = mini_Lookup_setTextField;
mini_Lookup.getValueField = mini_Lookup_getValueField;
mini_Lookup.setValueField = mini_Lookup_setValueField;
mini_Lookup.getGrid = mini_Lookup_getGrid;
mini_Lookup.setGrid = mini_Lookup_setGrid;
mini_Lookup.setMultiSelect = mini_Lookup_setMultiSelect;
mini_Lookup.destroy = mini_Lookup_destroy;
mini.regClass(mini.Lookup, "lookup");
mini.TextBoxList = function($) {
    mini.TextBoxList.superclass.constructor.call(this, null);
    this.data = [];
    this.selecteds = [];
    this.doUpdate();
    if ($) mini.applyTo.call(this, $)
};
mini.extend(mini.TextBoxList, mini.ValidatorBase, {
    formField: true,
    remote: true,
    value: "",
    text: "",
    valueField: "id",
    textField: "text",
    selecteds: null,
    data: null,
    url: "",
    delay: 150,
    allowInput: true,
    editIndex: 0,
    l0l0l1: "mini-textboxlist-focus",
    OOOll: "mini-textboxlist-item-hover",
    oOoo: "mini-textboxlist-item-selected",
    l10OOl: "mini-textboxlist-close-hover",
    textName: "",
    uiCls: "mini-textboxlist",
    errorIconEl: null,
    valueFromSelect: true,
    ajaxDataType: "text",
    ajaxContentType: "application/x-www-form-urlencoded; charset=UTF-8",
    emptyText: "No Result",
    loadingText: "Loading...",
    errorText: "Error",
    popupLoadingText: "<span class='mini-textboxlist-popup-loading'>Loading...</span>",
    popupErrorText: "<span class='mini-textboxlist-popup-error'>Error</span>",
    popupEmptyText: "<span class='mini-textboxlist-popup-noresult'>No Result</span>",
    isShowPopup: false,
    popupHeight: "",
    popupMinHeight: 30,
    popupMaxHeight: 150,
    searchField: "key"
});
mini_TextBoxList = mini.TextBoxList.prototype;
mini_TextBoxList.getAttrs = mini_TextBoxList_getAttrs;
mini_TextBoxList.getSearchField = mini_TextBoxList_getSearchField;
mini_TextBoxList.setSearchField = mini_TextBoxList_setSearchField;
mini_TextBoxList.blur = mini_TextBoxList_blur;
mini_TextBoxList.focus = mini_TextBoxList_focus;
mini_TextBoxList.O10l1 = mini_TextBoxList_O10l1;
mini_TextBoxList.__doSelectValue = mini_TextBoxList___doSelectValue;
mini_TextBoxList.__keydown = mini_TextBoxList_l001l;
mini_TextBoxList.__OnClick = mini_TextBoxList_Ol1o1;
mini_TextBoxList.__OnMouseOut = mini_TextBoxList_O11O11;
mini_TextBoxList.__mousemove = mini_TextBoxList_ol1o0;
mini_TextBoxList.hidePopup = mini_TextBoxList_hidePopup;
mini_TextBoxList.showPopup = mini_TextBoxList_showPopup;
mini_TextBoxList._createPopup = mini_TextBoxList__createPopup;
mini_TextBoxList.getEmptyText = mini_TextBoxList_getEmptyText;
mini_TextBoxList.setEmptyText = mini_TextBoxList_setEmptyText;
mini_TextBoxList.getEmptyText = mini_TextBoxList_getEmptyText;
mini_TextBoxList.setEmptyText = mini_TextBoxList_setEmptyText;
mini_TextBoxList.getEmptyText = mini_TextBoxList_getEmptyText;
mini_TextBoxList.setEmptyText = mini_TextBoxList_setEmptyText;
mini_TextBoxList.within = mini_TextBoxList_within;
mini_TextBoxList.O0loo = mini_TextBoxList_O0loo;
mini_TextBoxList.l100O = mini_TextBoxList_l100O;
mini_TextBoxList._getFilterLocalData = mini_TextBoxList__getFilterLocalData;
mini_TextBoxList._getSelectedMap = mini_TextBoxList__getSelectedMap;
mini_TextBoxList.oO0Olo = mini_TextBoxList_oO0Olo;
mini_TextBoxList.O1oO = mini_TextBoxList_O1oO;
mini_TextBoxList.doQuery = mini_TextBoxList_doQuery;
mini_TextBoxList.getValueFromSelect = mini_TextBoxList_getValueFromSelect;
mini_TextBoxList.setValueFromSelect = mini_TextBoxList_setValueFromSelect;
mini_TextBoxList.getPopupMaxHeight = mini_TextBoxList_getPopupMaxHeight;
mini_TextBoxList.setPopupMaxHeight = mini_TextBoxList_setPopupMaxHeight;
mini_TextBoxList.getPopupMinHeight = mini_TextBoxList_getPopupMinHeight;
mini_TextBoxList.setPopupMinHeight = mini_TextBoxList_setPopupMinHeight;
mini_TextBoxList.getPopupHeight = mini_TextBoxList_getPopupHeight;
mini_TextBoxList.setPopupHeight = mini_TextBoxList_setPopupHeight;
mini_TextBoxList.getUrl = mini_TextBoxList_getUrl;
mini_TextBoxList.setUrl = mini_TextBoxList_setUrl;
mini_TextBoxList.getAllowInput = mini_TextBoxList_getAllowInput;
mini_TextBoxList.setAllowInput = mini_TextBoxList_setAllowInput;
mini_TextBoxList.getTextField = mini_TextBoxList_getTextField;
mini_TextBoxList.setTextField = mini_TextBoxList_setTextField;
mini_TextBoxList.getValueField = mini_TextBoxList_getValueField;
mini_TextBoxList.setValueField = mini_TextBoxList_setValueField;
mini_TextBoxList.setText = mini_TextBoxList_setText;
mini_TextBoxList.setValue = mini_TextBoxList_setValue;
mini_TextBoxList.setName = mini_TextBoxList_setName;
mini_TextBoxList.getFormValue = mini_TextBoxList_getFormValue;
mini_TextBoxList.getValue = mini_TextBoxList_getValue;
mini_TextBoxList.getText = mini_TextBoxList_getText;
mini_TextBoxList.getInputText = mini_TextBoxList_getInputText;
mini_TextBoxList._createSelecteds = mini_TextBoxList__createSelecteds;
mini_TextBoxList.removeItem = mini_TextBoxList_removeItem;
mini_TextBoxList.insertItem = mini_TextBoxList_insertItem;
mini_TextBoxList.loo10 = mini_TextBoxList_loo10;
mini_TextBoxList._doInsertInputValue = mini_TextBoxList__doInsertInputValue;
mini_TextBoxList.select = mini_TextBoxList_select;
mini_TextBoxList.showInput = mini_TextBoxList_showInput;
mini_TextBoxList.blurItem = mini_TextBoxList_blurItem;
mini_TextBoxList.hoverItem = mini_TextBoxList_hoverItem;
mini_TextBoxList.getItemEl = mini_TextBoxList_getItemEl;
mini_TextBoxList.getItem = mini_TextBoxList_getItem;
mini_TextBoxList.o11o1o = mini_TextBoxList_o11o1o;
mini_TextBoxList.doUpdate = mini_TextBoxList_doUpdate;
mini_TextBoxList.doReadOnly = mini_TextBoxList_doReadOnly;
mini_TextBoxList.doLayout = mini_TextBoxList_doLayout;
mini_TextBoxList.Olll1 = mini_TextBoxList_Olll1;
mini_TextBoxList.getErrorIconEl = mini_TextBoxList_getErrorIconEl;
mini_TextBoxList.oll01 = mini_TextBoxList_oll01;
mini_TextBoxList._initEvents = mini_TextBoxList__initEvents;
mini_TextBoxList.destroy = mini_TextBoxList_destroy;
mini_TextBoxList._create = mini_TextBoxList__create;
mini_TextBoxList.setRemote = mini_TextBoxList_setRemote;
mini_TextBoxList.getRemote = mini_TextBoxList_getRemote;
mini_TextBoxList.setData = mini_TextBoxList_setData;
mini_TextBoxList.getData = mini_TextBoxList_getData;
mini_TextBoxList.getTextName = mini_TextBoxList_getTextName;
mini_TextBoxList.setTextName = mini_TextBoxList_setTextName;
mini.regClass(mini.TextBoxList, "textboxlist");
mini.AutoComplete = function() {
    mini.AutoComplete.superclass.constructor.apply(this, arguments);
    var $ = this;
    $.o1lo0l = null;
    this._textEl.onfocus = function() {
        $.lO1o = $._textEl.value;
        $.o1lo0l = setInterval(function() {
            if ($.lO1o != $._textEl.value) {
                $.l0111l();
                $.lO1o = $._textEl.value;
                if ($._textEl.value == "" && $.value != "") {
                    $.setValue("");
                    $.Ol11o()
                }
            }
        }, 10)
    };
    this._textEl.onblur = function() {
        clearInterval($.o1lo0l);
        if (!$.isShowPopup())
            if ($.lO1o != $._textEl.value)
                if ($._textEl.value == "" && $.value != "") {
                    $.setValue("");
                    $.Ol11o()
                }
    };
    this._buttonEl.style.display = "none";
    this._doInputLayout()
};
mini.extend(mini.AutoComplete, mini.ComboBox, {
    remote: true,
    url: "",
    allowInput: true,
    delay: 150,
    showButton: false,
    searchField: "key",
    minChars: 0,
    _buttonWidth: 0,
    uiCls: "mini-autocomplete",
    popupEmptyText: "No Result",
    loadingText: "Loading...",
    errorText: "Error",
    enterQuery: false
});
mini_AutoComplete = mini.AutoComplete.prototype;
mini_AutoComplete.getAttrs = mini_AutoComplete_getAttrs;
mini_AutoComplete.getEnterQuery = mini_AutoComplete_getEnterQuery;
mini_AutoComplete.setEnterQuery = mini_AutoComplete_setEnterQuery;
mini_AutoComplete.l100O = mini_AutoComplete_l100O;
mini_AutoComplete.l0111l = mini_AutoComplete_l0111l;
mini_AutoComplete.doQuery = mini_AutoComplete_doQuery;
mini_AutoComplete._keydownQuery = mini_AutoComplete__keydownQuery;
mini_AutoComplete.O10l1 = mini_AutoComplete_O10l1;
mini_AutoComplete.showPopup = mini_AutoComplete_showPopup;
mini_AutoComplete.getPopupErrorHtml = mini_AutoComplete_getPopupErrorHtml;
mini_AutoComplete.getPopupLoadingHtml = mini_AutoComplete_getPopupLoadingHtml;
mini_AutoComplete.getPopupEmptyHtml = mini_AutoComplete_getPopupEmptyHtml;
mini_AutoComplete.getErrorText = mini_AutoComplete_getErrorText;
mini_AutoComplete.setErrorText = mini_AutoComplete_setErrorText;
mini_AutoComplete.getLoadingText = mini_AutoComplete_getLoadingText;
mini_AutoComplete.setLoadingText = mini_AutoComplete_setLoadingText;
mini_AutoComplete.getPopupEmptyText = mini_AutoComplete_getPopupEmptyText;
mini_AutoComplete.setPopupEmptyText = mini_AutoComplete_setPopupEmptyText;
mini_AutoComplete.getSearchField = mini_AutoComplete_getSearchField;
mini_AutoComplete.setSearchField = mini_AutoComplete_setSearchField;
mini_AutoComplete.getMinChars = mini_AutoComplete_getMinChars;
mini_AutoComplete.setMinChars = mini_AutoComplete_setMinChars;
mini_AutoComplete.setText = mini_AutoComplete_setText;
mini_AutoComplete.setValue = mini_AutoComplete_setValue;
mini_AutoComplete.setUrl = mini_AutoComplete_setUrl;
mini_AutoComplete.setRemote = mini_AutoComplete_setRemote;
mini_AutoComplete.getRemote = mini_AutoComplete_getRemote;
mini_AutoComplete._initInput = mini_AutoComplete__initInput;
mini.regClass(mini.AutoComplete, "autocomplete");
mini.ToolTip = function() {
    mini.ToolTip.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.ToolTip, mini.Control, {
    selector: "[title]",
    placement: "bottom",
    trigger: "hover focus",
    delay: 200,
    uiCls: "mini-tooltip",
    _create: function() {
        this.el = jQuery("<div class=\"mini-tooltip\"><div class=\"mini-tooltip-arrow\"></div><div class=\"mini-tooltip-inner\"></div></div>")[0];
        this.$element = jQuery(this.el);
        this.$element.appendTo(document.body)
    },
    _initEvents: function() {},
    _bindTooltip: function() {
        var F = jQuery(document),
            B = this.selector,
            C = "tooltip";
        F.unbind("." + C);
        var E = this.trigger.split(" ");
        for (var A = E.length; A--;) {
            var $ = E[A];
            if ($ == "click") F.on("click." + C, B, jQuery.proxy(this._toggle, this));
            else if ($ != "manual") {
                var _ = $ == "hover" ? "mouseenter" : "focus",
                    D = $ == "hover" ? "mouseleave" : "blur";
                F.on(_ + "." + C, B, jQuery.proxy(this._enter, this));
                F.on(D + "." + C, B, jQuery.proxy(this._leave, this))
            }
        }
    },
    setSelector: function($) {
        this.selector = $;
        this._bindTooltip()
    },
    getSelector: function() {
        return this.selector
    },
    setPlacement: function($) {
        this.placement = $
    },
    getPlacement: function() {
        return this.placement
    },
    setTrigger: function($) {
        this.trigger = $;
        this._bindTooltip()
    },
    getTrigger: function() {
        return this.trigger
    },
    openTimer: null,
    _enter: function(_) {
        var $ = this;
        clearTimeout(this.openTimer);
        this.openTimer = setTimeout(function() {
            $.openTimer = null;
            $.open(_.currentTarget)
        }, $.delay)
    },
    _leave: function($) {
        clearTimeout(this.openTimer);
        this.close()
    },
    _toggle: function($) {
        if (this._getTip().css("display") == "none") this.enter($);
        else this.leave($)
    },
    open: function($) {
        var $ = jQuery($)[0] || this.target,
            C = jQuery($),
            _ = this.getContent($),
            B = {
                element: $,
                content: _,
                cancel: !_
            };
        this.fire("beforeopen", B);
        if (B.cancel) return;
        this.$element.show();
        this._target = $;
        try {
            this.setContent(B.content)
        } catch (A) {}
        this.fire("open", {
            element: $
        })
    },
    close: function() {
        this._target = null;
        this.$element.hide()
    },
    showLoading: function() {
        this.setContent("<div class=\"mini-tooltip-loading\"></div>")
    },
    setContent: function($) {
        this.$element.children(".mini-tooltip-inner").html($ || "&nbsp;");
        this.applyPlacement()
    },
    getContent: function($) {
        var _ = $.title;
        if (_) jQuery($).attr("data-tooltip", _).attr("title", "");
        if (!_) _ = jQuery($).attr("data-tooltip");
        return _
    },
    applyPlacement: function() {
        if (!this._target) return;
        if (this.$element.css("display") == "none") return;
        var E = this._target,
            M = jQuery(E),
            G = M.attr("data-placement") || this.placement,
            F = this.$element;
        if (!E || !F[0]) return;
        F.show().css({
            left: "-2000px",
            top: "-2000px"
        });

        function H($) {
            F.removeClass("mini-tooltip-left mini-tooltip-top mini-tooltip-right mini-tooltip-bottom mini-tooltip-bottomleft mini-tooltip-topleft mini-tooltip-bottomright mini-tooltip-topright").addClass("mini-tooltip-" + $)
        }

        function _($) {
            F.offset($)
        }
        var D = mini.getBox(E),
            K = mini.getViewportBox(),
            I = D.top - K.top,
            A = K.bottom - D.bottom;
        H(G);
        var L = mini.getBox(F[0]),
            J = mini.getCalculatedOffset(G, D, L.width, L.height);
        if (G == "left");
        else if (G == "right");
        else if (G == "top");
        else if (G == "bottom");
        else if (G == "bottomleft" && I > A) {
            if (J.top + L.height > K.bottom) G = "topleft"
        } else if (G == "topleft");
        H(G);
        J = mini.getCalculatedOffset(G, D, L.width, L.height);
        if (G == "right" || G == "left") {
            var B = $(F).children(".mini-tooltip-arrow");
            B.css("top", "");

            function C() {
                var $ = D.top + D.height / 2 - B.height() / 2,
                    _ = $ - J.top;
                B.css("top", _)
            }
            K = mini.getViewportBox();
            if (J.top < K.y) {
                J.top = K.y;
                C()
            } else if (J.top + L.height > K.bottom) {
                J.top = K.bottom - L.height;
                C()
            }
        }
        _(J)
    },
    getAttrs: function($) {
        var _ = mini.ToolTip.superclass.getAttrs.call(this, $);
        mini._ParseString($, _, ["selector", "placement", "onbeforeopen", "onopen", "onclose"]);
        return _
    }
});
mini.regClass(mini.ToolTip, "tooltip");
mini.getCalculatedOffset = function(B, _, $, A) {
    if (B == "bottom") return {
        top: _.top + _.height,
        left: _.left + _.width / 2 - $ / 2
    };
    if (B == "top") return {
        top: _.top - A,
        left: _.left + _.width / 2 - $ / 2
    };
    if (B == "left") return {
        top: _.top + _.height / 2 - A / 2,
        left: _.left - $
    };
    if (B == "bottomleft") return {
        top: _.top + _.height,
        left: _.left
    };
    if (B == "bottomright") return {
        top: _.top + _.height,
        left: _.left + _.width - $
    };
    if (B == "topleft") return {
        top: _.top - A,
        left: _.left
    };
    if (B == "topright") return {
        top: _.top - A,
        left: _.left + _.width - $
    };
    return {
        top: _.top + _.height / 2 - A / 2,
        left: _.left + _.width
    }
};
mini.FileUpload = function($) {
    this.postParam = {};
    mini.FileUpload.superclass.constructor.call(this, $);
    this.on("validation", this.O0OO, this)
};
mini.extend(mini.FileUpload, mini.ButtonEdit, {
    buttonText: "\u6d4f\u89c8...",
    _buttonWidth: 56,
    limitTypeErrorText: "\u4e0a\u4f20\u6587\u4ef6\u683c\u5f0f\u4e3a\uff1a",
    readOnly: true,
    oolO1: 0,
    limitSize: "",
    limitType: "",
    typesDescription: "\u4e0a\u4f20\u6587\u4ef6\u683c\u5f0f",
    uploadLimit: 0,
    queueLimit: "",
    flashUrl: "",
    uploadUrl: "",
    showUploadProgress: true,
    postParam: null,
    uploadOnSelect: false,
    uiCls: "mini-fileupload"
});
mini_FileUpload = mini.FileUpload.prototype;
mini_FileUpload.getAttrs = mini_FileUpload_getAttrs;
mini_FileUpload.__fileError = mini_FileUpload___fileError;
mini_FileUpload.__on_upload_complete = mini_FileUpload___on_upload_complete;
mini_FileUpload.__on_upload_error = mini_FileUpload___on_upload_error;
mini_FileUpload.__on_upload_success = mini_FileUpload___on_upload_success;
mini_FileUpload.__on_file_queued = mini_FileUpload___on_file_queued;
mini_FileUpload.__on_file_queued_error = mini_FileUpload___on_file_queued_error;
mini_FileUpload.__on_upload_progress = mini_FileUpload___on_upload_progress;
mini_FileUpload.clear = mini_FileUpload_clear;
mini_FileUpload.getShowUploadProgress = mini_FileUpload_getShowUploadProgress;
mini_FileUpload.setShowUploadProgress = mini_FileUpload_setShowUploadProgress;
mini_FileUpload.startUpload = mini_FileUpload_startUpload;
mini_FileUpload.setName = mini_FileUpload_setName;
mini_FileUpload.getUploadUrl = mini_FileUpload_getUploadUrl;
mini_FileUpload.setUploadUrl = mini_FileUpload_setUploadUrl;
mini_FileUpload.setFlashUrl = mini_FileUpload_setFlashUrl;
mini_FileUpload.setQueueLimit = mini_FileUpload_setQueueLimit;
mini_FileUpload.setUploadLimit = mini_FileUpload_setUploadLimit;
mini_FileUpload.getButtonText = mini_FileUpload_getButtonText;
mini_FileUpload.setButtonText = mini_FileUpload_setButtonText;
mini_FileUpload.getTypesDescription = mini_FileUpload_getTypesDescription;
mini_FileUpload.setTypesDescription = mini_FileUpload_setTypesDescription;
mini_FileUpload.getLimitType = mini_FileUpload_getLimitType;
mini_FileUpload.setLimitType = mini_FileUpload_setLimitType;
mini_FileUpload.getPostParam = mini_FileUpload_getPostParam;
mini_FileUpload.setPostParam = mini_FileUpload_setPostParam;
mini_FileUpload.addPostParam = mini_FileUpload_addPostParam;
mini_FileUpload.__mousemove = mini_FileUpload_ol1o0;
mini_FileUpload.destroy = mini_FileUpload_destroy;
mini_FileUpload.loOOoOHtml = mini_FileUpload_loOOoOHtml;
mini_FileUpload._create = mini_FileUpload__create;
mini.regClass(mini.FileUpload, "fileupload");
mini.ProgressBar = function() {
    mini.ProgressBar.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.ProgressBar, mini.Control, {
    formField: true,
    uiCls: "mini-progressbar",
    showText: false,
    textAlign: "center",
    text: "",
    format: "{0}%",
    value: 0,
    set: function(_) {
        if (typeof _ == "string") return this;
        var $ = _.value;
        delete _.value;
        mini.ProgressBar.superclass.set.call(this, _);
        if (!mini.isNull($)) this.setValue($);
        return this
    },
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "mini-progressbar";
        var $ = "<div class=\"mini-progressbar-border\">" + "<div class=\"mini-progressbar-bar\"></div>" + "<div class=\"mini-progressbar-text\"></div>" + "</div>";
        this.el.innerHTML = $;
        this._borderEl = this.el.firstChild;
        this._barEl = this._borderEl.firstChild;
        this._textEl = this._borderEl.lastChild
    },
    setText: function($) {
        this.text = $;
        this._textEl.innerHTML = $
    },
    setShowText: function($) {
        this.showText = $;
        this._textEl.style.display = $ ? "" : "none"
    },
    getShowText: function() {
        return this.showText
    },
    setTextAlign: function($) {
        this.textAlign = $;
        this._textEl.style.textAlign = $
    },
    getTextAlign: function() {
        return this.textAlign
    },
    setValue: function($) {
        $ = parseFloat($);
        if (isNaN($)) $ = 0;
        if ($ < 0) $ = 0;
        if ($ > 100) $ = 100;
        this.value = $;
        this._barEl.style.width = $ + "%";
        var _ = String.format(this.format, $);
        this.setText(_)
    },
    getValue: function() {
        return this.value
    },
    getAttrs: function($) {
        var _ = mini.ProgressBar.superclass.getAttrs.call(this, $);
        mini._ParseString($, _, ["text", "format", "textAlign"]);
        mini._ParseBool($, _, ["showText"]);
        return _
    }
});
mini.regClass(mini.ProgressBar, "progressbar");
mini.Form = function($) {
    this.el = mini.byId($);
    if (!this.el) throw new Error("form element not null");
    mini.Form.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.Form, mini.Component, {
    el: null,
    getFields: function() {
        if (!this.el) return [];
        var $ = mini.findControls(function($) {
            if (!$.el || $.formField != true) return false;
            if (Oolo(this.el, $.el)) return true;
            return false
        }, this);
        return $
    },
    getFieldsMap: function() {
        var B = this.getFields(),
            A = {};
        for (var $ = 0, C = B.length; $ < C; $++) {
            var _ = B[$];
            if (_.name) A[_.name] = _
        }
        return A
    },
    getField: function($) {
        if (!this.el) return null;
        return mini.getbyName($, this.el)
    },
    getData: function(B, F) {
        if (mini.isNull(F)) F = true;
        var A = B ? "getFormValue" : "getValue",
            $ = this.getFields(),
            D = {};
        for (var _ = 0, E = $.length; _ < E; _++) {
            var C = $[_],
                G = C[A];
            if (!G) continue;
            if (C.name)
                if (F == true) mini._setMap(C.name, G.call(C), D);
                else D[C.name] = G.call(C);
            if (C.textName && C.getText)
                if (F == true) mini._setMap(C.textName, C.getText(), D);
                else D[C.textName] = C.getText()
        }
        return D
    },
    setData: function(F, A, C) {
        if (mini.isNull(C)) C = true;
        if (typeof F != "object") F = {};
        var B = this.getFieldsMap();
        for (var D in B) {
            var _ = B[D];
            if (!_) continue;
            if (_.setValue) {
                var E = F[D];
                if (C == true) E = mini._getMap(D, F);
                if (E === undefined && A === false) continue;
                if (E === null) E = "";
                _.setValue(E)
            }
            if (_.setText && _.textName) {
                var $ = F[_.textName];
                if (C == true) $ = mini._getMap(_.textName, F);
                if (mini.isNull($)) $ = "";
                _.setText($)
            }
        }
    },
    reset: function() {
        var $ = this.getFields();
        for (var _ = 0, C = $.length; _ < C; _++) {
            var B = $[_];
            if (!B.setValue) continue;
            if (B.setText && B._clearText !== false) {
                var A = B.defaultText;
                if (mini.isNull(A)) A = "";
                B.setText(A)
            }
            B.setValue(B.defaultValue);
            if (B.clear) B.clear()
        }
        this.setIsValid(true)
    },
    clear: function() {
        var $ = this.getFields();
        for (var _ = 0, B = $.length; _ < B; _++) {
            var A = $[_];
            if (!A.setValue) continue;
            if (A.setText && A._clearText !== false) A.setText("");
            A.setValue("");
            if (A.clear) A.clear()
        }
        this.setIsValid(true)
    },
    getValidateFields: function(C) {
        function A($) {
            return $.isDisplay(function($) {
                if (mini.hasClass($, "mini-tabs-body")) return true
            })
        }
        var D = [],
            $ = this.getFields();
        for (var _ = 0, E = $.length; _ < E; _++) {
            var B = $[_];
            if (!B.validate || !B.isDisplay) continue;
            if (A(B))
                if (B.enabled || C) D.push(B)
        }
        return D
    },
    validate: function(C, D) {
        var $ = this.getValidateFields(D);
        for (var _ = 0, E = $.length; _ < E; _++) {
            var A = $[_],
                B = A.validate();
            if (B == false && C === false) break
        }
        return this.isValid()
    },
    isValid: function() {
        var $ = this.getValidateFields();
        for (var _ = 0, B = $.length; _ < B; _++) {
            var A = $[_];
            if (A.isValid() == false) return false
        }
        return true
    },
    setIsValid: function(B) {
        var $ = this.getFields();
        for (var _ = 0, C = $.length; _ < C; _++) {
            var A = $[_];
            if (!A.setIsValid) continue;
            A.setIsValid(B)
        }
    },
    getErrorTexts: function() {
        var A = [],
            _ = this.getErrors();
        for (var $ = 0, C = _.length; $ < C; $++) {
            var B = _[$];
            A.push(B.errorText)
        }
        return A
    },
    getErrors: function() {
        var A = [],
            $ = this.getFields();
        for (var _ = 0, C = $.length; _ < C; _++) {
            var B = $[_];
            if (!B.isValid) continue;
            if (B.isValid() == false) A.push(B)
        }
        return A
    },
    mask: function($) {
        if (typeof $ == "string") $ = {
            html: $
        };
        $ = $ || {};
        $.el = this.el;
        if (!$.cls) $.cls = this.Oo00;
        mini.mask($)
    },
    unmask: function() {
        mini.unmask(this.el)
    },
    Oo00: "mini-mask-loading",
    loadingMsg: "\u6570\u636e\u52a0\u8f7d\u4e2d\uff0c\u8bf7\u7a0d\u540e...",
    loading: function($) {
        this.mask($ || this.loadingMsg)
    },
    O01l: function($) {
        this._changed = true
    },
    _changed: false,
    setChanged: function(A) {
        this._changed = A;
        var $ = this.getFields();
        for (var _ = 0, C = $.length; _ < C; _++) {
            var B = $[_];
            B.on("valuechanged", this.O01l, this)
        }
    },
    isChanged: function() {
        return this._changed
    },
    setEnabled: function(A) {
        var $ = this.getFields();
        for (var _ = 0, C = $.length; _ < C; _++) {
            var B = $[_];
            B.setEnabled(A)
        }
    }
});
mini.Fit = function() {
    mini.Fit.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.Fit, mini.Container, {
    style: "",
    _clearBorder: false,
    uiCls: "mini-fit"
});
mini_Fit = mini.Fit.prototype;
mini_Fit.getAttrs = mini_Fit_getAttrs;
mini_Fit.set_bodyParent = mini_Fit_set_bodyParent;
mini_Fit.doLayout = mini_Fit_doLayout;
mini_Fit.isFixedSize = mini_Fit_isFixedSize;
mini_Fit._initEvents = mini_Fit__initEvents;
mini_Fit._create = mini_Fit__create;
mini.regClass(mini.Fit, "fit");
mini.Panel = function() {
    this.ol110();
    mini.Panel.superclass.constructor.apply(this, arguments);
    if (this.url) this.setUrl(this.url);
    this._contentEl = this._bodyEl;
    this._doVisibleEls();
    this.lo000o = new l1l0oo(this);
    this._doTools()
};
mini.extend(mini.Panel, mini.Container, {
    width: 250,
    title: "",
    iconCls: "",
    iconStyle: "",
    allowResize: false,
    url: "",
    refreshOnExpand: false,
    maskOnLoad: true,
    collapseOnTitleClick: false,
    showCollapseButton: false,
    showCloseButton: false,
    closeAction: "display",
    showHeader: true,
    showToolbar: false,
    showFooter: false,
    headerCls: "",
    headerStyle: "",
    bodyCls: "",
    bodyStyle: "",
    footerCls: "",
    footerStyle: "",
    toolbarCls: "",
    toolbarStyle: "",
    minWidth: 180,
    minHeight: 100,
    maxWidth: 5000,
    maxHeight: 3000,
    uiCls: "mini-panel",
    _setBodyWidth: true,
    clearTimeStamp: false,
    l111Oo: 80,
    expanded: true
});
mini_Panel = mini.Panel.prototype;
mini_Panel.getAttrs = mini_Panel_getAttrs;
mini_Panel.getCollapseOnTitleClick = mini_Panel_getCollapseOnTitleClick;
mini_Panel.setCollapseOnTitleClick = mini_Panel_setCollapseOnTitleClick;
mini_Panel.expand = mini_Panel_expand;
mini_Panel.collapse = mini_Panel_collapse;
mini_Panel.toggle = mini_Panel_toggle;
mini_Panel.getExpanded = mini_Panel_getExpanded;
mini_Panel.setExpanded = mini_Panel_setExpanded;
mini_Panel.getLoadOnRefresh = mini_Panel_getLoadOnRefresh;
mini_Panel.setLoadOnRefresh = mini_Panel_setLoadOnRefresh;
mini_Panel.getAllowResize = mini_Panel_getAllowResize;
mini_Panel.setAllowResize = mini_Panel_setAllowResize;
mini_Panel.getMaskOnLoad = mini_Panel_getMaskOnLoad;
mini_Panel.setMaskOnLoad = mini_Panel_setMaskOnLoad;
mini_Panel.getRefreshOnExpand = mini_Panel_getRefreshOnExpand;
mini_Panel.setRefreshOnExpand = mini_Panel_setRefreshOnExpand;
mini_Panel.getUrl = mini_Panel_getUrl;
mini_Panel.setUrl = mini_Panel_setUrl;
mini_Panel.reload = mini_Panel_reload;
mini_Panel.load = mini_Panel_load;
mini_Panel._doLoad = mini_Panel__doLoad;
mini_Panel.O01o0l = mini_Panel_O01o0l;
mini_Panel.oOlolO = mini_Panel_oOlolO;
mini_Panel.getClearTimeStamp = mini_Panel_getClearTimeStamp;
mini_Panel.setClearTimeStamp = mini_Panel_setClearTimeStamp;
mini_Panel.getIFrameEl = mini_Panel_getIFrameEl;
mini_Panel.getFooterEl = mini_Panel_getFooterEl;
mini_Panel.getBodyEl = mini_Panel_getBodyEl;
mini_Panel.getToolbarEl = mini_Panel_getToolbarEl;
mini_Panel.getHeaderEl = mini_Panel_getHeaderEl;
mini_Panel.setFooter = mini_Panel_setFooter;
mini_Panel.setToolbar = mini_Panel_setToolbar;
mini_Panel.set_bodyParent = mini_Panel_set_bodyParent;
mini_Panel.setBody = mini_Panel_setBody;
mini_Panel.getButton = mini_Panel_getButton;
mini_Panel.removeButton = mini_Panel_removeButton;
mini_Panel.updateButton = mini_Panel_updateButton;
mini_Panel.addButton = mini_Panel_addButton;
mini_Panel.getButtons = mini_Panel_getButtons;
mini_Panel.setButtons = mini_Panel_setButtons;
mini_Panel.createButton = mini_Panel_createButton;
mini_Panel.ol110 = mini_Panel_ol110;
mini_Panel.onButtonClick = mini_Panel_onButtonClick;
mini_Panel.lo101 = mini_Panel_lo101;
mini_Panel.__OnClick = mini_Panel_Ol1o1;
mini_Panel.getShowFooter = mini_Panel_getShowFooter;
mini_Panel.setShowFooter = mini_Panel_setShowFooter;
mini_Panel.getShowToolbar = mini_Panel_getShowToolbar;
mini_Panel.setShowToolbar = mini_Panel_setShowToolbar;
mini_Panel.getShowHeader = mini_Panel_getShowHeader;
mini_Panel.setShowHeader = mini_Panel_setShowHeader;
mini_Panel.getShowCollapseButton = mini_Panel_getShowCollapseButton;
mini_Panel.setShowCollapseButton = mini_Panel_setShowCollapseButton;
mini_Panel.getCloseAction = mini_Panel_getCloseAction;
mini_Panel.setCloseAction = mini_Panel_setCloseAction;
mini_Panel.getShowCloseButton = mini_Panel_getShowCloseButton;
mini_Panel.setShowCloseButton = mini_Panel_setShowCloseButton;
mini_Panel._doTools = mini_Panel__doTools;
mini_Panel.getIconStyle = mini_Panel_getIconStyle;
mini_Panel.setIconStyle = mini_Panel_setIconStyle;
mini_Panel.getIconCls = mini_Panel_getIconCls;
mini_Panel.setIconCls = mini_Panel_setIconCls;
mini_Panel.getTitle = mini_Panel_getTitle;
mini_Panel.setTitle = mini_Panel_setTitle;
mini_Panel._doTitle = mini_Panel__doTitle;
mini_Panel.getFooterCls = mini_Panel_getFooterCls;
mini_Panel.setFooterCls = mini_Panel_setFooterCls;
mini_Panel.getToolbarCls = mini_Panel_getToolbarCls;
mini_Panel.setToolbarCls = mini_Panel_setToolbarCls;
mini_Panel.getBodyCls = mini_Panel_getBodyCls;
mini_Panel.setBodyCls = mini_Panel_setBodyCls;
mini_Panel.getHeaderCls = mini_Panel_getHeaderCls;
mini_Panel.setHeaderCls = mini_Panel_setHeaderCls;
mini_Panel.getFooterStyle = mini_Panel_getFooterStyle;
mini_Panel.setFooterStyle = mini_Panel_setFooterStyle;
mini_Panel.getToolbarStyle = mini_Panel_getToolbarStyle;
mini_Panel.setToolbarStyle = mini_Panel_setToolbarStyle;
mini_Panel.getBodyStyle = mini_Panel_getBodyStyle;
mini_Panel.setBodyStyle = mini_Panel_setBodyStyle;
mini_Panel.getHeaderStyle = mini_Panel_getHeaderStyle;
mini_Panel.setHeaderStyle = mini_Panel_setHeaderStyle;
mini_Panel.getFooterHeight = mini_Panel_getFooterHeight;
mini_Panel.getToolbarHeight = mini_Panel_getToolbarHeight;
mini_Panel.getHeaderHeight = mini_Panel_getHeaderHeight;
mini_Panel.getBodyHeight = mini_Panel_getBodyHeight;
mini_Panel.getViewportHeight = mini_Panel_getViewportHeight;
mini_Panel.getViewportWidth = mini_Panel_getViewportWidth;
mini_Panel._stopLayout = mini_Panel__stopLayout;
mini_Panel.deferLayout = mini_Panel_deferLayout;
mini_Panel.doLayout = mini_Panel_doLayout;
mini_Panel._doVisibleEls = mini_Panel__doVisibleEls;
mini_Panel._initEvents = mini_Panel__initEvents;
mini_Panel.destroy = mini_Panel_destroy;
mini_Panel._create = mini_Panel__create;
mini_Panel.set = mini_Panel_set;
mini.regClass(mini.Panel, "panel");
mini.Window = function() {
    mini.Window.superclass.constructor.apply(this, arguments);
    this.addCls("mini-window");
    this.setVisible(false);
    this.setAllowDrag(this.allowDrag);
    this.setAllowResize(this.allowResize)
};
mini.extend(mini.Window, mini.Panel, {
    x: 0,
    y: 0,
    state: "restore",
    OO00oO: "mini-window-drag",
    Ol1OlO: "mini-window-resize",
    allowDrag: true,
    showCloseButton: true,
    showMaxButton: false,
    showMinButton: false,
    showCollapseButton: false,
    showModal: true,
    minWidth: 150,
    minHeight: 80,
    maxWidth: 2000,
    maxHeight: 2000,
    uiCls: "mini-window",
    showInBody: true,
    containerEl: null,
    enableDragProxy: true,
    allowCrossBottom: true,
    xxx: 0
});
mini_Window = mini.Window.prototype;
mini_Window.showAtEl = mini_Window_showAtEl;
mini_Window.getAttrs = mini_Window_getAttrs;
mini_Window.destroy = mini_Window_destroy;
mini_Window.l10l1 = mini_Window_l10l1;
mini_Window.getAllowCrossBottom = mini_Window_getAllowCrossBottom;
mini_Window.setAllowCrossBottom = mini_Window_setAllowCrossBottom;
mini_Window.getEnableDragProxy = mini_Window_getEnableDragProxy;
mini_Window.setEnableDragProxy = mini_Window_setEnableDragProxy;
mini_Window.l10Ol = mini_Window_l10Ol;
mini_Window.lo101 = mini_Window_lo101;
mini_Window.Oo1O11 = mini_Window_Oo1O11;
mini_Window.O0oOoo = mini_Window_O0oOoo;
mini_Window.getBox = mini_Window_getBox;
mini_Window.getWidth = mini_Window_getWidth;
mini_Window.hide = mini_Window_hide;
mini_Window.show = mini_Window_show;
mini_Window.showAtPos = mini_Window_showAtPos;
mini_Window.getShowInBody = mini_Window_getShowInBody;
mini_Window.setShowInBody = mini_Window_setShowInBody;
mini_Window.restore = mini_Window_restore;
mini_Window.max = mini_Window_max;
mini_Window.getShowMinButton = mini_Window_getShowMinButton;
mini_Window.setShowMinButton = mini_Window_setShowMinButton;
mini_Window.getShowMaxButton = mini_Window_getShowMaxButton;
mini_Window.setShowMaxButton = mini_Window_setShowMaxButton;
mini_Window.getAllowDrag = mini_Window_getAllowDrag;
mini_Window.setAllowDrag = mini_Window_setAllowDrag;
mini_Window.getMaxHeight = mini_Window_getMaxHeight;
mini_Window.setMaxHeight = mini_Window_setMaxHeight;
mini_Window.getMaxWidth = mini_Window_getMaxWidth;
mini_Window.setMaxWidth = mini_Window_setMaxWidth;
mini_Window.getMinHeight = mini_Window_getMinHeight;
mini_Window.setMinHeight = mini_Window_setMinHeight;
mini_Window.getMinWidth = mini_Window_getMinWidth;
mini_Window.setMinWidth = mini_Window_setMinWidth;
mini_Window.getShowModal = mini_Window_getShowModal;
mini_Window.setShowModal = mini_Window_setShowModal;
mini_Window.getParentBox = mini_Window_getParentBox;
mini_Window.oll01l = mini_Window_oll01l;
mini_Window.doLayout = mini_Window_doLayout;
mini_Window._initEvents = mini_Window__initEvents;
mini_Window.ol110 = mini_Window_ol110;
mini_Window._create = mini_Window__create;
mini.regClass(mini.Window, "window");
mini.MessageBox = {
    alertTitle: "\u63d0\u9192",
    confirmTitle: "\u786e\u8ba4",
    prompTitle: "\u8f93\u5165",
    prompMessage: "\u8bf7\u8f93\u5165\u5185\u5bb9\uff1a",
    buttonText: {
        ok: "\u786e\u5b9a",
        cancel: "\u53d6\u6d88",
        yes: "\u662f",
        no: "\u5426"
    },
    show: function(F) {
        F = mini.copyTo({
            width: "auto",
            height: "auto",
            showModal: true,
            timeout: 0,
            minWidth: 150,
            maxWidth: 800,
            minHeight: 50,
            maxHeight: 350,
            showHeader: true,
            title: "",
            titleIcon: "",
            iconCls: "",
            iconStyle: "",
            message: "",
            html: "",
            spaceStyle: "margin-right:15px",
            showCloseButton: true,
            buttons: null,
            buttonWidth: 58,
            callback: null
        }, F);
        F.message = String(F.message);
        var I = F.callback,
            C = new mini.Window();
        C.addCls("mini-messagebox");
        C.setBodyStyle("overflow:hidden");
        C.setShowModal(F.showModal);
        C.setTitle(F.title || "");
        C.setIconCls(F.titleIcon);
        C.setShowHeader(F.showHeader);
        C.setShowCloseButton(F.showCloseButton);
        var J = C.uid + "$table",
            O = C.uid + "$content",
            M = "<div class=\"" + F.iconCls + "\" style=\"" + F.iconStyle + "\"></div>",
            R = "<table class=\"mini-messagebox-table\" id=\"" + J + "\" style=\"\" cellspacing=\"0\" cellpadding=\"0\"><tr><td>" + M + "</td><td id=\"" + O + "\" class=\"mini-messagebox-content-text\">" + (F.message || "") + "</td></tr></table>",
            _ = "<div class=\"mini-messagebox-content\"></div>" + "<div class=\"mini-messagebox-buttons\"></div>";
        C._bodyEl.innerHTML = _;
        var N = C._bodyEl.firstChild;
        if (F.html) {
            if (typeof F.html == "string") N.innerHTML = F.html;
            else if (mini.isElement(F.html)) N.appendChild(F.html)
        } else N.innerHTML = R;
        C._Buttons = [];
        var Q = C._bodyEl.lastChild;
        if (F.buttons && F.buttons.length > 0) {
            for (var H = 0, D = F.buttons.length; H < D; H++) {
                var E = F.buttons[H],
                    K = mini.MessageBox.buttonText[E];
                if (!K) K = E;
                var $ = new mini.Button();
                $.setText(K);
                $.setWidth(F.buttonWidth);
                $.render(Q);
                $.action = E;
                $.on("click", function(_) {
                    var $ = _.sender;
                    if (I)
                        if (I($.action) === false) return;
                    mini.MessageBox.hide(C)
                });
                if (H != D - 1) $.setStyle(F.spaceStyle);
                C._Buttons.push($)
            }
        } else Q.style.display = "none";
        C.setMinWidth(F.minWidth);
        C.setMinHeight(F.minHeight);
        C.setMaxWidth(F.maxWidth);
        C.setMaxHeight(F.maxHeight);
        C.setWidth(F.width);
        C.setHeight(F.height);
        C.show(F.x, F.y, {
            animType: F.animType
        });
        var A = C.getWidth();
        C.setWidth(A);
        var L = C.getHeight();
        C.setHeight(L);
        var B = document.getElementById(J);
        if (B) B.style.width = "100%";
        var G = document.getElementById(O);
        if (G) G.style.width = "100%";
        var P = C._Buttons[0];
        if (P) P.focus();
        else C.focus();
        C.on("beforebuttonclick", function($) {
            if (I) I("close");
            $.cancel = true;
            mini.MessageBox.hide(C)
        });
        mini.on(C.el, "keydown", function($) {
            if ($.keyCode == 27) {
                if (I) I("close");
                mini.MessageBox.hide(C)
            }
        });
        if (F.timeout) setTimeout(function() {
            mini.MessageBox.hide(C.uid)
        }, F.timeout);
        return C.uid
    },
    hide: function(C) {
        if (!C) return;
        var _ = typeof C == "object" ? C : mini.getbyUID(C);
        if (!_) return;
        for (var $ = 0, A = _._Buttons.length; $ < A; $++) {
            var B = _._Buttons[$];
            B.destroy()
        }
        _._Buttons = null;
        _.destroy()
    },
    alert: function(A, _, $) {
        return mini.MessageBox.show({
            minWidth: 250,
            title: _ || mini.MessageBox.alertTitle,
            buttons: ["ok"],
            message: A,
            iconCls: "mini-messagebox-warning",
            callback: $
        })
    },
    confirm: function(A, _, $) {
        return mini.MessageBox.show({
            minWidth: 250,
            title: _ || mini.MessageBox.confirmTitle,
            buttons: ["ok", "cancel"],
            message: A,
            iconCls: "mini-messagebox-question",
            callback: $
        })
    },
    prompt: function(C, B, A, _) {
        var F = "prompt$" + new Date().getTime(),
            E = C || mini.MessageBox.promptMessage;
        if (_) E = E + "<br/><textarea id=\"" + F + "\" style=\"width:200px;height:60px;margin-top:3px;\"></textarea>";
        else E = E + "<br/><input id=\"" + F + "\" type=\"text\" style=\"width:200px;margin-top:3px;\"/>";
        var D = mini.MessageBox.show({
                title: B || mini.MessageBox.promptTitle,
                buttons: ["ok", "cancel"],
                width: 250,
                html: "<div style=\"padding:5px;padding-left:10px;\">" + E + "</div>",
                callback: function(_) {
                    var $ = document.getElementById(F);
                    if (A) return A(_, $.value)
                }
            }),
            $ = document.getElementById(F);
        $.focus();
        return D
    },
    loading: function(_, $) {
        return mini.MessageBox.show({
            minHeight: 50,
            title: $,
            showCloseButton: false,
            message: _,
            iconCls: "mini-messagebox-waiting"
        })
    },
    showTips: function(C) {
        var $ = jQuery;
        C = jQuery.extend({
            content: "",
            state: "",
            x: "center",
            y: "top",
            offset: [10, 10],
            fixed: true,
            timeout: 2000
        }, C);
        var A = "mini-tips-" + C.state,
            _ = "<div class=\"mini-tips " + A + "\">" + C.content + "</div>",
            B = jQuery(_).appendTo(document.body);
        C.el = B[0];
        C.timeoutHandler = function() {
            B.slideUp();
            setTimeout(function() {
                B.remove()
            }, 2000)
        };
        mini.showAt(C);
        B.hide().slideDown()
    }
};
mini.alert = mini.MessageBox.alert;
mini.confirm = mini.MessageBox.confirm;
mini.prompt = mini.MessageBox.prompt;
mini.loading = mini.MessageBox.loading;
mini.showMessageBox = mini.MessageBox.show;
mini.hideMessageBox = mini.MessageBox.hide;
mini.showTips = mini.MessageBox.showTips;
mini.Splitter = function() {
    this.O10O0();
    mini.Splitter.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.Splitter, mini.Control, {
    width: 300,
    height: 180,
    vertical: false,
    allowResize: true,
    pane1: null,
    pane2: null,
    showHandleButton: true,
    handlerStyle: "",
    handlerCls: "",
    handlerSize: 5,
    uiCls: "mini-splitter"
});
mini_Splitter = mini.Splitter.prototype;
mini_Splitter.getAttrs = mini_Splitter_getAttrs;
mini_Splitter.lO1011 = mini_Splitter_lO1011;
mini_Splitter.l1olo = mini_Splitter_l1olo;
mini_Splitter.O0oo = mini_Splitter_O0oo;
mini_Splitter.l11o10 = mini_Splitter_l11o10;
mini_Splitter.__OnMouseDown = mini_Splitter_olol;
mini_Splitter.onButtonClick = mini_Splitter_onButtonClick;
mini_Splitter.lo101 = mini_Splitter_lo101;
mini_Splitter.__OnClick = mini_Splitter_Ol1o1;
mini_Splitter.getHandlerSize = mini_Splitter_getHandlerSize;
mini_Splitter.setHandlerSize = mini_Splitter_setHandlerSize;
mini_Splitter.getAllowResize = mini_Splitter_getAllowResize;
mini_Splitter.setAllowResize = mini_Splitter_setAllowResize;
mini_Splitter.hidePane = mini_Splitter_hidePane;
mini_Splitter.showPane = mini_Splitter_showPane;
mini_Splitter.togglePane = mini_Splitter_togglePane;
mini_Splitter.collapsePane = mini_Splitter_collapsePane;
mini_Splitter.expandPane = mini_Splitter_expandPane;
mini_Splitter.getVertical = mini_Splitter_getVertical;
mini_Splitter.setVertical = mini_Splitter_setVertical;
mini_Splitter.getShowHandleButton = mini_Splitter_getShowHandleButton;
mini_Splitter.setShowHandleButton = mini_Splitter_setShowHandleButton;
mini_Splitter.updatePane = mini_Splitter_updatePane;
mini_Splitter.getPaneEl = mini_Splitter_getPaneEl;
mini_Splitter.setPaneControls = mini_Splitter_setPaneControls;
mini_Splitter.setPanes = mini_Splitter_setPanes;
mini_Splitter.getPane = mini_Splitter_getPane;
mini_Splitter.getPaneBox = mini_Splitter_getPaneBox;
mini_Splitter.doLayout = mini_Splitter_doLayout;
mini_Splitter.doUpdate = mini_Splitter_doUpdate;
mini_Splitter.O10O0 = mini_Splitter_O10O0;
mini_Splitter._initEvents = mini_Splitter__initEvents;
mini_Splitter._create = mini_Splitter__create;
mini.regClass(mini.Splitter, "splitter");
mini.Layout = function() {
    this.regions = [];
    this.regionMap = {};
    mini.Layout.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.Layout, mini.Control, {
    floatable: true,
    regions: [],
    splitSize: 5,
    collapseWidth: 28,
    collapseHeight: 25,
    regionWidth: 150,
    regionHeight: 80,
    regionMinWidth: 50,
    regionMinHeight: 25,
    regionMaxWidth: 2000,
    regionMaxHeight: 2000,
    splitToolTip: "",
    uiCls: "mini-layout",
    hoverProxyEl: null
});
mini_Layout = mini.Layout.prototype;
mini_Layout.onButtonMouseDown = mini_Layout_onButtonMouseDown;
mini_Layout.onButtonClick = mini_Layout_onButtonClick;
mini_Layout.__OnMouseOut = mini_Layout_O11O11;
mini_Layout.__OnMouseOver = mini_Layout_O1l1lo;
mini_Layout.O1Oo1 = mini_Layout_O1Oo1;
mini_Layout.lo101 = mini_Layout_lo101;
mini_Layout.__OnClick = mini_Layout_Ol1o1;
mini_Layout.l0o1l = mini_Layout_l0o1l;
mini_Layout.llooOl = mini_Layout_llooOl;
mini_Layout.o0o0 = mini_Layout_o0o0;
mini_Layout.isVisibleRegion = mini_Layout_isVisibleRegion;
mini_Layout.isExpandRegion = mini_Layout_isExpandRegion;
mini_Layout.hideRegion = mini_Layout_hideRegion;
mini_Layout.showRegion = mini_Layout_showRegion;
mini_Layout.toggleRegion = mini_Layout_toggleRegion;
mini_Layout.collapseRegion = mini_Layout_collapseRegion;
mini_Layout.expandRegion = mini_Layout_expandRegion;
mini_Layout.updateRegion = mini_Layout_updateRegion;
mini_Layout.olOO1o = mini_Layout_olOO1o;
mini_Layout.moveRegion = mini_Layout_moveRegion;
mini_Layout.removeRegion = mini_Layout_removeRegion;
mini_Layout.addRegion = mini_Layout_addRegion;
mini_Layout.setRegions = mini_Layout_setRegions;
mini_Layout.setRegionControls = mini_Layout_setRegionControls;
mini_Layout.olOO = mini_Layout_olOO;
mini_Layout.OOOoo0 = mini_Layout_OOOoo0;
mini_Layout.loOOoO = mini_Layout_loOOoO;
mini_Layout.getRegion = mini_Layout_getRegion;
mini_Layout.getRegionBox = mini_Layout_getRegionBox;
mini_Layout.getRegionProxyEl = mini_Layout_getRegionProxyEl;
mini_Layout.getRegionSplitEl = mini_Layout_getRegionSplitEl;
mini_Layout.getRegionBodyEl = mini_Layout_getRegionBodyEl;
mini_Layout.getRegionHeaderEl = mini_Layout_getRegionHeaderEl;
mini_Layout.getRegionEl = mini_Layout_getRegionEl;
mini_Layout._initEvents = mini_Layout__initEvents;
mini_Layout._create = mini_Layout__create;
mini.copyTo(mini.Layout.prototype, {
    l01O1: function(_, A) {
        var C = "<div class=\"mini-tools\">";
        if (A) C += "<span class=\"mini-tools-collapse\"></span>";
        else
            for (var $ = _.buttons.length - 1; $ >= 0; $--) {
                var B = _.buttons[$];
                C += "<span class=\"" + B.cls + "\" style=\"";
                C += B.style + ";" + (B.visible ? "" : "display:none;") + "\">" + B.html + "</span>"
            }
        C += "</div>";
        C += "<div class=\"mini-layout-region-icon " + _.iconCls + "\" style=\"" + _.iconStyle + ";" + ((_.iconStyle || _.iconCls) ? "" : "display:none;") + "\"></div>";
        C += "<div class=\"mini-layout-region-title\">" + _.title + "</div>";
        return C
    },
    doUpdate: function() {
        for (var $ = 0, F = this.regions.length; $ < F; $++) {
            var C = this.regions[$],
                A = C.region,
                B = C._el,
                E = C._split,
                D = C._proxy;
            if (C.cls) mini.addClass(B, C.cls);
            if (C.headerCls) mini.addClass(B.firstChild, C.headerCls);
            C._header.style.display = C.showHeader ? "" : "none";
            C._header.innerHTML = this.l01O1(C);
            if (C._proxy) {
                var _ = this.l01O1(C, true);
                if (C.isShowProxyText())
                    if (C.region == "west" || C.region == "east") _ += "<div class=\"mini-layout-proxy-text\" >" + C.title + "</div>";
                C._proxy.innerHTML = _
            }
            if (E) {
                mini.removeClass(E, "mini-layout-split-nodrag");
                if (C.expanded == false || !C.allowResize) mini.addClass(E, "mini-layout-split-nodrag")
            }
        }
        this.doLayout()
    },
    doLayout: function() {
        if (!this.canLayout()) return;
        if (this.O1lll0) return;
        var C = mini.getHeight(this.el, true),
            _ = mini.getWidth(this.el, true),
            D = {
                x: 0,
                y: 0,
                width: _,
                height: C
            };
        mini.setHeight(this._borderEl, C);
        var I = this.regions.clone(),
            P = this.getRegion("center");
        I.remove(P);
        if (P) I.push(P);
        for (var K = 0, H = I.length; K < H; K++) {
            var E = I[K];
            E._Expanded = false;
            mini.removeClass(E._el, "mini-layout-popup");
            var A = E.region,
                L = E._el,
                F = E._split,
                G = E._proxy;
            if (E.visible == false) {
                L.style.display = "none";
                if (A != "center") F.style.display = G.style.display = "none";
                continue
            }
            L.style.display = "";
            if (A != "center") {
                F.style.display = "";
                G.style.display = E.showProxy ? "" : "none"
            }
            var R = D.x,
                O = D.y,
                _ = D.width,
                C = D.height,
                B = E.width,
                J = E.height;
            if (!E.expanded)
                if (A == "west" || A == "east") {
                    B = mini.getWidth(G);
                    mini.setWidth(L, E.width)
                } else if (A == "north" || A == "south") {
                J = mini.getHeight(G);
                mini.setHeight(L, E.height)
            }
            switch (A) {
                case "north":
                    C = J;
                    D.y += J;
                    D.height -= J;
                    break;
                case "south":
                    C = J;
                    O = D.y + D.height - J;
                    D.height -= J;
                    break;
                case "west":
                    _ = B;
                    D.x += B;
                    D.width -= B;
                    break;
                case "east":
                    _ = B;
                    R = D.x + D.width - B;
                    D.width -= B;
                    break;
                case "center":
                    break;
                default:
                    continue
            }
            if (_ < 0) _ = 0;
            if (C < 0) C = 0;
            if (A == "west" || A == "east") mini.setHeight(L, C);
            if (A == "north" || A == "south") mini.setWidth(L, _);
            var N = "left:" + R + "px;top:" + O + "px;",
                $ = L;
            if (!E.expanded) {
                $ = G;
                L.style.top = "-100px";
                L.style.left = "-3000px"
            } else if (G) {
                G.style.left = "-3000px";
                G.style.top = "-100px"
            }
            $.style.left = R + "px";
            $.style.top = O + "px";
            if ($ == G) {
                if (A == "west" || A == "east") mini.setHeight($, C);
                if (A == "north" || A == "south") mini.setWidth($, _)
            } else {
                mini.setWidth($, _);
                mini.setHeight($, C)
            }
            var M = jQuery(E._el).height(),
                Q = E.showHeader ? jQuery(E._header).outerHeight() : 0;
            mini.setHeight(E._body, M - Q);
            if (A == "center") continue;
            B = J = E.splitSize;
            R = D.x, O = D.y, _ = D.width, C = D.height;
            switch (A) {
                case "north":
                    C = J;
                    D.y += J;
                    D.height -= J;
                    break;
                case "south":
                    C = J;
                    O = D.y + D.height - J;
                    D.height -= J;
                    break;
                case "west":
                    _ = B;
                    D.x += B;
                    D.width -= B;
                    break;
                case "east":
                    _ = B;
                    R = D.x + D.width - B;
                    D.width -= B;
                    break;
                case "center":
                    break
            }
            if (_ < 0) _ = 0;
            if (C < 0) C = 0;
            F.style.left = R + "px";
            F.style.top = O + "px";
            mini.setWidth(F, _);
            mini.setHeight(F, C);
            if (E.showSplit && E.expanded && E.allowResize == true) mini.removeClass(F, "mini-layout-split-nodrag");
            else mini.addClass(F, "mini-layout-split-nodrag");
            F.firstChild.style.display = E.showSplitIcon ? "block" : "none";
            if (E.expanded) mini.removeClass(F.firstChild, "mini-layout-spliticon-collapse");
            else mini.addClass(F.firstChild, "mini-layout-spliticon-collapse")
        }
        mini.layout(this._borderEl);
        this.fire("layout")
    },
    __OnMouseDown: function(B) {
        if (this.O1lll0) return;
        if (oOlO(B.target, "mini-layout-split")) {
            var A = jQuery(B.target).attr("uid");
            if (A != this.uid) return;
            var _ = this.getRegion(B.target.id);
            if (_.expanded == false || !_.allowResize || !_.showSplit) return;
            this.dragRegion = _;
            var $ = this.l11o10();
            $.start(B)
        }
    },
    l11o10: function() {
        if (!this.drag) this.drag = new mini.Drag({
            capture: true,
            onStart: mini.createDelegate(this.O0oo, this),
            onMove: mini.createDelegate(this.l1olo, this),
            onStop: mini.createDelegate(this.lO1011, this)
        });
        return this.drag
    },
    O0oo: function($) {
        this.Oool0o = mini.append(document.body, "<div class=\"mini-resizer-mask\"></div>");
        this.O0Ool = mini.append(document.body, "<div class=\"mini-proxy\"></div>");
        this.O0Ool.style.cursor = "n-resize";
        if (this.dragRegion.region == "west" || this.dragRegion.region == "east") this.O0Ool.style.cursor = "w-resize";
        this.splitBox = mini.getBox(this.dragRegion._split);
        mini.setBox(this.O0Ool, this.splitBox);
        this.elBox = mini.getBox(this.el, true)
    },
    l1olo: function(C) {
        var I = C.now[0] - C.init[0],
            V = this.splitBox.x + I,
            A = C.now[1] - C.init[1],
            U = this.splitBox.y + A,
            K = V + this.splitBox.width,
            T = U + this.splitBox.height,
            G = this.getRegion("west"),
            L = this.getRegion("east"),
            F = this.getRegion("north"),
            D = this.getRegion("south"),
            H = this.getRegion("center"),
            O = G && G.visible ? G.width : 0,
            Q = L && L.visible ? L.width : 0,
            R = F && F.visible ? F.height : 0,
            J = D && D.visible ? D.height : 0,
            P = G && G.showSplit ? mini.getWidth(G._split) : 0,
            $ = L && L.showSplit ? mini.getWidth(L._split) : 0,
            B = F && F.showSplit ? mini.getHeight(F._split) : 0,
            S = D && D.showSplit ? mini.getHeight(D._split) : 0,
            E = this.dragRegion,
            N = E.region;
        if (N == "west") {
            var M = this.elBox.width - Q - $ - P - H.minWidth;
            if (V - this.elBox.x > M) V = M + this.elBox.x;
            if (V - this.elBox.x < E.minWidth) V = E.minWidth + this.elBox.x;
            if (V - this.elBox.x > E.maxWidth) V = E.maxWidth + this.elBox.x;
            mini.setX(this.O0Ool, V)
        } else if (N == "east") {
            M = this.elBox.width - O - P - $ - H.minWidth;
            if (this.elBox.right - (V + this.splitBox.width) > M) V = this.elBox.right - M - this.splitBox.width;
            if (this.elBox.right - (V + this.splitBox.width) < E.minWidth) V = this.elBox.right - E.minWidth - this.splitBox.width;
            if (this.elBox.right - (V + this.splitBox.width) > E.maxWidth) V = this.elBox.right - E.maxWidth - this.splitBox.width;
            mini.setX(this.O0Ool, V)
        } else if (N == "north") {
            var _ = this.elBox.height - J - S - B - H.minHeight;
            if (U - this.elBox.y > _) U = _ + this.elBox.y;
            if (U - this.elBox.y < E.minHeight) U = E.minHeight + this.elBox.y;
            if (U - this.elBox.y > E.maxHeight) U = E.maxHeight + this.elBox.y;
            mini.setY(this.O0Ool, U)
        } else if (N == "south") {
            _ = this.elBox.height - R - B - S - H.minHeight;
            if (this.elBox.bottom - (U + this.splitBox.height) > _) U = this.elBox.bottom - _ - this.splitBox.height;
            if (this.elBox.bottom - (U + this.splitBox.height) < E.minHeight) U = this.elBox.bottom - E.minHeight - this.splitBox.height;
            if (this.elBox.bottom - (U + this.splitBox.height) > E.maxHeight) U = this.elBox.bottom - E.maxHeight - this.splitBox.height;
            mini.setY(this.O0Ool, U)
        }
    },
    lO1011: function(B) {
        var C = mini.getBox(this.O0Ool),
            D = this.dragRegion,
            A = D.region;
        if (A == "west") {
            var $ = C.x - this.elBox.x;
            this.updateRegion(D, {
                width: $
            })
        } else if (A == "east") {
            $ = this.elBox.right - C.right;
            this.updateRegion(D, {
                width: $
            })
        } else if (A == "north") {
            var _ = C.y - this.elBox.y;
            this.updateRegion(D, {
                height: _
            })
        } else if (A == "south") {
            _ = this.elBox.bottom - C.bottom;
            this.updateRegion(D, {
                height: _
            })
        }
        jQuery(this.O0Ool).remove();
        this.O0Ool = null;
        this.elBox = this.handlerBox = null;
        jQuery(this.Oool0o).remove();
        this.Oool0o = null
    },
    OO11ol: function($) {
        if (!this.floatable) return;
        $ = this.getRegion($);
        if ($._Expanded === true) this.l1Ol0($);
        else this.lOO1O($)
    },
    lOO1O: function(D) {
        if (this.O1lll0) return;
        this.doLayout();
        var A = D.region,
            H = D._el;
        D._Expanded = true;
        mini.addClass(H, "mini-layout-popup");
        var E = mini.getBox(D._proxy),
            B = mini.getBox(D._el),
            F = {};
        if (A == "east") {
            var K = E.x,
                J = E.y,
                C = E.height;
            mini.setHeight(H, C);
            mini.setX(H, K);
            H.style.top = D._proxy.style.top;
            var I = parseInt(H.style.left);
            F = {
                left: I - B.width
            }
        } else if (A == "west") {
            K = E.right - B.width, J = E.y, C = E.height;
            mini.setHeight(H, C);
            mini.setX(H, K);
            H.style.top = D._proxy.style.top;
            I = parseInt(H.style.left);
            F = {
                left: I + B.width
            }
        } else if (A == "north") {
            var K = E.x,
                J = E.bottom - B.height,
                _ = E.width;
            mini.setWidth(H, _);
            mini.setXY(H, K, J);
            var $ = parseInt(H.style.top);
            F = {
                top: $ + B.height
            }
        } else if (A == "south") {
            K = E.x, J = E.y, _ = E.width;
            mini.setWidth(H, _);
            mini.setXY(H, K, J);
            $ = parseInt(H.style.top);
            F = {
                top: $ - B.height
            }
        }
        mini.addClass(D._proxy, "mini-layout-maxZIndex");
        this.O1lll0 = true;
        var G = this,
            L = jQuery(H);
        L.animate(F, 250, function() {
            mini.removeClass(D._proxy, "mini-layout-maxZIndex");
            G.O1lll0 = false
        })
    },
    l1Ol0: function(F) {
        if (this.O1lll0) return;
        F._Expanded = false;
        var B = F.region,
            E = F._el,
            D = mini.getBox(E),
            _ = {};
        if (B == "east") {
            var C = parseInt(E.style.left);
            _ = {
                left: C + D.width
            }
        } else if (B == "west") {
            C = parseInt(E.style.left);
            _ = {
                left: C - D.width
            }
        } else if (B == "north") {
            var $ = parseInt(E.style.top);
            _ = {
                top: $ - D.height
            }
        } else if (B == "south") {
            $ = parseInt(E.style.top);
            _ = {
                top: $ + D.height
            }
        }
        mini.addClass(F._proxy, "mini-layout-maxZIndex");
        this.O1lll0 = true;
        var A = this,
            G = jQuery(E);
        G.animate(_, 250, function() {
            mini.removeClass(F._proxy, "mini-layout-maxZIndex");
            A.O1lll0 = false;
            A.doLayout()
        })
    },
    oll01: function(B) {
        if (this.O1lll0) return;
        for (var $ = 0, A = this.regions.length; $ < A; $++) {
            var _ = this.regions[$];
            if (!_._Expanded) continue;
            if (Oolo(_._el, B.target) || Oolo(_._proxy, B.target));
            else this.l1Ol0(_)
        }
    },
    getAttrs: function(A) {
        var H = mini.Layout.superclass.getAttrs.call(this, A),
            G = jQuery(A);
        mini._ParseBool(A, H, ["floatable"]);
        var E = parseInt(G.attr("splitSize"));
        if (!isNaN(E)) H.splitSize = E;
        var F = [],
            D = mini.getChildNodes(A);
        for (var _ = 0, C = D.length; _ < C; _++) {
            var B = D[_],
                $ = {};
            F.push($);
            $.cls = B.className;
            $.style = B.style.cssText;
            mini._ParseString(B, $, ["region", "title", "iconCls", "iconStyle", "cls", "headerCls", "headerStyle", "bodyCls", "bodyStyle", "splitToolTip"]);
            mini._ParseBool(B, $, ["allowResize", "visible", "showCloseButton", "showCollapseButton", "showSplit", "showHeader", "expanded", "showSplitIcon", "showProxyText", "showProxy"]);
            mini._ParseInt(B, $, ["splitSize", "collapseSize", "width", "height", "minWidth", "minHeight", "maxWidth", "maxHeight"]);
            $.bodyParent = B
        }
        H.regions = F;
        return H
    }
});
mini.regClass(mini.Layout, "layout");
mini.Box = function() {
    mini.Box.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.Box, mini.Container, {
    style: "",
    borderStyle: "",
    bodyStyle: "",
    uiCls: "mini-box"
});
mini_Box = mini.Box.prototype;
mini_Box.getAttrs = mini_Box_getAttrs;
mini_Box.setBodyStyle = mini_Box_setBodyStyle;
mini_Box.set_bodyParent = mini_Box_set_bodyParent;
mini_Box.setBody = mini_Box_setBody;
mini_Box.doLayout = mini_Box_doLayout;
mini_Box._initEvents = mini_Box__initEvents;
mini_Box._create = mini_Box__create;
mini.regClass(mini.Box, "box");
mini.Include = function() {
    mini.Include.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.Include, mini.Control, {
    url: "",
    uiCls: "mini-include"
});
mini_Include = mini.Include.prototype;
mini_Include.getAttrs = mini_Include_getAttrs;
mini_Include.getUrl = mini_Include_getUrl;
mini_Include.setUrl = mini_Include_setUrl;
mini_Include.doLayout = mini_Include_doLayout;
mini_Include._initEvents = mini_Include__initEvents;
mini_Include._create = mini_Include__create;
mini.regClass(mini.Include, "include");
mini.Tabs = function() {
    this.ooO0o();
    mini.Tabs.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.Tabs, mini.Control, {
    activeIndex: -1,
    tabAlign: "left",
    tabPosition: "top",
    showBody: true,
    showHeader: true,
    nameField: "name",
    titleField: "title",
    urlField: "url",
    url: "",
    maskOnLoad: true,
    plain: true,
    bodyStyle: "",
    llolO1: "mini-tab-hover",
    l11l: "mini-tab-active",
    uiCls: "mini-tabs",
    OO01ol: 1,
    buttonsAlign: "right",
    l111Oo: 180,
    allowClickWrap: true,
    arrowPosition: "right",
    showNavMenu: false,
    clearTimeStamp: false,
    hoverTab: null
});
mini_Tabs = mini.Tabs.prototype;
mini_Tabs.getAttrs = mini_Tabs_getAttrs;
mini_Tabs.onActiveChanged = mini_Tabs_onActiveChanged;
mini_Tabs.onCloseClick = mini_Tabs_onCloseClick;
mini_Tabs.onBeforeCloseClick = mini_Tabs_onBeforeCloseClick;
mini_Tabs.Ool1o = mini_Tabs_Ool1o;
mini_Tabs.oO11OO = mini_Tabs_oO11OO;
mini_Tabs.O0ll00 = mini_Tabs_O0ll00;
mini_Tabs.oO00 = mini_Tabs_oO00;
mini_Tabs.OOO11l = mini_Tabs_OOO11l;
mini_Tabs.lo010o = mini_Tabs_lo010o;
mini_Tabs.__OnMouseDown = mini_Tabs_olol;
mini_Tabs.__OnMouseOut = mini_Tabs_O11O11;
mini_Tabs.__OnMouseOver = mini_Tabs_O1l1lo;
mini_Tabs.__OnClick = mini_Tabs_Ol1o1;
mini_Tabs.__OnDblClick = mini_Tabs_o1oo11;
mini_Tabs.oO101O = mini_Tabs_oO101O;
mini_Tabs.getTabByEvent = mini_Tabs_getTabByEvent;
mini_Tabs.getClearTimeStamp = mini_Tabs_getClearTimeStamp;
mini_Tabs.setClearTimeStamp = mini_Tabs_setClearTimeStamp;
mini_Tabs.getShowNavMenu = mini_Tabs_getShowNavMenu;
mini_Tabs.setShowNavMenu = mini_Tabs_setShowNavMenu;
mini_Tabs.getArrowPosition = mini_Tabs_getArrowPosition;
mini_Tabs.setArrowPosition = mini_Tabs_setArrowPosition;
mini_Tabs.getPlain = mini_Tabs_getPlain;
mini_Tabs.setPlain = mini_Tabs_setPlain;
mini_Tabs.getMaskOnLoad = mini_Tabs_getMaskOnLoad;
mini_Tabs.setMaskOnLoad = mini_Tabs_setMaskOnLoad;
mini_Tabs.getBodyStyle = mini_Tabs_getBodyStyle;
mini_Tabs.setBodyStyle = mini_Tabs_setBodyStyle;
mini_Tabs.getShowBody = mini_Tabs_getShowBody;
mini_Tabs.setShowBody = mini_Tabs_setShowBody;
mini_Tabs.getShowHeader = mini_Tabs_getShowHeader;
mini_Tabs.setShowHeader = mini_Tabs_setShowHeader;
mini_Tabs.o101o = mini_Tabs_o101o;
mini_Tabs.getActiveIndex = mini_Tabs_getActiveIndex;
mini_Tabs.getActiveTab = mini_Tabs_getActiveTab;
mini_Tabs.activeTab = mini_Tabs_activeTab;
mini_Tabs.getActiveIndex = mini_Tabs_getActiveIndex;
mini_Tabs._scrollToTab = mini_Tabs__scrollToTab;
mini_Tabs.setActiveIndex = mini_Tabs_setActiveIndex;
mini_Tabs.OO1o = mini_Tabs_OO1o;
mini_Tabs.OO1o0O = mini_Tabs_OO1o0O;
mini_Tabs.ol101 = mini_Tabs_ol101;
mini_Tabs.getTabIFrameEl = mini_Tabs_getTabIFrameEl;
mini_Tabs.getTabBodyEl = mini_Tabs_getTabBodyEl;
mini_Tabs.getTabEl = mini_Tabs_getTabEl;
mini_Tabs.getBodyEl = mini_Tabs_getBodyEl;
mini_Tabs.getHeaderEl = mini_Tabs_getHeaderEl;
mini_Tabs.getTab = mini_Tabs_getTab;
mini_Tabs.getAllowClickWrap = mini_Tabs_getAllowClickWrap;
mini_Tabs.setAllowClickWrap = mini_Tabs_setAllowClickWrap;
mini_Tabs.setTabPosition = mini_Tabs_setTabPosition;
mini_Tabs.setTabAlign = mini_Tabs_setTabAlign;
mini_Tabs._doMenuSelectTab = mini_Tabs__doMenuSelectTab;
mini_Tabs._setHeaderMenuItems = mini_Tabs__setHeaderMenuItems;
mini_Tabs.l01O1Menu = mini_Tabs_l01O1Menu;
mini_Tabs._getTabBy_Id = mini_Tabs__getTabBy_Id;
mini_Tabs.doLayout = mini_Tabs_doLayout;
mini_Tabs._handleIFrameOverflow = mini_Tabs__handleIFrameOverflow;
mini_Tabs.doUpdate = mini_Tabs_doUpdate;
mini_Tabs.getTabRows = mini_Tabs_getTabRows;
mini_Tabs.reloadTab = mini_Tabs_reloadTab;
mini_Tabs.loadTab = mini_Tabs_loadTab;
mini_Tabs.Olll = mini_Tabs_Olll;
mini_Tabs._getTabEvent = mini_Tabs__getTabEvent;
mini_Tabs.OO1lO = mini_Tabs_OO1lO;
mini_Tabs._cancelLoadTabs = mini_Tabs__cancelLoadTabs;
mini_Tabs.O01o0l = mini_Tabs_O01o0l;
mini_Tabs.oOlolO = mini_Tabs_oOlolO;
mini_Tabs.updateTab = mini_Tabs_updateTab;
mini_Tabs.moveTab = mini_Tabs_moveTab;
mini_Tabs.removeTab = mini_Tabs_removeTab;
mini_Tabs.addTab = mini_Tabs_addTab;
mini_Tabs.removeAll = mini_Tabs_removeAll;
mini_Tabs.getTabs = mini_Tabs_getTabs;
mini_Tabs.setTabs = mini_Tabs_setTabs;
mini_Tabs.setTabControls = mini_Tabs_setTabControls;
mini_Tabs.setButtons = mini_Tabs_setButtons;
mini_Tabs.getButtonsAlign = mini_Tabs_getButtonsAlign;
mini_Tabs.setButtonsAlign = mini_Tabs_setButtonsAlign;
mini_Tabs.getUrlField = mini_Tabs_getUrlField;
mini_Tabs.setUrlField = mini_Tabs_setUrlField;
mini_Tabs.getTitleField = mini_Tabs_getTitleField;
mini_Tabs.setTitleField = mini_Tabs_setTitleField;
mini_Tabs.getNameField = mini_Tabs_getNameField;
mini_Tabs.setNameField = mini_Tabs_setNameField;
mini_Tabs.getUrl = mini_Tabs_getUrl;
mini_Tabs.setUrl = mini_Tabs_setUrl;
mini_Tabs.load = mini_Tabs_load;
mini_Tabs._doLoad = mini_Tabs__doLoad;
mini_Tabs.createTab = mini_Tabs_createTab;
mini_Tabs.ooO0o = mini_Tabs_ooO0o;
mini_Tabs._initEvents = mini_Tabs__initEvents;
mini_Tabs.l0OOl = mini_Tabs_l0OOl;
mini_Tabs.destroy = mini_Tabs_destroy;
mini_Tabs._create = mini_Tabs__create;
mini_Tabs.set = mini_Tabs_set;
mini.regClass(mini.Tabs, "tabs");
mini.Menu = function() {
    this.items = [];
    mini.Menu.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.Menu, mini.Control);
mini.copyTo(mini.Menu.prototype, OOooo1_prototype);
var OOooo1_prototype_hide = OOooo1_prototype.hide;
mini.copyTo(mini.Menu.prototype, {
    height: "auto",
    width: "auto",
    minWidth: 140,
    vertical: true,
    allowSelectItem: false,
    l11Ol1: null,
    _llOO1O: "mini-menuitem-selected",
    textField: "text",
    resultAsTree: false,
    idField: "id",
    parentField: "pid",
    itemsField: "children",
    iconClsField: "iconCls",
    showNavArrow: true,
    imgPath: "",
    overflow: false,
    _clearBorder: false,
    showAction: "none",
    hideAction: "outerclick",
    uiCls: "mini-menu",
    _disableContextMenu: false,
    _itemType: "menuitem",
    url: "",
    hideOnClick: true,
    hideOnClick: true
});
mini_Menu = mini.Menu.prototype;
mini_Menu.getAttrs = mini_Menu_getAttrs;
mini_Menu.parseItems = mini_Menu_parseItems;
mini_Menu.setToolbar = mini_Menu_setToolbar;
mini_Menu._startScrollMove = mini_Menu__startScrollMove;
mini_Menu._getMaxScrollLeft = mini_Menu__getMaxScrollLeft;
mini_Menu._getScrollWidth = mini_Menu__getScrollWidth;
mini_Menu.__OnBottomMouseDown = mini_Menu___OnBottomMouseDown;
mini_Menu.__OnTopMouseDown = mini_Menu___OnTopMouseDown;
mini_Menu.onItemSelect = mini_Menu_onItemSelect;
mini_Menu.onItemClick = mini_Menu_onItemClick;
mini_Menu._OnItemSelect = mini_Menu__OnItemSelect;
mini_Menu._OnItemClick = mini_Menu__OnItemClick;
mini_Menu.getImgPath = mini_Menu_getImgPath;
mini_Menu.setImgPath = mini_Menu_setImgPath;
mini_Menu.getHideOnClick = mini_Menu_getHideOnClick;
mini_Menu.setHideOnClick = mini_Menu_setHideOnClick;
mini_Menu.getUrl = mini_Menu_getUrl;
mini_Menu.setUrl = mini_Menu_setUrl;
mini_Menu.load = mini_Menu_load;
mini_Menu.loadList = mini_Menu_loadList;
mini_Menu._doLoad = mini_Menu__doLoad;
mini_Menu.O0oOoo = mini_Menu_O0oOoo;
mini_Menu.doLayout = mini_Menu_doLayout;
mini_Menu.getOverflow = mini_Menu_getOverflow;
mini_Menu.setOverflow = mini_Menu_setOverflow;
mini_Menu.getIconClsField = mini_Menu_getIconClsField;
mini_Menu.setIconClsField = mini_Menu_setIconClsField;
mini_Menu.getParentField = mini_Menu_getParentField;
mini_Menu.setParentField = mini_Menu_setParentField;
mini_Menu.getIdField = mini_Menu_getIdField;
mini_Menu.setIdField = mini_Menu_setIdField;
mini_Menu.getResultAsTree = mini_Menu_getResultAsTree;
mini_Menu.setResultAsTree = mini_Menu_setResultAsTree;
mini_Menu.getTextField = mini_Menu_getTextField;
mini_Menu.setTextField = mini_Menu_setTextField;
mini_Menu.getShowNavArrow = mini_Menu_getShowNavArrow;
mini_Menu.setShowNavArrow = mini_Menu_setShowNavArrow;
mini_Menu.getSelectedItem = mini_Menu_getSelectedItem;
mini_Menu.setSelectedItem = mini_Menu_setSelectedItem;
mini_Menu.getAllowSelectItem = mini_Menu_getAllowSelectItem;
mini_Menu.setAllowSelectItem = mini_Menu_setAllowSelectItem;
mini_Menu.getItem = mini_Menu_getItem;
mini_Menu.getGroupItems = mini_Menu_getGroupItems;
mini_Menu.removeAll = mini_Menu_removeAll;
mini_Menu.removeItemAt = mini_Menu_removeItemAt;
mini_Menu.removeItem = mini_Menu_removeItem;
mini_Menu.addItem = mini_Menu_addItem;
mini_Menu.getItems = mini_Menu_getItems;
mini_Menu.setItems = mini_Menu_setItems;
mini_Menu.getData = mini_Menu_getData;
mini_Menu.setData = mini_Menu_setData;
mini_Menu.hasShowItemMenu = mini_Menu_hasShowItemMenu;
mini_Menu.showItemMenu = mini_Menu_showItemMenu;
mini_Menu.hideItems = mini_Menu_hideItems;
mini_Menu.hide = mini_Menu_hide;
mini_Menu.show = mini_Menu_show;
mini_Menu.isVertical = mini_Menu_isVertical;
mini_Menu.getVertical = mini_Menu_getVertical;
mini_Menu.setVertical = mini_Menu_setVertical;
mini_Menu.within = mini_Menu_within;
mini_Menu._initEvents = mini_Menu__initEvents;
mini_Menu.destroy = mini_Menu_destroy;
mini_Menu._create = mini_Menu__create;
mini_Menu.set = mini_Menu_set;
mini_Menu.getbyName = mini_Menu_getbyName;
mini.regClass(mini.Menu, "menu");
mini.menubar = function() {
    mini.menubar.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.menubar, mini.Menu, {
    uiCls: "mini-menubar",
    vertical: false,
    setVertical: function($) {
        this.vertical = false
    }
});
mini.regClass(mini.menubar, "menubar");
mini.ContextMenu = function() {
    mini.ContextMenu.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.ContextMenu, mini.Menu, {
    uiCls: "mini-contextmenu",
    vertical: true,
    visible: false,
    _disableContextMenu: true,
    setVertical: function($) {
        this.vertical = true
    }
});
mini.regClass(mini.ContextMenu, "contextmenu");
mini.MenuItem = function() {
    mini.MenuItem.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.MenuItem, mini.Control, {
    text: "",
    iconCls: "",
    iconStyle: "",
    iconPosition: "left",
    img: "",
    showIcon: true,
    showAllow: true,
    checked: false,
    checkOnClick: false,
    groupName: "",
    _hoverCls: "mini-menuitem-hover",
    oll001: "mini-menuitem-pressed",
    ll0O1o: "mini-menuitem-checked",
    _clearBorder: false,
    menu: null,
    uiCls: "mini-menuitem",
    l0l1O1: false
});
mini_MenuItem = mini.MenuItem.prototype;
mini_MenuItem.getAttrs = mini_MenuItem_getAttrs;
mini_MenuItem.onCheckedChanged = mini_MenuItem_onCheckedChanged;
mini_MenuItem.onClick = mini_MenuItem_onClick;
mini_MenuItem.__OnMouseOut = mini_MenuItem_O11O11;
mini_MenuItem.__OnMouseOver = mini_MenuItem_O1l1lo;
mini_MenuItem.__mouseup = mini_MenuItem_oOlo0;
mini_MenuItem.__OnClick = mini_MenuItem_Ol1o1;
mini_MenuItem.getTopMenu = mini_MenuItem_getTopMenu;
mini_MenuItem.l1O100 = mini_MenuItem_l1O100;
mini_MenuItem.hide = mini_MenuItem_hide;
mini_MenuItem.hideMenu = mini_MenuItem_hideMenu;
mini_MenuItem.showMenu = mini_MenuItem_showMenu;
mini_MenuItem.getMenu = mini_MenuItem_getMenu;
mini_MenuItem.setMenu = mini_MenuItem_setMenu;
mini_MenuItem.setChildren = mini_MenuItem_setChildren;
mini_MenuItem.getGroupName = mini_MenuItem_getGroupName;
mini_MenuItem.setGroupName = mini_MenuItem_setGroupName;
mini_MenuItem.getChecked = mini_MenuItem_getChecked;
mini_MenuItem.setChecked = mini_MenuItem_setChecked;
mini_MenuItem.getCheckOnClick = mini_MenuItem_getCheckOnClick;
mini_MenuItem.setCheckOnClick = mini_MenuItem_setCheckOnClick;
mini_MenuItem.getIconPosition = mini_MenuItem_getIconPosition;
mini_MenuItem.setIconPosition = mini_MenuItem_setIconPosition;
mini_MenuItem.getIconStyle = mini_MenuItem_getIconStyle;
mini_MenuItem.setIconStyle = mini_MenuItem_setIconStyle;
mini_MenuItem.getImg = mini_MenuItem_getImg;
mini_MenuItem.setImg = mini_MenuItem_setImg;
mini_MenuItem.getIconCls = mini_MenuItem_getIconCls;
mini_MenuItem.setIconCls = mini_MenuItem_setIconCls;
mini_MenuItem.getText = mini_MenuItem_getText;
mini_MenuItem.setText = mini_MenuItem_setText;
mini_MenuItem.doUpdate = mini_MenuItem_doUpdate;
mini_MenuItem._hasChildMenu = mini_MenuItem__hasChildMenu;
mini_MenuItem._doUpdateIcon = mini_MenuItem__doUpdateIcon;
mini_MenuItem._getIconImg = mini_MenuItem__getIconImg;
mini_MenuItem.within = mini_MenuItem_within;
mini_MenuItem.destroy = mini_MenuItem_destroy;
mini_MenuItem.o0oO = mini_MenuItem_o0oO;
mini_MenuItem._initEvents = mini_MenuItem__initEvents;
mini_MenuItem._create = mini_MenuItem__create;
mini_MenuItem.set = mini_MenuItem_set;
mini.regClass(mini.MenuItem, "menuitem");
mini.Separator = function() {
    mini.Separator.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.Separator, mini.Control, {
    _clearBorder: false,
    uiCls: "mini-separator",
    _create: function() {
        this.el = document.createElement("span");
        this.el.className = "mini-separator"
    }
});
mini.regClass(mini.Separator, "separator");
mini.OutlookBar = function() {
    this.ol1O();
    mini.OutlookBar.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.OutlookBar, mini.Control, {
    width: 180,
    expandOnLoad: false,
    activeIndex: -1,
    autoCollapse: false,
    groupCls: "",
    groupStyle: "",
    groupHeaderCls: "",
    groupHeaderStyle: "",
    groupBodyCls: "",
    groupBodyStyle: "",
    groupHoverCls: "",
    groupActiveCls: "",
    allowAnim: true,
    imgPath: "",
    uiCls: "mini-outlookbar",
    _GroupId: 1
});
mini_OutlookBar = mini.OutlookBar.prototype;
mini_OutlookBar.getAttrs = mini_OutlookBar_getAttrs;
mini_OutlookBar.parseGroups = mini_OutlookBar_parseGroups;
mini_OutlookBar.__OnClick = mini_OutlookBar_Ol1o1;
mini_OutlookBar.llO1Oo = mini_OutlookBar_llO1Oo;
mini_OutlookBar.lOOO0l = mini_OutlookBar_lOOO0l;
mini_OutlookBar.expandGroup = mini_OutlookBar_expandGroup;
mini_OutlookBar.collapseGroup = mini_OutlookBar_collapseGroup;
mini_OutlookBar.toggleGroup = mini_OutlookBar_toggleGroup;
mini_OutlookBar.hideGroup = mini_OutlookBar_hideGroup;
mini_OutlookBar.showGroup = mini_OutlookBar_showGroup;
mini_OutlookBar.getActiveGroup = mini_OutlookBar_getActiveGroup;
mini_OutlookBar.getActiveIndex = mini_OutlookBar_getActiveIndex;
mini_OutlookBar.setActiveIndex = mini_OutlookBar_setActiveIndex;
mini_OutlookBar.getExpandOnLoad = mini_OutlookBar_getExpandOnLoad;
mini_OutlookBar.setExpandOnLoad = mini_OutlookBar_setExpandOnLoad;
mini_OutlookBar.getAutoCollapse = mini_OutlookBar_getAutoCollapse;
mini_OutlookBar.setAutoCollapse = mini_OutlookBar_setAutoCollapse;
mini_OutlookBar.getGroupBodyEl = mini_OutlookBar_getGroupBodyEl;
mini_OutlookBar.getGroupEl = mini_OutlookBar_getGroupEl;
mini_OutlookBar.OO01l = mini_OutlookBar_OO01l;
mini_OutlookBar.getGroup = mini_OutlookBar_getGroup;
mini_OutlookBar.ooo01 = mini_OutlookBar_ooo01;
mini_OutlookBar.l1OO1 = mini_OutlookBar_l1OO1;
mini_OutlookBar.doLayout = mini_OutlookBar_doLayout;
mini_OutlookBar.doUpdate = mini_OutlookBar_doUpdate;
mini_OutlookBar._getIconImg = mini_OutlookBar__getIconImg;
mini_OutlookBar.moveGroup = mini_OutlookBar_moveGroup;
mini_OutlookBar.removeAll = mini_OutlookBar_removeAll;
mini_OutlookBar.removeGroup = mini_OutlookBar_removeGroup;
mini_OutlookBar.updateGroup = mini_OutlookBar_updateGroup;
mini_OutlookBar.addGroup = mini_OutlookBar_addGroup;
mini_OutlookBar.getGroups = mini_OutlookBar_getGroups;
mini_OutlookBar.setGroups = mini_OutlookBar_setGroups;
mini_OutlookBar.getImgPath = mini_OutlookBar_getImgPath;
mini_OutlookBar.setImgPath = mini_OutlookBar_setImgPath;
mini_OutlookBar.createGroup = mini_OutlookBar_createGroup;
mini_OutlookBar.lOOO = mini_OutlookBar_lOOO;
mini_OutlookBar.ol1O = mini_OutlookBar_ol1O;
mini_OutlookBar.l1O111 = mini_OutlookBar_l1O111;
mini_OutlookBar.destroy = mini_OutlookBar_destroy;
mini_OutlookBar._initEvents = mini_OutlookBar__initEvents;
mini_OutlookBar._create = mini_OutlookBar__create;
mini_OutlookBar.set = mini_OutlookBar_set;
mini.regClass(mini.OutlookBar, "outlookbar");
mini.OutlookMenu = function() {
    mini.OutlookMenu.superclass.constructor.apply(this, arguments);
    this.data = []
};
mini.extend(mini.OutlookMenu, mini.OutlookBar, {
    url: "",
    textField: "text",
    iconField: "iconCls",
    urlField: "url",
    resultAsTree: false,
    itemsField: "children",
    idField: "id",
    parentField: "pid",
    style: "width:100%;height:100%;",
    uiCls: "mini-outlookmenu",
    O1l0l1: null,
    imgPath: "",
    expandOnLoad: false,
    autoCollapse: true,
    activeIndex: 0
});
mini_OutlookMenu = mini.OutlookMenu.prototype;
mini_OutlookMenu.o011o = mini_OutlookMenu_o011o;
mini_OutlookMenu.olloo = mini_OutlookMenu_olloo;
mini_OutlookMenu._onDrawNodes = mini_OutlookMenu__onDrawNodes;
mini_OutlookMenu.createNavBarMenu = mini_OutlookMenu_createNavBarMenu;
mini_OutlookMenu.getImgPath = mini_OutlookMenu_getImgPath;
mini_OutlookMenu.setImgPath = mini_OutlookMenu_setImgPath;
mini_OutlookMenu.getAttrs = mini_OutlookMenu_getAttrs;
mini_OutlookMenu._getOwnerMenu = mini_OutlookMenu__getOwnerMenu;
mini_OutlookMenu.getList = mini_OutlookMenu_getList;
mini_OutlookMenu.getNode = mini_OutlookMenu_getNode;
mini_OutlookMenu.findNodes = mini_OutlookMenu_findNodes;
mini_OutlookMenu.selectNode = mini_OutlookMenu_selectNode;
mini_OutlookMenu.getSelected = mini_OutlookMenu_getSelected;
mini_OutlookMenu.getParentField = mini_OutlookMenu_getParentField;
mini_OutlookMenu.setParentField = mini_OutlookMenu_setParentField;
mini_OutlookMenu.getIdField = mini_OutlookMenu_getIdField;
mini_OutlookMenu.setIdField = mini_OutlookMenu_setIdField;
mini_OutlookMenu.getNodesField = mini_OutlookMenu_getNodesField;
mini_OutlookMenu.setNodesField = mini_OutlookMenu_setNodesField;
mini_OutlookMenu.getResultAsTree = mini_OutlookMenu_getResultAsTree;
mini_OutlookMenu.setResultAsTree = mini_OutlookMenu_setResultAsTree;
mini_OutlookMenu.getUrlField = mini_OutlookMenu_getUrlField;
mini_OutlookMenu.setUrlField = mini_OutlookMenu_setUrlField;
mini_OutlookMenu.getIconField = mini_OutlookMenu_getIconField;
mini_OutlookMenu.setIconField = mini_OutlookMenu_setIconField;
mini_OutlookMenu.getTextField = mini_OutlookMenu_getTextField;
mini_OutlookMenu.setTextField = mini_OutlookMenu_setTextField;
mini_OutlookMenu.getUrl = mini_OutlookMenu_getUrl;
mini_OutlookMenu.setUrl = mini_OutlookMenu_setUrl;
mini_OutlookMenu.setData = mini_OutlookMenu_setData;
mini_OutlookMenu.load = mini_OutlookMenu_load;
mini_OutlookMenu.loadList = mini_OutlookMenu_loadList;
mini_OutlookMenu._doLoad = mini_OutlookMenu__doLoad;
mini_OutlookMenu.l111OlFields = mini_OutlookMenu_l111OlFields;
mini_OutlookMenu._destroyTrees = mini_OutlookMenu__destroyTrees;
mini_OutlookMenu.destroy = mini_OutlookMenu_destroy;
mini_OutlookMenu.set = mini_OutlookMenu_set;
mini.regClass(mini.OutlookMenu, "outlookmenu");
mini.OutlookTree = function() {
    mini.OutlookTree.superclass.constructor.apply(this, arguments);
    this.data = []
};
mini.extend(mini.OutlookTree, mini.OutlookBar, {
    url: "",
    textField: "text",
    iconField: "iconCls",
    urlField: "url",
    resultAsTree: false,
    nodesField: "children",
    idField: "id",
    parentField: "pid",
    style: "width:100%;height:100%;",
    showTreeLines: true,
    uiCls: "mini-outlooktree",
    O1l0l1: null,
    expandOnLoad: false,
    showArrow: false,
    showTreeIcon: true,
    expandOnNodeClick: false,
    expandNodeOnLoad: false,
    imgPath: "",
    autoCollapse: true,
    activeIndex: 0
});
mini_OutlookTree = mini.OutlookTree.prototype;
mini_OutlookTree.drawnode = mini_OutlookTree__Ol0O1l;
mini_OutlookTree.nodeselect = mini_OutlookTree_O00ll0;
mini_OutlookTree.nodeclick = mini_OutlookTree_l1l1;
mini_OutlookTree.__OnNodeMouseDown = mini_OutlookTree___OnNodeMouseDown;
mini_OutlookTree.createNavBarTree = mini_OutlookTree_createNavBarTree;
mini_OutlookTree.getImgPath = mini_OutlookTree_getImgPath;
mini_OutlookTree.setImgPath = mini_OutlookTree_setImgPath;
mini_OutlookTree.getAttrs = mini_OutlookTree_getAttrs;
mini_OutlookTree._handlerTree = mini_OutlookTree__handlerTree;
mini_OutlookTree.getExpandNodeOnLoad = mini_OutlookTree_getExpandNodeOnLoad;
mini_OutlookTree.setExpandNodeOnLoad = mini_OutlookTree_setExpandNodeOnLoad;
mini_OutlookTree.getExpandOnNodeClick = mini_OutlookTree_getExpandOnNodeClick;
mini_OutlookTree.setExpandOnNodeClick = mini_OutlookTree_setExpandOnNodeClick;
mini_OutlookTree.getShowTreeIcon = mini_OutlookTree_getShowTreeIcon;
mini_OutlookTree.setShowTreeIcon = mini_OutlookTree_setShowTreeIcon;
mini_OutlookTree.getShowArrow = mini_OutlookTree_getShowArrow;
mini_OutlookTree.setShowArrow = mini_OutlookTree_setShowArrow;
mini_OutlookTree.getExpandOnLoad = mini_OutlookTree_getExpandOnLoad;
mini_OutlookTree.setExpandOnLoad = mini_OutlookTree_setExpandOnLoad;
mini_OutlookTree._getOwnerTree = mini_OutlookTree__getOwnerTree;
mini_OutlookTree.getList = mini_OutlookTree_getList;
mini_OutlookTree.getNode = mini_OutlookTree_getNode;
mini_OutlookTree.findNodes = mini_OutlookTree_findNodes;
mini_OutlookTree.collapseNode = mini_OutlookTree_collapseNode;
mini_OutlookTree.expandNode = mini_OutlookTree_expandNode;
mini_OutlookTree.expandPath = mini_OutlookTree_expandPath;
mini_OutlookTree.selectNode = mini_OutlookTree_selectNode;
mini_OutlookTree.isSelectedNode = mini_OutlookTree_isSelectedNode;
mini_OutlookTree.getSelected = mini_OutlookTree_getSelected;
mini_OutlookTree.getParentField = mini_OutlookTree_getParentField;
mini_OutlookTree.setParentField = mini_OutlookTree_setParentField;
mini_OutlookTree.getIdField = mini_OutlookTree_getIdField;
mini_OutlookTree.setIdField = mini_OutlookTree_setIdField;
mini_OutlookTree.getNodesField = mini_OutlookTree_getNodesField;
mini_OutlookTree.setNodesField = mini_OutlookTree_setNodesField;
mini_OutlookTree.getResultAsTree = mini_OutlookTree_getResultAsTree;
mini_OutlookTree.setResultAsTree = mini_OutlookTree_setResultAsTree;
mini_OutlookTree.getUrlField = mini_OutlookTree_getUrlField;
mini_OutlookTree.setUrlField = mini_OutlookTree_setUrlField;
mini_OutlookTree.getIconField = mini_OutlookTree_getIconField;
mini_OutlookTree.setIconField = mini_OutlookTree_setIconField;
mini_OutlookTree.getTextField = mini_OutlookTree_getTextField;
mini_OutlookTree.setTextField = mini_OutlookTree_setTextField;
mini_OutlookTree.getUrl = mini_OutlookTree_getUrl;
mini_OutlookTree.setUrl = mini_OutlookTree_setUrl;
mini_OutlookTree.getData = mini_OutlookTree_getData;
mini_OutlookTree.setData = mini_OutlookTree_setData;
mini_OutlookTree.load = mini_OutlookTree_load;
mini_OutlookTree.loadList = mini_OutlookTree_loadList;
mini_OutlookTree._doLoad = mini_OutlookTree__doLoad;
mini_OutlookTree.l111OlFields = mini_OutlookTree_l111OlFields;
mini_OutlookTree._destroyTrees = mini_OutlookTree__destroyTrees;
mini_OutlookTree.destroy = mini_OutlookTree_destroy;
mini_OutlookTree.set = mini_OutlookTree_set;
mini.regClass(mini.OutlookTree, "outlooktree");
mini.NavBar = function() {
    mini.NavBar.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.NavBar, mini.OutlookBar, {
    uiCls: "mini-navbar"
});
mini.regClass(mini.NavBar, "navbar");
mini.NavBarMenu = function() {
    mini.NavBarMenu.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.NavBarMenu, mini.OutlookMenu, {
    uiCls: "mini-navbarmenu"
});
mini.regClass(mini.NavBarMenu, "navbarmenu");
mini.NavBarTree = function() {
    mini.NavBarTree.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.NavBarTree, mini.OutlookTree, {
    uiCls: "mini-navbartree"
});
mini.regClass(mini.NavBarTree, "navbartree");
mini.ToolBar = function() {
    mini.ToolBar.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.ToolBar, mini.Container, {
    _clearBorder: false,
    style: "",
    uiCls: "mini-toolbar",
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "mini-toolbar"
    },
    _initEvents: function() {},
    doLayout: function() {
        if (!this.canLayout()) return;
        var A = mini.getChildNodes(this.el, true);
        for (var $ = 0, _ = A.length; $ < _; $++) mini.layout(A[$])
    },
    set_bodyParent: function($) {
        if (!$) return;
        this.el = $;
        this.doLayout()
    },
    getAttrs: function(el) {
        var attrs = {};
        mini._ParseString(el, attrs, ["id", "borderStyle", "data-options"]);
        this.el = el;
        this.el.uid = this.uid;
        this.addCls(this.uiCls);
        var options = attrs["data-options"];
        if (options) {
            options = eval("(" + options + ")");
            if (options) mini.copyTo(attrs, options)
        }
        return attrs
    }
});
mini.regClass(mini.ToolBar, "toolbar");
mini.Pager = function() {
    mini.Pager.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.Pager, mini.Control, {
    pageIndex: 0,
    pageSize: 10,
    totalCount: 0,
    totalPage: 0,
    showPageIndex: true,
    showPageSize: true,
    showTotalCount: true,
    showPageInfo: true,
    showReloadButton: true,
    _clearBorder: false,
    showButtonText: false,
    showButtonIcon: true,
    sizeText: "",
    firstText: "\u9996\u9875",
    prevText: "\u4e0a\u4e00\u9875",
    nextText: "\u4e0b\u4e00\u9875",
    lastText: "\u5c3e\u9875",
    reloadText: "\u5237\u65b0",
    pageInfoText: "\u6bcf\u9875 {0} \u6761,\u5171 {1} \u6761",
    sizeList: [10, 20, 50, 100],
    uiCls: "mini-pager",
    pageSizeWidth: 50
});
mini_Pager = mini.Pager.prototype;
mini_Pager.getAttrs = mini_Pager_getAttrs;
mini_Pager.onPageChanged = mini_Pager_onPageChanged;
mini_Pager.o1loo0 = mini_Pager_o1loo0;
mini_Pager.l0l0 = mini_Pager_l0l0;
mini_Pager.update = mini_Pager_update;
mini_Pager.getTotalPage = mini_Pager_getTotalPage;
mini_Pager.getShowButtonIcon = mini_Pager_getShowButtonIcon;
mini_Pager.setShowButtonIcon = mini_Pager_setShowButtonIcon;
mini_Pager.getShowButtonText = mini_Pager_getShowButtonText;
mini_Pager.setShowButtonText = mini_Pager_setShowButtonText;
mini_Pager.getShowReloadButton = mini_Pager_getShowReloadButton;
mini_Pager.setShowReloadButton = mini_Pager_setShowReloadButton;
mini_Pager.getShowPageInfo = mini_Pager_getShowPageInfo;
mini_Pager.setShowPageInfo = mini_Pager_setShowPageInfo;
mini_Pager.getShowTotalCount = mini_Pager_getShowTotalCount;
mini_Pager.setShowTotalCount = mini_Pager_setShowTotalCount;
mini_Pager.getShowPageIndex = mini_Pager_getShowPageIndex;
mini_Pager.setShowPageIndex = mini_Pager_setShowPageIndex;
mini_Pager.getShowPageSize = mini_Pager_getShowPageSize;
mini_Pager.setShowPageSize = mini_Pager_setShowPageSize;
mini_Pager.getPageSizeWidth = mini_Pager_getPageSizeWidth;
mini_Pager.setPageSizeWidth = mini_Pager_setPageSizeWidth;
mini_Pager.getSizeList = mini_Pager_getSizeList;
mini_Pager.setSizeList = mini_Pager_setSizeList;
mini_Pager.getTotalCount = mini_Pager_getTotalCount;
mini_Pager.setTotalCount = mini_Pager_setTotalCount;
mini_Pager.getPageSize = mini_Pager_getPageSize;
mini_Pager.setPageSize = mini_Pager_setPageSize;
mini_Pager.getPageIndex = mini_Pager_getPageIndex;
mini_Pager.setPageIndex = mini_Pager_setPageIndex;
mini_Pager.doLayout = mini_Pager_doLayout;
mini_Pager._initEvents = mini_Pager__initEvents;
mini_Pager.getButtonsEl = mini_Pager_getButtonsEl;
mini_Pager.setButtons = mini_Pager_setButtons;
mini_Pager.destroy = mini_Pager_destroy;
mini_Pager._create = mini_Pager__create;
mini_Pager.set = mini_Pager_set;
mini.regClass(mini.Pager, "pager");
mini.DataBinding = function() {
    this._bindFields = [];
    this._bindForms = [];
    mini.DataBinding.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.DataBinding, mini.Component, {});
mini_DataBinding = mini.DataBinding.prototype;
mini_DataBinding.O01l = mini_DataBinding_O01l;
mini_DataBinding.l10oo0 = mini_DataBinding_l10oo0;
mini_DataBinding.bindForm = mini_DataBinding_bindForm;
mini_DataBinding.bindField = mini_DataBinding_bindField;
mini.regClass(mini.DataBinding, "databinding");
mini.DataSet = function() {
    this._sources = {};
    this._data = {};
    this._links = [];
    this._originals = {};
    mini.DataSet.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.DataSet, mini.Component, {});
mini_DataSet = mini.DataSet.prototype;
mini_DataSet.__OnDataSelectionChanged = mini_DataSet___OnDataSelectionChanged;
mini_DataSet._getLinks = mini_DataSet_loloOl;
mini_DataSet._getParentSource = mini_DataSet_l1lo;
mini_DataSet.__OnDataSelectionChanged = mini_DataSet_Oo1l;
mini_DataSet.__OnRowChanged = mini_DataSet_l0l00;
mini_DataSet._getRecord = mini_DataSet_l110O0;
mini_DataSet._getNameByListControl = mini_DataSet_l001;
mini_DataSet.getData = mini_DataSet_getData;
mini_DataSet.clearData = mini_DataSet_clearData;
mini_DataSet.addLink = mini_DataSet_addLink;
mini_DataSet.add = mini_DataSet_add;
mini.regClass(mini.DataSet, "dataset");
if (typeof mini_doload == "undefined") mini_doload = function($) {};
mini.DataSource = function() {
    mini.DataSource.superclass.constructor.apply(this, arguments);
    this._init()
};
mini.extend(mini.DataSource, mini.Component, {
    idField: "id",
    textField: "text",
    loaded: false,
    Oo0o: "_id",
    Olo0: true,
    _autoCreateNewID: false,
    _init: function() {
        this.source = [];
        this.dataview = [];
        this.visibleRows = null;
        this.list = null;
        this._ids = {};
        this._removeds = [];
        if (this.Olo0) this._originals = {};
        this._errors = {};
        this.O1l0l1 = null;
        this.Oo1l1o = [];
        this.lOlOO = {};
        this.__changeCount = 0
    },
    getSource: function() {
        return this.source
    },
    getList: function() {
        return this.source.clone()
    },
    getDataView: function() {
        return this.dataview.clone()
    },
    getVisibleRows: function() {
        if (!this.visibleRows) this.visibleRows = this.getDataView().clone();
        return this.visibleRows
    },
    setData: function($) {
        this.loadData($)
    },
    loadData: function($) {
        if (!mini.isArray($)) $ = [];
        this._init();
        this.o0o0l($);
        this.l1oolO();
        this.fire("loaddata");
        return true
    },
    o0o0l: function(C) {
        this.source = C;
        this.dataview = C;
        var A = this.source,
            B = this._ids;
        for (var _ = 0, D = A.length; _ < D; _++) {
            var $ = A[_];
            $._id = mini.DataSource.RecordId++;
            B[$._id] = $;
            $._uid = $._id
        }
    },
    clearData: function() {
        this._init();
        this.l1oolO();
        this.fire("cleardata")
    },
    clear: function() {
        this.clearData()
    },
    updateRecord: function(_, D, A) {
        if (mini.isNull(_)) return;
        var $ = mini._getMap,
            B = mini._setMap;
        this.fire("beforeupdate", {
            record: _
        });
        if (typeof D == "string") {
            var E = $(D, _);
            if (mini.isEquals(E, A)) return false;
            this.beginChange();
            B(D, A, _);
            this._setModified(_, D, E);
            this.endChange()
        } else {
            this.beginChange();
            for (var C in D) {
                var E = $(C, _),
                    A = D[C];
                if (mini.isEquals(E, A)) continue;
                B(C, A, _);
                this._setModified(_, C, E)
            }
            this.endChange("update")
        }
        this.fire("update", {
            record: _
        })
    },
    deleteRecord: function($) {
        this._setDeleted($);
        this.l1oolO();
        this.fire("delete", {
            record: $
        })
    },
    getby_id: function($) {
        $ = typeof $ == "object" ? $._id : $;
        return this._ids[$]
    },
    getbyId: function(F) {
        var D = typeof F;
        if (D == "number") return this.getAt(F);
        if (typeof F == "object") {
            if (this.getby_id(F)) return F;
            F = F[this.idField]
        }
        F = String(F);
        var C = this.ids;
        if (!C) {
            C = this.ids = {};
            var B = this.getList();
            for (var _ = 0, E = B.length; _ < E; _++) {
                var $ = B[_],
                    A = $[this.idField];
                if (!mini.isNull(A)) C[A] = $
            }
        }
        return C[F]
    },
    getsByIds: function(_) {
        if (mini.isNull(_)) _ = "";
        _ = String(_);
        var D = [],
            A = String(_).split(",");
        for (var $ = 0, C = A.length; $ < C; $++) {
            var B = this.getbyId(A[$]);
            if (B) D.push(B)
        }
        return D
    },
    getRecord: function($) {
        return this.getRow($)
    },
    getRow: function($) {
        var _ = typeof $;
        if (_ == "string") return this.getbyId($);
        else if (_ == "number") return this.getAt($);
        else if (_ == "object") return $
    },
    delimiter: ",",
    ll0l0: function(B, $) {
        if (mini.isNull(B)) B = [];
        $ = $ || this.delimiter;
        if (typeof B == "string" || typeof B == "number") B = this.getsByIds(B);
        else if (!mini.isArray(B)) B = [B];
        var C = [],
            D = [];
        for (var A = 0, E = B.length; A < E; A++) {
            var _ = B[A];
            if (_) {
                C.push(this.getItemValue(_));
                D.push(this.getItemText(_))
            }
        }
        return [C.join($), D.join($)]
    },
    getItemValue: function($) {
        if (!$) return "";
        var _ = mini._getMap(this.idField, $);
        return mini.isNull(_) ? "" : String(_)
    },
    getItemText: function($) {
        if (!$) return "";
        var _ = mini._getMap(this.textField, $);
        return mini.isNull(_) ? "" : String(_)
    },
    isModified: function(A, _) {
        var $ = this._originals[A[this.Oo0o]];
        if (!$) return false;
        if (mini.isNull(_)) return false;
        return $.hasOwnProperty(_)
    },
    hasRecord: function($) {
        return !!this.getby_id($)
    },
    findRecords: function(D, A) {
        var F = typeof D == "function",
            I = D,
            E = A || this,
            C = this.source,
            B = [];
        for (var _ = 0, H = C.length; _ < H; _++) {
            var $ = C[_];
            if (F) {
                var G = I.call(E, $);
                if (G == true) B[B.length] = $;
                if (G === 1) break
            } else if ($[D] == A) B[B.length] = $
        }
        return B
    },
    findRecord: function(A, $) {
        var _ = this.findRecords(A, $);
        return _[0]
    },
    each: function(A, _) {
        var $ = this.getDataView().clone();
        _ = _ || this;
        mini.forEach($, A, _)
    },
    getCount: function() {
        return this.getDataView().length
    },
    setIdField: function($) {
        this.idField = $
    },
    setTextField: function($) {
        this.textField = $
    },
    __changeCount: 0,
    beginChange: function() {
        this.__changeCount++
    },
    endChange: function($, _) {
        this.__changeCount--;
        if (this.__changeCount < 0) this.__changeCount = 0;
        if ((_ !== false && this.__changeCount == 0) || _ == true) {
            this.__changeCount = 0;
            this.l1oolO($)
        }
    },
    l1oolO: function($) {
        this.ids = null;
        this.visibleRows = null;
        this.list = null;
        if (this.__changeCount == 0) this.fire("datachanged")
    },
    _setAdded: function($) {
        $._id = mini.DataSource.RecordId++;
        if (this._autoCreateNewID && !$[this.idField]) $[this.idField] = UUID();
        $._uid = $._id;
        $._state = "added";
        this._ids[$._id] = $;
        delete this._originals[$[this.Oo0o]]
    },
    _setModified: function($, A, B) {
        if ($._state != "added" && $._state != "deleted" && $._state != "removed") {
            $._state = "modified";
            var _ = this.l1Oo10($);
            if (!_.hasOwnProperty(A)) _[A] = B
        }
    },
    _setDeleted: function($) {
        if ($._state != "added" && $._state != "deleted" && $._state != "removed") $._state = "deleted"
    },
    _setRemoved: function($) {
        delete this._ids[$._id];
        if ($._state != "added" && $._state != "removed") {
            $._state = "removed";
            delete this._originals[$[this.Oo0o]];
            this._removeds.push($)
        }
    },
    l1Oo10: function($) {
        var A = $[this.Oo0o],
            _ = this._originals[A];
        if (!_) _ = this._originals[A] = {};
        return _
    },
    O1l0l1: null,
    Oo1l1o: [],
    lOlOO: null,
    multiSelect: false,
    isSelected: function($) {
        if (!$) return false;
        if (typeof $ != "string") $ = $._id;
        return !!this.lOlOO[$]
    },
    setSelected: function($) {
        $ = this.getby_id($);
        var _ = this.getSelected();
        if (_ != $) {
            this.O1l0l1 = $;
            if ($) this.select($);
            else this.deselect(this.getSelected());
            this.oooooo($)
        }
    },
    getSelected: function() {
        if (this.isSelected(this.O1l0l1)) return this.O1l0l1;
        return this.Oo1l1o[0]
    },
    setCurrent: function($) {
        this.setSelected($)
    },
    getCurrent: function() {
        return this.getSelected()
    },
    getSelecteds: function() {
        return this.Oo1l1o.clone()
    },
    select: function($, _) {
        if (mini.isNull($)) return;
        this.selects([$], _)
    },
    deselect: function($, _) {
        if (mini.isNull($)) return;
        this.deselects([$], _)
    },
    selectAll: function($) {
        this.selects(this.getList(), $)
    },
    deselectAll: function($) {
        this.deselects(this.getSelecteds(), $)
    },
    _fireSelect: function($, _) {
        var A = {
            record: $,
            cancel: false
        };
        this.fire(_, A);
        return !A.cancel
    },
    selects: function(A, D) {
        if (!mini.isArray(A)) return;
        A = A.clone();
        if (this.multiSelect == false) {
            this.deselects(this.getSelecteds());
            if (A.length > 0) A.length = 1;
            this.Oo1l1o = [];
            this.lOlOO = {}
        }
        var B = [];
        for (var _ = 0, C = A.length; _ < C; _++) {
            var $ = this.getbyId(A[_]);
            if (!$) continue;
            if (!this.isSelected($)) {
                if (D !== false)
                    if (!this._fireSelect($, "beforeselect")) continue;
                this.Oo1l1o.push($);
                this.lOlOO[$._id] = $;
                B.push($);
                if (D !== false) this.fire("select", {
                    record: $
                })
            }
        }
        this._OnSelectionChanged(A, true, B, D)
    },
    deselects: function(C, E) {
        if (!mini.isArray(C)) return;
        C = C.clone();
        var D = [];
        for (var A = C.length - 1; A >= 0; A--) {
            var _ = this.getbyId(C[A]);
            if (!_) continue;
            if (this.isSelected(_)) {
                if (E !== false)
                    if (!this._fireSelect(_, "beforedeselect")) continue;
                delete this.lOlOO[_._id];
                D.push(_)
            }
        }
        this.Oo1l1o = [];
        var B = this.lOlOO;
        for (A in B) {
            var $ = B[A];
            if ($._id) this.Oo1l1o.push($)
        }
        for (A = C.length - 1; A >= 0; A--) {
            _ = this.getbyId(C[A]);
            if (!_) continue;
            if (E !== false) this.fire("deselect", {
                record: _
            })
        }
        this._OnSelectionChanged(C, false, D, E)
    },
    _OnSelectionChanged: function(A, E, B, C) {
        var D = {
            fireEvent: C,
            records: A,
            select: E,
            selected: this.getSelected(),
            selecteds: this.getSelecteds(),
            _records: B
        };
        this.fire("SelectionChanged", D);
        var _ = this._current,
            $ = this.getCurrent();
        if (_ != $) {
            this._current = $;
            this.oooooo($)
        }
    },
    oooooo: function($) {
        if (this._currentTimer) clearTimeout(this._currentTimer);
        var _ = this;
        this._currentTimer = setTimeout(function() {
            _._currentTimer = null;
            var A = {
                record: $
            };
            _.fire("CurrentChanged", A)
        }, 30)
    },
    lollO0: function() {
        for (var _ = this.Oo1l1o.length - 1; _ >= 0; _--) {
            var $ = this.Oo1l1o[_],
                A = this.getby_id($._id);
            if (!A) {
                this.Oo1l1o.removeAt(_);
                delete this.lOlOO[$._id]
            }
        }
        if (this.O1l0l1 && this.getby_id(this.O1l0l1._id) == null) this.O1l0l1 = null
    },
    setMultiSelect: function($) {
        if (this.multiSelect != $) {
            this.multiSelect = $;
            if ($ == false);
        }
    },
    getMultiSelect: function() {
        return this.multiSelect
    },
    selectPrev: function() {
        var _ = this.getSelected();
        if (!_) _ = this.getAt(0);
        else {
            var $ = this.indexOf(_);
            _ = this.getAt($ - 1)
        }
        if (_) {
            this.deselectAll();
            this.select(_);
            this.setCurrent(_)
        }
    },
    selectNext: function() {
        var _ = this.getSelected();
        if (!_) _ = this.getAt(0);
        else {
            var $ = this.indexOf(_);
            _ = this.getAt($ + 1)
        }
        if (_) {
            this.deselectAll();
            this.select(_);
            this.setCurrent(_)
        }
    },
    selectFirst: function() {
        var $ = this.getAt(0);
        if ($) {
            this.deselectAll();
            this.select($);
            this.setCurrent($)
        }
    },
    selectLast: function() {
        var _ = this.getVisibleRows(),
            $ = this.getAt(_.length - 1);
        if ($) {
            this.deselectAll();
            this.select($);
            this.setCurrent($)
        }
    },
    getSelectedsId: function($) {
        var A = this.getSelecteds(),
            _ = this.ll0l0(A, $);
        return _[0]
    },
    getSelectedsText: function($) {
        var A = this.getSelecteds(),
            _ = this.ll0l0(A, $);
        return _[1]
    },
    _filterInfo: null,
    _sortInfo: null,
    filter: function(_, $) {
        if (typeof _ != "function") return;
        $ = $ || this;
        this._filterInfo = [_, $];
        this.lOOO0();
        this.lOlOo0();
        this.l1oolO();
        this.fire("filter")
    },
    clearFilter: function() {
        if (!this._filterInfo) return;
        this._filterInfo = null;
        this.lOOO0();
        this.lOlOo0();
        this.l1oolO();
        this.fire("filter")
    },
    sort: function(A, _, $) {
        if (typeof A != "function") return;
        _ = _ || this;
        this._sortInfo = [A, _, $];
        this.lOlOo0();
        this.l1oolO();
        this.fire("sort")
    },
    clearSort: function() {
        this._sortInfo = null;
        this.sortField = this.sortOrder = "";
        this.lOOO0();
        this.l1oolO();
        if (this.sortMode == "server") {
            var $ = this.getLoadParams();
            $.sortField = "";
            $.sortOrder = "";
            this.load($)
        }
        this.fire("filter")
    },
    _doClientSortField: function(C, B, _) {
        var A = this._getSortFnByField(C, _);
        if (!A) return;
        var $ = B == "desc";
        this.sort(A, this, $)
    },
    _getSortFnByField: function(B, C) {
        if (!B) return null;
        var A = null,
            _ = mini.sortTypes[C];
        if (!_) _ = mini.sortTypes["string"];

        function $(E, I) {
            var F = mini._getMap(B, E),
                D = mini._getMap(B, I),
                H = mini.isNull(F) || F === "",
                A = mini.isNull(D) || D === "";
            if (H) return 0;
            if (A) return 1;
            if (C == "chinese") return F.localeCompare(D);
            var $ = _(F),
                G = _(D);
            if ($ > G) return 1;
            else return 0
        }
        A = $;
        return A
    },
    ajaxOptions: null,
    autoLoad: false,
    url: "",
    pageSize: 10,
    pageIndex: 0,
    totalCount: 0,
    totalPage: 0,
    sortField: "",
    sortOrder: "",
    loadParams: null,
    getLoadParams: function() {
        return this.loadParams || {}
    },
    sortMode: "server",
    pageIndexField: "pageIndex",
    pageSizeField: "pageSize",
    sortFieldField: "sortField",
    sortOrderField: "sortOrder",
    totalField: "total",
    dataField: "data",
    startField: "",
    limitField: "",
    errorField: "error",
    errorMsgField: "errorMsg",
    stackTraceField: "stackTrace",
    load: function($, C, B, A) {
        if (typeof $ == "string") {
            this.setUrl($);
            return;
        }
        if (this._loadTimer) clearTimeout(this._loadTimer);
        this.loadParams = $ || {};
        if (!mini.isNumber(this.loadParams.pageIndex)) this.loadParams.pageIndex = 0;
        if (this._xhr) this._xhr.abort();
        if (this.ajaxAsync && mini_ajaxAsyncInvoke) {
            var _ = this;
            this._loadTimer = setTimeout(function() {
                _._doLoadAjax(_.loadParams, C, B, A);
                _._loadTimer = null;
            }, 1);
        } else this._doLoadAjax(this.loadParams, C, B, A);
    },
    reload: function(A, _, $) {
        this.load(this.loadParams, A, _, $)
    },
    gotoPage: function($, A) {
        var _ = this.loadParams || {};
        if (mini.isNumber($)) _.pageIndex = $;
        if (mini.isNumber(A)) _.pageSize = A;
        this.load(_)
    },
    sortBy: function(A, _) {
        this.sortField = A;
        this.sortOrder = _ == "asc" ? "asc" : "desc";
        if (this.sortMode == "server") {
            var $ = this.getLoadParams();
            $.sortField = A;
            $.sortOrder = _;
            $.pageIndex = this.pageIndex;
            this.load($)
        }
    },
    setSortField: function($) {
        this.sortField = $;
        if (this.sortMode == "server") {
            var _ = this.getLoadParams();
            _.sortField = $
        }
    },
    setSortOrder: function($) {
        this.sortOrder = $;
        if (this.sortMode == "server") {
            var _ = this.getLoadParams();
            _.sortOrder = $
        }
    },
    checkSelectOnLoad: true,
    selectOnLoad: false,
    ajaxData: null,
    ajaxAsync: true,
    ajaxType: "",
    _doLoadAjax: function(L, N, _, D, G) {
        L = L || {};
        if (mini.isNull(L.pageIndex)) L.pageIndex = this.pageIndex;
        if (mini.isNull(L.pageSize)) L.pageSize = this.pageSize;
        if (L.sortField) this.sortField = L.sortField;
        if (L.sortOrder) this.sortOrder = L.sortOrder;
        L.sortField = this.sortField;
        L.sortOrder = this.sortOrder;
        this.loadParams = L;
        var M = this._evalUrl(),
            A = this._evalType(M),
            I = o0ll1(this.ajaxData, this);
        //add by luozp 如果url没有时 不在请求
        if (!M || M == "" ) {
            this.pageIndex = L.pageIndex;
            this.pageSize = L.pageSize;
            return;
        }
    
        jQuery.extend(true, L, I);
        var O = {
            url: M,
            async: this.ajaxAsync,
            type: A,
            data: L,
            params: L,
            cache: false,
            cancel: false
        };
        jQuery.extend(true, O, this.ajaxOptions);
        this._OnBeforeLoad(O);
        if (O.cancel == true) {
            L.pageIndex = this.getPageIndex();
            L.pageSize = this.getPageSize();
            return
        }
        if (O.data != O.params && O.params != L) O.data = O.params;
        if (O.url != M && O.type == A) O.type = this._evalType(O.url);
        var $ = {};
        $[this.pageIndexField] = L.pageIndex;
        $[this.pageSizeField] = L.pageSize;
        if (L.sortField) $[this.sortFieldField] = L.sortField;
        if (L.sortOrder) $[this.sortOrderField] = L.sortOrder;
        if (this.startField && this.limitField) {
            $[this.startField] = L.pageIndex * L.pageSize;
            $[this.limitField] = L.pageSize
        }
        jQuery.extend(true, L, $);
        jQuery.extend(true, O.data, $);
        if (this.sortMode == "client") {
            L[this.sortFieldField] = "";
            L[this.sortOrderField] = ""
        }
        var J = this.getSelected();
        this._currentSelectValue = J ? J[this.idField] : null;
        if (mini.isNumber(this._currentSelectValue)) this._currentSelectValue = String(this._currentSelectValue);
        var P = this.getSelecteds(),
            K = [];
        for (var H = 0, C = P.length; H < C; H++) {
            var F = P[H][this.idField];
            if (!mini.isNull(F)) F = String(F);
            K.push(F)
        }
        this.O1l0l1Value = K.length == 0 ? null : K;
        if (mini.isNumber(this.O1l0l1Value)) this.O1l0l1Value = String(this.O1l0l1Value);
        var B = this;
        B._resultObject = null;
        var E = O.async;
        mini.copyTo(O, {
            success: function(K, U, A) {
                if (!K || K == "null") K = "{tatal:0,data:[] }";
                delete O.params;
                var P = {
                        text: K,
                        result: null,
                        sender: B,
                        options: O,
                        xhr: A
                    },
                    S = null;
                try {
                    mini_doload(P);
                    S = P.result;
                    if (!S) S = mini.decode(K)
                } catch (H) {
                    if (mini_debugger == true) alert(M + "\n json is error.")
                }
                if (S && !mini.isArray(S)) {
                    S.total = parseInt(mini._getMap(B.totalField, S));
                    S.data = mini._getMap(B.dataField, S)
                } else if (S == null) {
                    S = {};
                    S.data = [];
                    S.total = 0
                } else if (mini.isArray(S)) {
                    var C = {};
                    C.data = S;
                    C.total = S.length;
                    S = C
                }
                if (!S.data) S.data = [];
                if (!S.total) S.total = 0;
                B._resultObject = S;
                if (!mini.isArray(S.data)) S.data = [S.data];
                var H = {
                        xhr: A,
                        text: K,
                        textStatus: U,
                        result: S,
                        total: S.total,
                        data: S.data.clone(),
                        pageIndex: L[B.pageIndexField],
                        pageSize: L[B.pageSizeField]
                    },
                    I = mini._getMap(B.errorField, S),
                    T = mini._getMap(B.errorMsgField, S),
                    Q = mini._getMap(B.stackTraceField, S);
                if (mini.isNumber(I) && I != 0 || I === false) {
                    H.textStatus = "servererror";
                    H.errorCode = I;
                    H.stackTrace = Q || "";
                    H.errorMsg = T || "";
                    if (mini_debugger == true) alert(M + "\n" + H.textStatus + "\n" + H.errorMsg + "\n" + H.stackTrace);
                    B.fire("loaderror", H);
                    if (_) _.call(B, H)
                } else if (G) G(H);
                else {
                    B.pageIndex = H.pageIndex;
                    B.pageSize = H.pageSize;
                    B.setTotalCount(H.total);
                    B._OnPreLoad(H);
                    B.loaded = true;
                    B.setData(H.data);
                    if (B.O1l0l1Value && B.checkSelectOnLoad) {
                        var D = [],
                            R = B.O1l0l1Value;
                        if (R.length > 0) {
                            for (var J = 0, F = R.length; J < F; J++) {
                                var $ = B.getbyId(R[J]);
                                if ($) D.push($)
                            }
                            if (D.length) B.selects(D);
                            B.O1l0l1 = B.getbyId(B._currentSelectValue)
                        }
                    }
                    if (B.getSelected() == null && B.selectOnLoad && B.getDataView().length > 0) B.select(0);
                    B.fire("load", H);
                    if (N)
                        if (E) setTimeout(function() {
                            N.call(B, H)
                        }, 20);
                        else N.call(B, H)
                }
            },
            error: function($, D, A) {
                if (D == "abort") return;
                var C = {
                    xhr: $,
                    text: $.responseText,
                    textStatus: D
                };
                C.errorMsg = $.responseText;
                C.errorCode = $.status;
                if (mini_debugger == true) alert(M + "\n" + C.errorCode + "\n" + C.errorMsg);
                B.fire("loaderror", C);
                if (_) _.call(B, C)
            },
            complete: function($, A) {
                var _ = {
                    xhr: $,
                    text: $.responseText,
                    textStatus: A
                };
                B.fire("loadcomplete", _);
                if (D) D.call(B, _);
                B._xhr = null
            }
        });
        if (this._xhr);
        this._xhr = mini.ajax(O)
    },
    _OnBeforeLoad: function($) {
        this.fire("beforeload", $)
    },
    _OnPreLoad: function($) {
        this.fire("preload", $)
    },
    _evalUrl: function() {
        var url = this.url;
        if (typeof url == "function") url = url();
        else {
            try {
                url = eval(url)
            } catch (ex) {
                url = this.url
            }
            if (!url) url = this.url
        }
        return url
    },
    _evalType: function(_) {
        var $ = this.ajaxType;
        if (!$) {
            $ = "post";
            if (_) {
                if (_.indexOf(".txt") != -1 || _.indexOf(".json") != -1) $ = "get"
            } else $ = "get"
        }
        return $
    },
    setSortMode: function($) {
        this.sortMode = $
    },
    getSortMode: function() {
        return this.sortMode
    },
    setAjaxOptions: function($) {
        this.ajaxOptions = $
    },
    getAjaxOptions: function() {
        return this.ajaxOptions
    },
    setAutoLoad: function($) {
        this.autoLoad = $
    },
    getAutoLoad: function() {
        return this.autoLoad
    },
    setUrl: function($) {
        this.url = $;
        if (this.autoLoad) this.load()
    },
    getUrl: function() {
        return this.url
    },
    setPageIndex: function($) {
        this.pageIndex = $;
        var _ = this.loadParams || {};
        if (mini.isNumber($)) _.pageIndex = $;
        this.fire("pageinfochanged")
    },
    getPageIndex: function() {
        return this.pageIndex
    },
    setPageSize: function($) {
        this.pageSize = $;
        var _ = this.loadParams || {};
        if (mini.isNumber($)) _.pageSize = $;
        this.fire("pageinfochanged")
    },
    getPageSize: function() {
        return this.pageSize
    },
    setTotalCount: function($) {
        this.totalCount = parseInt($);
        this.fire("pageinfochanged")
    },
    getTotalCount: function() {
        return this.totalCount
    },
    getTotalPage: function() {
        return this.totalPage
    },
    setCheckSelectOnLoad: function($) {
        this.checkSelectOnLoad = $
    },
    getCheckSelectOnLoad: function() {
        return this.checkSelectOnLoad
    },
    setSelectOnLoad: function($) {
        this.selectOnLoad = $
    },
    getSelectOnLoad: function() {
        return this.selectOnLoad
    }
});
mini.DataSource.RecordId = 1;
mini.DataTable = function() {
    mini.DataTable.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.DataTable, mini.DataSource, {
    _init: function() {
        mini.DataTable.superclass._init.call(this);
        this._filterInfo = null;
        this._sortInfo = null
    },
    add: function($) {
        return this.insert(this.source.length, $)
    },
    addRange: function($) {
        this.insertRange(this.source.length, $)
    },
    insert: function($, _) {
        if (!_) return null;
        var D = {
            index: $,
            record: _
        };
        this.fire("beforeadd", D);
        if (!mini.isNumber($)) {
            var B = this.getRecord($);
            if (B) $ = this.indexOf(B);
            else $ = this.getDataView().length
        }
        var C = this.dataview[$];
        if (C) this.dataview.insert($, _);
        else this.dataview.add(_);
        if (this.dataview != this.source)
            if (C) {
                var A = this.source.indexOf(C);
                this.source.insert(A, _)
            } else this.source.add(_);
        this._setAdded(_);
        this.l1oolO();
        this.fire("add", D)
    },
    insertRange: function($, B) {
        if (!mini.isArray(B)) return;
        this.beginChange();
        B = B.clone();
        for (var A = 0, C = B.length; A < C; A++) {
            var _ = B[A];
            this.insert($ + A, _)
        }
        this.endChange()
    },
    remove: function(_, A) {
        var $ = this.indexOf(_);
        return this.removeAt($, A)
    },
    removeAt: function($, D) {
        var _ = this.getAt($);
        if (!_) return null;
        var C = {
            record: _
        };
        this.fire("beforeremove", C);
        var B = this.isSelected(_);
        this.source.remove(_);
        if (this.dataview !== this.source) this.dataview.removeAt($);
        this._setRemoved(_);
        this.lollO0();
        this.l1oolO();
        this.fire("remove", C);
        if (B && D) {
            var A = this.getAt($);
            if (!A) A = this.getAt($ - 1);
            this.deselectAll();
            this.select(A)
        }
    },
    removeRange: function(A, C) {
        if (!mini.isArray(A)) return;
        this.beginChange();
        A = A.clone();
        for (var _ = 0, B = A.length; _ < B; _++) {
            var $ = A[_];
            this.remove($, C)
        }
        this.endChange()
    },
    move: function(_, H) {
        if (!_ || !mini.isNumber(H)) return;
        if (H < 0) return;
        if (mini.isArray(_)) {
            this.beginChange();
            var I = _,
                C = this.getAt(H),
                F = this;
            mini.sort(I, function($, _) {
                return F.indexOf($) > F.indexOf(_)
            }, this);
            for (var E = 0, D = I.length; E < D; E++) {
                var A = I[E],
                    $ = this.indexOf(C);
                this.move(A, $)
            }
            this.endChange();
            return
        }
        var J = {
            index: H,
            record: _
        };
        this.fire("beforemove", J);
        var B = this.dataview[H];
        this.dataview.remove(_);
        var G = this.dataview.indexOf(B);
        if (G != -1) H = G;
        if (B) this.dataview.insert(H, _);
        else this.dataview.add(_);
        if (this.dataview != this.source) {
            this.source.remove(_);
            G = this.source.indexOf(B);
            if (G != -1) H = G;
            if (B) this.source.insert(H, _);
            else this.source.add(_)
        }
        this.l1oolO();
        this.fire("move", J)
    },
    indexOf: function($) {
        return this.getVisibleRows().indexOf($)
    },
    getAt: function($) {
        return this.getVisibleRows()[$]
    },
    getRange: function(A, B) {
        if (A > B) {
            var C = A;
            A = B;
            B = C
        }
        var D = [];
        for (var _ = A, E = B; _ <= E; _++) {
            var $ = this.dataview[_];
            D.push($)
        }
        return D
    },
    selectRange: function($, _) {
        if (!mini.isNumber($)) $ = this.indexOf($);
        if (!mini.isNumber(_)) _ = this.indexOf(_);
        if (mini.isNull($) || mini.isNull(_)) return;
        var A = this.getRange($, _);
        this.selects(A)
    },
    toArray: function() {
        return this.source.clone()
    },
    isChanged: function() {
        return this.getChanges().length > 0
    },
    getChanges: function(F, A) {
        var G = [];
        if (F == "removed" || F == null) G.addRange(this._removeds.clone());
        for (var D = 0, B = this.source.length; D < B; D++) {
            var $ = this.source[D];
            if (!$._state) continue;
            if ($._state == F || F == null) G[G.length] = $
        }
        var _ = G;
        if (A)
            for (D = 0, B = _.length; D < B; D++) {
                var H = _[D];
                if (H._state == "modified") {
                    var I = {};
                    I._state = H._state;
                    I[this.idField] = H[this.idField];
                    for (var J in H) {
                        var E = this.isModified(H, J);
                        if (E) I[J] = H[J]
                    }
                    _[D] = I
                }
            }
        var C = this;
        mini.sort(G, function(_, B) {
            var $ = C.indexOf(_),
                A = C.indexOf(B);
            if ($ > A) return 1;
            if ($ < A) return -1;
            return 0
        });
        return G
    },
    accept: function() {
        this.beginChange();
        for (var _ = 0, A = this.source.length; _ < A; _++) {
            var $ = this.source[_];
            this.acceptRecord($)
        }
        this._removeds = [];
        this._originals = {};
        this.endChange()
    },
    reject: function() {
        this.beginChange();
        for (var _ = 0, A = this.source.length; _ < A; _++) {
            var $ = this.source[_];
            this.rejectRecord($)
        }
        this._removeds = [];
        this._originals = {};
        this.endChange()
    },
    acceptRecord: function($) {
        if (!$._state) return;
        delete this._originals[$[this.Oo0o]];
        if ($._state == "deleted") this.remove($);
        else {
            delete $._state;
            delete this._originals[$[this.Oo0o]];
            this.l1oolO()
        }
        this.fire("update", {
            record: $
        })
    },
    rejectRecord: function(A) {
        if (!A._state) return;
        if (A._state == "added") this.remove(A);
        else if (A._state == "modified" || A._state == "deleted") {
            var _ = this.l1Oo10(A);
            for (var B in _) {
                var $ = _[B];
                mini._setMap(B, $, A)
            }
            delete A._state;
            delete this._originals[A[this.Oo0o]];
            this.l1oolO();
            this.fire("update", {
                record: A
            })
        }
    },
    lOOO0: function() {
        if (!this._filterInfo) {
            this.dataview = this.source;
            return
        }
        var F = this._filterInfo[0],
            D = this._filterInfo[1],
            $ = [],
            C = this.source;
        for (var _ = 0, E = C.length; _ < E; _++) {
            var B = C[_],
                A = F.call(D, B, _, this);
            if (A !== false) $.push(B)
        }
        this.dataview = $
    },
    lOlOo0: function() {
        if (!this._sortInfo) return;
        var B = this._sortInfo[0],
            A = this._sortInfo[1],
            $ = this._sortInfo[2],
            _ = this.getDataView().clone();
        mini.sort(_, B, A);
        if ($) _.reverse();
        this.dataview = _
    }
});
mini.regClass(mini.DataTable, "datatable");
mini.DataTree = function() {
    mini.DataTree.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.DataTree, mini.DataSource, {
    isTree: true,
    expandOnLoad: false,
    idField: "id",
    parentField: "pid",
    nodesField: "children",
    checkedField: "checked",
    resultAsTree: true,
    dataField: "",
    checkModel: "cascade",
    autoCheckParent: false,
    onlyLeafCheckable: false,
    setExpandOnLoad: function($) {
        this.expandOnLoad = $
    },
    getExpandOnLoad: function() {
        return this.expandOnLoad
    },
    setParentField: function($) {
        this.parentField = $
    },
    setNodesField: function($) {
        if (this.nodesField != $) {
            var _ = this.root[this.nodesField];
            this.nodesField = $;
            this.o0o0l(_)
        }
    },
    setResultAsTree: function($) {
        this.resultAsTree = $
    },
    setCheckRecursive: function($) {
        this.checkModel = $ ? "cascade" : "multiple"
    },
    getCheckRecursive: function() {
        return this.checkModel == "cascade"
    },
    setShowFolderCheckBox: function($) {
        this.onlyLeafCheckable = !$
    },
    getShowFolderCheckBox: function() {
        return !this.onlyLeafCheckable
    },
    _doExpandOnLoad: function(B) {
        var _ = this.nodesField,
            $ = this.expandOnLoad;

        function A(G, C) {
            for (var D = 0, F = G.length; D < F; D++) {
                var E = G[D];
                if (mini.isNull(E.expanded)) {
                    if ($ === true || (mini.isNumber($) && C <= $)) E.expanded = true;
                    else E.expanded = false
                }
                var B = E[_];
                if (B) A(B, C + 1)
            }
        }
        A(B, 0)
    },
    _OnBeforeLoad: function(_) {
        var $ = this._loadingNode || this.root;
        _.node = $;
        if (this._isNodeLoading()) {
            _.async = true;
            _.isRoot = _.node == this.root;
            if (!_.isRoot) _.data[this.idField] = this.getItemValue(_.node)
        }
        this.fire("beforeload", _)
    },
    _OnPreLoad: function($) {
        if (this.resultAsTree == false) $.data = mini.arrayToTree($.data, this.nodesField, this.idField, this.parentField);
        this.fire("preload", $)
    },
    _init: function() {
        mini.DataTree.superclass._init.call(this);
        this.root = {
            _id: -1,
            _level: -1
        };
        this.source = this.root[this.nodesField] = [];
        this.viewNodes = null;
        this.dataview = null;
        this.visibleRows = null;
        this.list = null;
        this._ids[this.root._id] = this.root
    },
    o0o0l: function(D) {
        D = D || [];
        this._doExpandOnLoad(D);
        this.source = this.root[this.nodesField] = D;
        this.viewNodes = null;
        this.dataview = null;
        this.visibleRows = null;
        this.list = null;
        var A = mini.treeToArray(D, this.nodesField),
            B = this._ids;
        B[this.root._id] = this.root;
        for (var _ = 0, F = A.length; _ < F; _++) {
            var C = A[_];
            C._id = mini.DataSource.RecordId++;
            B[C._id] = C;
            C._uid = C._id
        }
        var G = this.checkedField,
            A = mini.treeToArray(D, this.nodesField, "_id", "_pid", this.root._id);
        for (_ = 0, F = A.length; _ < F; _++) {
            var C = A[_],
                $ = this.getParentNode(C);
            C._pid = $._id;
            C._level = $._level + 1;
            delete C._state;
            C.checked = C[G];
            if (C.checked) C.checked = C.checked != "false";
            if (this.isLeafNode(C) == false) {
                var E = C[this.nodesField];
                if (E && E.length > 0);
            }
        }
        this._doUpdateLoadedCheckedNodes()
    },
    _setAdded: function(_) {
        var $ = this.getParentNode(_);
        _._id = mini.DataSource.RecordId++;
        if (this._autoCreateNewID && !_[this.idField]) _[this.idField] = UUID();
        _._uid = _._id;
        _._pid = $._id;
        if ($[this.idField]) _[this.parentField] = $[this.idField];
        _._level = $._level + 1;
        _._state = "added";
        this._ids[_._id] = _;
        delete this._originals[_[this.Oo0o]]
    },
    l0l0ol: function($) {
        var _ = $[this.nodesField];
        if (!_) _ = $[this.nodesField] = [];
        if (this.viewNodes && !this.viewNodes[$._id]) this.viewNodes[$._id] = [];
        return _
    },
    addNode: function(_, $) {
        if (!_) return;
        return this.insertNode(_, -1, $)
    },
    addNodes: function(D, _, A) {
        if (!mini.isArray(D)) return;
        if (mini.isNull(A)) A = "add";
        for (var $ = 0, C = D.length; $ < C; $++) {
            var B = D[$];
            this.insertNode(B, A, _)
        }
    },
    insertNodes: function(D, $, A) {
        if (!mini.isNumber($)) return;
        if (!mini.isArray(D)) return;
        if (!A) A = this.root;
        this.beginChange();
        var B = this.l0l0ol(A);
        if ($ < 0 || $ > B.length) $ = B.length;
        D = D.clone();
        for (var _ = 0, C = D.length; _ < C; _++) this.insertNode(D[_], $ + _, A);
        this.endChange();
        return D
    },
    removeNode: function(A) {
        var _ = this.getParentNode(A);
        if (!_) return;
        var $ = this.indexOfNode(A);
        return this.removeNodeAt($, _)
    },
    removeNodes: function(A) {
        if (!mini.isArray(A)) return;
        this.beginChange();
        A = A.clone();
        for (var $ = 0, _ = A.length; $ < _; $++) this.removeNode(A[$]);
        this.endChange()
    },
    moveNodes: function(E, B, _) {
        if (!E || E.length == 0 || !B || !_) return;
        this.beginChange();
        var A = this;
        mini.sort(E, function($, _) {
            return A.indexOf($) > A.indexOf(_)
        }, this);
        for (var $ = 0, D = E.length; $ < D; $++) {
            var C = E[$];
            this.moveNode(C, B, _);
            if ($ != 0) {
                B = C;
                _ = "after"
            }
        }
        this.endChange()
    },
    moveNode: function(E, D, B) {
        if (!E || !D || mini.isNull(B)) return;
        if (this.viewNodes) {
            var _ = D,
                $ = B;
            if ($ == "before") {
                _ = this.getParentNode(D);
                $ = this.indexOfNode(D)
            } else if ($ == "after") {
                _ = this.getParentNode(D);
                $ = this.indexOfNode(D) + 1
            } else if ($ == "add" || $ == "append") {
                if (!_[this.nodesField]) _[this.nodesField] = [];
                $ = _[this.nodesField].length
            } else if (!mini.isNumber($)) return;
            if (this.isAncestor(E, _)) return false;
            var A = this.getChildNodes(_);
            if ($ < 0 || $ > A.length) $ = A.length;
            var F = {};
            A.insert($, F);
            var C = this.getParentNode(E),
                G = this.getChildNodes(C);
            G.remove(E);
            $ = A.indexOf(F);
            A[$] = E
        }
        _ = D, $ = B, A = this.l0l0ol(_);
        if ($ == "before") {
            _ = this.getParentNode(D);
            A = this.l0l0ol(_);
            $ = A.indexOf(D)
        } else if ($ == "after") {
            _ = this.getParentNode(D);
            A = this.l0l0ol(_);
            $ = A.indexOf(D) + 1
        } else if ($ == "add" || $ == "append") $ = A.length;
        else if (!mini.isNumber($)) return;
        if (this.isAncestor(E, _)) return false;
        if ($ < 0 || $ > A.length) $ = A.length;
        F = {};
        A.insert($, F);
        C = this.getParentNode(E);
        C[this.nodesField].remove(E);
        $ = A.indexOf(F);
        A[$] = E;
        this.O1o10(E, _);
        this.l1oolO();
        var H = {
            oldParentNode: C,
            parentNode: _,
            index: $,
            node: E
        };
        this.fire("movenode", H)
    },
    insertNode: function(A, $, _) {
        if (!A) return;
        if (!_) {
            _ = this.root;
            $ = "add"
        }
        if (!mini.isNumber($)) {
            switch ($) {
                case "before":
                    $ = this.indexOfNode(_);
                    _ = this.getParentNode(_);
                    A = this.insertNode(A, $, _);
                    break;
                case "after":
                    $ = this.indexOfNode(_);
                    _ = this.getParentNode(_);
                    A = this.insertNode(A, $ + 1, _);
                    break;
                case "append":
                case "add":
                    A = this.addNode(A, _);
                    break;
                default:
                    break
            }
            return A
        }
        var C = this.l0l0ol(_),
            D = this.getChildNodes(_);
        if ($ < 0) $ = D.length;
        D.insert($, A);
        $ = D.indexOf(A);
        if (this.viewNodes) {
            var B = D[$ - 1];
            if (B) {
                var E = C.indexOf(B);
                C.insert(E + 1, A)
            } else C.insert(0, A)
        }
        A._pid = _._id;
        this._setAdded(A);
        this.cascadeChild(A, function(A, $, _) {
            A._pid = _._id;
            this._setAdded(A)
        }, this);
        this.l1oolO();
        var F = {
            parentNode: _,
            index: $,
            node: A
        };
        this.fire("addnode", F);
        return A
    },
    removeNodeAt: function($, _) {
        if (!_) _ = this.root;
        var C = this.getChildNodes(_),
            A = C[$];
        if (!A) return null;
        C.removeAt($);
        if (this.viewNodes) {
            var B = _[this.nodesField];
            B.remove(A)
        }
        this._setRemoved(A);
        this.cascadeChild(A, function(A, $, _) {
            this._setRemoved(A)
        }, this);
        this.lollO0();
        this.l1oolO();
        var D = {
            parentNode: _,
            index: $,
            node: A
        };
        this.fire("removenode", D);
        return A
    },
    bubbleParent: function(_, B, A) {
        A = A || this;
        if (_) B.call(this, _);
        var $ = this.getParentNode(_);
        if ($ && $ != this.root) this.bubbleParent($, B, A)
    },
    cascadeChild: function(A, E, B) {
        if (!E) return;
        if (!A) A = this.root;
        var D = this.getChildNodes(A);
        if (D) {
            D = D.clone();
            for (var $ = 0, C = D.length; $ < C; $++) {
                var _ = D[$];
                if (E.call(B || this, _, $, A) === false) return;
                this.cascadeChild(_, E, B)
            }
        }
    },
    eachChild: function(B, F, C) {
        if (!F || !B) return;
        var E = B[this.nodesField];
        if (E) {
            var _ = E.clone();
            for (var A = 0, D = _.length; A < D; A++) {
                var $ = _[A];
                if (F.call(C || this, $, A, B) === false) break
            }
        }
    },
    collapse: function($, _) {
        $ = this.getNode($);
        if (!$) return;
        this.beginChange();
        $.expanded = false;
        if (_) this.eachChild($, function($) {
            if ($[this.nodesField] != null) this.collapse($, _)
        }, this);
        this.endChange();
        var A = {
            node: $
        };
        this.fire("collapse", A)
    },
    expand: function($, _) {
        $ = this.getNode($);
        if (!$) return;
        this.beginChange();
        $.expanded = true;
        if (_) this.eachChild($, function($) {
            if ($[this.nodesField] != null) this.expand($, _)
        }, this);
        this.endChange();
        var A = {
            node: $
        };
        this.fire("expand", A)
    },
    toggle: function($) {
        if (this.isExpandedNode($)) this.collapse($);
        else this.expand($)
    },
    expandNode: function($) {
        this.expand($)
    },
    collapseNode: function($) {
        this.collapse($)
    },
    collapseAll: function() {
        this.collapse(this.root, true)
    },
    expandAll: function() {
        this.expand(this.root, true)
    },
    collapseLevel: function($, _) {
        this.beginChange();
        this.each(function(A) {
            var B = this.getLevel(A);
            if ($ == B) this.collapse(A, _)
        }, this);
        this.endChange()
    },
    expandLevel: function($, _) {
        this.beginChange();
        this.each(function(A) {
            var B = this.getLevel(A);
            if ($ == B) this.expand(A, _)
        }, this);
        this.endChange()
    },
    expandPath: function(A) {
        A = this.getNode(A);
        if (!A) return;
        var _ = this.getAncestors(A);
        for (var $ = 0, B = _.length; $ < B; $++) this.expandNode(_[$])
    },
    collapsePath: function(A) {
        A = this.getNode(A);
        if (!A) return;
        var _ = this.getAncestors(A);
        for (var $ = 0, B = _.length; $ < B; $++) this.collapseNode(_[$])
    },
    isAncestor: function(_, B) {
        if (_ == B) return true;
        if (!_ || !B) return false;
        if (_ == this.getRootNode()) return true;
        var A = this.getAncestors(B);
        for (var $ = 0, C = A.length; $ < C; $++)
            if (A[$] == _) return true;
        return false
    },
    getAncestors: function(A) {
        var _ = [];
        while (1) {
            var $ = this.getParentNode(A);
            if (!$ || $ == this.root) break;
            _[_.length] = $;
            A = $
        }
        _.reverse();
        return _
    },
    getNode: function($) {
        return this.getRecord($)
    },
    getRootNode: function() {
        return this.root
    },
    getParentNode: function($) {
        if (!$) return null;
        return this.getby_id($._pid)
    },
    getAllChildNodes: function($) {
        return this.getChildNodes($, true)
    },
    getChildNodes: function(A, C, B) {
        A = this.getNode(A);
        if (!A) A = this.getRootNode();
        var G = A[this.nodesField];
        if (this.viewNodes && B !== false) G = this.viewNodes[A._id];
        if (C === true && G) {
            var $ = [];
            for (var _ = 0, F = G.length; _ < F; _++) {
                var D = G[_];
                $[$.length] = D;
                var E = this.getChildNodes(D, C, B);
                if (E && E.length > 0) $.addRange(E)
            }
            G = $
        }
        return G || []
    },
    getChildNodeAt: function($, _) {
        var A = this.getChildNodes(_);
        if (A) return A[$];
        return null
    },
    hasChildNodes: function($) {
        var _ = this.getChildNodes($);
        return _.length > 0
    },
    getLevel: function($) {
        return $._level
    },
    _is_true: function($) {
        return String($) == "true" || $ === 1 || $ === "Y" || $ === "y"
    },
    _is_false: function($) {
        return String($) == "false" || $ === 0 || $ === "N" || $ === "n"
    },
    leafField: "isLeaf",
    isLeafNode: function($) {
        return this.isLeaf($)
    },
    isLeaf: function($) {
        if (!$) return false;
        var A = $[this.leafField];
        if (!$ || this._is_false(A)) return false;
        var _ = this.getChildNodes($, false, false);
        if (_.length > 0) return false;
        return true
    },
    hasChildren: function($) {
        var _ = this.getChildNodes($);
        return !!(_ && _.length > 0)
    },
    isFirstNode: function(_) {
        if (_ == this.root) return true;
        var $ = this.getParentNode(_);
        if (!$) return false;
        return this.getFirstNode($) == _
    },
    isLastNode: function(_) {
        if (_ == this.root) return true;
        var $ = this.getParentNode(_);
        if (!$) return false;
        return this.getLastNode($) == _
    },
    isCheckedNode: function($) {
        return $.checked === true
    },
    isExpandedNode: function($) {
        return $.expanded == true || $.expanded == 1 || mini.isNull($.expanded)
    },
    isEnabledNode: function($) {
        return $.enabled !== false
    },
    isVisibleNode: function(_) {
        if (_.visible == false) return false;
        var $ = this._ids[_._pid];
        if (!$ || $ == this.root) return true;
        if ($.expanded === false) return false;
        return this.isVisibleNode($)
    },
    getNextNode: function(A) {
        var _ = this.getby_id(A._pid);
        if (!_) return null;
        var $ = this.indexOfNode(A);
        return this.getChildNodes(_)[$ + 1]
    },
    getPrevNode: function(A) {
        var _ = this.getby_id(A._pid);
        if (!_) return null;
        var $ = this.indexOfNode(A);
        return this.getChildNodes(_)[$ - 1]
    },
    getFirstNode: function($) {
        return this.getChildNodes($)[0]
    },
    getLastNode: function($) {
        var _ = this.getChildNodes($);
        return _[_.length - 1]
    },
    indexOfNode: function(_) {
        var $ = this.getby_id(_._pid);
        if ($) return this.getChildNodes($).indexOf(_);
        return -1
    },
    indexOfList: function($) {
        return this.getList().indexOf($)
    },
    getAt: function($) {
        return this.getVisibleRows()[$]
    },
    indexOf: function($) {
        return this.getVisibleRows().indexOf($)
    },
    getRange: function(A, C) {
        if (A > C) {
            var D = A;
            A = C;
            C = D
        }
        var B = this.getChildNodes(this.root, true),
            E = [];
        for (var _ = A, F = C; _ <= F; _++) {
            var $ = B[_];
            if ($) E.push($)
        }
        return E
    },
    selectRange: function($, A) {
        var _ = this.getChildNodes(this.root, true);
        if (!mini.isNumber($)) $ = _.indexOf($);
        if (!mini.isNumber(A)) A = _.indexOf(A);
        if (mini.isNull($) || mini.isNull(A)) return;
        var B = this.getRange($, A);
        this.selects(B)
    },
    findRecords: function(C, A) {
        var H = this.toArray(),
            I = typeof C == "function",
            F = C,
            J = A || this,
            B = [];
        if (!mini.isNull(A)) A = String(A);
        for (var G = 0, D = H.length; G < D; G++) {
            var _ = H[G];
            if (I) {
                var L = F.call(J, _);
                if (L == true) B[B.length] = _;
                if (L === 1) break
            } else if (A.indexOf(",") != -1) {
                var M = A.split(",");
                for (var K = 0, $ = M.length; K < $; K++) {
                    var E = M[K];
                    if (_[C] == E) B[B.length] = _
                }
            } else if (_[C] == A) B[B.length] = _
        }
        return B
    },
    l1oolOCount: 0,
    l1oolO: function($) {
        this.l1oolOCount++;
        if ($ != "update") {
            this.ids = null;
            this.dataview = null;
            this.visibleRows = null;
            this.list = null
        }
        if (this.__changeCount == 0) this.fire("datachanged")
    },
    OllooOView: function() {
        var $ = !this.viewNodes ? this.getList().clone() : this.getChildNodes(this.root, true);
        return $
    },
    _createVisibleRows: function() {
        var B = !this.viewNodes ? this.getList().clone() : this.getChildNodes(this.root, true),
            $ = [];
        for (var _ = 0, C = B.length; _ < C; _++) {
            var A = B[_];
            if (this.isVisibleNode(A)) $[$.length] = A
        }
        return $
    },
    getList: function() {
        if (!this.list) this.list = mini.treeToList(this.source, this.nodesField);
        return this.list
    },
    getDataView: function() {
        if (!this.dataview) this.dataview = this.OllooOView();
        return this.dataview
    },
    getVisibleRows: function() {
        if (!this.visibleRows) this.visibleRows = this._createVisibleRows();
        return this.visibleRows
    },
    lOOO0: function() {
        if (!this._filterInfo) {
            this.viewNodes = null;
            return
        }
        var C = this._filterInfo[0],
            B = this._filterInfo[1],
            A = this.viewNodes = {},
            _ = this.nodesField;

        function $(G) {
            var J = G[_];
            if (!J) return false;
            var K = G._id,
                H = A[K] = [];
            for (var D = 0, I = J.length; D < I; D++) {
                var F = J[D],
                    L = $(F),
                    E = C.call(B, F, D, this);
                if (E === true || L) H.push(F)
            }
            return H.length > 0
        }
        $(this.root)
    },
    lOlOo0: function() {
        if (!this._filterInfo && !this._sortInfo) {
            this.viewNodes = null;
            return
        }
        if (!this._sortInfo) return;
        var E = this._sortInfo[0],
            D = this._sortInfo[1],
            $ = this._sortInfo[2],
            _ = this.nodesField;
        if (!this.viewNodes) {
            var C = this.viewNodes = {};
            C[this.root._id] = this.root[_].clone();
            this.cascadeChild(this.root, function(A, $, B) {
                var D = A[_];
                if (D) C[A._id] = D.clone()
            })
        }
        var B = this;

        function A(F) {
            var H = B.getChildNodes(F);
            mini.sort(H, E, D);
            if ($) H.reverse();
            for (var _ = 0, G = H.length; _ < G; _++) {
                var C = H[_];
                A(C)
            }
        }
        A(this.root)
    },
    toArray: function() {
        if (!this._array || this.l1oolOCount != this.l1oolOCount2) {
            this.l1oolOCount2 = this.l1oolOCount;
            this._array = this.getChildNodes(this.root, true, false)
        }
        return this._array
    },
    toTree: function() {
        return this.root[this.nodesField]
    },
    isChanged: function() {
        return this.getChanges().length > 0
    },
    getChanges: function(E, H) {
        var D = [];
        if (E == "removed" || E == null) D.addRange(this._removeds.clone());
        this.cascadeChild(this.root, function(_, $, A) {
            if (_._state == null || _._state == "") return;
            if (_._state == E || E == null) D[D.length] = _
        }, this);
        var C = D;
        if (H)
            for (var _ = 0, G = C.length; _ < G; _++) {
                var B = C[_];
                if (B._state == "modified") {
                    var A = {};
                    A._state = B._state;
                    A[this.idField] = B[this.idField];
                    for (var F in B) {
                        var $ = this.isModified(B, F);
                        if ($) A[F] = B[F]
                    }
                    C[_] = A
                }
            }
        return D
    },
    accept: function($) {
        $ = $ || this.root;
        this.beginChange();
        this.cascadeChild(this.root, function($) {
            this.acceptRecord($)
        }, this);
        this._removeds = [];
        this._originals = {};
        this.endChange()
    },
    reject: function($) {
        this.beginChange();
        this.cascadeChild(this.root, function($) {
            this.rejectRecord($)
        }, this);
        this._removeds = [];
        this._originals = {};
        this.endChange()
    },
    acceptRecord: function($) {
        if (!$._state) return;
        delete this._originals[$[this.Oo0o]];
        if ($._state == "deleted") this.removeNode($);
        else {
            delete $._state;
            delete this._originals[$[this.Oo0o]];
            this.l1oolO();
            this.fire("update", {
                record: $
            })
        }
    },
    rejectRecord: function(_) {
        if (!_._state) return;
        if (_._state == "added") this.removeNode(_);
        else if (_._state == "modified" || _._state == "deleted") {
            var $ = this.l1Oo10(_);
            mini.copyTo(_, $);
            delete _._state;
            delete this._originals[_[this.Oo0o]];
            this.l1oolO();
            this.fire("update", {
                record: _
            })
        }
    },
    upGrade: function(F) {
        var C = this.getParentNode(F);
        if (C == this.root || F == this.root) return false;
        var E = C[this.nodesField],
            _ = E.indexOf(F),
            G = F[this.nodesField] ? F[this.nodesField].length : 0;
        for (var B = E.length - 1; B >= _; B--) {
            var $ = E[B];
            E.removeAt(B);
            if ($ != F) {
                if (!F[this.nodesField]) F[this.nodesField] = [];
                F[this.nodesField].insert(G, $)
            }
        }
        var D = this.getParentNode(C),
            A = D[this.nodesField],
            _ = A.indexOf(C);
        A.insert(_ + 1, F);
        this.O1o10(F, D);
        this.lOOO0();
        this.l1oolO()
    },
    downGrade: function(B) {
        if (this.isFirstNode(B)) return false;
        var A = this.getParentNode(B),
            C = A[this.nodesField],
            $ = C.indexOf(B),
            _ = C[$ - 1];
        C.removeAt($);
        if (!_[this.nodesField]) _[this.nodesField] = [];
        _[this.nodesField].add(B);
        this.O1o10(B, _);
        this.lOOO0();
        this.l1oolO()
    },
    O1o10: function(A, _) {
        var $ = this;
        A._pid = _._id;
        A._level = _._level + 1;
        A[$.parentField] = _[$.idField];
        if (!A[$.parentField]) A[$.parentField] = _._id;
        this.cascadeChild(A, function(B, _, A) {
            B._pid = A._id;
            B._level = A._level + 1;
            B[$.parentField] = A[$.idField]
        }, this);
        this._setModified(A)
    },
    setCheckModel: function($) {
        this.checkModel = $
    },
    getCheckModel: function() {
        return this.checkModel
    },
    setOnlyLeafCheckable: function($) {
        this.onlyLeafCheckable = $
    },
    getOnlyLeafCheckable: function() {
        return this.onlyLeafCheckable
    },
    setAutoCheckParent: function($) {
        this.autoCheckParent = $
    },
    getAutoCheckParent: function() {
        return this.autoCheckParent
    },
    _doUpdateLoadedCheckedNodes: function() {
        var B = this.getAllChildNodes(this.root);
        for (var $ = 0, A = B.length; $ < A; $++) {
            var _ = B[$];
            if (_.checked == true)
                if (this.autoCheckParent == false || !this.hasChildNodes(_)) this._doUpdateNodeCheckState(_)
        }
    },
    _doUpdateNodeCheckState: function(B) {
        if (!B) return;
        var J = this.isChecked(B);
        if (this.checkModel == "cascade" || this.autoCheckParent) {
            this.cascadeChild(B, function($) {
                this.doCheckNodes($, J)
            }, this);
            if (!this.autoCheckParent) {
                var $ = this.getAncestors(B);
                $.reverse();
                for (var G = 0, E = $.length; G < E; G++) {
                    var C = $[G],
                        A = this.getChildNodes(C),
                        I = true;
                    for (var _ = 0, F = A.length; _ < F; _++) {
                        var D = A[_];
                        if (!this.isCheckedNode(D)) I = false
                    }
                    if (I) this.doCheckNodes(C, true);
                    else this.doCheckNodes(C, false);
                    this.fire("checkchanged", {
                        nodes: [C],
                        _nodes: [C]
                    })
                }
            }
        }
        var H = this;

        function K(A) {
            var _ = H.getChildNodes(A);
            for (var $ = 0, C = _.length; $ < C; $++) {
                var B = _[$];
                if (H.isCheckedNode(B)) return true
            }
            return false
        }
        if (this.autoCheckParent) {
            $ = this.getAncestors(B);
            $.reverse();
            for (G = 0, E = $.length; G < E; G++) {
                C = $[G];
                C.checked = K(C);
                this.fire("checkchanged", {
                    nodes: [C],
                    _nodes: [C]
                })
            }
        }
    },
    doCheckNodes: function(E, B, D) {
        if (!E) return;
        if (typeof E == "string") E = E.split(",");
        if (!mini.isArray(E)) E = [E];
        E = E.clone();
        var _ = [];
        B = B !== false;
        if (D === true)
            if (this.checkModel == "single") this.uncheckAllNodes();
        for (var $ = E.length - 1; $ >= 0; $--) {
            var A = this.getRecord(E[$]);
            if (!A || (B && A.checked === true) || (!B && A.checked !== true)) {
                if (A) {
                    if (D === true) this._doUpdateNodeCheckState(A);
                    if (!B && !this.isLeaf(A)) _.push(A)
                }
                continue
            }
            A.checked = B;
            _.push(A);
            if (D === true) this._doUpdateNodeCheckState(A)
        }
        var C = this;
        setTimeout(function() {
            C.fire("checkchanged", {
                nodes: E,
                _nodes: _,
                checked: B
            })
        }, 1)
    },
    checkNode: function($, _) {
        this.doCheckNodes([$], true, _ !== false)
    },
    uncheckNode: function($, _) {
        this.doCheckNodes([$], false, _ !== false)
    },
    checkNodes: function(_, $) {
        if (!mini.isArray(_)) _ = [];
        this.doCheckNodes(_, true, $ !== false)
    },
    uncheckNodes: function(_, $) {
        if (!mini.isArray(_)) _ = [];
        this.doCheckNodes(_, false, $ !== false)
    },
    checkAllNodes: function() {
        var $ = this.getList();
        this.doCheckNodes($, true, false)
    },
    uncheckAllNodes: function() {
        var $ = this.getList();
        this.doCheckNodes($, false, false)
    },
    doGetCheckedNodes: function(H, C) {
        if (C === false) C = "leaf";
        var E = [],
            _ = {};
        for (var J = 0, A = H.length; J < A; J++) {
            var B = H[J],
                I = this.isLeafNode(B);
            if (C === true) {
                if (!_[B._id]) {
                    _[B._id] = B;
                    E.push(B)
                }
                var $ = this.getAncestors(B);
                for (var G = 0, F = $.length; G < F; G++) {
                    var D = $[G];
                    if (!_[D._id]) {
                        _[D._id] = D;
                        E.push(D)
                    }
                }
            } else if (C === "parent") {
                if (!I)
                    if (!_[B._id]) {
                        _[B._id] = B;
                        E.push(B)
                    }
            } else if (C === "leaf") {
                if (I)
                    if (!_[B._id]) {
                        _[B._id] = B;
                        E.push(B)
                    }
            } else if (!_[B._id]) {
                _[B._id] = B;
                E.push(B)
            }
        }
        return E
    },
    getCheckedNodes: function($) {
        var _ = [];
        this.cascadeChild(this.root, function($) {
            if ($.checked == true) _.push($)
        });
        _ = this.doGetCheckedNodes(_, $);
        return _
    },
    getCheckedNodesId: function(A, $) {
        var B = this.getCheckedNodes(A),
            _ = this.ll0l0(B, $);
        return _[0]
    },
    getCheckedNodesText: function(A, $) {
        var B = this.getCheckedNodes(A),
            _ = this.ll0l0(B, $);
        return _[1]
    },
    isChecked: function($) {
        $ = this.getRecord($);
        if (!$) return null;
        return $.checked === true || $.checked === 1
    },
    getCheckState: function(_) {
        _ = this.getRecord(_);
        if (!_) return null;
        if (_.checked === true) return "checked";
        if (!_[this.nodesField]) return "unchecked";
        var B = this.getChildNodes(_, true);
        for (var $ = 0, A = B.length; $ < A; $++) {
            var _ = B[$];
            if (_.checked === true) return "indeterminate"
        }
        return "unchecked"
    },
    getUnCheckableNodes: function() {
        var $ = [];
        this.cascadeChild(this.root, function(A) {
            var _ = this.getCheckable(A);
            if (_ == false) $.push(A)
        }, this);
        return $
    },
    setCheckable: function(B, _) {
        if (!B) return;
        if (!mini.isArray(B)) B = [B];
        B = B.clone();
        _ = !!_;
        for (var $ = B.length - 1; $ >= 0; $--) {
            var A = this.getRecord(B[$]);
            if (!A) continue;
            A.checkable = checked
        }
    },
    getCheckable: function($) {
        $ = this.getRecord($);
        if (!$) return false;
        if ($.checkable === true) return true;
        if ($.checkable === false) return false;
        return this.isLeafNode($) ? true : !this.onlyLeafCheckable
    },
    showNodeCheckbox: function($, _) {},
    reload: function(A, _, $) {
        this._loadingNode = null;
        this.load(this.loadParams, A, _, $)
    },
    _isNodeLoading: function() {
        return !!this._loadingNode
    },
    loadNode: function(A, $) {
        this._loadingNode = A;
        var C = {
            node: A
        };
        this.fire("beforeloadnode", C);
        var _ = new Date(),
            B = this;
        B._doLoadAjax(B.loadParams, null, null, null, function(D) {
            var C = new Date() - _;
            if (C < 60) C = 60 - C;
            setTimeout(function() {
                D.node = A;
                B._OnPreLoad(D);
                B._loadingNode = null;
                if (B.loadParams) delete B.loadParams[B.idField];
                var F = A[B.nodesField];
                B.removeNodes(F);
                var H = D.data;
                if (H && H.length > 0) {
                    B.collapse(A);
                    B.addNodes(H, A);
                    var E = B.getAllChildNodes(A);
                    for (var _ = 0, G = E.length; _ < G; _++) {
                        var C = E[_];
                        delete C._state
                    }
                    if ($ !== false) B.expand(A, true);
                    else B.collapse(A, true)
                } else {
                    delete A[B.leafField];
                    B.expand(A, true)
                }
                B.fire("loadnode", D);
                B.fire("load", D)
            }, C)
        }, true)
    }
});
mini.regClass(mini.DataTree, "datatree");
mini._DataTableApplys = {
    idField: "id",
    textField: "text",
    setAjaxData: function($) {
        this._dataSource.ajaxData = $
    },
    getby_id: function($) {
        return this._dataSource.getby_id($)
    },
    ll0l0: function(_, $) {
        return this._dataSource.ll0l0(_, $)
    },
    setIdField: function($) {
        this._dataSource.setIdField($);
        this.idField = $
    },
    getIdField: function() {
        return this._dataSource.idField
    },
    setTextField: function($) {
        this._dataSource.setTextField($);
        this.textField = $
    },
    getTextField: function() {
        return this._dataSource.textField
    },
    getLoadParams: function() {
        return this._dataSource.loadParams
    },
    clearData: function() {
        this._dataSource.clearData()
    },
    loadData: function($) {
        this._dataSource.loadData($)
    },
    setData: function($) {
        this._dataSource.loadData($)
    },
    getData: function() {
        return this._dataSource.getSource().clone()
    },
    getList: function() {
        return this._dataSource.getList()
    },
    getDataView: function() {
        return this._dataSource.getDataView()
    },
    getVisibleRows: function() {
        if (this._useEmptyView) return [];
        return this._dataSource.getVisibleRows()
    },
    toArray: function() {
        return this._dataSource.toArray()
    },
    getRecord: function($) {
        return this._dataSource.getRecord($)
    },
    getRow: function($) {
        return this._dataSource.getRow($)
    },
    getRange: function($, _) {
        if (mini.isNull($) || mini.isNull(_)) return;
        return this._dataSource.getRange($, _)
    },
    getAt: function($) {
        return this._dataSource.getAt($)
    },
    indexOf: function($) {
        return this._dataSource.indexOf($)
    },
    getRowByUID: function($) {
        return this._dataSource.getby_id($)
    },
    getRowById: function($) {
        return this._dataSource.getbyId($)
    },
    clearRows: function() {
        this._dataSource.clearData()
    },
    updateRow: function($, A, _) {
        this._dataSource.updateRecord($, A, _)
    },
    addRow: function(_, $) {
        return this._dataSource.insert($, _)
    },
    removeRow: function($, _) {
        return this._dataSource.remove($, _)
    },
    removeRows: function($, _) {
        return this._dataSource.removeRange($, _)
    },
    removeSelected: function() {
        var $ = this.getSelected();
        if ($) this.removeRow($, true)
    },
    removeRowAt: function($, _) {
        return this._dataSource.removeAt($, _)
    },
    moveRow: function(_, $) {
        this._dataSource.move(_, $)
    },
    addRows: function(_, $) {
        return this._dataSource.insertRange($, _)
    },
    findRows: function(_, $) {
        return this._dataSource.findRecords(_, $)
    },
    findRow: function(_, $) {
        return this._dataSource.findRecord(_, $)
    },
    multiSelect: false,
    setMultiSelect: function($) {
        this._dataSource.setMultiSelect($);
        this.multiSelect = $
    },
    getMultiSelect: function() {
        return this._dataSource.getMultiSelect()
    },
    setCurrent: function($) {
        this._dataSource.setCurrent($)
    },
    getCurrent: function() {
        return this._dataSource.getCurrent()
    },
    isSelected: function($) {
        return this._dataSource.isSelected($)
    },
    setSelected: function($) {
        this._dataSource.setSelected($)
    },
    getSelected: function() {
        return this._dataSource.getSelected()
    },
    getSelecteds: function() {
        return this._dataSource.getSelecteds()
    },
    select: function($, _) {
        this._dataSource.select($, _)
    },
    selects: function($, _) {
        this._dataSource.selects($, _)
    },
    deselect: function($, _) {
        this._dataSource.deselect($, _)
    },
    deselects: function($, _) {
        this._dataSource.deselects($, _)
    },
    selectAll: function($) {
        this._dataSource.selectAll($)
    },
    deselectAll: function($) {
        this._dataSource.deselectAll($)
    },
    clearSelect: function($) {
        this.deselectAll($)
    },
    selectPrev: function() {
        this._dataSource.selectPrev()
    },
    selectNext: function() {
        this._dataSource.selectNext()
    },
    selectFirst: function() {
        this._dataSource.selectFirst()
    },
    selectLast: function() {
        this._dataSource.selectLast()
    },
    selectRange: function($, _) {
        this._dataSource.selectRange($, _)
    },
    filter: function(_, $) {
        this._dataSource.filter(_, $)
    },
    clearFilter: function() {
        this._dataSource.clearFilter()
    },
    sort: function(A, _, $) {
        this._dataSource.sort(A, _, $)
    },
    clearSort: function() {
        this._dataSource.clearSort()
    },
    findItems: function($, A, _) {
        return this._dataSource.findRecords(_, A, _)
    },
    getResultObject: function() {
        return this._dataSource._resultObject || {}
    },
    isChanged: function() {
        return this._dataSource.isChanged()
    },
    getChanges: function($, _) {
        return this._dataSource.getChanges($, _)
    },
    accept: function() {
        this._dataSource.accept()
    },
    reject: function() {
        this._dataSource.reject()
    },
    acceptRecord: function($) {
        this._dataSource.acceptRecord($)
    },
    rejectRecord: function($) {
        this._dataSource.rejectRecord($)
    }
};
mini._DataTreeApplys = {
    addRow: null,
    removeRow: null,
    removeRows: null,
    removeRowAt: null,
    moveRow: null,
    setExpandOnLoad: function($) {
        this._dataSource.setExpandOnLoad($)
    },
    getExpandOnLoad: function() {
        return this._dataSource.getExpandOnLoad()
    },
    isSelectedNode: function($) {
        $ = this.getNode($);
        return this.getSelectedNode() === $
    },
    selectNode: function($, _) {
        if ($) this._dataSource.select($, _);
        else this._dataSource.deselect(this.getSelectedNode(), _)
    },
    getSelectedNode: function() {
        return this.getSelected()
    },
    getSelectedNodes: function() {
        return this.getSelecteds()
    },
    updateNode: function(_, A, $) {
        this._dataSource.updateRecord(_, A, $)
    },
    addNode: function(A, _, $) {
        return this._dataSource.insertNode(A, _, $)
    },
    removeNodeAt: function($, _) {
        return this._dataSource.removeNodeAt($, _);
        this._changed = true
    },
    removeNode: function($) {
        return this._dataSource.removeNode($)
    },
    moveNode: function(A, $, _) {
        this._dataSource.moveNode(A, $, _)
    },
    addNodes: function(A, $, _) {
        return this._dataSource.addNodes(A, $, _)
    },
    insertNodes: function(A, $, _) {
        return this._dataSource.insertNodes($, A, _)
    },
    moveNodes: function(A, _, $) {
        this._dataSource.moveNodes(A, _, $)
    },
    removeNodes: function($) {
        return this._dataSource.removeNodes($)
    },
    expandOnLoad: false,
    checkRecursive: true,
    autoCheckParent: false,
    showFolderCheckBox: true,
    idField: "id",
    textField: "text",
    parentField: "pid",
    nodesField: "children",
    checkedField: "checked",
    leafField: "isLeaf",
    resultAsTree: true,
    setShowFolderCheckBox: function($) {
        this._dataSource.setShowFolderCheckBox($);
        if (this.doUpdate) this.doUpdate();
        this.showFolderCheckBox = $
    },
    getShowFolderCheckBox: function() {
        return this._dataSource.getShowFolderCheckBox()
    },
    setCheckRecursive: function($) {
        this._dataSource.setCheckRecursive($);
        this.checkRecursive = $
    },
    getCheckRecursive: function() {
        return this._dataSource.getCheckRecursive()
    },
    setResultAsTree: function($) {
        this._dataSource.setResultAsTree($)
    },
    getResultAsTree: function($) {
        return this._dataSource.resultAsTree
    },
    setParentField: function($) {
        this._dataSource.setParentField($);
        this.parentField = $
    },
    getParentField: function() {
        return this._dataSource.parentField
    },
    setLeafField: function($) {
        this._dataSource.leafField = $;
        this.leafField = $
    },
    getLeafField: function() {
        return this._dataSource.leafField
    },
    setNodesField: function($) {
        this._dataSource.setNodesField($);
        this.nodesField = $
    },
    getNodesField: function() {
        return this._dataSource.nodesField
    },
    setCheckedField: function($) {
        this._dataSource.checkedField = $;
        this.checkedField = $
    },
    getCheckedField: function() {
        return this.checkedField
    },
    findNodes: function(_, $) {
        return this._dataSource.findRecords(_, $)
    },
    getLevel: function($) {
        return this._dataSource.getLevel($)
    },
    isVisibleNode: function($) {
        return this._dataSource.isVisibleNode($)
    },
    isEnabledNode: function($) {
        return this._dataSource.isEnabledNode($)
    },
    isExpandedNode: function($) {
        return this._dataSource.isExpandedNode($)
    },
    isCheckedNode: function($) {
        return this._dataSource.isCheckedNode($)
    },
    isLeaf: function($) {
        return this._dataSource.isLeafNode($)
    },
    hasChildren: function($) {
        return this._dataSource.hasChildren($)
    },
    isAncestor: function(_, $) {
        return this._dataSource.isAncestor(_, $)
    },
    getNode: function($) {
        return this._dataSource.getRecord($)
    },
    getRootNode: function() {
        return this._dataSource.getRootNode()
    },
    getParentNode: function($) {
        return this._dataSource.getParentNode.apply(this._dataSource, arguments)
    },
    getAncestors: function($) {
        return this._dataSource.getAncestors($)
    },
    getAllChildNodes: function($) {
        return this._dataSource.getAllChildNodes.apply(this._dataSource, arguments)
    },
    getChildNodes: function($, _) {
        return this._dataSource.getChildNodes.apply(this._dataSource, arguments)
    },
    getChildNodeAt: function($, _) {
        return this._dataSource.getChildNodeAt.apply(this._dataSource, arguments)
    },
    indexOfNode: function($) {
        return this._dataSource.indexOfNode.apply(this._dataSource, arguments)
    },
    hasChildNodes: function($) {
        return this._dataSource.hasChildNodes.apply(this._dataSource, arguments)
    },
    isFirstNode: function($) {
        return this._dataSource.isFirstNode.apply(this._dataSource, arguments)
    },
    isLastNode: function($) {
        return this._dataSource.isLastNode.apply(this._dataSource, arguments)
    },
    getNextNode: function($) {
        return this._dataSource.getNextNode.apply(this._dataSource, arguments)
    },
    getPrevNode: function($) {
        return this._dataSource.getPrevNode.apply(this._dataSource, arguments)
    },
    getFirstNode: function($) {
        return this._dataSource.getFirstNode.apply(this._dataSource, arguments)
    },
    getLastNode: function($) {
        return this._dataSource.getLastNode.apply(this._dataSource, arguments)
    },
    toggleNode: function($) {
        this._dataSource.toggle($)
    },
    collapseNode: function($, _) {
        this._dataSource.collapse($, _)
    },
    expandNode: function($, _) {
        this._dataSource.expand($, _)
    },
    collapseAll: function() {
        this.useAnimation = false;
        this._dataSource.collapseAll();
        this.useAnimation = true
    },
    expandAll: function() {
        this.useAnimation = false;
        this._dataSource.expandAll();
        this.useAnimation = true
    },
    expandLevel: function($) {
        this.useAnimation = false;
        this._dataSource.expandLevel($);
        this.useAnimation = true
    },
    collapseLevel: function($) {
        this.useAnimation = false;
        this._dataSource.collapseLevel($);
        this.useAnimation = true
    },
    expandPath: function($) {
        this.useAnimation = false;
        this._dataSource.expandPath($);
        this.useAnimation = true
    },
    collapsePath: function($) {
        this.useAnimation = false;
        this._dataSource.collapsePath($);
        this.useAnimation = true
    },
    loadNode: function($, _) {
        this._dataSource.loadNode($, _)
    },
    setCheckModel: function($) {
        this._dataSource.setCheckModel($)
    },
    getCheckModel: function() {
        return this._dataSource.getCheckModel()
    },
    setOnlyLeafCheckable: function($) {
        this._dataSource.setOnlyLeafCheckable($)
    },
    getOnlyLeafCheckable: function() {
        return this._dataSource.getOnlyLeafCheckable()
    },
    setAutoCheckParent: function($) {
        this._dataSource.setAutoCheckParent($)
    },
    getAutoCheckParent: function() {
        return this._dataSource.getAutoCheckParent()
    },
    checkNode: function($, _) {
        this._dataSource.checkNode($, _)
    },
    uncheckNode: function($, _) {
        this._dataSource.uncheckNode($, _)
    },
    checkNodes: function(_, $) {
        this._dataSource.checkNodes(_, $)
    },
    uncheckNodes: function(_, $) {
        this._dataSource.uncheckNodes(_, $)
    },
    checkAllNodes: function() {
        this._dataSource.checkAllNodes()
    },
    uncheckAllNodes: function() {
        this._dataSource.uncheckAllNodes()
    },
    getCheckedNodes: function() {
        return this._dataSource.getCheckedNodes.apply(this._dataSource, arguments)
    },
    getCheckedNodesId: function() {
        return this._dataSource.getCheckedNodesId.apply(this._dataSource, arguments)
    },
    getCheckedNodesText: function() {
        return this._dataSource.getCheckedNodesText.apply(this._dataSource, arguments)
    },
    getNodesByValue: function(_) {
        if (mini.isNull(_)) _ = "";
        _ = String(_);
        var D = [],
            A = String(_).split(",");
        for (var $ = 0, C = A.length; $ < C; $++) {
            var B = this.getNode(A[$]);
            if (B) D.push(B)
        }
        return D
    },
    isChecked: function($) {
        return this._dataSource.isChecked.apply(this._dataSource, arguments)
    },
    getCheckState: function($) {
        return this._dataSource.getCheckState.apply(this._dataSource, arguments)
    },
    setCheckable: function(_, $) {
        this._dataSource.setCheckable.apply(this._dataSource, arguments)
    },
    getCheckable: function($) {
        return this._dataSource.getCheckable.apply(this._dataSource, arguments)
    },
    bubbleParent: function($, A, _) {
        this._dataSource.bubbleParent.apply(this._dataSource, arguments)
    },
    cascadeChild: function($, A, _) {
        this._dataSource.cascadeChild.apply(this._dataSource, arguments)
    },
    eachChild: function($, A, _) {
        this._dataSource.eachChild.apply(this._dataSource, arguments)
    }
};
mini.ColumnModel = function($) {
    this.owner = $;
    mini.ColumnModel.superclass.constructor.apply(this, arguments);
    this._init()
};
mini.ColumnModel_ColumnID = 1;
mini.extend(mini.ColumnModel, mini.Component, {
    _defaultColumnWidth: 100,
    _init: function() {
        this.columns = [];
        this._columnsRow = [];
        this._visibleColumnsRow = [];
        this.OlOoO = [];
        this._visibleColumns = [];
        this.O0O00 = {};
        this.lOl1 = {};
        this._fieldColumns = {}
    },
    getColumns: function() {
        return this.columns
    },
    getAllColumns: function() {
        var _ = [];
        for (var A in this.O0O00) {
            var $ = this.O0O00[A];
            _.push($)
        }
        return _
    },
    getColumnsRow: function() {
        return this._columnsRow
    },
    getVisibleColumnsRow: function() {
        return this._visibleColumnsRow
    },
    getBottomColumns: function() {
        return this.OlOoO
    },
    getVisibleColumns: function() {
        return this._visibleColumns
    },
    _getBottomColumnsByColumn: function(A) {
        A = this.getColumn(A);
        var C = this.OlOoO,
            B = [];
        for (var $ = 0, D = C.length; $ < D; $++) {
            var _ = C[$];
            if (this.isAncestorColumn(A, _)) B.push(_)
        }
        return B
    },
    _getVisibleColumnsByColumn: function(A) {
        A = this.getColumn(A);
        var C = this._visibleColumns,
            B = [];
        for (var $ = 0, D = C.length; $ < D; $++) {
            var _ = C[$];
            if (this.isAncestorColumn(A, _)) B.push(_)
        }
        return B
    },
    setColumns: function($) {
        if (!mini.isArray($)) $ = [];
        this._init();
        this.columns = $;
        this._columnsChanged()
    },
    _columnsChanged: function() {
        this._updateColumnsView();
        this.fire("columnschanged")
    },
    _updateColumnsView: function() {
        this._maxColumnLevel = 0;
        var level = 0;

        function init(column, index, parentColumn) {
            if (column.type) {
                if (!mini.isNull(column.header) && typeof column.header !== "function")
                    if (column.header.trim() == "") delete column.header;
                var col = mini._getColumn(column.type);
                if (col) {
                    var _column = mini.copyTo({}, column);
                    mini.copyTo(column, col);
                    mini.copyTo(column, _column)
                }
            }
            if (!column._id) column._id = mini.ColumnModel_ColumnID++;
            column._pid = parentColumn == this ? -1 : parentColumn._id;
            this.O0O00[column._id] = column;
            if (column.name) this.lOl1[column.name] = column;
            column._level = level;
            level += 1;
            this.eachColumns(column, init, this);
            level -= 1;
            if (column._level > this._maxColumnLevel) this._maxColumnLevel = column._level;
            var width = parseInt(column.width);
            if (mini.isNumber(width) && String(width) == column.width) column.width = width + "px";
            if (mini.isNull(column.width)) column.width = this._defaultColumnWidth + "px";
            column.visible = column.visible !== false;
            column.allowResize = column.allowResize !== false;
            column.allowMove = column.allowMove !== false;
            column.allowSort = column.allowSort === true;
            column.allowDrag = !!column.allowDrag;
            column.readOnly = !!column.readOnly;
            column.autoEscape = !!column.autoEscape;
            column.enabled = column.enabled !== false;
            column.showCellTip = column.showCellTip !== false;
            column.valueFromSelect = column.valueFromSelect !== false;
            column.vtype = column.vtype || "";
            if (typeof column.filter == "string") column.filter = eval("(" + column.filter + ")");
            if (column.filter && !column.filter.el) column.filter = mini.create(column.filter);
            if (typeof column.init == "function" && column.inited != true) column.init(this.owner);
            column.inited = true;
            column._gridUID = this.owner.uid;
            column._rowIdField = this.owner._rowIdField
        }
        this.eachColumns(this, init, this);
        this._createColumnsRow();
        var index = 0,
            view = this._visibleColumns = [],
            bottoms = this.OlOoO = [];
        this.cascadeColumns(this, function($) {
            if (!$.columns || $.columns.length == 0) {
                bottoms.push($);
                if (this.isVisibleColumn($)) {
                    view.push($);
                    $._index = index++
                }
            }
        }, this);
        this._fieldColumns = {};
        var columns = this.getAllColumns();
        for (var i = 0, l = columns.length; i < l; i++) {
            var column = columns[i];
            if (column.field && !this._fieldColumns[column.field]) this._fieldColumns[column.field] = column
        }
        this._createFrozenColSpan()
    },
    _frozenStartColumn: -1,
    _frozenEndColumn: -1,
    isFrozen: function() {
        return this._frozenStartColumn >= 0 && this._frozenEndColumn >= this._frozenStartColumn
    },
    isFrozenColumn: function(_) {
        if (!this.isFrozen()) return false;
        _ = this.getColumn(_);
        if (!_) return false;
        var $ = this.getVisibleColumns().indexOf(_);
        return this._frozenStartColumn <= $ && $ <= this._frozenEndColumn
    },
    frozen: function($, _) {
        $ = this.getColumn($);
        _ = this.getColumn(_);
        var A = this.getVisibleColumns();
        this._frozenStartColumn = A.indexOf($);
        this._frozenEndColumn = A.indexOf(_);
        if ($ && _) this._columnsChanged()
    },
    unFrozen: function() {
        this._frozenStartColumn = -1;
        this._frozenEndColumn = -1;
        this._columnsChanged()
    },
    setFrozenStartColumn: function($) {
        this.frozen($, this._frozenEndColumn)
    },
    setFrozenEndColumn: function($) {
        this.frozen(this._frozenStartColumn, $)
    },
    getFrozenColumns: function() {
        var A = [],
            _ = this.isFrozen();
        for (var $ = 0, B = this._visibleColumns.length; $ < B; $++)
            if (_ && this._frozenStartColumn <= $ && $ <= this._frozenEndColumn) A.push(this._visibleColumns[$]);
        return A
    },
    getUnFrozenColumns: function() {
        var A = [],
            _ = this.isFrozen();
        for (var $ = 0, B = this._visibleColumns.length; $ < B; $++)
            if ((_ && $ > this._frozenEndColumn) || !_) A.push(this._visibleColumns[$]);
        return A
    },
    getFrozenColumnsRow: function() {
        return this.isFrozen() ? this._columnsRow1 : []
    },
    getUnFrozenColumnsRow: function() {
        return this.isFrozen() ? this._columnsRow2 : this.getVisibleColumnsRow()
    },
    _createFrozenColSpan: function() {
        var G = this,
            N = this.getVisibleColumns(),
            B = this._frozenStartColumn,
            D = this._frozenEndColumn;

        function F(E, C) {
            var F = G.isBottomColumn(E) ? [E] : G._getVisibleColumnsByColumn(E);
            for (var _ = 0, H = F.length; _ < H; _++) {
                var A = F[_],
                    $ = N.indexOf(A);
                if (C == 0 && $ < B) return true;
                if (C == 1 && B <= $ && $ <= D) return true;
                if (C == 2 && $ > D) return true
            }
            return false
        }

        function _(D, A) {
            var E = mini.treeToList(D.columns, "columns"),
                B = 0;
            for (var $ = 0, C = E.length; $ < C; $++) {
                var _ = E[$];
                if (G.isVisibleColumn(_) == false || F(_, A) == false) continue;
                if (!_.columns || _.columns.length == 0) B += 1
            }
            return B
        }
        var $ = mini.treeToList(this.columns, "columns");
        for (var K = 0, I = $.length; K < I; K++) {
            var E = $[K];
            delete E.colspan0;
            delete E.colspan1;
            delete E.colspan2;
            delete E.viewIndex0;
            delete E.viewIndex1;
            delete E.viewIndex2;
            if (this.isFrozen()) {
                if (E.columns && E.columns.length > 0) {
                    E.colspan1 = _(E, 1);
                    E.colspan2 = _(E, 2);
                    E.colspan0 = _(E, 0)
                } else {
                    E.colspan1 = 1;
                    E.colspan2 = 1;
                    E.colspan0 = 1
                }
                if (F(E, 0)) E["viewIndex" + 0] = true;
                if (F(E, 1)) E["viewIndex" + 1] = true;
                if (F(E, 2)) E["viewIndex" + 2] = true
            }
        }
        var J = this._getMaxColumnLevel();
        this._columnsRow1 = [];
        this._columnsRow2 = [];
        for (K = 0, I = this._visibleColumnsRow.length; K < I; K++) {
            var H = this._visibleColumnsRow[K],
                L = [],
                O = [];
            this._columnsRow1.push(L);
            this._columnsRow2.push(O);
            for (var M = 0, A = H.length; M < A; M++) {
                var C = H[M];
                if (C.viewIndex1) L.push(C);
                if (C.viewIndex2) O.push(C)
            }
        }
    },
    _createColumnsRow: function() {
        var _ = this._getMaxColumnLevel(),
            F = [],
            D = [];
        for (var C = 0, H = _; C <= H; C++) {
            F.push([]);
            D.push([])
        }
        var G = this;

        function A(C) {
            var D = mini.treeToList(C.columns, "columns"),
                A = 0;
            for (var $ = 0, B = D.length; $ < B; $++) {
                var _ = D[$];
                if (G.isVisibleColumn(_) == false) continue;
                if (!_.columns || _.columns.length == 0) A += 1
            }
            return A
        }
        var $ = mini.treeToList(this.columns, "columns");
        for (C = 0, H = $.length; C < H; C++) {
            var E = $[C],
                B = F[E._level],
                I = D[E._level];
            delete E.rowspan;
            delete E.colspan;
            if (E.columns && E.columns.length > 0) E.colspan = A(E);
            if ((!E.columns || E.columns.length == 0) && E._level < _) E.rowspan = _ - E._level + 1;
            B.push(E);
            if (this.isVisibleColumn(E)) I.push(E)
        }
        this._columnsRow = F;
        this._visibleColumnsRow = D
    },
    _getMaxColumnLevel: function() {
        return this._maxColumnLevel
    },
    cascadeColumns: function(A, E, B) {
        if (!E) return;
        var D = A.columns;
        if (D) {
            D = D.clone();
            for (var $ = 0, C = D.length; $ < C; $++) {
                var _ = D[$];
                if (E.call(B || this, _, $, A) === false) return;
                this.cascadeColumns(_, E, B)
            }
        }
    },
    eachColumns: function(B, F, C) {
        var D = B.columns;
        if (D) {
            var _ = D.clone();
            for (var A = 0, E = _.length; A < E; A++) {
                var $ = _[A];
                if (F.call(C, $, A, B) === false) break
            }
        }
    },
    getColumn: function($) {
        var _ = typeof $;
        if (_ == "number") return this.OlOoO[$];
        else if (_ == "object") return $;
        else return this.lOl1[$]
    },
    getColumnByField: function($) {
        if (!$) return null;
        return this._fieldColumns[$]
    },
    olo1: function($) {
        return this.O0O00[$]
    },
    _getDataTypeByField: function(A) {
        var C = "string",
            B = this.getBottomColumns();
        for (var $ = 0, D = B.length; $ < D; $++) {
            var _ = B[$];
            if (_.field == A) {
                if (_.sortType) C = _.sortType.toLowerCase();
                else if (_.dataType) C = _.dataType.toLowerCase();
                break
            }
        }
        return C
    },
    getParentColumn: function($) {
        $ = this.getColumn($);
        var _ = $._pid;
        if (_ == -1) return this;
        return this.O0O00[_]
    },
    getAncestorColumns: function(A) {
        var _ = [A];
        while (1) {
            var $ = this.getParentColumn(A);
            if (!$ || $ == this) break;
            _[_.length] = $;
            A = $
        }
        _.reverse();
        return _
    },
    isAncestorColumn: function(_, B) {
        if (_ == B) return true;
        if (!_ || !B) return false;
        var A = this.getAncestorColumns(B);
        for (var $ = 0, C = A.length; $ < C; $++)
            if (A[$] == _) return true;
        return false
    },
    isVisibleColumn: function(B) {
        B = this.getColumn(B);
        if (B.visible == false) return false;
        var C = this.getAncestorColumns(B);
        for (var $ = 0, E = C.length; $ < E; $++)
            if (C[$].visible == false) return false;
        var D = B.columns;
        if (D) {
            var _ = true;
            for ($ = 0, E = D.length; $ < E; $++) {
                var A = D[$];
                if (this.isVisibleColumn(A)) {
                    _ = false;
                    break
                }
            }
            if (_) return false
        }
        return true
    },
    isBottomColumn: function($) {
        $ = this.getColumn($);
        return !($.columns && $.columns.length > 0)
    },
    updateColumn: function($, _) {
        $ = this.getColumn($);
        if (!$) return;
        mini.copyTo($, _);
        this._columnsChanged()
    },
    moveColumn: function(C, _, A) {
        C = this.getColumn(C);
        _ = this.getColumn(_);
        if (!C || !_ || !A || C == _) return;
        if (this.isAncestorColumn(C, _)) return;
        var D = this.getParentColumn(C);
        if (D) D.columns.remove(C);
        var B = _,
            $ = A;
        if ($ == "before") {
            B = this.getParentColumn(_);
            $ = B.columns.indexOf(_)
        } else if ($ == "after") {
            B = this.getParentColumn(_);
            $ = B.columns.indexOf(_) + 1
        } else if ($ == "add" || $ == "append") {
            if (!B.columns) B.columns = [];
            $ = B.columns.length
        } else if (!mini.isNumber($)) return;
        B.columns.insert($, C);
        this._columnsChanged()
    },
    addColumn: function($) {
        if (!$) return;
        delete $._id;
        this._columnsChanged()
    },
    removeColumn: function() {
        this._columnsChanged()
    }
});
mini.GridView = function() {
    this._createTime = new Date();
    this._createColumnModel();
    this._bindColumnModel();
    this.data = [];
    this._createSource();
    this.lllO();
    this._initData();
    mini.GridView.superclass.constructor.apply(this, arguments);
    this.Ol01();
    this.Oool0();
    this.doUpdate();
    if (mini.isNull(this._paddingTop)) {
        if (mini.isNull(mini.GridView._paddingTop)) {
            var _ = $("<div class=\"mini-grid-cell-inner\" style=\"position:absolute;left:-1000px;top:-1000px;\"></div>").appendTo("body"),
                A = mini.getPaddings(_);
            mini.GridView._paddingTop = A.top;
            mini.GridView._paddingBottom = A.bottom
        }
        this._paddingTop = mini.GridView._paddingTop;
        this._paddingBottom = mini.GridView._paddingBottom
    }
    this.llO1ooHash = {}
};
mini.extend(mini.GridView, mini.Panel, {
    l10O0: "block",
    _rowIdField: "_id",
    width: "100%",
    showSortIcon: false,
    showColumns: true,
    showFilterRow: false,
    showSummaryRow: false,
    showPager: false,
    allowCellWrap: false,
    allowHeaderWrap: false,
    showModified: true,
    showNewRow: true,
    showEmptyText: false,
    emptyText: "No data returned.",
    showHGridLines: true,
    showVGridLines: true,
    allowAlternating: false,
    OO0l0o: "mini-grid-row-alt",
    llO1oo: "mini-grid-row",
    _cellCls: "mini-grid-cell",
    _headerCellCls: "mini-grid-headerCell",
    O10oo: "mini-grid-row-selected",
    l11010: "mini-grid-row-hover",
    lo01O: "mini-grid-cell-selected",
    defaultRowHeight: 25,
    fixedRowHeight: false,
    isFixedRowHeight: function() {
        return this.fixedRowHeight
    },
    fitColumns: true,
    isFitColumns: function() {
        return this.fitColumns
    },
    uiCls: "mini-gridview",
    _create: function() {
        mini.GridView.superclass._create.call(this);
        var A = this.el;
        mini.addClass(A, "mini-grid");
        mini.addClass(this._borderEl, "mini-grid-border");
        mini.addClass(this.ololOO, "mini-grid-viewport");
        var C = "<div class=\"mini-grid-pager\"></div>",
            $ = "<div class=\"mini-grid-filterRow\"><div class=\"mini-grid-filterRow-view\"></div><div class=\"mini-grid-scrollHeaderCell\"></div></div>",
            _ = "<div class=\"mini-grid-summaryRow\"><div class=\"mini-grid-summaryRow-view\"></div><div class=\"mini-grid-scrollHeaderCell\"></div></div>",
            B = "<div class=\"mini-grid-columns\"><div class=\"mini-grid-columns-view\"></div><div class=\"mini-grid-scrollHeaderCell\"></div></div>";
        this._columnsEl = mini.after(this.OO01O, B);
        this.O1OOol = mini.after(this._columnsEl, $);
        this._rowsEl = this._bodyEl;
        mini.addClass(this._rowsEl, "mini-grid-rows");
        this.o01o = mini.after(this._rowsEl, _);
        this._bottomPagerEl = mini.after(this.o01o, C);
        this._columnsViewEl = this._columnsEl.childNodes[0];
        this._rowsViewEl = mini.append(this._rowsEl, "<div class=\"mini-grid-rows-view\"><div class=\"mini-grid-rows-content\"></div></div>");
        this._rowsViewContentEl = this._rowsViewEl.firstChild;
        this._filterViewEl = this.O1OOol.childNodes[0];
        this._summaryViewEl = this.o01o.childNodes[0];
        var D = "<a href=\"#\" class=\"mini-grid-focus\" style=\"position:absolute;left:0px;top:0px;width:0px;height:0px;outline:none;\" hideFocus onclick=\"return false\" ></a>";
        this._focusEl = mini.append(this._borderEl, D)
    },
    destroy: function(A) {
        if (this._dataSource) {
            this._dataSource.destroy();
            this._dataSource = null
        }
        if (this._columnModel) {
            this._columnModel.destroy();
            this._columnModel = null
        }
        if (this._pagers) {
            var _ = this._pagers.clone();
            for (var $ = 0, B = _.length; $ < B; $++) _[$].destroy(A);
            this._pagers = null
        }
        if (this.ololOO) mini.clearEvent(this.ololOO);
        if (this._rowsViewEl) mini.clearEvent(this._rowsViewEl);
        if (this._rowsEl) mini.clearEvent(this._rowsEl);
        if (this._vscrollEl) mini.clearEvent(this._vscrollEl);
        if (this.o1oO0) mini.clearEvent(this.o1oO0);
        if (this._columnsEl) {
            jQuery(this._columnsEl).unbind("mouseenter");
            jQuery(this._columnsEl).unbind("mouseleave")
        }
        this._columnsEl = this._rowsEl = this.O1OOol = this.o01o = this._bottomPagerEl = null;
        this._columnsViewEl = this._topRightCellEl = this._rowsViewEl = this._rowsViewContentEl = null;
        this._filterViewEl = this._summaryViewEl = this._focusEl = null;
        this.ololOO = this._vscrollEl = this._bottomPager = null;
        mini.GridView.superclass.destroy.call(this, A)
    },
    _initEvents: function() {
        mini.GridView.superclass._initEvents.call(this);
        mini.on(this._rowsViewEl, "scroll", this.__OnRowViewScroll, this)
    },
    _sizeChanged: function() {
        mini.GridView.superclass._sizeChanged.call(this);
        var $ = this.isAutoHeight();
        if (mini.isIE)
            if ($) mini.addClass(this._rowsViewEl, "mini-grid-hidden-y");
            else mini.removeClass(this._rowsViewEl, "mini-grid-hidden-y")
    },
    _setBodyWidth: false,
    doLayout: function() {
        var D = this;
        if (!this.canLayout()) return;
        mini.GridView.superclass.doLayout.call(this);
        this._stopLayout();
        var I = this.isAutoHeight(),
            G = this._columnsViewEl.firstChild,
            A = this._rowsViewContentEl.firstChild,
            C = this._filterViewEl.firstChild,
            $ = this._summaryViewEl.firstChild,
            E = jQuery(this._columnsViewEl).height(),
            H = C.offsetHeight,
            _ = this._rowsViewEl.scrollHeight > this._rowsViewEl.clientHeight + 1,
            L = this._rowsViewEl.scrollWidth > this._rowsViewEl.clientWidth + 1,
            F = this._rowsViewContentEl.parentNode.offsetWidth,
            J = F - (_ ? mini.getScrollOffset() : 0);

        function K($) {
            if (this.isFitColumns()) {
                A.style.width = "100%";
                if (mini.isChrome) {
                    if (_) {
                        if (C != $) $.style["paddingRight"] = mini.getScrollOffset() + "px"
                    } else $.style["paddingRight"] = "0px"
                } else if (mini.isSafari || mini.isIE6) $.style.width = J + "px";
                else if (_) {
                    $.style.width = "100%";
                    $.parentNode.style.width = "auto";
                    if (C != $) $.parentNode.style["paddingRight"] = mini.getScrollOffset() + "px";
                    if (mini.isIE8) mini.removeClass(this._rowsViewEl, "mini-grid-hidden-y")
                } else {
                    $.style.width = "100%";
                    $.parentNode.style.width = "auto";
                    $.parentNode.style["paddingRight"] = "0px";
                    if (mini.isIE8) mini.addClass(this._rowsViewEl, "mini-grid-hidden-y")
                }
            } else {
                A.style.width = "0px";
                $.style.width = "0px";
                if (mini.isSafari || mini.isChrome || mini.isIE6);
                else {
                    $.parentNode.style.width = "100%";
                    $.parentNode.style["paddingRight"] = "0px"
                }
            }
        }
        K.call(this, G);
        K.call(this, C);
        K.call(this, $);
        this._syncScroll();
        var B = this;
        setTimeout(function() {
            mini.layout(B.O1OOol);
            mini.layout(B.o01o)
        }, 10);
        if (mini.isIE6) setTimeout(function() {
            K.call(D, G)
        }, 1);
        if (mini.isIE10) {
            setTimeout(function() {
                if (B.isFitColumns()) {
                    G.style.width = "auto";
                    G.offsetWidth;
                    G.style.width = "100%"
                } else G.style.width = "0px"
            }, 0);
            mini.repaint(A)
        }
        this._topRightCellEl = this._columnsViewEl.childNodes[1];
        if (mini.isIE6) this._topRightCellEl.style.height = E;
        if (mini.isIE6 || mini.isIE7) {
            this._rowsViewContentEl.style["paddingBottom"] = "0px";
            if (I)
                if (L) this._rowsViewContentEl.style["paddingBottom"] = "17px"
        }
        this._filterViewEl.style.height = H + "px";
        C.style.width = J + "px"
    },
    setBody: function() {},
    _createTopRowHTML: function(B) {
        var E = "";
        if (mini.isIE) {
            if (mini.isIE6 || mini.isIE7 || !mini.boxModel) E += "<tr style=\"display:none;height:0px;\">";
            else E += "<tr style=\"height:0px;\">"
        } else E += "<tr style=\"height:0px;\">";
        if (this._userEmptyTd !== false) E += "<td style=\"height:0px;width:0;\"></td>";
        for (var $ = 0, C = B.length; $ < C; $++) {
            var A = B[$],
                _ = A.width,
                D = A._id;
            E += "<td id=\"" + D + "\" style=\"padding:0;border:0;margin:0;height:0px;";
            if (A.width) E += "width:" + A.width;
            E += "\" ></td>"
        }
        E += "<td style=\"width:0px;\"></td>";
        E += "</tr>";
        return E
    },
    _createColumnsHTML: function(B, L, P) {
        var P = P ? P : this.getVisibleColumns(),
            I = ["<table class=\"mini-grid-table\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">"];
        I.push(this._createTopRowHTML(P));
        var N = this.getSortField(),
            F = this.getSortOrder();
        for (var M = 0, _ = B.length; M < _; M++) {
            var G = B[M];
            I[I.length] = "<tr>";
            I[I.length] = "<td style=\"width:0;\"></td>";
            for (var J = 0, H = G.length; J < H; J++) {
                var D = G[J],
                    A = D.sortField || D.field,
                    O = this.l01O1Text(D, L),
                    K = this.Ooo0Id(D, L),
                    $ = "";
                if (N && N == A) $ = F == "asc" ? "mini-grid-asc" : "mini-grid-desc";
                var E = "";
                if (this.allowHeaderWrap == false) E = " mini-grid-headerCell-nowrap ";
                I[I.length] = "<td id=\"";
                I[I.length] = K;
                I[I.length] = "\" class=\"mini-grid-headerCell " + $ + " " + (D.headerCls || "") + " ";
                var C = !(D.columns && D.columns.length > 0);
                if (C) I[I.length] = " mini-grid-bottomCell ";
                if (J == H - 1) I[I.length] = " mini-grid-rightCell ";
                I[I.length] = "\" style=\"";
                if (D.headerStyle) I[I.length] = D.headerStyle + ";";
                if (D.headerAlign) I[I.length] = "text-align:" + D.headerAlign + ";";
                I[I.length] = "\" ";
                if (D.rowspan) I[I.length] = "rowspan=\"" + D.rowspan + "\" ";
                this._createColumnColSpan(D, I, L);
                I[I.length] = "><div class=\"mini-grid-headerCell-outer\"><div class=\"mini-grid-headerCell-inner " + E + "\">";
                I[I.length] = O;
                if ($) I[I.length] = "<span class=\"mini-grid-sortIcon\"></span>";
                else if (this.showSortIcon)
                    if (D.allowSort) I[I.length] = "<span class=\"mini-grid-allowsort\"></span>";
                I[I.length] = "</div><div id=\"" + D._id + "\" class=\"mini-grid-column-splitter\"></div>";
                I[I.length] = "</div></td>"
            }
            if (this.isFrozen() && L == 1) {
                I[I.length] = "<td class=\"mini-grid-headerCell\" style=\"width:0;\"><div class=\"mini-grid-headerCell-inner\" style=\"";
                I[I.length] = "\">0</div></td>"
            }
            I[I.length] = "</tr>"
        }
        I.push("</table>");
        return I.join("")
    },
    l01O1Text: function(_, $) {
        var A = _.header;
        if (typeof A == "function") A = A.call(this, _);
        if (mini.isNull(A) || A === "") A = "&nbsp;";
        return A
    },
    _createColumnColSpan: function(_, A, $) {
        if (_.colspan) A[A.length] = "colspan=\"" + _.colspan + "\" "
    },
    doUpdateColumns: function() {
        var A = this._columnsViewEl.scrollLeft,
            _ = this.getVisibleColumnsRow(),
            $ = this._createColumnsHTML(_, 2),
            B = "<div class=\"mini-grid-topRightCell\"></div>";
        $ += B;
        this._columnsViewEl.innerHTML = $;
        this._columnsViewEl.scrollLeft = A
    },
    doUpdate: function() {
        if (this.canUpdate() == false) return;
        var $ = this,
            D = this._isCreating(),
            B = new Date();
        this.Oool0();
        var C = this,
            A = this.getScrollLeft();

        function _() {
            if (!C.el) return;
            C.doUpdateColumns();
            C.doUpdateRows();
            C.doLayout();
            C._doUpdateTimer = null
        }
        C.doUpdateColumns();
        if (D) this._useEmptyView = true;
        this._doRemoveRowContent();
        C.doUpdateRows();
        if (A > 0 && C.isVirtualScroll()) C.setScrollLeft(A);
        if (D) this._useEmptyView = false;
        C.doLayout();
        if (D && !this._doUpdateTimer) this._doUpdateTimer = setTimeout(_, 15);
        this.unmask();
        if ($._fireUpdateTimer) {
            clearTimeout($._fireUpdateTimer);
            $._fireUpdateTimer = null
        }
        $._fireUpdateTimer = setTimeout(function() {
            $._fireUpdateTimer = null;
            $.fire("update")
        }, 100)
    },
    _doRemoveRowContent: function() {
        if (this._rowsViewContentEl && this._rowsViewContentEl.firstChild) this._rowsViewContentEl.removeChild(this._rowsViewContentEl.firstChild);
        if (this._rowsLockContentEl && this._rowsLockContentEl.firstChild) this._rowsLockContentEl.removeChild(this._rowsLockContentEl.firstChild)
    },
    _isCreating: function() {
        return (new Date() - this._createTime) < 1000
    },
    deferUpdate: function($) {
        if (!$) $ = 5;
        if (this._updateTimer || this._doUpdateTimer) return;
        var _ = this;
        this._updateTimer = setTimeout(function() {
            _._updateTimer = null;
            _.doUpdate()
        }, $)
    },
    _pushUpdateCallback: function(B, A, _) {
        var $ = 0;
        if (this._doUpdateTimer || this._updateTimer) $ = 20;
        if ($ == 0) B.apply(A, _);
        else setTimeout(function() {
            B.apply(A, _)
        }, $)
    },
    _updateCount: 0,
    beginUpdate: function() {
        this._updateCount++
    },
    endUpdate: function($) {
        this._updateCount--;
        if (this._updateCount == 0 || $ === true) {
            this._updateCount = 0;
            this.doUpdate()
        }
    },
    canUpdate: function() {
        return this._updateCount == 0
    },
    setDefaultRowHeight: function($) {
        this.defaultRowHeight = $
    },
    getDefaultRowHeight: function() {
        return this.defaultRowHeight
    },
    _getRowHeight: function($) {
        var _ = this.defaultRowHeight;
        if ($._height) {
            _ = parseInt($._height);
            if (isNaN(parseInt($._height))) _ = rowHeight
        }
        _ = _ - this._paddingTop - this._paddingBottom;
        _ -= 1;
        return _
    },
    _createGroupingHTML: function(D, I) {
        var H = this.getGroupingView(),
            B = this._showGroupSummary,
            M = this.isFrozen(),
            N = 0,
            E = this;

        function O(C, _) {
            G.push("<table class=\"mini-grid-table\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">");
            if (D.length > 0) {
                G.push(E._createTopRowHTML(D));
                for (var F = 0, $ = C.length; F < $; F++) {
                    var A = C[F];
                    E.l11OoHTML(A, N++, D, I, G)
                }
            }
            if (B);
            G.push("</table>")
        }
        var A = this.groupTitleCollapsible !== false,
            G = ["<table class=\"mini-grid-table\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">"];
        G.push(this._createTopRowHTML(D));
        for (var L = 0, $ = H.length; L < $; L++) {
            if (I == 1 && !this.isFrozen()) continue;
            var _ = H[L],
                F = this.l11OoGroupId(_, I),
                J = this.l11OoGroupRowsId(_, I),
                P = this.OOo1Oo(_),
                C = _.expanded ? "" : " mini-grid-group-collapse ";
            G[G.length] = "<tr id=\"";
            G[G.length] = F;
            G[G.length] = "\" class=\"mini-grid-groupRow";
            G[G.length] = C;
            G[G.length] = "\"><td style=\"width:0;\"></td><td class=\"mini-grid-groupCell ";
            G[G.length] = P.cls;
            G[G.length] = "\" style=\"";
            G[G.length] = P.style;
            G[G.length] = "\" colspan=\"";
            G[G.length] = D.length;
            G[G.length] = "\"><div class=\"mini-grid-groupHeader ";
            if (A) G[G.length] = "mini-grid-groupHeader-collapsible";
            G[G.length] = "\">";
            if (!M || (M && I == 1)) {
                G[G.length] = "<div class=\"mini-grid-group-ecicon\"></div>";
                G[G.length] = "<div class=\"mini-grid-groupTitle\">" + P.cellHtml + "</div>"
            } else G[G.length] = "&nbsp;";
            G[G.length] = "</div></td></tr>";
            var K = _.expanded ? "" : "display:none";
            G[G.length] = "<tr class=\"mini-grid-groupRows-tr\" style=\"";
            G[G.length] = "\"><td style=\"width:0;\"></td><td class=\"mini-grid-groupRows-td\" colspan=\"";
            G[G.length] = D.length;
            G[G.length] = "\"><div id=\"";
            G[G.length] = J;
            G[G.length] = "\" class=\"mini-grid-groupRows\" style=\"";
            G[G.length] = K;
            G[G.length] = "\">";
            O(_.rows, _);
            G[G.length] = "</div></td></tr>"
        }
        G.push("</table>");
        return G.join("")
    },
    _isFastCreating: function() {
        var $ = this.getVisibleRows();
        if ($.length > 50) return this._isCreating() || this.getScrollTop() < 50 * this._defaultRowHeight;
        return false
    },
    isShowRowDetail: function($) {
        return false
    },
    isCellValid: function($, _) {
        return true
    },
    l11OoHTML: function($, J, B, R, P) {
        var I = !P;
        if (!P) P = [];
        var M = "",
            L = this.isFixedRowHeight();
        if (L) M = this._getRowHeight($);
        var S = this.defaultRowHeight - 1,
            Q = -1,
            F = " ",
            D = -1,
            G = " ";
        P[P.length] = "<tr class=\"mini-grid-row ";
        if ($._state == "added" && this.showNewRow) P[P.length] = "mini-grid-newRow ";
        if (this.isShowRowDetail($)) P[P.length] = "mini-grid-expandRow ";
        if (this.allowAlternating && J % 2 == 1) {
            P[P.length] = this.OO0l0o;
            P[P.length] = " "
        }
        var A = this.llO1ooHash[$._id];
        if (A) {
            P[P.length] = A.join(" ");
            P[P.length] = " "
        }
        Q = P.length;
        P[P.length] = F;
        P[P.length] = "\" style=\"";
        D = P.length;
        P[P.length] = G;
        if ($.visible === false) P[P.length] = ";display:none;";
        P[P.length] = "\" id=\"";
        P[P.length] = this.lOo100($, R);
        P[P.length] = "\">";
        if (this._userEmptyTd !== false) P[P.length] = "<td style=\"width:0;\"></td>";
        var H = this.oloo;
        for (var E = 0, O = B.length; E < O; E++) {
            var _ = B[E],
                C = this.loOloo($, _),
                N = "",
                V = this._OnDrawCell($, _, J, _._index);
            if (V.cellHtml === null || V.cellHtml === undefined || V.cellHtml === "") V.cellHtml = "&nbsp;";
            P[P.length] = "<td ";
            if (V.rowSpan) P[P.length] = "rowspan=\"" + V.rowSpan + "\"";
            if (V.colSpan) P[P.length] = "colspan=\"" + V.colSpan + "\"";
            P[P.length] = " id=\"";
            P[P.length] = C;
            P[P.length] = "\" class=\"mini-grid-cell ";
            if (!this.isCellValid($, _)) P[P.length] = " mini-grid-cell-error ";
            if (E == O - 1) P[P.length] = " mini-grid-rightCell ";
            if (V.cellCls) P[P.length] = " " + V.cellCls + " ";
            if (N) P[P.length] = N;
            if (H && H[0] == $ && H[1] == _) {
                P[P.length] = " ";
                P[P.length] = this.lo01O
            }
            P[P.length] = "\" style=\"";
            if (V.showHGridLines == false) P[P.length] = "border-bottom:0;";
            if (V.showVGridLines == false) P[P.length] = "border-right:0;";
            if (!V.visible) P[P.length] = "display:none;";
            if (_.align) {
                P[P.length] = "text-align:";
                P[P.length] = _.align;
                P[P.length] = ";"
            }
            if (V.cellStyle) P[P.length] = V.cellStyle;
            P[P.length] = "\">";
            P[P.length] = "<div class=\"mini-grid-cell-inner ";
            if (!V.allowCellWrap) P[P.length] = " mini-grid-cell-nowrap ";
            if (V.cellInnerCls) P[P.length] = V.cellInnerCls;
            var T = _.field ? this._dataSource.isModified($, _.field) : false;
            if (T && this.showModified) P[P.length] = " mini-grid-cell-dirty";
            P[P.length] = "\" style=\"";
            if (L) {
                P[P.length] = "height:";
                if (!_.name || this._treeColumn !== _.name) P[P.length] = M;
                else P[P.length] = S;
                P[P.length] = "px;";
                P[P.length] = "line-height:";
                if (!_.name || this._treeColumn !== _.name) P[P.length] = M;
                else P[P.length] = S;
                P[P.length] = "px;"
            }
            if (V.cellInnerStyle) P[P.length] = V.cellInnerStyle;
            P[P.length] = "\">";
            P[P.length] = V.cellHtml;
            P[P.length] = "</div>";
            P[P.length] = "</td>";
            if (V.rowCls) F = V.rowCls;
            if (V.rowStyle) G = V.rowStyle
        }
        if (this.isFrozen() && R == 1) {
            P[P.length] = "<td class=\"mini-grid-cell\" style=\"width:0;";
            if (this.showHGridLines == false) P[P.length] = "border-bottom:0;";
            P[P.length] = "\"><div class=\"mini-grid-cell-inner\" style=\"";
            if (L) {
                P[P.length] = "height:";
                P[P.length] = M;
                P[P.length] = "px;"
            }
            P[P.length] = "\">0</div></td>"
        }
        P[Q] = F;
        P[D] = G;
        P[P.length] = "</tr>";
        if (I) {
            var K = P.join(""),
                U = /(<script(.*)<\/script(\s*)>)/i;
            K = K.replace(U, "");
            return K
        }
    },
    l11OosHTML: function(B, F, G, E) {
        G = G || this.getVisibleRows();
        var C = ["<table class=\"mini-grid-table mini-grid-rowstable\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">"];
        C.push(this._createTopRowHTML(B, true));
        var J = this.uid + "$emptytext" + F;
        if (F == 2 && this._dataSource.loaded) {
            var H = (this.showEmptyText && G.length == 0) ? "" : "display:none;";
            C.push("<tr id=\"" + J + "\" style=\"" + H + "\"><td style=\"width:0\"></td><td class=\"mini-grid-emptyText\" colspan=\"" + B.length + "\">" + this.emptyText + "</td></tr>")
        }
        var D = 0;
        if (G.length > 0) {
            var A = G[0];
            D = this.getVisibleRows().indexOf(A)
        }
        for (var I = 0, _ = G.length; I < _; I++) {
            var K = D + I,
                $ = G[I];
            this.l11OoHTML($, K, B, F, C)
        }
        if (E) C.push(E);
        C.push("</table>");
        return C.join("")
    },
    doUpdateRows: function() {
        var _ = this.getVisibleRows(),
            A = new Date(),
            B = this.getVisibleColumns();
        if (this.isGrouping()) {
            var $ = this._createGroupingHTML(B, 2);
            this._rowsViewContentEl.innerHTML = $
        } else {
            $ = this.l11OosHTML(B, 2, _);
            this._rowsViewContentEl.innerHTML = $
        }
    },
    _createFilterRowHTML: function(B, _) {
        var F = ["<table class=\"mini-grid-table\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\" style=\"position:absolute;top:0;left:0;\">"];
        F.push(this._createTopRowHTML(B));
        F[F.length] = "<tr>";
        F[F.length] = "<td style=\"width:0;\"></td>";
        for (var $ = 0, C = B.length; $ < C; $++) {
            var A = B[$],
                E = this.llolo(A);
            F[F.length] = "<td id=\"";
            F[F.length] = E;
            F[F.length] = "\" class=\"mini-grid-filterCell\" style=\"";
            F[F.length] = "\">&nbsp;</td>"
        }
        F[F.length] = "</tr></table><div class=\"mini-grid-scrollHeaderCell\"></div>";
        var D = F.join("");
        return D
    },
    _doRenderFilters: function() {
        var B = this.getVisibleColumns();
        for (var $ = 0, C = B.length; $ < C; $++) {
            var A = B[$];
            if (A.filter) {
                var _ = this.getFilterCellEl(A);
                if (_) {
                    _.innerHTML = "";
                    A.filter.render(_)
                }
            }
        }
    },
    Ol01: function() {
        if (this._filterViewEl.firstChild) this._filterViewEl.removeChild(this._filterViewEl.firstChild);
        var _ = this.isFrozen(),
            A = this.getVisibleColumns(),
            $ = this._createFilterRowHTML(A, 2);
        this._filterViewEl.innerHTML = $;
        this._doRenderFilters()
    },
    _createSummaryRowHTML: function(C, A) {
        var _ = this.getDataView(),
            G = ["<table class=\"mini-grid-table\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">"];
        G.push(this._createTopRowHTML(C));
        G[G.length] = "<tr>";
        G[G.length] = "<td style=\"width:0;\"></td>";
        for (var $ = 0, D = C.length; $ < D; $++) {
            var B = C[$],
                F = this.llOo0l(B),
                H = this._OnDrawSummaryCell(_, B);
            G[G.length] = "<td id=\"";
            G[G.length] = F;
            G[G.length] = "\" class=\"mini-grid-summaryCell " + H.cellCls + "\" style=\"" + H.cellStyle + ";";
            G[G.length] = "\">";
            G[G.length] = H.cellHtml;
            G[G.length] = "</td>"
        }
        G[G.length] = "</tr></table><div class=\"mini-grid-scrollHeaderCell\"></div>";
        var E = G.join("");
        return E
    },
    Oool0: function() {
        if (!this.showSummaryRow) return;
        var _ = this.getVisibleColumns(),
            $ = this._createSummaryRowHTML(_, 2);
        this._summaryViewEl.innerHTML = $
    },
    lOlOo0ByField: function(A, _) {
        if (!A) return null;
        var $ = this._columnModel._getDataTypeByField(A);
        this._dataSource._doClientSortField(A, _, $)
    },
    _expandGroupOnLoad: true,
    lO1l0O: 1,
    o1lol: "",
    ll01Oo: "",
    groupBy: function($, _) {
        if (!$) return;
        this.o1lol = $;
        if (typeof _ == "string") _ = _.toLowerCase();
        this.ll01Oo = _;
        this._createGroupingView();
        this.deferUpdate()
    },
    clearGroup: function() {
        this.o1lol = "";
        this.ll01Oo = "";
        this.l0Ol = null;
        this.deferUpdate()
    },
    setGroupField: function($) {
        this.groupBy($)
    },
    setGroupDir: function($) {
        this.ll01Oo = field;
        this.groupBy(this.o1lol, $)
    },
    isGrouping: function() {
        return this.o1lol != ""
    },
    getGroupingView: function() {
        return this.l0Ol
    },
    enableGroupOrder: true,
    _createGroupingView: function() {
        if (this.isGrouping() == false) return;
        this.l0Ol = null;
        var O = this._dataSource,
            M = this.o1lol,
            E = this.ll01Oo;
        if (this.enableGroupOrder) this.lOlOo0ByField(M, E);
        var K = this.getVisibleRows(),
            I = [],
            J = {};
        for (var H = 0, D = K.length; H < D; H++) {
            var $ = K[H],
                F = $[M],
                C = mini.isDate(F) ? F.getTime() : F,
                _ = J[C];
            if (!_) {
                _ = J[C] = {};
                _.field = M, _.dir = E;
                _.value = F;
                _.rows = [];
                I.push(_);
                _.id = "g" + this.lO1l0O++;
                _.expanded = this._expandGroupOnLoad
            }
            _.rows.push($)
        }
        var N = O.sortField,
            B = O.sortOrder;
        if (N) {
            var A = this._columnModel._getDataTypeByField(N),
                L = O._getSortFnByField(N, A);
            if (L) {
                var G = B == "desc";
                for (H = 0, D = I.length; H < D; H++) {
                    _ = I[H];
                    mini.sort(_.rows, L);
                    if (G) _.rows.reverse()
                }
            }
        }
        this.l0Ol = I
    },
    OOo1Oo: function($) {
        var _ = {
            group: $,
            rows: $.rows,
            field: $.field,
            dir: $.dir,
            value: $.value,
            cls: "",
            style: "",
            cellHtml: $.field + " (" + $.rows.length + " Items)"
        };
        this.fire("drawgroup", _);
        return _
    },
    getRowGroup: function(_) {
        var $ = typeof _;
        if ($ == "number") return this.getGroupingView()[_];
        if ($ == "string") return this._getRowGroupById(_);
        return _
    },
    _getRowGroupByEvent: function(B) {
        var _ = oOlO(B.target, "mini-grid-groupRow");
        if (_) {
            var $ = _.id.split("$");
            if ($[0] != this._id) return null;
            var A = $[$.length - 1];
            return this._getRowGroupById(A)
        }
        return null
    },
    _getRowGroupById: function(C) {
        var _ = this.getGroupingView();
        for (var $ = 0, B = _.length; $ < B; $++) {
            var A = _[$];
            if (A.id == C) return A
        }
        return null
    },
    l11OoGroupId: function($, _) {
        return this._id + "$group" + _ + "$" + $.id
    },
    l11OoGroupRowsId: function($, _) {
        return this._id + "$grouprows" + _ + "$" + $.id
    },
    lOo100: function(_, $) {
        var A = this._id + "$row" + $ + "$" + _._id;
        return A
    },
    Ooo0Id: function(_, $) {
        var A = this._id + "$headerCell" + $ + "$" + _._id;
        return A
    },
    loOloo: function($, _) {
        var A = $._id + "$cell$" + _._id;
        return A
    },
    llolo: function($) {
        return this._id + "$filter$" + $._id
    },
    llOo0l: function($) {
        return this._id + "$summary$" + $._id
    },
    getFilterCellEl: function($) {
        $ = this.getColumn($);
        if (!$) return null;
        return document.getElementById(this.llolo($))
    },
    getSummaryCellEl: function($) {
        $ = this.getColumn($);
        if (!$) return null;
        return document.getElementById(this.llOo0l($))
    },
    _doVisibleEls: function() {
        mini.GridView.superclass._doVisibleEls.call(this);
        this._columnsEl.style.display = this.showColumns ? "block" : "none";
        this.O1OOol.style.display = this.showFilterRow ? "block" : "none";
        this.o01o.style.display = this.showSummaryRow ? "block" : "none";
        this._bottomPagerEl.style.display = this.showPager ? "block" : "none"
    },
    setShowColumns: function($) {
        this.showColumns = $;
        this._doVisibleEls();
        this.deferLayout()
    },
    setShowFilterRow: function($) {
        this.showFilterRow = $;
        this._doVisibleEls();
        this.deferLayout()
    },
    setShowSummaryRow: function($) {
        this.showSummaryRow = $;
        this._doVisibleEls();
        this.deferLayout()
    },
    setShowPager: function($) {
        this.showPager = $;
        this._doVisibleEls();
        this.deferLayout()
    },
    setFitColumns: function($) {
        this.fitColumns = $;
        mini.removeClass(this.el, "mini-grid-fixwidth");
        if (this.fitColumns == false) mini.addClass(this.el, "mini-grid-fixwidth");
        this.deferLayout()
    },
    getBodyHeight: function(_) {
        var $ = mini.GridView.superclass.getBodyHeight.call(this, _);
        $ = $ - this.getColumnsHeight() - this.getFilterHeight() - this.getSummaryHeight() - this.getPagerHeight();
        return $
    },
    getColumnsHeight: function() {
        if (!this.showColumns) return 0;
        var $ = mini.getHeight(this._columnsEl);
        return $
    },
    getFilterHeight: function() {
        return this.showFilterRow ? mini.getHeight(this.O1OOol) : 0
    },
    getSummaryHeight: function() {
        return this.showSummaryRow ? mini.getHeight(this.o01o) : 0
    },
    getPagerHeight: function() {
        return this.showPager ? mini.getHeight(this._bottomPagerEl) : 0
    },
    getGridViewBox: function(_) {
        var $ = mini.getBox(this._columnsEl),
            A = mini.getBox(this._bodyEl);
        $.height = A.bottom - $.top;
        $.bottom = $.top + $.height;
        return $
    },
    getSortField: function($) {
        return this._dataSource.sortField
    },
    getSortOrder: function($) {
        return this._dataSource.sortOrder
    },
    _createSource: function() {
        this._dataSource = new mini.DataTable()
    },
    lllO: function() {
        var $ = this._dataSource;
        $.on("loaddata", this.__OnSourceLoadData, this);
        $.on("cleardata", this.__OnSourceClearData, this)
    },
    __OnSourceLoadData: function($) {
        this._initData();
        this.doUpdate()
    },
    __OnSourceClearData: function($) {
        this._initData();
        this.doUpdate()
    },
    _initData: function() {},
    isFrozen: function() {
        var _ = this._columnModel._frozenStartColumn,
            $ = this._columnModel._frozenEndColumn;
        return this._columnModel.isFrozen()
    },
    _createColumnModel: function() {
        this._columnModel = new mini.ColumnModel(this)
    },
    _bindColumnModel: function() {
        this._columnModel.on("columnschanged", this.__OnColumnsChanged, this)
    },
    __OnColumnsChanged: function($) {
        this.columns = this._columnModel.columns;
        this.Ol01();
        this.Oool0();
        this.doUpdate();
        this.fire("columnschanged")
    },
    setColumns: function($) {
        this._columnModel.setColumns($);
        this.columns = this._columnModel.columns
    },
    getColumns: function() {
        return this._columnModel.getColumns()
    },
    getBottomColumns: function() {
        return this._columnModel.getBottomColumns()
    },
    getVisibleColumnsRow: function() {
        var $ = this._columnModel.getVisibleColumnsRow().clone();
        return $
    },
    getVisibleColumns: function() {
        var $ = this._columnModel.getVisibleColumns().clone();
        return $
    },
    getFrozenColumns: function() {
        var $ = this._columnModel.getFrozenColumns().clone();
        return $
    },
    getUnFrozenColumns: function() {
        var $ = this._columnModel.getUnFrozenColumns().clone();
        return $
    },
    getColumn: function($) {
        return this._columnModel.getColumn($)
    },
    updateColumn: function($, _) {
        this._columnModel.updateColumn($, _)
    },
    showColumns: function(A) {
        for (var $ = 0, B = A.length; $ < B; $++) {
            var _ = this.getColumn(A[$]);
            if (!_) continue;
            _.visible = true
        }
        this._columnModel._columnsChanged()
    },
    hideColumns: function(A) {
        for (var $ = 0, B = A.length; $ < B; $++) {
            var _ = this.getColumn(A[$]);
            if (!_) continue;
            _.visible = false
        }
        this._columnModel._columnsChanged()
    },
    showColumn: function($) {
        this.updateColumn($, {
            visible: true
        })
    },
    hideColumn: function($) {
        this.updateColumn($, {
            visible: false
        })
    },
    moveColumn: function(A, $, _) {
        this._columnModel.moveColumn(A, $, _)
    },
    removeColumn: function($) {
        $ = this.getColumn($);
        if (!$) return;
        var _ = this.getParentColumn($);
        if ($ && _) {
            _.columns.remove($);
            this._columnModel._columnsChanged()
        }
        return $
    },
    setDefaultColumnWidth: function($) {
        this._columnModel._defaultColumnWidth = $
    },
    getDefaultColumnWidth: function() {
        return this._columnModel._defaultColumnWidth
    },
    setColumnWidth: function(_, $) {
        this.updateColumn(_, {
            width: $
        })
    },
    getColumnWidth: function(_) {
        var $ = this.getColumnBox(_);
        return $.width
    },
    getParentColumn: function($) {
        return this._columnModel.getParentColumn($)
    },
    getMaxColumnLevel: function() {
        return this._columnModel._getMaxColumnLevel()
    },
    _isCellVisible: function($, _) {
        return true
    },
    _createDrawCellEvent: function($, B, C, D) {
        var _ = mini._getMap(B.field, $),
            E = {
                sender: this,
                rowIndex: C,
                columnIndex: D,
                record: $,
                row: $,
                column: B,
                field: B.field,
                value: _,
                cellHtml: _,
                rowCls: "",
                rowStyle: null,
                cellCls: B.cellCls || "",
                cellStyle: B.cellStyle || "",
                allowCellWrap: this.allowCellWrap,
                showHGridLines: this.showHGridLines,
                showVGridLines: this.showVGridLines,
                cellInnerCls: "",
                cellInnnerStyle: "",
                autoEscape: B.autoEscape
            };
        E.visible = this._isCellVisible(C, D);
        if (E.visible == true && this._mergedCellMaps) {
            var A = this._mergedCellMaps[C + ":" + D];
            if (A) {
                E.rowSpan = A.rowSpan;
                E.colSpan = A.colSpan
            }
        }
        return E
    },
    _OnDrawCell: function($, B, C, D) {
        var G = this._createDrawCellEvent($, B, C, D),
            _ = G.value;
        if (B.dateFormat)
            if (mini.isDate(G.value)) G.cellHtml = mini.formatDate(_, B.dateFormat);
            else G.cellHtml = _;
        if (B.dataType == "float") {
            _ = parseFloat(G.value);
            if (!isNaN(_)) {
                decimalPlaces = parseInt(B.decimalPlaces);
                if (isNaN(decimalPlaces)) decimalPlaces = 2;
                G.cellHtml = _.toFixed(decimalPlaces)
            }
        }
        if (B.dataType == "currency") G.cellHtml = mini.formatCurrency(G.value, B.currencyUnit);
        if (B.displayField) G.cellHtml = mini._getMap(B.displayField, $);
        if (B.numberFormat) {
            var F = parseFloat(G.cellHtml);
            if (!isNaN(F)) G.cellHtml = mini.formatNumber(F, B.numberFormat)
        }
        if (G.autoEscape == true) G.cellHtml = mini.htmlEncode(G.cellHtml);
        var A = B.renderer;
        if (A) {
            var E = typeof A == "function" ? A : mini._getFunctoin(A);
            if (E) G.cellHtml = E.call(B, G)
        }
        G.cellHtml = (G.cellHtml === 0 || G.cellHtml) ? String(G.cellHtml).trim() : "";
        this.fire("drawcell", G);
        if (G.cellHtml && !!G.cellHtml.unshift && G.cellHtml.length == 0) G.cellHtml = "&nbsp;";
        if (G.cellHtml === null || G.cellHtml === undefined || G.cellHtml === "") G.cellHtml = "&nbsp;";
        return G
    },
    _OnDrawSummaryCell: function(A, B) {
        var D = {
            result: this.getResultObject(),
            sender: this,
            data: A,
            column: B,
            field: B.field,
            value: "",
            cellHtml: "",
            cellCls: B.cellCls || "",
            cellStyle: B.cellStyle || "",
            allowCellWrap: this.allowCellWrap
        };
        if (B.summaryType) {
            var C = mini.summaryTypes[B.summaryType];
            if (C) D.value = C(A, B.field)
        }
        var $ = D.value;
        D.cellHtml = D.value;
        if (D.value && parseInt(D.value) != D.value && D.value.toFixed) {
            decimalPlaces = parseInt(B.decimalPlaces);
            if (isNaN(decimalPlaces)) decimalPlaces = 2;
            D.cellHtml = parseFloat(D.value.toFixed(decimalPlaces))
        }
        if (B.dateFormat)
            if (mini.isDate(D.value)) D.cellHtml = mini.formatDate($, B.dateFormat);
            else D.cellHtml = $;
        if (D.cellHtml)
            if (B.dataType == "currency") D.cellHtml = mini.formatCurrency(D.cellHtml, B.currencyUnit);
        var _ = B.summaryRenderer;
        if (_) {
            C = typeof _ == "function" ? _ : window[_];
            if (C) D.cellHtml = C.call(B, D)
        }
        B.summaryValue = D.value;
        this.fire("drawsummarycell", D);
        if (D.cellHtml === null || D.cellHtml === undefined || D.cellHtml === "") D.cellHtml = "&nbsp;";
        return D
    },
    getScrollTop: function() {
        return this._rowsViewEl.scrollTop
    },
    setScrollTop: function($) {
        this._rowsViewEl.scrollTop = $
    },
    getScrollLeft: function() {
        return this._rowsViewEl.scrollLeft
    },
    setScrollLeft: function($) {
        this._rowsViewEl.scrollLeft = $
    },
    _syncScroll: function() {
        var _ = this._rowsViewEl.scrollLeft,
            $ = this._filterViewEl.firstChild;
        $.style.left = -_ + "px";
        this._summaryViewEl.scrollLeft = _;
        this._columnsViewEl.scrollLeft = _
    },
    __OnRowViewScroll: function($) {
        this._syncScroll()
    },
    pagerType: "pager",
    getPagerType: function() {
        return this.pagerType
    },
    setPagerType: function(_) {
        this.pagerType = _;
        var $ = mini.create({
            type: this.pagerType
        });
        if ($) this._setBottomPager($)
    },
    _pagers: [],
    oo1Ols: function() {
        this._pagers = [];
        var $ = new mini.Pager();
        this._setBottomPager($)
    },
    _setBottomPager: function($) {
        $ = mini.create($);
        if (!$) return;
        if (this._bottomPager) {
            this.unbindPager(this._bottomPager);
            this._bottomPagerEl.removeChild(this._bottomPager.el)
        }
        this._bottomPager = $;
        $.render(this._bottomPagerEl);
        this.bindPager($)
    },
    bindPager: function($) {
        this._pagers.add($)
    },
    unbindPager: function($) {
        this._pagers.remove($)
    },
    setShowEmptyText: function($) {
        this.showEmptyText = $;
        if (this.data.length == 0) this.deferUpdate()
    },
    getShowEmptyText: function() {
        return this.showEmptyText
    },
    setEmptyText: function($) {
        this.emptyText = $
    },
    getEmptyText: function() {
        return this.emptyText
    },
    setShowModified: function($) {
        this.showModified = $
    },
    getShowModified: function() {
        return this.showModified
    },
    setShowNewRow: function($) {
        this.showNewRow = $
    },
    getShowNewRow: function() {
        return this.showNewRow
    },
    setAllowCellWrap: function($) {
        this.allowCellWrap = $
    },
    getAllowCellWrap: function() {
        return this.allowCellWrap
    },
    setAllowHeaderWrap: function($) {
        this.allowHeaderWrap = $
    },
    getAllowHeaderWrap: function() {
        return this.allowHeaderWrap
    },
    setEnableGroupOrder: function($) {
        this.enableGroupOrder = $
    },
    getEnableGroupOrder: function() {
        return this.enableGroupOrder
    },
    setShowHGridLines: function($) {
        if (this.showHGridLines != $) {
            this.showHGridLines = $;
            this.deferUpdate()
        }
    },
    getShowHGridLines: function() {
        return this.showHGridLines
    },
    setShowVGridLines: function($) {
        if (this.showVGridLines != $) {
            this.showVGridLines = $;
            this.deferUpdate()
        }
    },
    getShowVGridLines: function() {
        return this.showVGridLines
    },
    setShowSortIcon: function($) {
        if (this.showSortIcon != $) {
            this.showSortIcon = $;
            this.deferUpdate()
        }
    },
    getShowSortIcon: function() {
        return this.showSortIcon
    }
});
mini.copyTo(mini.GridView.prototype, mini._DataTableApplys);
mini.regClass(mini.GridView, "gridview");
mini.FrozenGridView = function() {
    mini.FrozenGridView.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.FrozenGridView, mini.GridView, {
    isFixedRowHeight: function() {
        return this.fixedRowHeight
    },
    frozenPosition: "left",
    isRightFrozen: function() {
        return this.frozenPosition == "right"
    },
    _create: function() {
        mini.FrozenGridView.superclass._create.call(this);
        var _ = this.el,
            C = "<div class=\"mini-grid-columns-lock\"></div>",
            $ = "<div class=\"mini-grid-rows-lock\"><div class=\"mini-grid-rows-content\"></div></div>";
        this._columnsLockEl = mini.before(this._columnsViewEl, C);
        this._rowsLockEl = mini.before(this._rowsViewEl, $);
        this._rowsLockContentEl = this._rowsLockEl.firstChild;
        var A = "<div class=\"mini-grid-filterRow-lock\"></div>";
        this._filterLockEl = mini.before(this._filterViewEl, A);
        var B = "<div class=\"mini-grid-summaryRow-lock\"></div>";
        this._summaryLockEl = mini.before(this._summaryViewEl, B)
    },
    _initEvents: function() {
        mini.FrozenGridView.superclass._initEvents.call(this);
        mini.on(this._rowsEl, "mousewheel", this.__OnMouseWheel, this)
    },
    l01O1Text: function(_, $) {
        var A = _.header;
        if (typeof A == "function") A = A.call(this, _);
        if (mini.isNull(A) || A === "") A = "&nbsp;";
        if (this.isFrozen() && $ == 2)
            if (_.viewIndex1) A = "&nbsp;";
        return A
    },
    _createColumnColSpan: function(_, B, $) {
        if (this.isFrozen()) {
            var A = _["colspan" + $];
            if (A) B[B.length] = "colspan=\"" + A + "\" "
        } else if (_.colspan) B[B.length] = "colspan=\"" + _.colspan + "\" "
    },
    doUpdateColumns: function() {
        var D = this._columnsViewEl.scrollLeft,
            _ = this.isFrozen() ? this.getFrozenColumnsRow() : [],
            F = this.isFrozen() ? this.getUnFrozenColumnsRow() : this.getVisibleColumnsRow(),
            C = this.isFrozen() ? this.getFrozenColumns() : [],
            A = this.isFrozen() ? this.getUnFrozenColumns() : this.getVisibleColumns(),
            $ = this._createColumnsHTML(_, 1, C),
            B = this._createColumnsHTML(F, 2, A),
            G = "<div class=\"mini-grid-topRightCell\"></div>";
        $ += G;
        B += G;
        this._columnsLockEl.innerHTML = $;
        this._columnsViewEl.innerHTML = B;
        var E = this._columnsLockEl.firstChild;
        E.style.width = "0px";
        this._columnsViewEl.scrollLeft = D
    },
    doUpdateRows: function() {
        var B = this.getVisibleRows(),
            _ = this.getFrozenColumns(),
            D = this.getUnFrozenColumns();
        if (this.isGrouping()) {
            var $ = this._createGroupingHTML(_, 1),
                A = this._createGroupingHTML(D, 2);
            this._rowsLockContentEl.innerHTML = $;
            this._rowsViewContentEl.innerHTML = A
        } else {
            $ = this.l11OosHTML(_, 1, this.isFrozen() ? B : []), A = this.l11OosHTML(D, 2, B);
            this._rowsLockContentEl.innerHTML = $;
            this._rowsViewContentEl.innerHTML = A
        }
        var C = this._rowsLockContentEl.firstChild;
        C.style.width = "0px"
    },
    Ol01: function() {
        if (this._filterLockEl.firstChild) this._filterLockEl.removeChild(this._filterLockEl.firstChild);
        if (this._filterViewEl.firstChild) this._filterViewEl.removeChild(this._filterViewEl.firstChild);
        var $ = this.getFrozenColumns(),
            B = this.getUnFrozenColumns(),
            A = this._createFilterRowHTML($, 1),
            _ = this._createFilterRowHTML(B, 2);
        this._filterLockEl.innerHTML = A;
        this._filterViewEl.innerHTML = _;
        this._doRenderFilters()
    },
    Oool0: function() {
        var $ = this.getFrozenColumns(),
            B = this.getUnFrozenColumns(),
            A = this._createSummaryRowHTML($, 1),
            _ = this._createSummaryRowHTML(B, 2);
        this._summaryLockEl.innerHTML = A;
        this._summaryViewEl.innerHTML = _
    },
    _syncRowsHeightTimer: null,
    syncRowDetail: function($) {
        var A = this._getRowDetailEl($, 1),
            _ = this._getRowDetailEl($, 2);
        if (A && _) this._doSyncRowHeight(A, _)
    },
    _doSyncRowHeight: function(D, A) {
        D.style.height = A.style.height = "auto";
        var _ = D.cells[0],
            C = A.cells[0],
            B = _.offsetHeight,
            $ = C.offsetHeight;
        if (B < $) B = $;
        D.style.height = A.style.height = B + "px"
    },
    _syncRowsHeight: function() {
        var _ = this;

        function $() {
            var $ = document,
                D = _.getDataView();
            for (var A = 0, E = D.length; A < E; A++) {
                var B = D[A],
                    F = _.OOl0(B, 1),
                    C = _.OOl0(B, 2);
                if (!F || !C) continue;
                _._doSyncRowHeight(F, C)
            }
            _._syncRowsHeightTimer = null
        }
        if (this.isFrozen() && this.isFixedRowHeight() == false) {
            if (this._syncRowsHeightTimer) clearTimeout(this._syncRowsHeightTimer);
            this._syncRowsHeightTimer = setTimeout($, 2)
        }
    },
    _syncColumnHeight: function() {
        var A = this._columnsLockEl,
            _ = this._columnsViewEl;
        A.style.height = _.style.height = "auto";
        if (this.isFrozen()) {
            var B = A.offsetHeight,
                $ = _.offsetHeight;
            B = B > $ ? B : $;
            A.style.height = _.style.height = B + "px"
        }
        A = this._summaryLockEl, _ = this._summaryViewEl;
        A.style.height = _.style.height = "auto";
        if (this.isFrozen()) {
            B = A.offsetHeight, $ = _.offsetHeight;
            B = B > $ ? B : $;
            A.style.height = _.style.height = B + "px"
        }
    },
    _layoutColumns: function() {
        function A($) {
            return $.offsetHeight
        }

        function L(C) {
            var A = [];
            for (var _ = 0, B = C.cells.length; _ < B; _++) {
                var $ = C.cells[_];
                if ($.style.width == "0px") continue;
                A.push($)
            }
            return A
        }

        function D(C) {
            var A = L(C);
            for (var _ = 0, B = A.length; _ < B; _++) {
                var $ = A[_];
                $.style.height = "auto"
            }
        }

        function I() {
            J.style.height = J.style.height = "auto";
            for (var $ = 0, A = J.rows.length; $ < A; $++) {
                var B = J.rows[$],
                    _ = E.rows[$];
                D(B);
                D(_)
            }
        }

        function $(F, A) {
            var B = 0,
                C = L(F);
            for (var _ = 0, E = C.length; _ < E; _++) {
                var $ = C[_],
                    D = parseInt($.rowSpan) > 1;
                if (D && A) continue;
                var G = $.offsetHeight;
                if (G > B) B = G
            }
            return B
        }
        if (!this.isFrozen()) return;
        var J = this._columnsLockEl.firstChild,
            E = this._columnsViewEl.firstChild;

        function _(G, D) {
            var B = $(D, true),
                C = L(G);
            for (var A = 0, F = C.length; A < F; A++) {
                var _ = C[A],
                    E = parseInt(_.rowSpan) > 1;
                if (E);
                else mini.setHeight(_, B)
            }
        }

        function M(G, D) {
            var B = $(D),
                C = L(G);
            for (var A = 0, F = C.length; A < F; A++) {
                var _ = C[A],
                    E = parseInt(_.rowSpan) > 1;
                if (E) mini.setHeight(_, B)
            }
        }
        I();
        for (var H = 0, C = J.rows.length; H < C; H++) {
            var F = J.rows[H],
                K = E.rows[H],
                B = $(F),
                G = $(K);
            if (B == G);
            else if (B < G) {
                _(F, K);
                M(F, K)
            } else if (B > G) {
                _(K, F);
                M(K, F)
            }
        }
        B = A(J), G = A(E);
        if (B < G) mini.setHeight(J, G);
        else if (B > G) mini.setHeight(E, B)
    },
    doLayout: function() {
        if (this.canLayout() == false) return;
        this._doLayoutScroll = false;
        var A = this.isAutoHeight(),
            B = this.isFrozen(),
            $ = this.getViewportWidth(true),
            D = this.getLockedWidth(),
            C = $ - D;
        this.o1olOoText();
        var E = this.isRightFrozen() ? "marginRight" : "marginLeft",
            _ = this.isRightFrozen() ? "right" : "left";
        if (B) {
            this._filterViewEl.style[E] = D + "px";
            this._summaryViewEl.style[E] = D + "px";
            this._columnsViewEl.style[E] = D + "px";
            this._rowsViewEl.style[E] = D + "px";
            if (mini.isSafari || mini.isChrome || mini.isIE6) {
                this._filterViewEl.style["width"] = C + "px";
                this._summaryViewEl.style["width"] = C + "px";
                this._columnsViewEl.style["width"] = C + "px"
            } else {
                this._filterViewEl.style["width"] = "auto";
                this._summaryViewEl.style["width"] = "auto";
                this._columnsViewEl.style["width"] = "auto"
            }
            if (mini.isSafari || mini.isChrome || mini.isIE6) this._rowsViewEl.style["width"] = C + "px";
            mini.setWidth(this._filterLockEl, D);
            mini.setWidth(this._summaryLockEl, D);
            mini.setWidth(this._columnsLockEl, D);
            mini.setWidth(this._rowsLockEl, D);
            this._filterLockEl.style[_] = "0px";
            this._summaryLockEl.style[_] = "0px";
            this._columnsLockEl.style[_] = "0px";
            this._rowsLockEl.style[_] = "0px"
        } else this._doClearFrozen();
        this._layoutColumns();
        this._syncColumnHeight();
        mini.FrozenGridView.superclass.doLayout.call(this);
        if (B)
            if (mini.isChrome || mini.isIE6) {
                this._layoutColumns();
                this._syncColumnHeight();
                mini.FrozenGridView.superclass.doLayout.call(this)
            }
        if (A) this._rowsLockEl.style.height = "auto";
        else this._rowsLockEl.style.height = "100%";
        this._syncRowsHeight()
    },
    o1olOoText: function() {},
    OOl0: function(_, $) {
        _ = this.getRecord(_);
        var B = this.lOo100(_, $),
            A = document.getElementById(B);
        return A
    },
    _doClearFrozen: function() {
        var _ = this.isRightFrozen() ? "marginRight" : "marginLeft",
            $ = this.isRightFrozen() ? "right" : "left";
        this._filterLockEl.style.left = "-10px";
        this._summaryLockEl.style.left = "-10px";
        this._columnsLockEl.style.left = "-10px";
        this._rowsLockEl.style.left = "-10px";
        this._filterLockEl.style["width"] = "0px";
        this._summaryLockEl.style["width"] = "0px";
        this._columnsLockEl.style["width"] = "0px";
        this._rowsLockEl.style["width"] = "0px";
        this._filterViewEl.style["marginLeft"] = "0px";
        this._summaryViewEl.style["marginLeft"] = "0px";
        this._columnsViewEl.style["marginLeft"] = "0px";
        this._rowsViewEl.style["marginLeft"] = "0px";
        this._filterViewEl.style["width"] = "auto";
        this._summaryViewEl.style["width"] = "auto";
        this._columnsViewEl.style["width"] = "auto";
        this._rowsViewEl.style["width"] = "auto";
        if (mini.isSafari || mini.isChrome || mini.isIE6) {
            this._filterViewEl.style["width"] = "100%";
            this._summaryViewEl.style["width"] = "100%";
            this._columnsViewEl.style["width"] = "100%";
            this._rowsViewEl.style["width"] = "100%"
        }
    },
    frozenColumns: function($, _) {
        this.frozen($, _)
    },
    unFrozenColumns: function() {
        this.unFrozen()
    },
    frozen: function($, _) {
        this._doClearFrozen();
        this._columnModel.frozen($, _)
    },
    unFrozen: function() {
        this._doClearFrozen();
        this._columnModel.unFrozen()
    },
    setFrozenStartColumn: function($) {
        this._columnModel.setFrozenStartColumn($)
    },
    setFrozenEndColumn: function($) {
        return this._columnModel.setFrozenEndColumn($)
    },
    getFrozenStartColumn: function($) {
        return this._columnModel._frozenStartColumn
    },
    getFrozenEndColumn: function($) {
        return this._columnModel._frozenEndColumn
    },
    getFrozenColumnsRow: function() {
        return this._columnModel.getFrozenColumnsRow()
    },
    getUnFrozenColumnsRow: function() {
        return this._columnModel.getUnFrozenColumnsRow()
    },
    getLockedWidth: function() {
        if (!this.isFrozen()) return 0;
        var $ = this._rowsLockContentEl.firstChild.firstChild,
            _ = $ ? $.offsetWidth : 0;
        return _
    },
    _canDeferSyncScroll: function() {
        return this.isFrozen()
    },
    _syncScroll: function() {
        var _ = this._rowsViewEl.scrollLeft,
            $ = this._filterViewEl.firstChild;
        $.style.left = -_ + "px";
        this._summaryViewEl.scrollLeft = _;
        this._columnsViewEl.scrollLeft = _;
        var A = this,
            B = A._rowsViewEl.scrollTop;
        A._rowsLockEl.scrollTop = B;
        if (this._canDeferSyncScroll()) setTimeout(function() {
            A._rowsViewEl.scrollTop = A._rowsLockEl.scrollTop
        }, 50)
    },
    __OnMouseWheel: function(A) {
        var _ = this.getScrollTop() - A.wheelDelta,
            $ = this.getScrollTop();
        this.setScrollTop(_);
        if ($ != this.getScrollTop()) A.preventDefault()
    }
});
mini.regClass(mini.FrozenGridView, "FrozenGridView");
mini.ScrollGridView = function() {
    mini.ScrollGridView.superclass.constructor.apply(this, arguments)
};
mini.extend(mini.ScrollGridView, mini.FrozenGridView, {
    virtualScroll: true,
    virtualRows: 25,
    defaultRowHeight: 25,
    _canDeferSyncScroll: function() {
        return this.isFrozen() && !this.isVirtualScroll()
    },
    setVirtualScroll: function($) {
        this.virtualScroll = $;
        this.doUpdate()
    },
    getVirtualScroll: function($) {
        return this.virtualScroll
    },
    isFixedRowHeight: function() {
        return this.fixedRowHeight || this.isVirtualScroll()
    },
    isVirtualScroll: function() {
        if (this.virtualScroll) return this.isAutoHeight() == false && this.isGrouping() == false;
        return false
    },
    _getScrollView: function() {
        var $ = this.getVisibleRows();
        return $
    },
    _getScrollViewCount: function() {
        return this._getScrollView().length
    },
    _getScrollRowHeight: function($, _) {
        if (_ && _._height) {
            var A = parseInt(_._height);
            if (!isNaN(A)) return A
        }
        return this.defaultRowHeight
    },
    _getRangeHeight: function(B, E) {
        var A = 0,
            D = this._getScrollView();
        for (var $ = B; $ < E; $++) {
            var _ = D[$],
                C = this._getScrollRowHeight($, _);
            A += C
        }
        return A
    },
    _getIndexByScrollTop: function(F) {
        var A = 0,
            C = this._getScrollView(),
            E = this._getScrollViewCount();
        for (var $ = 0, D = E; $ < D; $++) {
            var _ = C[$],
                B = this._getScrollRowHeight($, _);
            A += B;
            if (A >= F) return $
        }
        return E
    },
    __getScrollViewRange: function($, A) {
        var _ = this._getScrollView();
        return _.getRange($, A)
    },
    _getViewRegion: function() {
        var I = this._getScrollView();
        if (this.isVirtualScroll() == false) {
            var C = {
                top: 0,
                bottom: 0,
                rows: I,
                start: 0,
                end: 0
            };
            return C
        }
        var D = this.defaultRowHeight,
            K = this._getViewNowRegion(),
            G = this.getScrollTop(),
            $ = this._vscrollEl.offsetHeight,
            L = this._getScrollViewCount(),
            A = K.start,
            B = K.end;
        for (var H = 0, F = L; H < F; H += this.virtualRows) {
            var E = H + this.virtualRows;
            if (H <= A && A < E) A = H;
            if (H < B && B <= E) B = E
        }
        if (B > L) B = L;
        if (B == 0) B = this.virtualRows;
        var _ = this._getRangeHeight(0, A),
            J = this._getRangeHeight(B, this._getScrollViewCount()),
            I = this.__getScrollViewRange(A, B),
            C = {
                top: _,
                bottom: J,
                rows: I,
                start: A,
                end: B,
                viewStart: A,
                viewEnd: B
            };
        C.viewTop = this._getRangeHeight(0, C.viewStart);
        C.viewBottom = this._getRangeHeight(C.viewEnd, this._getScrollViewCount());
        return C
    },
    _getViewNowRegion: function() {
        var B = this.defaultRowHeight,
            E = this.getScrollTop(),
            $ = this._rowsViewEl.offsetHeight,
            C = this._getIndexByScrollTop(E),
            _ = this._getIndexByScrollTop(E + $ + 30),
            D = this._getScrollViewCount();
        if (_ > D) _ = D;
        var A = {
            start: C,
            end: _
        };
        return A
    },
    _canVirtualUpdate: function() {
        if (!this._viewRegion) return true;
        var $ = this._getViewNowRegion();
        if (this._viewRegion.start <= $.start && $.end <= this._viewRegion.end) return false;
        return true
    },
    __OnColumnsChanged: function(_) {
        var $ = this;
        this.columns = this._columnModel.columns;
        this.Ol01();
        this.Oool0();
        if (this.getVisibleRows().length == 0) this.doUpdate();
        else this.deferUpdate();
        if (this.isVirtualScroll()) this.__OnVScroll();
        this.fire("columnschanged")
    },
    doLayout: function() {
        if (this.canLayout() == false) return;
        mini.ScrollGridView.superclass.doLayout.call(this);
        this._layoutScroll();
        if (mini.isNumber(this._scrollTop) && this._vscrollEl.scrollTop != this._scrollTop) this._vscrollEl.scrollTop = this._scrollTop
    },
    l11OosHTML: function(C, E, F, A, G, J) {
        var K = this.isVirtualScroll();
        if (!K) return mini.ScrollGridView.superclass.l11OosHTML.apply(this, arguments);
        var B = K ? this._getViewRegion() : null,
            D = ["<table class=\"mini-grid-table\" cellspacing=\"0\" cellpadding=\"0\" border=\"0\">"];
        D.push(this._createTopRowHTML(C));
        if (this.isVirtualScroll()) {
            var H = A == 0 ? "display:none;" : "";
            D.push("<tr class=\"mini-grid-virtualscroll-top\" style=\"padding:0;border:0;" + H + "\"><td colspan=\"" + C.length + "\" style=\"height:" + A + "px;padding:0;border:0;" + H + "\"></td></tr>")
        }
        if (E == 1 && this.isFrozen() == false);
        else
            for (var I = 0, _ = F.length; I < _; I++) {
                var $ = F[I];
                this.l11OoHTML($, J, C, E, D);
                J++
            }
        if (this.isVirtualScroll()) D.push("<tr class=\"mini-grid-virtualscroll-bottom\" style=\"padding:0;border:0;\"><td colspan=\"" + C.length + "\" style=\"height:" + G + "px;padding:0;border:0;\"></td></tr>");
        D.push("</table>");
        return D.join("")
    },
    doUpdateRows: function() {
        if (this.isVirtualScroll() == false) {
            mini.ScrollGridView.superclass.doUpdateRows.call(this);
            return
        }
        var E = this._getViewRegion();
        this._viewRegion = E;
        var C = this.getFrozenColumns(),
            I = this.getUnFrozenColumns(),
            G = E.viewStart,
            B = E.start,
            A = E.viewEnd;
        if (this._scrollPaging) {
            var _ = this.getPageIndex() * this.getPageSize();
            G -= _;
            B -= _;
            A -= _
        }
        var F = new Date(),
            $ = this.l11OosHTML(C, 1, E.rows, E.viewTop, E.viewBottom, G),
            D = this.l11OosHTML(I, 2, E.rows, E.viewTop, E.viewBottom, G);
        this._rowsLockContentEl.innerHTML = $;
        this._rowsViewContentEl.innerHTML = D;
        var H = this.getScrollTop();
        if (this._rowsViewEl.scrollTop != H) this._rowsViewEl.scrollTop = H
    },
    _create: function() {
        mini.ScrollGridView.superclass._create.call(this);
        this._vscrollEl = mini.append(this._rowsEl, "<div class=\"mini-grid-vscroll\"><div class=\"mini-grid-vscroll-content\"></div></div>");
        this._vscrollContentEl = this._vscrollEl.firstChild
    },
    _initEvents: function() {
        mini.ScrollGridView.superclass._initEvents.call(this);
        var $ = this;
        mini.on(this._vscrollEl, "scroll", this.__OnVScroll, this);
        mini._onScrollDownUp(this._vscrollEl, function(_) {
            $._VScrollMouseDown = true
        }, function(_) {
            $._VScrollMouseDown = false
        })
    },
    _layoutScroll: function() {
        var A = this.isVirtualScroll();
        if (A) {
            var B = this.getScrollHeight(),
                $ = B > this._rowsViewEl.offsetHeight;
            if (A && $) {
                this._vscrollEl.style.display = "block";
                this._vscrollContentEl.style.height = B + "px"
            } else this._vscrollEl.style.display = "none";
            if (this._rowsViewEl.scrollWidth > this._rowsViewEl.clientWidth + 1) {
                var _ = this.getBodyHeight(true) - 18;
                if (_ < 0) _ = 0;
                this._vscrollEl.style.height = _ + "px"
            } else this._vscrollEl.style.height = "100%"
        } else this._vscrollEl.style.display = "none"
    },
    getScrollHeight: function() {
        var $ = this.getVisibleRows();
        return this._getRangeHeight(0, $.length)
    },
    setScrollTop: function($) {
        if (this.isVirtualScroll()) this._vscrollEl.scrollTop = $;
        else this._rowsViewEl.scrollTop = $
    },
    getScrollTop: function() {
        if (this.isVirtualScroll()) return this._vscrollEl.scrollTop;
        else return this._rowsViewEl.scrollTop
    },
    __OnVScroll: function(A) {
        var _ = this.isVirtualScroll();
        if (_) {
            this._scrollTop = this._vscrollEl.scrollTop;
            var $ = this;
            setTimeout(function() {
                $._rowsViewEl.scrollTop = $._scrollTop;
                $._l10o0l = null
            }, 8);
            if (this._scrollTopTimer) clearTimeout(this._scrollTopTimer);
            this._scrollTopTimer = setTimeout(function() {
                $._scrollTopTimer = null;
                $._tryUpdateScroll();
                $._rowsViewEl.scrollTop = $._scrollTop
            }, 80)
        }
    },
    wheelIncrement: 0,
    setWheelIncrement: function($) {
        this.wheelIncrement = $
    },
    getWheelIncrement: function() {
        return this.wheelIncrement
    },
    __OnMouseWheel: function(C) {
        var A = C.wheelDelta ? C : C.originalEvent,
            _ = A.wheelDelta || -A.detail * 40;
        if (_ > 0) _ = _ + this.wheelIncrement;
        else _ = _ - this.wheelIncrement;
        var B = this.getScrollTop() - _,
            $ = this.getScrollTop();
        this.setScrollTop(B);
        if ($ != this.getScrollTop() || this.isVirtualScroll()) C.preventDefault()
    },
    _tryUpdateScroll: function() {
        var $ = this._canVirtualUpdate();
        if ($) {
            if (this._scrollPaging) {
                var B = this;
                this.reload(null, null, function($) {})
            } else {
                var A = new Date(),
                    _ = this._rowsViewEl.scrollLeft;
                this._doRemoveRowContent();
                this.doUpdateRows();
                this._rowsViewEl.scrollLeft = _
            }
        }
    }
});
mini.regClass(mini.ScrollGridView, "ScrollGridView");
mini._onScrollDownUp = function($, B, A) {
    function D($) {
        if (mini.isFirefox) mini.on(document, "mouseup", _);
        else mini.on(document, "mousemove", C);
        B($)
    }

    function C($) {
        mini.un(document, "mousemove", C);
        A($)
    }

    function _($) {
        mini.un(document, "mouseup", _);
        A($)
    }
    mini.on($, "mousedown", D)
};
mini._Gridooo0l = function($) {
    this.owner = $, el = $.el;
    $.on("rowmousemove", this.__OnRowMouseMove, this);
    mini.on($.ololOO, "mouseout", this.__OnMouseOut, this);
    mini.on($.ololOO, "mousewheel", this.__OnMouseWheel, this);
    $.on("cellmousedown", this.__OnCellMouseDown, this);
    $.on("cellmouseup", this.__OnGridCellClick, this);
    $.on("celldblclick", this.__OnGridCellClick, this);
    mini.on($.el, "keydown", this.o0l11, this);
    jQuery($._columnsEl).on("mouseenter", ".mini-grid-headerCell", function($) {
        jQuery($.currentTarget).addClass("mini-grid-header-over")
    });
    jQuery($._columnsEl).on("mouseleave", ".mini-grid-headerCell", function($) {
        jQuery($.currentTarget).removeClass("mini-grid-header-over")
    })
};
mini._Gridooo0l.prototype = {
    o0l11: function(L) {
        var H = this.owner,
            E = oOlO(L.target, "mini-grid-detailRow"),
            I = E ? Oolo(H.el, E) : false;
        if (Oolo(H.O1OOol, L.target) || Oolo(H.o01o, L.target) || Oolo(H.OO01O, L.target) || Oolo(H.OOO1ll, L.target) || (oOlO(L.target, "mini-grid-detailRow") && I) || oOlO(L.target, "mini-grid-rowEdit") || oOlO(L.target, "mini-tree-editinput")) return;
        var A = H.getCurrentCell();
        if (L.shiftKey || L.ctrlKey || L.altKey) return;
        if (L.keyCode == 37 || L.keyCode == 38 || L.keyCode == 39 || L.keyCode == 40) L.preventDefault();
        var F = H.getVisibleColumns();

        function B($) {
            return H.getVisibleRows()[$]
        }

        function _($) {
            return H.getVisibleRows().indexOf($)
        }

        function C() {
            return H.getVisibleRows().length
        }
        var D = A ? A[1] : null,
            $ = A ? A[0] : null;
        if (!A) $ = H.getCurrent();
        var G = F.indexOf(D),
            J = _($),
            K = C();
        switch (L.keyCode) {
            case 9:
                if (H.allowCellEdit && H.editOnTabKey) {
                    L.preventDefault();
                    H._beginEditNextCell(L.shiftKey == false, true);
                    return
                }
                break;
            case 27:
                break;
            case 13:
                if (H.allowCellEdit && H.editNextOnEnterKey)
                    if (D)
                        if (H.isEditingCell(A) || !D.editor) {
                            H._beginEditNextCell(L.shiftKey == false);
                            return
                        }
                if (H.allowCellEdit && A && !D.readOnly && !H.isReadOnly()) H.beginEditCell();
                break;
            case 37:
                if (D) {
                    if (G > 0) G -= 1
                } else G = 0;
                break;
            case 38:
                if ($) {
                    if (J > 0) J -= 1
                } else J = 0;
                if (J != 0 && H.isVirtualScroll())
                    if (H._viewRegion.start > J) return;
                break;
            case 39:
                if (D) {
                    if (G < F.length - 1) G += 1
                } else G = 0;
                break;
            case 40:
                if ($) {
                    if (J < K - 1) J += 1
                } else J = 0;
                if (H.isVirtualScroll())
                    if (H._viewRegion.end < J) {
                        return;
                        H.setScrollTop(H.getScrollTop() + H.defaultRowHeight)
                    }
                break;
            default:
                return;
                break
        }
        D = F[G];
        $ = B(J);
        if (D && $ && H.allowCellSelect) {
            A = [$, D];
            H.setCurrentCell(A);
            H.scrollIntoView($, D, false)
        }
        if (!H.onlyCheckSelection)
            if (L.keyCode != 37 && L.keyCode != 39)
                if ($ && H.allowRowSelect) {
                    H.deselectAll();
                    H.setCurrent($);
                    if ($) H.scrollIntoView($, null, false)
                }
    },
    __OnMouseWheel: function(_) {
        var $ = this.owner;
        if ($.allowCellEdit) $.commitEdit()
    },
    __OnGridCellClick: function(D) {
        var $ = this.owner,
            A = D.type,
            C = new Date();
        if (A == "cellmouseup") A = "cellclick";
        if ($.allowCellEdit == false) return;
        if ($.cellEditAction != A) return;
        var _ = D.record,
            B = D.column;
        if (!B.readOnly && !$.isReadOnly())
            if (D.htmlEvent.shiftKey || D.htmlEvent.ctrlKey);
            else $.beginEditCell()
    },
    __OnCellMouseDown: function(_) {
        var $ = this;
        if (!$.owner.selectOnRightClick)
            if (_.htmlEvent.which == 3) return;
        setTimeout(function() {
            $.__doSelect(_)
        }, 1)
    },
    __OnRowMouseMove: function(A) {
        var $ = this.owner,
            _ = A.record;
        if (!$.enabled || $.enableHotTrack == false) return;
        $.focusRow(_)
    },
    __OnMouseOut: function($) {
        if (this.owner.allowHotTrackOut) this.owner.focusRow(null)
    },
    __doSelect: function(E) {
        var _ = E.record,
            C = E.column,
            $ = this.owner;
        if (_.enabled === false) return;
        if ($.allowCellSelect) {
            var B = [_, C];
            $.setCurrentCell(B)
        }
        if ($.onlyCheckSelection && !C._multiRowSelect) return;
        if ($.allowRowSelect) {
            var D = {
                record: _,
                selected: _,
                cancel: false
            };
            if (_) {
                $.fire("beforerowselect", D);
                $.fire("beforeselect", D)
            }
            if (D.cancel) return;
            if ($.getMultiSelect()) {
                $.el.onselectstart = function() {};
                if (E.htmlEvent.shiftKey) {
                    $.el.onselectstart = function() {
                        return false
                    };
                    try {
                        E.htmlEvent.preventDefault()
                    } catch (D) {}
                    var A = $.getCurrent();
                    if (A) {
                        $.deselectAll();
                        $.selectRange(A, _);
                        $.setCurrent(A)
                    } else {
                        $.select(_);
                        $.setCurrent(_)
                    }
                } else {
                    $.el.onselectstart = function() {};
                    if (E.htmlEvent.ctrlKey) {
                        $.el.onselectstart = function() {
                            return false
                        };
                        try {
                            E.htmlEvent.preventDefault()
                        } catch (D) {}
                    }
                    if (E.column._multiRowSelect === true || E.htmlEvent.ctrlKey || $.allowUnselect) {
                        if ($.isSelected(_)) $.deselect(_);
                        else {
                            $.select(_);
                            $.setCurrent(_)
                        }
                    } else if ($.isSelected(_));
                    else {
                        $.deselectAll();
                        $.select(_);
                        $.setCurrent(_)
                    }
                }
            } else if (!$.isSelected(_)) {
                $.deselectAll();
                $.select(_)
            } else if (E.htmlEvent.ctrlKey || $.allowUnselect) $.deselectAll()
        }
    }
};
mini._Grid_RowGroup = function($) {
    this.owner = $, el = $.el;
    mini.on($._bodyEl, "click", this.__OnClick, this)
};
mini._Grid_RowGroup.prototype = {
    __OnClick: function(B) {
        var $ = this.owner,
            _ = $._getRowGroupByEvent(B);
        if (_) {
            if (!$.groupTitleCollapsible && !mini.hasClass(B.target, "mini-grid-group-ecicon")) return;
            var A = {
                htmlEvent: B,
                cancel: false,
                group: _
            };
            $.fire("beforegroupclick", A);
            if (A.cancel === true) return;
            $.toggleRowGroup(_)
        }
    }
};
mini._Grido11O1Menu = function($) {
    this.owner = $;
    this.menu = this.createMenu();
    mini.on($.el, "contextmenu", this.__contextmenu, this);
    $.on("destroy", this.__OnGridDestroy, this)
};
mini._Grido11O1Menu.prototype = {
    __OnGridDestroy: function($) {
        if (this.menu) this.menu.destroy();
        this.menu = null
    },
    createMenu: function() {
        var $ = mini.create({
            type: "menu",
            hideOnClick: false
        });
        $.on("itemclick", this.olloo, this);
        return $
    },
    updateMenu: function() {
        var _ = this.owner,
            F = this.menu,
            D = _.getBottomColumns(),
            B = [];
        for (var A = 0, E = D.length; A < E; A++) {
            var C = D[A];
            if (C.hideable) continue;
            var $ = {};
            $.checked = C.visible;
            $.checkOnClick = true;
            $.text = _.l01O1Text(C);
            if ($.text == "&nbsp;") {
                if (C.type == "indexcolumn") $.text = "\u5e8f\u53f7";
                if (C.type == "checkcolumn") $.text = "\u9009\u62e9"
            }
            B.push($);
            $.enabled = C.enabled;
            $._column = C
        }
        F.setItems(B)
    },
    __contextmenu: function(_) {
        var $ = this.owner;
        if ($.showColumnsMenu == false) return;
        if (Oolo($._columnsEl, _.target) == false) return;
        this.updateMenu();
        this.menu.showAtPos(_.pageX, _.pageY);
        return false
    },
    olloo: function(J) {
        var C = this.owner,
            I = this.menu,
            A = C.getBottomColumns(),
            E = I.getItems(),
            $ = J.item,
            _ = $._column,
            H = 0;
        for (var D = 0, B = E.length; D < B; D++) {
            var F = E[D];
            if (F.getChecked()) H++
        }
        if (H < 1) $.setChecked(true);
        var G = $.getChecked();
        if (G) C.showColumn(_);
        else C.hideColumn(_)
    }
};
mini._Grid_CellToolTip = function($) {
    this.owner = $;
    mini.on(this.owner.el, "mousemove", this.__OnGridMouseMove, this)
};
mini._Grid_CellToolTip.prototype = {
    __OnGridMouseMove: function(D) {
        var $ = this.owner;
        if (mini.hasClass(D.target, "mini-grid-headerCell-inner")) {
            var _ = D.target;
            if (_.scrollWidth > _.clientWidth) {
                var C = _.innerText || _.textContent || "";
                _.title = C.trim()
            } else _.title = "";
            return
        }
        var A = $.oOlol(D),
            _ = $.oOOO1O(A[0], A[1]),
            B = $.getCellError(A[0], A[1]);
        if (_) {
            if (B) {
                setTimeout(function() {
                    _.title = B.errorText
                }, 10);
                return
            }
            setTimeout(function() {
                var B = _;
                if (_.firstChild) {
                    if (mini.hasClass(_.firstChild, "mini-grid-cell-inner")) B = _.firstChild;
                    if (mini.hasClass(_.firstChild, "mini-tree-nodetitle")) B = _.firstChild
                }
                if (B.scrollWidth > B.clientWidth && $.getShowCellTip() && A[1].showCellTip) {
                    var C = B.innerText || B.textContent || "";
                    _.title = C.trim()
                } else _.title = ""
            }, 10)
        }
    }
};
mini._Grid_Sorter = function($) {
    this.owner = $;
    this.owner.on("headercellclick", this.__OnGridHeaderCellClick, this);
    mini.on($.o1oO0, "mousemove", this.__OnGridHeaderMouseMove, this);
    mini.on($.o1oO0, "mouseout", this.__OnGridHeaderMouseOut, this)
};
mini._Grid_Sorter.prototype = {
    __OnGridHeaderMouseOut: function($) {
        if (this.OO0OlColumnEl) mini.removeClass(this.OO0OlColumnEl, "mini-grid-headerCell-hover")
    },
    __OnGridHeaderMouseMove: function(_) {
        var $ = oOlO(_.target, "mini-grid-headerCell");
        if ($) {
            mini.addClass($, "mini-grid-headerCell-hover");
            this.OO0OlColumnEl = $
        }
    },
    __OnGridHeaderCellClick: function(C) {
        var $ = this.owner;
        if (!mini.hasClass(C.htmlEvent.target, "mini-grid-column-splitter"))
            if ($.allowSortColumn && $.isEditing() == false) {
                var _ = C.column;
                if (!_.columns || _.columns.length == 0) {
                    var B = _.sortField || _.field;
                    if (B && _.allowSort !== false) {
                        var A = "asc";
                        if ($.getSortField() == B) A = $.getSortOrder() == "asc" ? "desc" : "asc";
                        $.sortBy(B, A)
                    }
                }
            }
    }
};
mini._Grid_ColumnMove = function($) {
    this.owner = $;
    mini.on(this.owner.el, "mousedown", this.OO00Ol, this)
};
mini._Grid_ColumnMove.prototype = {
    OO00Ol: function(B) {
        var $ = this.owner;
        if ($.isEditing()) return;
        if (mini.hasClass(B.target, "mini-grid-column-splitter")) return;
        if (B.button == mini.MouseButton.Right) return;
        var A = oOlO(B.target, $._headerCellCls);
        if (A) {
            this._remove();
            var _ = $.O1loo(B);
            if ($.allowMoveColumn && _ && _.allowMove) {
                this.dragColumn = _;
                this._columnEl = A;
                this.getDrag().start(B)
            }
        }
    },
    getDrag: function() {
        if (!this.drag) this.drag = new mini.Drag({
            capture: false,
            onStart: mini.createDelegate(this.O0oo, this),
            onMove: mini.createDelegate(this.l1olo, this),
            onStop: mini.createDelegate(this.lO1011, this)
        });
        return this.drag
    },
    O0oo: function(_) {
        function A(_) {
            var A = _.header;
            if (typeof A == "function") A = A.call($, _);
            if (mini.isNull(A) || A === "") A = "&nbsp;";
            return A
        }
        var $ = this.owner;
        this.O0Ool = mini.append(document.body, "<div class=\"mini-grid-columnproxy\"></div>");
        this.O0Ool.innerHTML = "<div class=\"mini-grid-columnproxy-inner\" style=\"height:26px;\">" + A(this.dragColumn) + "</div>";
        mini.setXY(this.O0Ool, _.now[0] + 15, _.now[1] + 18);
        mini.addClass(this.O0Ool, "mini-grid-no");
        this.moveTop = mini.append(document.body, "<div class=\"mini-grid-movetop\"></div>");
        this.moveBottom = mini.append(document.body, "<div class=\"mini-grid-movebottom\"></div>")
    },
    l1olo: function(A) {
        var $ = this.owner,
            G = A.now[0];
        mini.setXY(this.O0Ool, G + 15, A.now[1] + 18);
        this.targetColumn = this.insertAction = null;
        var D = oOlO(A.event.target, $._headerCellCls);
        if (D) {
            var C = $.O1loo(A.event);
            if (C && C != this.dragColumn) {
                var _ = $.getParentColumn(this.dragColumn),
                    E = $.getParentColumn(C);
                if (_ == E) {
                    this.targetColumn = C;
                    this.insertAction = "before";
                    var F = $.getColumnBox(this.targetColumn);
                    if (G > F.x + F.width / 2) this.insertAction = "after"
                }
            }
        }
        if (this.targetColumn) {
            mini.addClass(this.O0Ool, "mini-grid-ok");
            mini.removeClass(this.O0Ool, "mini-grid-no");
            var B = $.getColumnBox(this.targetColumn);
            this.moveTop.style.display = "block";
            this.moveBottom.style.display = "block";
            if (this.insertAction == "before") {
                mini.setXY(this.moveTop, B.x - 4, B.y - 9);
                mini.setXY(this.moveBottom, B.x - 4, B.bottom)
            } else {
                mini.setXY(this.moveTop, B.right - 4, B.y - 9);
                mini.setXY(this.moveBottom, B.right - 4, B.bottom)
            }
        } else {
            mini.removeClass(this.O0Ool, "mini-grid-ok");
            mini.addClass(this.O0Ool, "mini-grid-no");
            this.moveTop.style.display = "none";
            this.moveBottom.style.display = "none"
        }
    },
    _remove: function() {
        var $ = this.owner;
        mini.removeNode(this.O0Ool);
        mini.removeNode(this.moveTop);
        mini.removeNode(this.moveBottom);
        this.O0Ool = this.moveTop = this.moveBottom = this.dragColumn = this.targetColumn = null
    },
    lO1011: function(_) {
        var $ = this.owner;
        $.moveColumn(this.dragColumn, this.targetColumn, this.insertAction);
        this._remove()
    }
};
mini._Grid_ColumnSplitter = function($) {
    this.owner = $;
    mini.on($.el, "mousedown", this.__OnMouseDown, this)
};
mini._Grid_ColumnSplitter.prototype = {
    __OnMouseDown: function(B) {
        var $ = this.owner,
            A = B.target;
        if (mini.hasClass(A, "mini-grid-column-splitter")) {
            var _ = $.olo1(A.id);
            if ($.isEditing()) return;
            if ($.allowResizeColumn && _ && _.allowResize) {
                this.splitterColumn = _;
                this.getDrag().start(B)
            }
        }
    },
    getDrag: function() {
        if (!this.drag) this.drag = new mini.Drag({
            capture: true,
            onStart: mini.createDelegate(this.O0oo, this),
            onMove: mini.createDelegate(this.l1olo, this),
            onStop: mini.createDelegate(this.lO1011, this)
        });
        return this.drag
    },
    O0oo: function(_) {
        var $ = this.owner,
            B = $.getColumnBox(this.splitterColumn);
        this.columnBox = B;
        this.O0Ool = mini.append(document.body, "<div class=\"mini-grid-proxy\"></div>");
        var A = $.getGridViewBox();
        A.x = B.x;
        A.width = B.width;
        A.right = B.right;
        mini.setBox(this.O0Ool, A)
    },
    l1olo: function(A) {
        var $ = this.owner,
            B = mini.copyTo({}, this.columnBox),
            _ = B.width + (A.now[0] - A.init[0]);
        if (_ < $.columnMinWidth) _ = $.columnMinWidth;
        if (_ > $.columnMaxWidth) _ = $.columnMaxWidth;
        mini.setWidth(this.O0Ool, _)
    },
    lO1011: function(E) {
        var $ = this.owner,
            F = mini.getBox(this.O0Ool),
            D = this,
            C = $.allowSortColumn;
        $.allowSortColumn = false;
        setTimeout(function() {
            jQuery(D.O0Ool).remove();
            D.O0Ool = null;
            $.allowSortColumn = C
        }, 10);
        var G = this.splitterColumn,
            _ = parseInt(G.width);
        if (_ + "%" != G.width) {
            var A = $.getColumnWidth(G),
                B = parseInt(_ / A * F.width);
            if (B < $.columnMinWidth) B = $.columnMinWidth;
            $.setColumnWidth(G, B)
        }
    }
};
mini._Grid_DragDrop = function($) {
    this.owner = $;
    this.owner.on("CellMouseDown", this.__OnGridCellMouseDown, this)
};
mini._Grid_DragDrop.prototype = {
    __OnGridCellMouseDown: function(C) {
        if (C.htmlEvent.button == mini.MouseButton.Right) return;
        var $ = this.owner;
        if ($._dragging) return;
        this.dropObj = $;
        if (oOlO(C.htmlEvent.target, "mini-tree-editinput")) return;
        if ($.isReadOnly() || $.isAllowDrag(C.record, C.column) == false) return;
        var B = $.O0oo(C.record, C.column);
        if (B.cancel) return;
        this.dragText = B.dragText;
        var _ = C.record;
        this.isTree = !!$.isTree;
        this.beginRecord = _;
        var A = this.l11o10();
        A.start(C.htmlEvent)
    },
    O0oo: function(A) {
        var $ = this.owner;
        $._dragging = true;
        var _ = this.beginRecord;
        this.dragData = $.l11o10Data();
        if (this.dragData.indexOf(_) == -1) this.dragData.push(_);
        this.feedbackEl = mini.append(document.body, "<div class=\"mini-feedback\"></div>");
        this.feedbackEl.innerHTML = this.dragText;
        this.lastFeedbackClass = "";
        this.enableHotTrack = $.getEnableHotTrack();
        $.setEnableHotTrack(false)
    },
    _getDropTargetObj: function(_) {
        var $ = oOlO(_.target, "mini-grid", 500);
        if ($) return mini.get($)
    },
    l1olo: function(_) {
        var $ = this.owner,
            D = this._getDropTargetObj(_.event);
        this.dropObj = D;
        var C = _.now[0],
            B = _.now[1];
        mini.setXY(this.feedbackEl, C + 15, B + 18);
        if (D && D.allowDrop) {
            this.isTree = D.isTree;
            var A = D.l110O0ByEvent(_.event);
            this.dropRecord = A;
            if (A) {
                if (this.isTree) this.dragAction = this.getFeedback(A, B, 3);
                else this.dragAction = this.getFeedback(A, B, 2)
            } else this.dragAction = "no"
        } else this.dragAction = "no";
        if (D && D.allowDrop && !A && D.getData().length == 0) this.dragAction = "add";
        this.lastFeedbackClass = "mini-feedback-" + this.dragAction;
        this.feedbackEl.className = "mini-feedback " + this.lastFeedbackClass;
        if (this.dragAction == "no") A = null;
        this.setRowFeedback(A, this.dragAction)
    },
    lO1011: function(B) {
        var H = this.owner,
            G = this.dropObj;
        H._dragging = false;
        mini.removeNode(this.feedbackEl);
        H.setEnableHotTrack(this.enableHotTrack);
        this.feedbackEl = null;
        this.setRowFeedback(null);
        if (this.isTree) {
            var J = [];
            for (var I = 0, F = this.dragData.length; I < F; I++) {
                var L = this.dragData[I],
                    C = false;
                for (var K = 0, A = this.dragData.length; K < A; K++) {
                    var E = this.dragData[K];
                    if (E != L) {
                        C = H.isAncestor(E, L);
                        if (C) break
                    }
                }
                if (!C) J.push(L)
            }
            this.dragData = J
        }
        if (this.dragAction == "add" && !this.dropRecord) this.dropRecord = G.getRootNode ? G.getRootNode() : {
            __root: true
        };
        if (this.dropRecord && G && this.dragAction != "no") {
            var M = H.ooo00O(this.dragData, this.dropRecord, this.dragAction);
            if (!M.cancel) {
                var J = M.dragNodes,
                    D = M.targetNode,
                    _ = M.action;
                if (G.isTree) {
                    if (H == G) G.moveNodes(J, D, _);
                    else {
                        if (G.dropAction == "move") H.removeNodes(J);
                        else if (G.dropAction == "copy") J = mini.clone(J);
                        G.addNodes(J, D, _)
                    }
                } else {
                    var $ = G.indexOf(D);
                    if (_ == "after") $ += 1;
                    if (H == G) G.moveRow(J, $);
                    else {
                        if (G.dropAction == "move") H.removeRows(J);
                        else if (G.dropAction == "copy") J = mini.clone(J);
                        if (this.dragAction == "add") G.addRows(J);
                        else G.addRows(J, $)
                    }
                }
                M = {
                    dragNode: M.dragNodes[0],
                    dropNode: M.targetNode,
                    dragAction: M.action,
                    dragNodes: M.dragNodes,
                    targetNode: M.targetNode
                };
                G.fire("drop", M)
            }
        }
        this.dropRecord = null;
        this.dragData = null
    },
    setRowFeedback: function(_, F) {
        var $ = this.owner,
            E = this.dropObj;
        if (this.lastAddDomRow && E) E.removeRowCls(this.lastAddDomRow, "mini-tree-feedback-add");
        if (_ == null || this.dragAction == "add") {
            mini.removeNode(this.feedbackLine);
            this.feedbackLine = null
        }
        this.lastRowFeedback = _;
        if (_ != null)
            if (F == "before" || F == "after") {
                if (!this.feedbackLine) this.feedbackLine = mini.append(document.body, "<div class='mini-feedback-line'></div>");
                this.feedbackLine.style.display = "block";
                var C = E.getRowBox(_),
                    D = C.x,
                    B = C.y - 1;
                if (F == "after") B += C.height;
                mini.setXY(this.feedbackLine, D, B);
                var A = E.getBox(true);
                mini.setWidth(this.feedbackLine, A.width)
            } else {
                E.addRowCls(_, "mini-tree-feedback-add");
                this.lastAddDomRow = _
            }
    },
    getFeedback: function(K, I, F) {
        var D = this.owner,
            C = this.dropObj,
            J = C.getRowBox(K),
            $ = J.height,
            H = I - J.y,
            G = null;
        if (this.dragData.indexOf(K) != -1) return "no";
        var A = false;
        if (F == 3) {
            A = C.isLeaf(K);
            for (var E = 0, B = this.dragData.length; E < B; E++) {
                var L = this.dragData[E],
                    _ = C.isAncestor(L, K);
                if (_) {
                    G = "no";
                    break
                }
            }
        }
        if (G == null)
            if (F == 2) {
                if (H > $ / 2) G = "after";
                else G = "before"
            } else if (A && C.allowLeafDropIn === false) {
            if (H > $ / 2) G = "after";
            else G = "before"
        } else if (H > ($ / 3) * 2) G = "after";
        else if ($ / 3 <= H && H <= ($ / 3 * 2)) G = "add";
        else G = "before";
        var M = C.O0l1oO(G, this.dragData, K, D);
        return M.effect
    },
    l11o10: function() {
        if (!this.drag) this.drag = new mini.Drag({
            onStart: mini.createDelegate(this.O0oo, this),
            onMove: mini.createDelegate(this.l1olo, this),
            onStop: mini.createDelegate(this.lO1011, this)
        });
        return this.drag
    }
};
mini._Grid_Events = function($) {
    this.owner = $, el = $.el;
    mini.on(el, "click", this.__OnClick, this);
    mini.on(el, "dblclick", this.__OnDblClick, this);
    mini.on(el, "mousedown", this.__OnMouseDown, this);
    mini.on(el, "mouseup", this.__mouseup, this);
    mini.on(el, "mousemove", this.__mousemove, this);
    mini.on(el, "mouseover", this.__OnMouseOver, this);
    mini.on(el, "mouseout", this.__OnMouseOut, this);
    mini.on(el, "keydown", this.__keydown, this);
    mini.on(el, "keyup", this.__keyup, this);
    mini.on(el, "contextmenu", this.__contextmenu, this);
    $.on("rowmousemove", this.__OnRowMouseMove, this);
    mini.on(window, "resize", this.__windowResize, this)
};
mini._Grid_Events.prototype = {
    __windowResize: function() {
        var $ = this.owner;

        function _() {
            var B = $._getEditingControl();
            if (B) {
                var A = $.getCurrentCell(),
                    _ = $.getCellBox(A[0], A[1]);
                $.oo0000(_, B);
                $._setEdiorBox(B, _)
            }
        }
        setTimeout(function() {
            _()
        }, 100)
    },
    _row: null,
    __OnRowMouseMove: function(A) {
        var $ = this.owner,
            _ = A.record;
        if (this._row != _) {
            A.record = _;
            A.row = _;
            $.fire("rowmouseenter", A)
        }
        this._row = _
    },
    __OnClick: function($) {
        this.o00lol($, "Click")
    },
    __OnDblClick: function($) {
        this.o00lol($, "Dblclick")
    },
    __OnMouseDown: function(A) {
        var $ = this.owner;
        if (oOlO(A.target, "mini-tree-editinput")) return;
        if (oOlO(A.target, "mini-tree-node-ecicon")) return;
        this.o00lol(A, "MouseDown");
        var _ = 300;
        if (A.target.tagName.toLowerCase() == "a" && A.target.href) _ = 10;
        setTimeout(function() {
            var _ = oOlO(A.target, "mini-grid-detailRow");
            if (Oolo($.el, _)) return;
            if (!!$.o01Ol1) return;
            $._tryFocus(A)
        }, _)
    },
    __mouseup: function(_) {
        if (oOlO(_.target, "mini-tree-editinput")) return;
        if (oOlO(_.target, "mini-tree-node-ecicon")) return;
        if (oOlO(_.target, "mini-tree-checkbox")) return;
        var $ = this.owner;
        if (Oolo($.el, _.target)) this.o00lol(_, "MouseUp")
    },
    __mousemove: function($) {
        this.o00lol($, "MouseMove")
    },
    __OnMouseOver: function($) {
        this.o00lol($, "MouseOver")
    },
    __OnMouseOut: function($) {
        this.o00lol($, "MouseOut")
    },
    __keydown: function($) {
        this.o00lol($, "KeyDown")
    },
    __keyup: function($) {
        this.o00lol($, "KeyUp")
    },
    __contextmenu: function($) {
        this.o00lol($, "ContextMenu")
    },
    o00lol: function(G, E) {
        var $ = this.owner,
            D = $.oOlol(G),
            A = D[0],
            C = D[1];
        if (A) {
            var B = {
                    record: A,
                    row: A,
                    htmlEvent: G
                },
                F = $["_OnRow" + E];
            if (F) F.call($, B);
            else $.fire("row" + E, B)
        }
        if (C) {
            B = {
                column: C,
                field: C.field,
                htmlEvent: G
            }, F = $["_OnColumn" + E];
            if (F) F.call($, B);
            else $.fire("column" + E, B)
        }
        if (A && C) {
            B = {
                sender: $,
                record: A,
                row: A,
                column: C,
                field: C.field,
                htmlEvent: G
            }, F = $["_OnCell" + E];
            if (F) F.call($, B);
            else $.fire("cell" + E, B);
            if (C["onCell" + E]) C["onCell" + E].call(C, B)
        }
        if (!A && C && oOlO(G.target, "mini-grid-headerCell")) {
            B = {
                column: C,
                htmlEvent: G
            }, F = $["_OnHeaderCell" + E];
            if (F) F.call($, B);
            else {
                var _ = "onheadercell" + E.toLowerCase();
                if (C[_]) {
                    B.sender = $;
                    C[_](B)
                }
                $.fire("headercell" + E, B)
            }
        }
    }
};
mini.DataGrid = function($) {
    mini.DataGrid.superclass.constructor.call(this, null);
    this._Events = new mini._Grid_Events(this);
    this.ooo0l = new mini._Gridooo0l(this);
    this._DragDrop = new mini._Grid_DragDrop(this);
    this._RowGroup = new mini._Grid_RowGroup(this);
    this.ll01o0 = new mini._Grid_ColumnSplitter(this);
    this._ColumnMove = new mini._Grid_ColumnMove(this);
    this._Sorter = new mini._Grid_Sorter(this);
    this._CellToolTip = new mini._Grid_CellToolTip(this);
    this.o11O1Menu = new mini._Grido11O1Menu(this);
    this.oo1Ols();
    if ($) mini.applyTo.call(this, $)
};
mini.extend(mini.DataGrid, mini.ScrollGridView, {
    uiCls: "mini-datagrid",
    selectOnLoad: false,
    showHeader: false,
    showPager: true,
    dropAction: "move",
    onlyCheckSelection: false,
    _$onlyCheckSelection: true,
    allowUnselect: false,
    allowRowSelect: true,
    allowCellSelect: false,
    allowCellEdit: false,
    cellEditAction: "cellclick",
    allowCellValid: false,
    allowResizeColumn: true,
    allowSortColumn: true,
    allowMoveColumn: true,
    showColumnsMenu: false,
    virtualScroll: false,
    enableHotTrack: true,
    allowHotTrackOut: true,
    showLoading: true,
    columnMinWidth: 8,
    l0010: true,
    oloo: null,
    o01Ol1: null,
    navEditMode: false,
    editNextRowCell: false,
    editNextOnEnterKey: false,
    editOnTabKey: true,
    createOnEnter: false,
    skipReadOnlyCell: false,
    autoHideRowDetail: true,
    allowDrag: false,
    allowDrop: false,
    allowLeafDropIn: false,
    pageSize: 20,
    pageIndex: 0,
    totalCount: 0,
    totalPage: 0,
    sortField: "",
    sortOrder: "",
    url: "",
    showCellTip: true,
    sizeText: "",
    showPagerButtonText: false,
    showPagerButtonIcon: false,
    groupTitleCollapsible: true,
    headerContextMenu: null,
    selectOnRightClick: true
});
mini_DataGrid = mini.DataGrid.prototype;
mini_DataGrid.getAttrs = mini_DataGrid_getAttrs;
mini_DataGrid._set_autoCreateNewID = mini_DataGrid__set_autoCreateNewID;
mini_DataGrid._setOo0o = mini_DataGrid__setOo0o;
mini_DataGrid._setOlo0 = mini_DataGrid__setOlo0;
mini_DataGrid._setlOOoO = mini_DataGrid__setlOOoO;
mini_DataGrid._getlOOoO = mini_DataGrid__getlOOoO;
mini_DataGrid.getSelectOnRightClick = mini_DataGrid_getSelectOnRightClick;
mini_DataGrid.setSelectOnRightClick = mini_DataGrid_setSelectOnRightClick;
mini_DataGrid.getHeaderContextMenu = mini_DataGrid_getHeaderContextMenu;
mini_DataGrid.setHeaderContextMenu = mini_DataGrid_setHeaderContextMenu;
mini_DataGrid.Ol0l10 = mini_DataGrid_Ol0l10;
mini_DataGrid._beforeOpenContentMenu = mini_DataGrid__beforeOpenContentMenu;
mini_DataGrid.getGroupTitleCollapsible = mini_DataGrid_getGroupTitleCollapsible;
mini_DataGrid.setGroupTitleCollapsible = mini_DataGrid_setGroupTitleCollapsible;
mini_DataGrid.getDropAction = mini_DataGrid_getDropAction;
mini_DataGrid.setDropAction = mini_DataGrid_setDropAction;
mini_DataGrid.setPagerCls = mini_DataGrid_setPagerCls;
mini_DataGrid.setPagerStyle = mini_DataGrid_setPagerStyle;
mini_DataGrid.getShowTotalCount = mini_DataGrid_getShowTotalCount;
mini_DataGrid.setShowTotalCount = mini_DataGrid_setShowTotalCount;
mini_DataGrid.getShowPageIndex = mini_DataGrid_getShowPageIndex;
mini_DataGrid.setShowPageIndex = mini_DataGrid_setShowPageIndex;
mini_DataGrid.getShowPageSize = mini_DataGrid_getShowPageSize;
mini_DataGrid.setShowPageSize = mini_DataGrid_setShowPageSize;
mini_DataGrid.getSizeList = mini_DataGrid_getSizeList;
mini_DataGrid.setSizeList = mini_DataGrid_setSizeList;
mini_DataGrid.getShowPageInfo = mini_DataGrid_getShowPageInfo;
mini_DataGrid.setShowPageInfo = mini_DataGrid_setShowPageInfo;
mini_DataGrid.getShowReloadButton = mini_DataGrid_getShowReloadButton;
mini_DataGrid.setShowReloadButton = mini_DataGrid_setShowReloadButton;
mini_DataGrid.getShowPagerButtonIcon = mini_DataGrid_getShowPagerButtonIcon;
mini_DataGrid.setShowPagerButtonIcon = mini_DataGrid_setShowPagerButtonIcon;
mini_DataGrid.getShowPagerButtonText = mini_DataGrid_getShowPagerButtonText;
mini_DataGrid.setShowPagerButtonText = mini_DataGrid_setShowPagerButtonText;
mini_DataGrid.getSizeText = mini_DataGrid_getSizeText;
mini_DataGrid.setSizeText = mini_DataGrid_setSizeText;
mini_DataGrid.getBottomPager = mini_DataGrid_getBottomPager;
mini_DataGrid.getPageSizeWidth = mini_DataGrid_getPageSizeWidth;
mini_DataGrid.setPageSizeWidth = mini_DataGrid_setPageSizeWidth;
mini_DataGrid.getStackTraceField = mini_DataGrid_getStackTraceField;
mini_DataGrid.setStackTraceField = mini_DataGrid_setStackTraceField;
mini_DataGrid.getErrorMsgField = mini_DataGrid_getErrorMsgField;
mini_DataGrid.setErrorMsgField = mini_DataGrid_setErrorMsgField;
mini_DataGrid.getErrorField = mini_DataGrid_getErrorField;
mini_DataGrid.setErrorField = mini_DataGrid_setErrorField;
mini_DataGrid.getDataField = mini_DataGrid_getDataField;
mini_DataGrid.setDataField = mini_DataGrid_setDataField;
mini_DataGrid.getTotalField = mini_DataGrid_getTotalField;
mini_DataGrid.setTotalField = mini_DataGrid_setTotalField;
mini_DataGrid.getSortOrderField = mini_DataGrid_getSortOrderField;
mini_DataGrid.setSortOrderField = mini_DataGrid_setSortOrderField;
mini_DataGrid.getSortFieldField = mini_DataGrid_getSortFieldField;
mini_DataGrid.setSortFieldField = mini_DataGrid_setSortFieldField;
mini_DataGrid.getLimitField = mini_DataGrid_getLimitField;
mini_DataGrid.setLimitField = mini_DataGrid_setLimitField;
mini_DataGrid.getStartField = mini_DataGrid_getStartField;
mini_DataGrid.setStartField = mini_DataGrid_setStartField;
mini_DataGrid.getPageSizeField = mini_DataGrid_getPageSizeField;
mini_DataGrid.setPageSizeField = mini_DataGrid_setPageSizeField;
mini_DataGrid.getPageIndexField = mini_DataGrid_getPageIndexField;
mini_DataGrid.setPageIndexField = mini_DataGrid_setPageIndexField;
mini_DataGrid.getSortOrder = mini_DataGrid_getSortOrder;
mini_DataGrid.setSortOrder = mini_DataGrid_setSortOrder;
mini_DataGrid.getSortField = mini_DataGrid_getSortField;
mini_DataGrid.setSortField = mini_DataGrid_setSortField;
mini_DataGrid.getTotalPage = mini_DataGrid_getTotalPage;
mini_DataGrid.getTotalCount = mini_DataGrid_getTotalCount;
mini_DataGrid.setTotalCount = mini_DataGrid_setTotalCount;
mini_DataGrid.getPageSize = mini_DataGrid_getPageSize;
mini_DataGrid.setPageSize = mini_DataGrid_setPageSize;
mini_DataGrid.getPageIndex = mini_DataGrid_getPageIndex;
mini_DataGrid.setPageIndex = mini_DataGrid_setPageIndex;
mini_DataGrid.getSortMode = mini_DataGrid_getSortMode;
mini_DataGrid.setSortMode = mini_DataGrid_setSortMode;
mini_DataGrid.getSelectOnLoad = mini_DataGrid_getSelectOnLoad;
mini_DataGrid.setSelectOnLoad = mini_DataGrid_setSelectOnLoad;
mini_DataGrid.getCheckSelectOnLoad = mini_DataGrid_getCheckSelectOnLoad;
mini_DataGrid.setCheckSelectOnLoad = mini_DataGrid_setCheckSelectOnLoad;
mini_DataGrid.getShowCellTip = mini_DataGrid_getShowCellTip;
mini_DataGrid.setShowCellTip = mini_DataGrid_setShowCellTip;
mini_DataGrid.sortBy = mini_DataGrid_sortBy;
mini_DataGrid.gotoPage = mini_DataGrid_gotoPage;
mini_DataGrid.reload = mini_DataGrid_reload;
mini_DataGrid.load = mini_DataGrid_load;
mini_DataGrid.getUrl = mini_DataGrid_getUrl;
mini_DataGrid.setUrl = mini_DataGrid_setUrl;
mini_DataGrid.getAutoLoad = mini_DataGrid_getAutoLoad;
mini_DataGrid.setAutoLoad = mini_DataGrid_setAutoLoad;
mini_DataGrid.getAjaxOptions = mini_DataGrid_getAjaxOptions;
mini_DataGrid.setAjaxOptions = mini_DataGrid_setAjaxOptions;
mini_DataGrid.getAjaxType = mini_DataGrid_getAjaxType;
mini_DataGrid.setAjaxType = mini_DataGrid_setAjaxType;
mini_DataGrid.getAjaxMethod = mini_DataGrid_getAjaxMethod;
mini_DataGrid.setAjaxMethod = mini_DataGrid_setAjaxMethod;
mini_DataGrid.getAjaxAsync = mini_DataGrid_getAjaxAsync;
mini_DataGrid.setAjaxAsync = mini_DataGrid_setAjaxAsync;
mini_DataGrid.moveDown = mini_DataGrid_moveDown;
mini_DataGrid.moveUp = mini_DataGrid_moveUp;
mini_DataGrid.ooo00O = mini_DataGrid_ooo00O;
mini_DataGrid.O0l1oO = mini_DataGrid_O0l1oO;
mini_DataGrid.O0oo = mini_DataGrid_O0oo;
mini_DataGrid.isAllowDrag = mini_DataGrid_isAllowDrag;
mini_DataGrid.getAllowDrop = mini_DataGrid_getAllowDrop;
mini_DataGrid.setAllowDrop = mini_DataGrid_setAllowDrop;
mini_DataGrid.getAllowDrag = mini_DataGrid_getAllowDrag;
mini_DataGrid.setAllowDrag = mini_DataGrid_setAllowDrag;
mini_DataGrid.getAllowLeafDropIn = mini_DataGrid_getAllowLeafDropIn;
mini_DataGrid.setAllowLeafDropIn = mini_DataGrid_setAllowLeafDropIn;
mini_DataGrid.l11o10Text = mini_DataGrid_l11o10Text;
mini_DataGrid.l11o10Data = mini_DataGrid_l11o10Data;
mini_DataGrid.l1l0lo = mini_DataGrid_l1l0lo;
mini_DataGrid._getAnchorCell = mini_DataGrid__getAnchorCell;
mini_DataGrid._isCellVisible = mini_DataGrid__isCellVisible;
mini_DataGrid.margeCells = mini_DataGrid_margeCells;
mini_DataGrid.mergeCells = mini_DataGrid_mergeCells;
mini_DataGrid.mergeColumns = mini_DataGrid_mergeColumns;
mini_DataGrid.getAutoHideRowDetail = mini_DataGrid_getAutoHideRowDetail;
mini_DataGrid.setAutoHideRowDetail = mini_DataGrid_setAutoHideRowDetail;
mini_DataGrid.getRowDetailCellEl = mini_DataGrid_getRowDetailCellEl;
mini_DataGrid.lo00 = mini_DataGrid_lo00;
mini_DataGrid.oO1l = mini_DataGrid_oO1l;
mini_DataGrid._getRowDetailEl = mini_DataGrid__getRowDetailEl;
mini_DataGrid.hideRowDetail = mini_DataGrid_hideRowDetail;
mini_DataGrid.showRowDetail = mini_DataGrid_showRowDetail;
mini_DataGrid.toggleRowDetail = mini_DataGrid_toggleRowDetail;
mini_DataGrid.isShowRowDetail = mini_DataGrid_isShowRowDetail;
mini_DataGrid.hideAllRowDetail = mini_DataGrid_hideAllRowDetail;
mini_DataGrid.showAllRowDetail = mini_DataGrid_showAllRowDetail;
mini_DataGrid.expandRowGroup = mini_DataGrid_expandRowGroup;
mini_DataGrid.collapseRowGroup = mini_DataGrid_collapseRowGroup;
mini_DataGrid.toggleRowGroup = mini_DataGrid_toggleRowGroup;
mini_DataGrid.expandGroups = mini_DataGrid_expandGroups;
mini_DataGrid.collapseGroups = mini_DataGrid_collapseGroups;
mini_DataGrid.getEditRowData = mini_DataGrid_getEditRowData;
mini_DataGrid.getEditData = mini_DataGrid_getEditData;
mini_DataGrid.getEditingRow = mini_DataGrid_getEditingRow;
mini_DataGrid.getEditingRows = mini_DataGrid_getEditingRows;
mini_DataGrid.isNewRow = mini_DataGrid_isNewRow;
mini_DataGrid.isEditingRow = mini_DataGrid_isEditingRow;
mini_DataGrid.isEditing = mini_DataGrid_isEditing;
mini_DataGrid.commitEditRow = mini_DataGrid_commitEditRow;
mini_DataGrid.cancelEditRow = mini_DataGrid_cancelEditRow;
mini_DataGrid.beginEditRow = mini_DataGrid_beginEditRow;
mini_DataGrid.getEditorOwnerRow = mini_DataGrid_getEditorOwnerRow;
mini_DataGrid._beginEditNextCell = mini_DataGrid__beginEditNextCell;
mini_DataGrid.isCellCanEdit = mini_DataGrid_isCellCanEdit;
mini_DataGrid.getSkipReadOnlyCell = mini_DataGrid_getSkipReadOnlyCell;
mini_DataGrid.setSkipReadOnlyCell = mini_DataGrid_setSkipReadOnlyCell;
mini_DataGrid.getNavEditMode = mini_DataGrid_getNavEditMode;
mini_DataGrid.setNavEditMode = mini_DataGrid_setNavEditMode;
mini_DataGrid.l0o00 = mini_DataGrid_l0o00;
mini_DataGrid.oo0000 = mini_DataGrid_oo0000;
mini_DataGrid.getEditWrap = mini_DataGrid_getEditWrap;
mini_DataGrid.lO00Oo = mini_DataGrid_lO00Oo;
mini_DataGrid._setEdiorBox = mini_DataGrid__setEdiorBox;
mini_DataGrid._getEditingControl = mini_DataGrid__getEditingControl;
mini_DataGrid.Ool0 = mini_DataGrid_Ool0;
mini_DataGrid.lo1Oo1 = mini_DataGrid_lo1Oo1;
mini_DataGrid.oo0l = mini_DataGrid_oo0l;
mini_DataGrid.O1o000 = mini_DataGrid_O1o000;
mini_DataGrid.getCellEditor = mini_DataGrid_getCellEditor;
mini_DataGrid.commitEdit = mini_DataGrid_commitEdit;
mini_DataGrid.cancelEdit = mini_DataGrid_cancelEdit;
mini_DataGrid.beginEditCell = mini_DataGrid_beginEditCell;
mini_DataGrid.isEditingCell = mini_DataGrid_isEditingCell;
mini_DataGrid.getCurrentCell = mini_DataGrid_getCurrentCell;
mini_DataGrid.setCurrentCell = mini_DataGrid_setCurrentCell;
mini_DataGrid.Ooll0o = mini_DataGrid_Ooll0o;
mini_DataGrid.getCreateOnEnter = mini_DataGrid_getCreateOnEnter;
mini_DataGrid.setCreateOnEnter = mini_DataGrid_setCreateOnEnter;
mini_DataGrid.getEditOnTabKey = mini_DataGrid_getEditOnTabKey;
mini_DataGrid.setEditOnTabKey = mini_DataGrid_setEditOnTabKey;
mini_DataGrid.getEditNextOnEnterKey = mini_DataGrid_getEditNextOnEnterKey;
mini_DataGrid.setEditNextOnEnterKey = mini_DataGrid_setEditNextOnEnterKey;
mini_DataGrid.getEditNextRowCell = mini_DataGrid_getEditNextRowCell;
mini_DataGrid.setEditNextRowCell = mini_DataGrid_setEditNextRowCell;
mini_DataGrid.getShowColumnsMenu = mini_DataGrid_getShowColumnsMenu;
mini_DataGrid.setShowColumnsMenu = mini_DataGrid_setShowColumnsMenu;
mini_DataGrid.getAllowMoveColumn = mini_DataGrid_getAllowMoveColumn;
mini_DataGrid.setAllowMoveColumn = mini_DataGrid_setAllowMoveColumn;
mini_DataGrid.getAllowSortColumn = mini_DataGrid_getAllowSortColumn;
mini_DataGrid.setAllowSortColumn = mini_DataGrid_setAllowSortColumn;
mini_DataGrid.getAllowResizeColumn = mini_DataGrid_getAllowResizeColumn;
mini_DataGrid.setAllowResizeColumn = mini_DataGrid_setAllowResizeColumn;
mini_DataGrid.getAllowCellValid = mini_DataGrid_getAllowCellValid;
mini_DataGrid.setAllowCellValid = mini_DataGrid_setAllowCellValid;
mini_DataGrid.getCellEditAction = mini_DataGrid_getCellEditAction;
mini_DataGrid.setCellEditAction = mini_DataGrid_setCellEditAction;
mini_DataGrid.getAllowCellEdit = mini_DataGrid_getAllowCellEdit;
mini_DataGrid.setAllowCellEdit = mini_DataGrid_setAllowCellEdit;
mini_DataGrid.getAllowCellSelect = mini_DataGrid_getAllowCellSelect;
mini_DataGrid.setAllowCellSelect = mini_DataGrid_setAllowCellSelect;
mini_DataGrid.getAllowRowSelect = mini_DataGrid_getAllowRowSelect;
mini_DataGrid.setAllowRowSelect = mini_DataGrid_setAllowRowSelect;
mini_DataGrid.getAllowUnselect = mini_DataGrid_getAllowUnselect;
mini_DataGrid.setAllowUnselect = mini_DataGrid_setAllowUnselect;
mini_DataGrid.getOnlyCheckSelection = mini_DataGrid_getOnlyCheckSelection;
mini_DataGrid.setOnlyCheckSelection = mini_DataGrid_setOnlyCheckSelection;
mini_DataGrid.getAllowHotTrackOut = mini_DataGrid_getAllowHotTrackOut;
mini_DataGrid.setAllowHotTrackOut = mini_DataGrid_setAllowHotTrackOut;
mini_DataGrid.getEnableHotTrack = mini_DataGrid_getEnableHotTrack;
mini_DataGrid.setEnableHotTrack = mini_DataGrid_setEnableHotTrack;
mini_DataGrid.getShowLoading = mini_DataGrid_getShowLoading;
mini_DataGrid.setShowLoading = mini_DataGrid_setShowLoading;
mini_DataGrid.scrollIntoView = mini_DataGrid_scrollIntoView;
mini_DataGrid.focusRow = mini_DataGrid_focusRow;
mini_DataGrid.focus = mini_DataGrid_focus;
mini_DataGrid._tryFocus = mini_DataGrid__tryFocus;
mini_DataGrid._doRowSelect = mini_DataGrid__doRowSelect;
mini_DataGrid.getRowBox = mini_DataGrid_getRowBox;
mini_DataGrid.getColumnBox = mini_DataGrid_getColumnBox;
mini_DataGrid.getCellBox = mini_DataGrid_getCellBox;
mini_DataGrid.removeRowCls = mini_DataGrid_removeRowCls;
mini_DataGrid.addRowCls = mini_DataGrid_addRowCls;
mini_DataGrid.hasRowCls = mini_DataGrid_hasRowCls;
mini_DataGrid.olo1 = mini_DataGrid_olo1;
mini_DataGrid._getRowByID = mini_DataGrid__getRowByID;
mini_DataGrid.getCellFromEvent = mini_DataGrid_getCellFromEvent;
mini_DataGrid.oOlol = mini_DataGrid_oOlol;
mini_DataGrid.O1loo = mini_DataGrid_O1loo;
mini_DataGrid.getColumnByEvent = mini_DataGrid_getColumnByEvent;
mini_DataGrid.l110O0ByEvent = mini_DataGrid_l110O0ByEvent;
mini_DataGrid.getRecordByEvent = mini_DataGrid_getRecordByEvent;
mini_DataGrid.getCellEl = mini_DataGrid_getCellEl;
mini_DataGrid.oOOO1O = mini_DataGrid_oOOO1O;
mini_DataGrid.lOOlOl = mini_DataGrid_lOOlOl;
mini_DataGrid.OOl0 = mini_DataGrid_OOl0;
mini_DataGrid._getRowGroupRowsEl = mini_DataGrid__getRowGroupRowsEl;
mini_DataGrid._getRowGroupEl = mini_DataGrid__getRowGroupEl;
mini_DataGrid._doMoveRowEl = mini_DataGrid__doMoveRowEl;
mini_DataGrid._doRemoveRowEl = mini_DataGrid__doRemoveRowEl;
mini_DataGrid._doAddRowEl = mini_DataGrid__doAddRowEl;
mini_DataGrid.l1111OEl = mini_DataGrid_l1111OEl;
mini_DataGrid.__OnPageChanged = mini_DataGrid___OnPageChanged;
mini_DataGrid.unbindPager = mini_DataGrid_unbindPager;
mini_DataGrid.bindPager = mini_DataGrid_bindPager;
mini_DataGrid.setPager = mini_DataGrid_setPager;
mini_DataGrid.setPagerButtons = mini_DataGrid_setPagerButtons;
mini_DataGrid._updatePagesInfo = mini_DataGrid__updatePagesInfo;
mini_DataGrid.__OnPageInfoChanged = mini_DataGrid___OnPageInfoChanged;
mini_DataGrid.__OnSelectionChanged = mini_DataGrid___OnSelectionChanged;
mini_DataGrid.__OnSourceMove = mini_DataGrid___OnSourceMove;
mini_DataGrid.__OnSourceRemove = mini_DataGrid___OnSourceRemove;
mini_DataGrid.__OnSourceUpdate = mini_DataGrid___OnSourceUpdate;
mini_DataGrid.__OnSourceAdd = mini_DataGrid___OnSourceAdd;
mini_DataGrid.__OnSourceFilter = mini_DataGrid___OnSourceFilter;
mini_DataGrid.__OnSourceSort = mini_DataGrid___OnSourceSort;
mini_DataGrid.__OnSourceLoadError = mini_DataGrid___OnSourceLoadError;
mini_DataGrid.__OnSourceLoadSuccess = mini_DataGrid___OnSourceLoadSuccess;
mini_DataGrid.__OnSourcePreLoad = mini_DataGrid___OnSourcePreLoad;
mini_DataGrid.__OnSourceBeforeLoad = mini_DataGrid___OnSourceBeforeLoad;
mini_DataGrid._initData = mini_DataGrid__initData;
mini_DataGrid.oOlolO = mini_DataGrid_oOlolO;
mini_DataGrid.lllO = mini_DataGrid_lllO;
mini_DataGrid._OnDrawCell = mini_DataGrid__OnDrawCell;
mini_DataGrid._destroyEditors = mini_DataGrid__destroyEditors;
mini_DataGrid.doUpdate = mini_DataGrid_doUpdate;
mini_DataGrid.set = mini_DataGrid_set;
mini.regClass(mini.DataGrid, "datagrid");
l1loOo_CellValidator_Prototype = {
    getCellErrors: function() {
        var A = this._cellErrors.clone(),
            D = this._dataSource;
        for (var $ = 0, C = A.length; $ < C; $++) {
            var E = A[$],
                _ = E.record;
            if (!D.getby_id(_._id)) {
                var B = E.column,
                    F = _[this._rowIdField] + "$" + B._id;
                delete this._cellMapErrors[F];
                this._cellErrors.remove(E)
            }
        }
        return this._cellErrors
    },
    getCellError: function($, _) {
        $ = this.getNode ? this.getNode($) : this.getRow($);
        _ = this.getColumn(_);
        if (!$ || !_) return;
        var A = $[this._rowIdField] + "$" + _._id;
        return this._cellMapErrors ? this._cellMapErrors[A] : null
    },
    isValid: function() {
        return this.getCellErrors().length == 0
    },
    isCellValid: function($, _) {
        if (!this._cellMapErrors) return true;
        var A = $[this._rowIdField] + "$" + _._id;
        return !this._cellMapErrors[A]
    },
    validate: function(A) {
        A = A || this.getDataView();
        if (!mini.isArray(A)) A = [];
        for (var $ = 0, B = A.length; $ < B; $++) {
            var _ = A[$];
            this.validateRow(_)
        }
    },
    validateRow: function(_) {
        var B = this.getBottomColumns();
        for (var $ = 0, C = B.length; $ < C; $++) {
            var A = B[$];
            this.validateCell(_, A)
        }
    },
    validateCell: function(F, B) {
        F = this.getNode ? this.getNode(F) : this.getRow(F);
        B = this.getColumn(B);
        if (!F || !B || B.visible == false) return;
        var _ = mini._getMap(B.field, F),
            J = {
                record: F,
                row: F,
                node: F,
                column: B,
                field: B.field,
                value: _,
                isValid: true,
                errorText: ""
            };
        if (B.vtype) mini.Oool(B.vtype, J.value, J, B);
        if (J.isValid == true && B.unique && B.field) {
            var A = {},
                H = this.data,
                I = B.field;
            for (var E = 0, C = H.length; E < C; E++) {
                var $ = H[E],
                    D = $[I];
                if (mini.isNull(D) || D === "");
                else {
                    var G = A[D];
                    if (G && $ == F) {
                        J.isValid = false;
                        J.errorText = mini.ol1l(B, "uniqueErrorText");
                        this.setCellIsValid(G, B, J.isValid, J.errorText);
                        break
                    }
                    A[D] = $
                }
            }
        }
        this.fire("cellvalidation", J);
        this.setCellIsValid(F, B, J.isValid, J.errorText)
    },
    setIsValid: function(_) {
        if (_) {
            var A = this._cellErrors.clone();
            for (var $ = 0, B = A.length; $ < B; $++) {
                var C = A[$];
                this.setCellIsValid(C.record, C.column, true)
            }
        }
    },
    _removeRowError: function(_) {
        var B = this.getColumns();
        for (var $ = 0, C = B.length; $ < C; $++) {
            var A = B[$],
                E = _[this._rowIdField] + "$" + A._id,
                D = this._cellMapErrors[E];
            if (D) {
                delete this._cellMapErrors[E];
                this._cellErrors.remove(D)
            }
        }
    },
    setCellIsValid: function(_, A, B, D) {
        _ = this.getRow(_);
        A = this.getColumn(A);
        if (!_ || !A) return;
        var E = _[this._rowIdField] + "$" + A._id,
            $ = this.oOOO1O(_, A),
            C = this._cellMapErrors[E];
        delete this._cellMapErrors[E];
        this._cellErrors.remove(C);
        if (B === true) {
            if ($ && C) mini.removeClass($, "mini-grid-cell-error")
        } else {
            C = {
                record: _,
                column: A,
                isValid: B,
                errorText: D
            };
            this._cellMapErrors[E] = C;
            this._cellErrors.add(C);
            if ($) mini.addClass($, "mini-grid-cell-error")
        }
    }
};
mini.copyTo(mini.DataGrid.prototype, l1loOo_CellValidator_Prototype);
mini.TreeGrid = function() {
    mini.TreeGrid.superclass.constructor.apply(this, arguments);
    mini.addClass(this.el, "mini-tree");
    this.setAjaxAsync(false);
    this.setAutoLoad(true);
    if (this.showTreeLines == true) mini.addClass(this.el, "mini-tree-treeLine");
    this._AsyncLoader = new mini._Tree_AsyncLoader(this);
    this._Expander = new mini._Tree_Expander(this);
    this.setShowArrow(this.showArrow)
};
mini.copyTo(mini.TreeGrid.prototype, mini._DataTreeApplys);
mini.extend(mini.TreeGrid, mini.DataGrid, {
    isTree: true,
    uiCls: "mini-treegrid",
    showPager: false,
    showNewRow: false,
    showCheckBox: false,
    showRadioButton: false,
    showTreeIcon: true,
    showExpandButtons: true,
    showTreeLines: false,
    showArrow: false,
    expandOnDblClick: true,
    expandOnNodeClick: false,
    loadOnExpand: true,
    _checkBoxType: "checkbox",
    iconField: "iconCls",
    _treeColumn: null,
    leafIconCls: "mini-tree-leaf",
    folderIconCls: "mini-tree-folder",
    fixedRowHeight: false,
    oo1o10: "mini-tree-checkbox",
    OlolO: "mini-tree-expand",
    loOoo: "mini-tree-collapse",
    oO0o: "mini-tree-node-ecicon",
    l101o: "mini-tree-nodeshow",
    checkOnTextClick: false,
    useAnimation: true,
    _updateNodeTimer: null,
    imgPath: "",
    imgField: "img"
});
mini_TreeGrid = mini.TreeGrid.prototype;
mini_TreeGrid.getAttrs = mini_TreeGrid_getAttrs;
mini_TreeGrid.getImgField = mini_TreeGrid_getImgField;
mini_TreeGrid.setImgField = mini_TreeGrid_setImgField;
mini_TreeGrid.getImgPath = mini_TreeGrid_getImgPath;
mini_TreeGrid.setImgPath = mini_TreeGrid_setImgPath;
mini_TreeGrid.disableNode = mini_TreeGrid_disableNode;
mini_TreeGrid.enableNode = mini_TreeGrid_enableNode;
mini_TreeGrid.showNode = mini_TreeGrid_showNode;
mini_TreeGrid.hideNode = mini_TreeGrid_hideNode;
mini_TreeGrid.getLoadOnExpand = mini_TreeGrid_getLoadOnExpand;
mini_TreeGrid.setLoadOnExpand = mini_TreeGrid_setLoadOnExpand;
mini_TreeGrid.getExpandOnNodeClick = mini_TreeGrid_getExpandOnNodeClick;
mini_TreeGrid.setExpandOnNodeClick = mini_TreeGrid_setExpandOnNodeClick;
mini_TreeGrid.getExpandOnDblClick = mini_TreeGrid_getExpandOnDblClick;
mini_TreeGrid.getFolderIcon = mini_TreeGrid_getFolderIcon;
mini_TreeGrid.setFolderIcon = mini_TreeGrid_setFolderIcon;
mini_TreeGrid.getLeafIcon = mini_TreeGrid_getLeafIcon;
mini_TreeGrid.setLeafIcon = mini_TreeGrid_setLeafIcon;
mini_TreeGrid.getShowArrow = mini_TreeGrid_getShowArrow;
mini_TreeGrid.setShowArrow = mini_TreeGrid_setShowArrow;
mini_TreeGrid.getShowTreeLines = mini_TreeGrid_getShowTreeLines;
mini_TreeGrid.setShowTreeLines = mini_TreeGrid_setShowTreeLines;
mini_TreeGrid.getShowExpandButtons = mini_TreeGrid_getShowExpandButtons;
mini_TreeGrid.setShowExpandButtons = mini_TreeGrid_setShowExpandButtons;
mini_TreeGrid.getAllowSelect = mini_TreeGrid_getAllowSelect;
mini_TreeGrid.setAllowSelect = mini_TreeGrid_setAllowSelect;
mini_TreeGrid.getIconField = mini_TreeGrid_getIconField;
mini_TreeGrid.setIconField = mini_TreeGrid_setIconField;
mini_TreeGrid.setNodeIconCls = mini_TreeGrid_setNodeIconCls;
mini_TreeGrid.setNodeText = mini_TreeGrid_setNodeText;
mini_TreeGrid.nodeclick = mini_TreeGrid_l1l1;
mini_TreeGrid.__OnNodeDblClick = mini_TreeGrid___OnNodeDblClick;
mini_TreeGrid._OnCellClick = mini_TreeGrid__OnCellClick;
mini_TreeGrid._OnCellMouseDown = mini_TreeGrid__OnCellMouseDown;
mini_TreeGrid._tryToggleNode = mini_TreeGrid__tryToggleNode;
mini_TreeGrid._tryToggleCheckNode = mini_TreeGrid__tryToggleCheckNode;
mini_TreeGrid.__OnCheckChanged = mini_TreeGrid___OnCheckChanged;
mini_TreeGrid._doCheckNodeEl = mini_TreeGrid__doCheckNodeEl;
mini_TreeGrid.expand = mini_TreeGrid_oo00ll;
mini_TreeGrid.collapse = mini_TreeGrid_l0Ooll;
mini_TreeGrid._doExpandCollapseNode = mini_TreeGrid__doExpandCollapseNode;
mini_TreeGrid.o1oo = mini_TreeGrid_o1oo;
mini_TreeGrid._getNodeIcon = mini_TreeGrid__getNodeIcon;
mini_TreeGrid.getIconsField = mini_TreeGrid_getIconsField;
mini_TreeGrid.setIconsField = mini_TreeGrid_setIconsField;
mini_TreeGrid.getCheckBoxType = mini_TreeGrid_getCheckBoxType;
mini_TreeGrid.setCheckBoxType = mini_TreeGrid_setCheckBoxType;
mini_TreeGrid.getShowRadioButton = mini_TreeGrid_getShowRadioButton;
mini_TreeGrid.setShowRadioButton = mini_TreeGrid_setShowRadioButton;
mini_TreeGrid.getShowCheckBox = mini_TreeGrid_getShowCheckBox;
mini_TreeGrid.setShowCheckBox = mini_TreeGrid_setShowCheckBox;
mini_TreeGrid.getShowTreeIcon = mini_TreeGrid_getShowTreeIcon;
mini_TreeGrid.setShowTreeIcon = mini_TreeGrid_setShowTreeIcon;
mini_TreeGrid.getTreeColumn = mini_TreeGrid_getTreeColumn;
mini_TreeGrid.setTreeColumn = mini_TreeGrid_setTreeColumn;
mini_TreeGrid.getCheckOnTextClick = mini_TreeGrid_getCheckOnTextClick;
mini_TreeGrid.setCheckOnTextClick = mini_TreeGrid_setCheckOnTextClick;
mini_TreeGrid._getNodesTr = mini_TreeGrid__getNodesTr;
mini_TreeGrid.olo1O = mini_TreeGrid_olo1O;
mini_TreeGrid._getNodeEl = mini_TreeGrid__getNodeEl;
mini_TreeGrid.ooooo = mini_TreeGrid_ooooo;
mini_TreeGrid.l11OosHTML = mini_TreeGrid_l11OosHTML;
mini_TreeGrid.l0l0olHTML = mini_TreeGrid_l0l0olHTML;
mini_TreeGrid.oO0OOHTML = mini_TreeGrid_oO0OOHTML;
mini_TreeGrid._renderCheckState = mini_TreeGrid__renderCheckState;
mini_TreeGrid.ll0l = mini_TreeGrid_ll0l;
mini_TreeGrid._createTreeColumn = mini_TreeGrid__createTreeColumn;
mini_TreeGrid.ollo = mini_TreeGrid_ollo;
mini_TreeGrid.isInLastNode = mini_TreeGrid_isInLastNode;
mini_TreeGrid._isInViewLastNode = mini_TreeGrid__isInViewLastNode;
mini_TreeGrid._isViewLastNode = mini_TreeGrid__isViewLastNode;
mini_TreeGrid._isViewFirstNode = mini_TreeGrid__isViewFirstNode;
mini_TreeGrid._OnDrawCell = mini_TreeGrid__OnDrawCell;
mini_TreeGrid._createDrawCellEvent = mini_TreeGrid__createDrawCellEvent;
mini_TreeGrid.loadList = mini_TreeGrid_loadList;
mini_TreeGrid.setData = mini_TreeGrid_setData;
mini_TreeGrid.doUpdate = mini_TreeGrid_doUpdate;
mini_TreeGrid.removeNodeCls = mini_TreeGrid_removeNodeCls;
mini_TreeGrid.addNodeCls = mini_TreeGrid_addNodeCls;
mini_TreeGrid._doUpdateTreeNodeEl = mini_TreeGrid__doUpdateTreeNodeEl;
mini_TreeGrid.OoO1 = mini_TreeGrid_OoO1;
mini_TreeGrid._doMoveNodeEl = mini_TreeGrid__doMoveNodeEl;
mini_TreeGrid._doRemoveNodeEl = mini_TreeGrid__doRemoveNodeEl;
mini_TreeGrid._doAddNodeEl = mini_TreeGrid__doAddNodeEl;
mini_TreeGrid.__OnSourceMoveNode = mini_TreeGrid___OnSourceMoveNode;
mini_TreeGrid.__OnSourceRemoveNode = mini_TreeGrid___OnSourceRemoveNode;
mini_TreeGrid.__OnSourceAddNode = mini_TreeGrid___OnSourceAddNode;
mini_TreeGrid._virtualUpdate = mini_TreeGrid__virtualUpdate;
mini_TreeGrid.__OnLoadNode = mini_TreeGrid___OnLoadNode;
mini_TreeGrid.__OnBeforeLoadNode = mini_TreeGrid___OnBeforeLoadNode;
mini_TreeGrid.lllO = mini_TreeGrid_lllO;
mini_TreeGrid._createSource = mini_TreeGrid__createSource;
mini_TreeGrid.isGrouping = mini_TreeGrid_isGrouping;
mini_TreeGrid.getText = mini_TreeGrid_getText;
mini_TreeGrid.getValue = mini_TreeGrid_getValue;
mini_TreeGrid.setValue = mini_TreeGrid_setValue;
mini_TreeGrid._initEvents = mini_TreeGrid__initEvents;
mini_TreeGrid.l11o10Text = mini_TreeGrid_l11o10Text;
mini_TreeGrid.indexOf = mini_TreeGrid_indexOf;
mini_TreeGrid.isEditingNode = mini_TreeGrid_isEditingNode;
mini.regClass(mini.TreeGrid, "TreeGrid");
mini.Tree = function() {
    mini.Tree.superclass.constructor.apply(this, arguments);
    var $ = [{
        name: "node",
        header: "",
        field: this.getTextField(),
        width: "auto",
        allowDrag: true,
        editor: {
            type: "textbox"
        }
    }];
    this._columnModel.setColumns($);
    this._column = this._columnModel.getColumn("node");
    mini.removeClass(this.el, "mini-treegrid");
    mini.addClass(this.el, "mini-tree-nowrap");
    this.setBorderStyle("border:0")
};
mini.extend(mini.Tree, mini.TreeGrid, {
    _userEmptyTd: (mini.isChrome || mini.isIE6 || mini.isIE7) ? false : true,
    uiCls: "mini-tree",
    hoverMode: "title",
    l11010: "mini-tree-node-hover",
    O10oo: "mini-tree-selectedNode",
    _treeColumn: "node",
    defaultRowHeight: 22,
    showHeader: false,
    showTopbar: false,
    showFooter: false,
    showColumns: false,
    showHGridLines: false,
    showVGridLines: false,
    showTreeLines: true,
    setTreeColumn: null,
    setColumns: null,
    getColumns: null,
    frozen: null,
    unFrozen: null,
    showModified: false
});
mini_Tree = mini.Tree.prototype;
mini_Tree.scrollIntoView = mini_Tree_scrollIntoView;
mini_Tree.removeRowCls = mini_Tree_removeRowCls;
mini_Tree.addRowCls = mini_Tree_addRowCls;
mini_Tree.oollOO = mini_Tree_oollOO;
mini_Tree.oOlo11 = mini_Tree_oOlo11;
mini_Tree.cancelEdit = mini_Tree_cancelEdit;
mini_Tree.beginEdit = mini_Tree_beginEdit;
mini_Tree._OnCellMouseDown = mini_Tree__OnCellMouseDown;
mini_Tree._getRowHeight = mini_Tree__getRowHeight;
mini_Tree.l110O0ByEvent = mini_Tree_l110O0ByEvent;
mini_Tree.setTextField = mini_Tree_setTextField;
mini.regClass(mini.Tree, "Tree");
mini._Tree_Expander = function($) {
    this.owner = $;
    mini.on($.el, "click", this.__OnClick, this);
    mini.on($.el, "dblclick", this.__OnDblClick, this)
};
mini._Tree_Expander.prototype = {
    _canToggle: function() {
        return !this.owner._dataSource._isNodeLoading()
    },
    __OnClick: function(B) {
        var _ = this.owner,
            $ = _.l110O0ByEvent(B, false);
        if (!$ || $.enabled === false) return;
        if (oOlO(B.target, "mini-tree-checkbox")) return;
        var A = _.isLeaf($);
        if (oOlO(B.target, _.oO0o)) {
            if (this._canToggle() == false) return;
            _._tryToggleNode($)
        } else if (_.expandOnNodeClick && !A && !_.O1lll0) {
            if (this._canToggle() == false) return;
            _._tryToggleNode($)
        }
    },
    __OnDblClick: function(B) {
        var _ = this.owner,
            $ = _.l110O0ByEvent(B, false);
        if (!$ || $.enabled === false) return;
        if (_.isEditingNode($)) return;
        var A = _.isLeaf($);
        if (_.O1lll0) return;
        if (oOlO(B.target, _.oO0o)) return;
        if (_.expandOnNodeClick) return;
        if (_.expandOnDblClick && !A) {
            if (this._canToggle() == false) return;
            B.preventDefault();
            _._tryToggleNode($)
        }
    }
};
mini._Tree_AsyncLoader = function($) {
    this.owner = $;
    $.on("expand", this.__OnBeforeNodeExpand, this)
};
mini._Tree_AsyncLoader.prototype = {
    __OnBeforeNodeExpand: function(C) {
        var _ = this.owner,
            $ = C.node,
            B = _.isLeaf($),
            A = $[_.getNodesField()];
        if (!B && (!A || A.length == 0))
            if (_.loadOnExpand && $.asyncLoad !== false) {
                C.cancel = true;
                _.loadNode($)
            }
    }
};

mini.locale = "zh_CN";


/* Date
-----------------------------------------------------------------------------*/

mini.dateInfo = {
    monthsLong: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
    monthsShort: ["1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月"],
    daysLong: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"],
    daysShort: ["日", "一", "二", "三", "四", "五", "六"],
    quarterLong: ['一季度', '二季度', '三季度', '四季度'],
    quarterShort: ['Q1', 'Q2', 'Q2', 'Q4'],
    halfYearLong: ['上半年', '下半年'],
    patterns: {
        "d": "yyyy-M-d",
        "D": "yyyy年M月d日",
        "f": "yyyy年M月d日 H:mm",
        "F": "yyyy年M月d日 H:mm:ss",
        "g": "yyyy-M-d H:mm",
        "G": "yyyy-M-d H:mm:ss",
        "m": "MMMd日",
        "o": "yyyy-MM-ddTHH:mm:ss.fff",
        "s": "yyyy-MM-ddTHH:mm:ss",
        "t": "H:mm",
        "T": "H:mm:ss",
        "U": "yyyy年M月d日 HH:mm:ss",
        "y": "yyyy年MM月"
    },
    tt: {
        "AM": "上午",
        "PM": "下午"
    },
    ten: {
        "Early": "上旬",
        "Mid": "中旬",
        "Late": "下旬"
    },
    today: '今天',
    clockType: 24
};

/* Number
-----------------------------------------------------------------------------*/
mini.cultures["zh-CN"] = {
    name: "zh-CN",
    numberFormat: {
        number: {
            pattern: ["n", "-n"],
            decimals: 2,
            decimalsSeparator: ".",
            groupSeparator: ",",
            groupSize: [3]
        },
        percent: {
            pattern: ["n%", "-n%"],
            decimals: 2,
            decimalsSeparator: ".",
            groupSeparator: ",",
            groupSize: [3],
            symbol: "%"
        },
        currency: {
            pattern: ["$n", "$-n"],
            decimals: 2,
            decimalsSeparator: ".",
            groupSeparator: ",",
            groupSize: [3],
            symbol: "¥"
        }
    }
}

mini.culture("zh-CN");

/* MessageBox
-----------------------------------------------------------------------------*/
if(mini.MessageBox){
    mini.copyTo(mini.MessageBox, {
        alertTitle: "提醒",
        confirmTitle: "确认",
        prompTitle: "输入",
        prompMessage: "请输入内容：",
        buttonText: {
            ok: "确定", //"OK",
            cancel: "取消", //"Cancel",
            yes: "是", //"Yes",
            no: "否"//"No"
        }
    });
};

/* Calendar
-----------------------------------------------------------------------------*/
if (mini.Calendar) {
    mini.copyTo(mini.Calendar.prototype, {
        firstDayOfWeek: 0,
        yesterdayText: "昨天",
        todayText: "今天",
        clearText: "清除",
        okText: "确定",
        cancelText: "取消",
        daysShort: ["日", "一", "二", "三", "四", "五", "六"],
        format: "yyyy年MM月",

        timeFormat: 'H:mm'
    });
}


/* required | loadingMsg
-----------------------------------------------------------------------------*/
for (var id in mini) {
    var clazz = mini[id];
    if (clazz && clazz.prototype && clazz.prototype.isControl) {
        clazz.prototype.requiredErrorText = "不能为空";
        clazz.prototype.loadingMsg = "加载中...";
    }

}
/* VTypes
-----------------------------------------------------------------------------*/
if (mini.VTypes) {
    mini.copyTo(mini.VTypes, {
        minDateErrorText: '不能小于日期 {0}',
        maxDateErrorText: '不能大于日期 {0}',

        uniqueErrorText: "字段不能重复",
        requiredErrorText: "不能为空",
        emailErrorText: "请输入邮件格式",
        urlErrorText: "请输入URL格式",
        floatErrorText: "请输入数字",
        intErrorText: "请输入整数",
        dateErrorText: "请输入日期格式 {0}",
        maxLengthErrorText: "不能超过 {0} 个字符",
        minLengthErrorText: "不能少于 {0} 个字符",
        maxErrorText: "数字不能大于 {0} ",
        minErrorText: "数字不能小于 {0} ",
        rangeLengthErrorText: "字符长度必须在 {0} 到 {1} 之间",
        rangeCharErrorText: "字符数必须在 {0} 到 {1} 之间",
        rangeErrorText: "数字必须在 {0} 到 {1} 之间"
    });
}

/* Pager
-----------------------------------------------------------------------------*/
if (mini.Pager) {
    mini.copyTo(mini.Pager.prototype, {
        firstText: "首页",
        prevText: "上一页",
        nextText: "下一页",
        lastText: "尾页",
        pageInfoText: "每页 {0} 条, 共 {1} 条"
    });
}

/* DataGrid
-----------------------------------------------------------------------------*/
if (mini.DataGrid) {
    mini.copyTo(mini.DataGrid.prototype, {
        emptyText: "没有返回的数据"
    });
}

if (mini.FileUpload) {
    mini.FileUpload.prototype.buttonText = "浏览..."
}
if (mini.HtmlFile) {
    mini.HtmlFile.prototype.buttonText = "浏览..."
}

/* Gantt
-----------------------------------------------------------------------------*/
if (window.mini.Gantt) {
    mini.GanttView.ShortWeeks = [
        '日', '一', '二', '三', '四', '五', '六'
    ];
    mini.GanttView.LongWeeks = [
        '星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'
    ];

    mini.Gantt.PredecessorLinkType = [
        { ID: 0, Name: '完成-完成(FF)', Short: 'FF' },
        { ID: 1, Name: '完成-开始(FS)', Short: 'FS' },
        { ID: 2, Name: '开始-完成(SF)', Short: 'SF' },
        { ID: 3, Name: '开始-开始(SS)', Short: 'SS' }
    ];

    mini.Gantt.ConstraintType = [
        { ID: 0, Name: '越早越好' },
        { ID: 1, Name: '越晚越好' },
        { ID: 2, Name: '必须开始于' },
        { ID: 3, Name: '必须完成于' },
        { ID: 4, Name: '不得早于...开始' },
        { ID: 5, Name: '不得晚于...开始' },
        { ID: 6, Name: '不得早于...完成' },
        { ID: 7, Name: '不得晚于...完成' }
    ];

    mini.copyTo(mini.Gantt, {
        ID_Text: "标识号",
        Name_Text: "任务名称",
        PercentComplete_Text: "进度",
        Duration_Text: "工期",
        Start_Text: "开始日期",
        Finish_Text: "完成日期",
        Critical_Text: "关键任务",

        PredecessorLink_Text: "前置任务",
        Work_Text: "工时",
        Priority_Text: "重要级别",
        Weight_Text: "权重",
        OutlineNumber_Text: "大纲字段",
        OutlineLevel_Text: "任务层级",
        ActualStart_Text: "实际开始日期",
        ActualFinish_Text: "实际完成日期",
        WBS_Text: "WBS",
        ConstraintType_Text: "限制类型",
        ConstraintDate_Text: "限制日期",
        Department_Text: "部门",
        Principal_Text: "负责人",
        Assignments_Text: "资源名称",

        Summary_Text: "摘要任务",
        Task_Text: "任务",
        Baseline_Text: "比较基准",
        LinkType_Text: "链接类型",
        LinkLag_Text: "延隔时间",
        From_Text: "从",
        To_Text: "到",

        Goto_Text: "转到任务",
        UpGrade_Text: "升级",
        DownGrade_Text: "降级",
        Add_Text: "新增",
        Edit_Text: "编辑",
        Remove_Text: "删除",
        Move_Text: "移动",
        ZoomIn_Text: "放大",
        ZoomOut_Text: "缩小",
        Deselect_Text: "取消选择",
        Split_Text: "拆分任务"
    });

}
